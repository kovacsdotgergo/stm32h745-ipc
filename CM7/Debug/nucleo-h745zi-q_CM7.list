
nucleo-h745zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800d368  0800d368  0001d368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d598  0800d598  000380e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d598  0800d598  0001d598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5a0  0800d5a0  000380e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5a0  0800d5a0  0001d5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5a4  0800d5a4  0001d5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  0800d5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cb74  2400007c  0800d624  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400cbf0  0800d624  0002cbf0  2**0
                  ALLOC
 11 .shared       000080e4  30010000  30010000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  000380e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000283aa  00000000  00000000  00038112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d5c  00000000  00000000  000604bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  00065218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a10  00000000  00000000  00066e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003e689  00000000  00000000  00068820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000261a7  00000000  00000000  000a6ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001914a5  00000000  00000000  000cd050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0025e4f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007cf0  00000000  00000000  0025e548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d350 	.word	0x0800d350

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800d350 	.word	0x0800d350

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <generateInterruptIPC_messageBuffer>:
/* Defines the memory that will actually hold the streams within the stream buffer.*/
volatile uint8_t ucStorageBuffer_ctrl[2][ mbaCONTROL_MESSAGE_BUFFER_SIZE ] __attribute__((section(".shared"))); 
volatile uint8_t ucStorageBuffer[2][ mbaTASK_MESSAGE_BUFFER_SIZE ] __attribute__((section(".shared"))); 


void generateInterruptIPC_messageBuffer(void* updatedMessageBuffer){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  MessageBufferHandle_t xUpdatedBuffer = ( MessageBufferHandle_t ) updatedMessageBuffer;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	60fb      	str	r3, [r7, #12]
  
  if( xUpdatedBuffer != xControlMessageBuffer[CONTROL_SEND_IDX] )
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <generateInterruptIPC_messageBuffer+0x34>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d00a      	beq.n	80006c0 <generateInterruptIPC_messageBuffer+0x2c>
  {
    /* Use xControlMessageBuffer to pass the handle of the message buffer
    written to by core 1 to the interrupt handler about to be generated in
    core 2. */
    xMessageBufferSend( xControlMessageBuffer[CONTROL_SEND_IDX], &xUpdatedBuffer,
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <generateInterruptIPC_messageBuffer+0x34>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	f107 010c 	add.w	r1, r7, #12
 80006b2:	2300      	movs	r3, #0
 80006b4:	2204      	movs	r2, #4
 80006b6:	f009 fb09 	bl	8009ccc <xStreamBufferSend>
                        sizeof( xUpdatedBuffer ), mbaDONT_BLOCK );
    
    /* This is where the interrupt would be generated. */
    generateIT_IPC(MB_SEND_EXTI_LINE);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 f84e 	bl	800075c <generateIT_IPC>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	30010000 	.word	0x30010000

080006cc <interruptHandlerIPC_messageBuffer>:

void interruptHandlerIPC_messageBuffer( void ) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
    MessageBufferHandle_t xUpdatedMessageBuffer;
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
    
    /* xControlMessageBuffer contains the handle of the message buffer that
    contains data. */
    if( xMessageBufferReceiveFromISR(
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <interruptHandlerIPC_messageBuffer+0x48>)
 80006d8:	6858      	ldr	r0, [r3, #4]
 80006da:	463b      	mov	r3, r7
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	2204      	movs	r2, #4
 80006e0:	f009 fc6c 	bl	8009fbc <xStreamBufferReceiveFromISR>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d105      	bne.n	80006f6 <interruptHandlerIPC_messageBuffer+0x2a>
                xControlMessageBuffer[CONTROL_RECV_IDX], &xUpdatedMessageBuffer,
                sizeof( xUpdatedMessageBuffer ), &xHigherPriorityTaskWoken)
            == sizeof( xUpdatedMessageBuffer ) ) {
        /* API function notifying any task waiting for the messagebuffer*/
        xMessageBufferSendCompletedFromISR( xUpdatedMessageBuffer, &xHigherPriorityTaskWoken );
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	463a      	mov	r2, r7
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f009 fd04 	bl	800a0fe <xStreamBufferSendCompletedFromISR>
    }
    /* Scheduling with normal FreeRTOS semantics */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d007      	beq.n	800070c <interruptHandlerIPC_messageBuffer+0x40>
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <interruptHandlerIPC_messageBuffer+0x4c>)
 80006fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	f3bf 8f4f 	dsb	sy
 8000708:	f3bf 8f6f 	isb	sy
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	30010000 	.word	0x30010000
 8000718:	e000ed04 	.word	0xe000ed04

0800071c <ctrl_setDataSize>:
#include "stm32h7xx_hal.h"

static volatile uint32_t shDataSize __attribute__((section(".shared"))); 
static volatile measDirection shDirection __attribute__((section(".shared")));

void ctrl_setDataSize(uint32_t dataSize) {
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    shDataSize = dataSize;
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <ctrl_setDataSize+0x1c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	300180d0 	.word	0x300180d0

0800073c <ctrl_setDirection>:

uint32_t ctrl_getDataSize(void) {
    return shDataSize;
}

void ctrl_setDirection(measDirection direction) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
    shDirection = direction;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <ctrl_setDirection+0x1c>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	7013      	strb	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	300180d4 	.word	0x300180d4

0800075c <generateIT_IPC>:

measDirection ctrl_getDirection(void) {
    return shDirection;
}

void generateIT_IPC(uint32_t EXTI_Line) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
#ifdef CORE_CM4
    HAL_EXTI_D2_EventInputConfig(EXTI_Line, EXTI_MODE_IT, DISABLE);
    HAL_EXTI_D1_EventInputConfig(EXTI_Line, EXTI_MODE_IT, ENABLE);
    HAL_EXTI_GenerateSWInterrupt(EXTI_Line);
#elif defined CORE_CM7
    HAL_EXTI_D1_EventInputConfig(EXTI_Line, EXTI_MODE_IT, DISABLE);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f001 f980 	bl	8001a70 <HAL_EXTI_D1_EventInputConfig>
    HAL_EXTI_D2_EventInputConfig(EXTI_Line, EXTI_MODE_IT, ENABLE);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f001 f9f0 	bl	8001b5c <HAL_EXTI_D2_EventInputConfig>
    HAL_EXTI_GenerateSWInterrupt(EXTI_Line);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f001 f93f 	bl	8001a00 <HAL_EXTI_GenerateSWInterrupt>
#else
    #error Neither core is defined
#endif // CORE
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000790:	4b3d      	ldr	r3, [pc, #244]	; (8000888 <SystemInit+0xfc>)
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	4a3c      	ldr	r2, [pc, #240]	; (8000888 <SystemInit+0xfc>)
 8000798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800079c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80007a0:	4b39      	ldr	r3, [pc, #228]	; (8000888 <SystemInit+0xfc>)
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	4a38      	ldr	r2, [pc, #224]	; (8000888 <SystemInit+0xfc>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <SystemInit+0x100>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	2b06      	cmp	r3, #6
 80007b6:	d807      	bhi.n	80007c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <SystemInit+0x100>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f023 030f 	bic.w	r3, r3, #15
 80007c0:	4a32      	ldr	r2, [pc, #200]	; (800088c <SystemInit+0x100>)
 80007c2:	f043 0307 	orr.w	r3, r3, #7
 80007c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007c8:	4b31      	ldr	r3, [pc, #196]	; (8000890 <SystemInit+0x104>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a30      	ldr	r2, [pc, #192]	; (8000890 <SystemInit+0x104>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007d4:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <SystemInit+0x104>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <SystemInit+0x104>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	492c      	ldr	r1, [pc, #176]	; (8000890 <SystemInit+0x104>)
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <SystemInit+0x108>)
 80007e2:	4013      	ands	r3, r2
 80007e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <SystemInit+0x100>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d007      	beq.n	8000802 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <SystemInit+0x100>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f023 030f 	bic.w	r3, r3, #15
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <SystemInit+0x100>)
 80007fc:	f043 0307 	orr.w	r3, r3, #7
 8000800:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <SystemInit+0x104>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <SystemInit+0x104>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SystemInit+0x104>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <SystemInit+0x104>)
 8000816:	4a20      	ldr	r2, [pc, #128]	; (8000898 <SystemInit+0x10c>)
 8000818:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <SystemInit+0x104>)
 800081c:	4a1f      	ldr	r2, [pc, #124]	; (800089c <SystemInit+0x110>)
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <SystemInit+0x104>)
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <SystemInit+0x114>)
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <SystemInit+0x104>)
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <SystemInit+0x104>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <SystemInit+0x114>)
 8000830:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <SystemInit+0x104>)
 8000834:	2200      	movs	r2, #0
 8000836:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <SystemInit+0x104>)
 800083a:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <SystemInit+0x114>)
 800083c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <SystemInit+0x104>)
 8000840:	2200      	movs	r2, #0
 8000842:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <SystemInit+0x104>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a11      	ldr	r2, [pc, #68]	; (8000890 <SystemInit+0x104>)
 800084a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800084e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <SystemInit+0x104>)
 8000852:	2200      	movs	r2, #0
 8000854:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <SystemInit+0x118>)
 8000858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <SystemInit+0x118>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <SystemInit+0x11c>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <SystemInit+0x120>)
 8000868:	4013      	ands	r3, r2
 800086a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800086e:	d202      	bcs.n	8000876 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <SystemInit+0x124>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <SystemInit+0x128>)
 8000878:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800087c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00
 800088c:	52002000 	.word	0x52002000
 8000890:	58024400 	.word	0x58024400
 8000894:	eaf6ed7f 	.word	0xeaf6ed7f
 8000898:	02020200 	.word	0x02020200
 800089c:	01ff0000 	.word	0x01ff0000
 80008a0:	01010280 	.word	0x01010280
 80008a4:	580000c0 	.word	0x580000c0
 80008a8:	5c001000 	.word	0x5c001000
 80008ac:	ffff0000 	.word	0xffff0000
 80008b0:	51008108 	.word	0x51008108
 80008b4:	52004000 	.word	0x52004000

080008b8 <time_startTime>:
/* Shared variables for time measurement */
static volatile uint32_t shStartTime __attribute__((section(".shared"))); 
static volatile uint32_t shEndTime __attribute__((section(".shared")));
static volatile uint32_t shOffset __attribute__((section(".shared")));

void time_startTime(void) {
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
    shStartTime = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <time_startTime+0x1c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <time_startTime+0x20>)
 80008c6:	6013      	str	r3, [r2, #0]
    __COMPILER_BARRIER();
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	24000008 	.word	0x24000008
 80008d8:	300180d8 	.word	0x300180d8

080008dc <time_endTime>:

void time_endTime(void) {
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
    __COMPILER_BARRIER();
    shEndTime = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <time_endTime+0x1c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <time_endTime+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	24000008 	.word	0x24000008
 80008fc:	300180dc 	.word	0x300180dc

08000900 <time_getSharedOffset>:

void time_setSharedOffset(void) {
    shOffset = time_measureOffset();
}

uint32_t time_getSharedOffset() {
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
    return shOffset;
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <time_getSharedOffset+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	300180e0 	.word	0x300180e0

08000918 <time_measureOffset>:

uint32_t time_measureOffset(void) {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
    volatile uint32_t st = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <time_measureOffset+0x2c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	607b      	str	r3, [r7, #4]
    __COMPILER_BARRIER();
    volatile uint32_t end = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <time_measureOffset+0x2c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000930:	603b      	str	r3, [r7, #0]
    return end - st;
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	1ad3      	subs	r3, r2, r3
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	24000008 	.word	0x24000008

08000948 <time_getRuntime>:

uint32_t time_getRuntime(uint32_t localOffset) {
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    //todo: measure runtime offset, and take it as an intut param
    return shEndTime - shStartTime - (localOffset + shOffset)/2; 
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <time_getRuntime+0x2c>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <time_getRuntime+0x30>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1ad2      	subs	r2, r2, r3
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <time_getRuntime+0x34>)
 800095c:	6819      	ldr	r1, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	440b      	add	r3, r1
 8000962:	085b      	lsrs	r3, r3, #1
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	300180dc 	.word	0x300180dc
 8000978:	300180d8 	.word	0x300180d8
 800097c:	300180e0 	.word	0x300180e0

08000980 <ErrorHandler>:
#ifndef ERROR_HANDLER_H
#define ERROR_HANDLER_H

static inline void ErrorHandler() {
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
    while(0) {}
 8000984:	bf00      	nop
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <HAL_GPIO_EXTI_Callback>:
#include <app.h>

TaskHandle_t core1TaskHandle;
SemaphoreHandle_t endMeasSemaphore = NULL;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	2b04      	cmp	r3, #4
 800099e:	d002      	beq.n	80009a6 <HAL_GPIO_EXTI_Callback+0x16>
 80009a0:	2b10      	cmp	r3, #16
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_EXTI_Callback+0x1c>
 80009a4:	e008      	b.n	80009b8 <HAL_GPIO_EXTI_Callback+0x28>
  {
  case END_MEAS_GPIO_PIN: // todo: make a define and hide it somehow
    interruptHandlerIPC_endMeas();
 80009a6:	f000 fca3 	bl	80012f0 <interruptHandlerIPC_endMeas>
    break;
 80009aa:	e008      	b.n	80009be <HAL_GPIO_EXTI_Callback+0x2e>
  case MB2TO1_GPIO_PIN:
    interruptHandlerIPC_messageBuffer();
 80009ac:	f7ff fe8e 	bl	80006cc <interruptHandlerIPC_messageBuffer>
    HAL_EXTI_D1_ClearFlag(MB2TO1_GPIO_PIN);
 80009b0:	2010      	movs	r0, #16
 80009b2:	f001 f845 	bl	8001a40 <HAL_EXTI_D1_ClearFlag>
    break;
 80009b6:	e002      	b.n	80009be <HAL_GPIO_EXTI_Callback+0x2e>
  default:
    ErrorHandler();
 80009b8:	f7ff ffe2 	bl	8000980 <ErrorHandler>
    break;
 80009bc:	bf00      	nop
  }
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <core1MeasurementTask>:

void core1MeasurementTask( void *pvParameters ){
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b0a1      	sub	sp, #132	; 0x84
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	6078      	str	r0, [r7, #4]
  ( void ) pvParameters;

  const TickType_t uartDelay = pdMS_TO_TICKS( 100 );
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint8_t uartInputBuffer, uartOutputBuffer[32];
  uint32_t numMeas, dataSize;
  uart_measDirection direction;
  uartStateMachine stateMachine = {
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2223      	movs	r2, #35	; 0x23
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f00b fb21 	bl	800c024 <memset>
    .state = IDLE,
    .stringNumMeas = {0},
    .stringMeasData = {0},
    .stringIndex = 0,
  };
  uartStates lastState = IDLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  bool startMeas;

  endMeasSemaphore = xSemaphoreCreateBinary();
 80009e8:	2203      	movs	r2, #3
 80009ea:	2100      	movs	r1, #0
 80009ec:	2001      	movs	r0, #1
 80009ee:	f008 fac3 	bl	8008f78 <xQueueGenericCreate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a50      	ldr	r2, [pc, #320]	; (8000b38 <core1MeasurementTask+0x170>)
 80009f6:	6013      	str	r3, [r2, #0]
  for( ;; )
  {
    /* Waiting for a start signal */
    HAL_StatusTypeDef receiveSuccess;
    do {
      receiveSuccess = HAL_UART_Receive(&huart3, &uartInputBuffer,
 80009f8:	f107 015b 	add.w	r1, r7, #91	; 0x5b
 80009fc:	2300      	movs	r3, #0
 80009fe:	2201      	movs	r2, #1
 8000a00:	484e      	ldr	r0, [pc, #312]	; (8000b3c <core1MeasurementTask+0x174>)
 8000a02:	f005 fe9f 	bl	8006744 <HAL_UART_Receive>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
          sizeof(uartInputBuffer), 0);
      
      if(receiveSuccess == HAL_OK){
 8000a0c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d125      	bne.n	8000a60 <core1MeasurementTask+0x98>
        /* Step if new char */
        startMeas = uart_stateMachineStep(uartInputBuffer, &stateMachine,
 8000a14:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8000a18:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000a1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000a20:	f107 010c 	add.w	r1, r7, #12
 8000a24:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	4623      	mov	r3, r4
 8000a2c:	f000 fe46 	bl	80016bc <uart_stateMachineStep>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            (uint32_t*)&numMeas, (uint32_t*)&dataSize, &direction); /* Cast removing the volatile, the variable doesn't change during execution*/
        /* Echoing */
        HAL_UART_Transmit(&huart3, &uartInputBuffer, sizeof(uartInputBuffer), 0);
 8000a36:	f107 015b 	add.w	r1, r7, #91	; 0x5b
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	483f      	ldr	r0, [pc, #252]	; (8000b3c <core1MeasurementTask+0x174>)
 8000a40:	f005 fdf2 	bl	8006628 <HAL_UART_Transmit>
        if(lastState != stateMachine.state){
 8000a44:	7b3b      	ldrb	r3, [r7, #12]
 8000a46:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d005      	beq.n	8000a5a <core1MeasurementTask+0x92>
          HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 100);
 8000a4e:	2364      	movs	r3, #100	; 0x64
 8000a50:	2202      	movs	r2, #2
 8000a52:	493b      	ldr	r1, [pc, #236]	; (8000b40 <core1MeasurementTask+0x178>)
 8000a54:	4839      	ldr	r0, [pc, #228]	; (8000b3c <core1MeasurementTask+0x174>)
 8000a56:	f005 fde7 	bl	8006628 <HAL_UART_Transmit>
        }
        lastState = stateMachine.state;
 8000a5a:	7b3b      	ldrb	r3, [r7, #12]
 8000a5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      }

      vTaskDelay(uartDelay); // vtaskdelay_until could be used
 8000a60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000a62:	f009 fe87 	bl	800a774 <vTaskDelay>
    } while(receiveSuccess != HAL_OK || !startMeas);
 8000a66:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1c4      	bne.n	80009f8 <core1MeasurementTask+0x30>
 8000a6e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000a72:	f083 0301 	eor.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1bd      	bne.n	80009f8 <core1MeasurementTask+0x30>
    /* Saturating the data size */
    if(dataSize > MAX_DATA_SIZE){
 8000a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7e:	f643 72f8 	movw	r2, #16376	; 0x3ff8
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d902      	bls.n	8000a8c <core1MeasurementTask+0xc4>
      dataSize = MAX_DATA_SIZE;
 8000a86:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
    }
    ctrl_setDataSize(dataSize); /* Sharing the meas parameters */
 8000a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fe44 	bl	800071c <ctrl_setDataSize>
    ctrl_setDirection((direction == SEND) ? M7_SEND : M7_RECIEVE);
 8000a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fe4a 	bl	800073c <ctrl_setDirection>
    for(uint32_t i = 0; i < numMeas; ++i){
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	673b      	str	r3, [r7, #112]	; 0x70
 8000aac:	e03e      	b.n	8000b2c <core1MeasurementTask+0x164>
      /* Signaling to the other core*/
      generateInterruptIPC_startMeas();
 8000aae:	f000 fc3f 	bl	8001330 <generateInterruptIPC_startMeas>
      /* Waiting for message or sending message */
      switch (direction)
 8000ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <core1MeasurementTask+0xf8>
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d005      	beq.n	8000aca <core1MeasurementTask+0x102>
 8000abe:	e007      	b.n	8000ad0 <core1MeasurementTask+0x108>
      {
      case M7_SEND: /* M7 sends the message */
        app_measureCore1Sending(dataSize);
 8000ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f840 	bl	8000b48 <app_measureCore1Sending>
        break;
 8000ac8:	e005      	b.n	8000ad6 <core1MeasurementTask+0x10e>
      case M7_RECIEVE:
        app_measureCore1Recieving();
 8000aca:	f000 f87f 	bl	8000bcc <app_measureCore1Recieving>
        break;
 8000ace:	e002      	b.n	8000ad6 <core1MeasurementTask+0x10e>
      default:
        ErrorHandler();
 8000ad0:	f7ff ff56 	bl	8000980 <ErrorHandler>
        break;
 8000ad4:	bf00      	nop
      }
      /* Printing measurement result */
      uint32_t localOffset = time_measureOffset();
 8000ad6:	f7ff ff1f 	bl	8000918 <time_measureOffset>
 8000ada:	6678      	str	r0, [r7, #100]	; 0x64
      uint32_t m4Offset = time_getSharedOffset();
 8000adc:	f7ff ff10 	bl	8000900 <time_getSharedOffset>
 8000ae0:	6638      	str	r0, [r7, #96]	; 0x60
      uint32_t runTime = time_getRuntime(localOffset);
 8000ae2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000ae4:	f7ff ff30 	bl	8000948 <time_getRuntime>
 8000ae8:	65f8      	str	r0, [r7, #92]	; 0x5c
      memset(uartOutputBuffer, 0, sizeof(uartOutputBuffer));
 8000aea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aee:	2220      	movs	r2, #32
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00b fa96 	bl	800c024 <memset>
      sprintf((char*)uartOutputBuffer, "%lu %lu %lu\r\n", runTime, localOffset, m4Offset);
 8000af8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b04:	490f      	ldr	r1, [pc, #60]	; (8000b44 <core1MeasurementTask+0x17c>)
 8000b06:	f00b fba3 	bl	800c250 <siprintf>
      HAL_UART_Transmit(&huart3, uartOutputBuffer, strlen((char*)uartOutputBuffer), HAL_MAX_DELAY);
 8000b0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fbe6 	bl	80002e0 <strlen>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	4806      	ldr	r0, [pc, #24]	; (8000b3c <core1MeasurementTask+0x174>)
 8000b22:	f005 fd81 	bl	8006628 <HAL_UART_Transmit>
    for(uint32_t i = 0; i < numMeas; ++i){
 8000b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b28:	3301      	adds	r3, #1
 8000b2a:	673b      	str	r3, [r7, #112]	; 0x70
 8000b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d3bc      	bcc.n	8000aae <core1MeasurementTask+0xe6>
  {
 8000b34:	e760      	b.n	80009f8 <core1MeasurementTask+0x30>
 8000b36:	bf00      	nop
 8000b38:	2400009c 	.word	0x2400009c
 8000b3c:	240080e4 	.word	0x240080e4
 8000b40:	0800d368 	.word	0x0800d368
 8000b44:	0800d36c 	.word	0x0800d36c

08000b48 <app_measureCore1Sending>:
    }
  }
}

void app_measureCore1Sending(uint32_t dataSize){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Assembling the message*/
  static char sendBuffer[MAX_DATA_SIZE];
  static uint8_t nextValue = 0;
  for(uint32_t j = 0; j < dataSize; ++j){
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e009      	b.n	8000b6a <app_measureCore1Sending+0x22>
    sendBuffer[j] = nextValue;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <app_measureCore1Sending+0x70>)
 8000b58:	7819      	ldrb	r1, [r3, #0]
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <app_measureCore1Sending+0x74>)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	460a      	mov	r2, r1
 8000b62:	701a      	strb	r2, [r3, #0]
  for(uint32_t j = 0; j < dataSize; ++j){
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3301      	adds	r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d3f1      	bcc.n	8000b56 <app_measureCore1Sending+0xe>
  }
  sprintf((char*)sendBuffer, "%lu", dataSize);
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4912      	ldr	r1, [pc, #72]	; (8000bc0 <app_measureCore1Sending+0x78>)
 8000b76:	4811      	ldr	r0, [pc, #68]	; (8000bbc <app_measureCore1Sending+0x74>)
 8000b78:	f00b fb6a 	bl	800c250 <siprintf>
  vTaskDelay(1/portTICK_PERIOD_MS);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f009 fdf9 	bl	800a774 <vTaskDelay>
  /* Start of measurement and sending the data */
  time_startTime();
 8000b82:	f7ff fe99 	bl	80008b8 <time_startTime>
  xMessageBufferSend( xDataMessageBuffers[MB1TO2_IDX], 
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <app_measureCore1Sending+0x7c>)
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	490b      	ldr	r1, [pc, #44]	; (8000bbc <app_measureCore1Sending+0x74>)
 8000b90:	f009 f89c 	bl	8009ccc <xStreamBufferSend>
                      ( void * ) sendBuffer,
                      dataSize,
                      mbaDONT_BLOCK );
  
  ++nextValue;
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <app_measureCore1Sending+0x70>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <app_measureCore1Sending+0x70>)
 8000b9e:	701a      	strb	r2, [r3, #0]
  /* Waiting for the signal from the other core */
  xSemaphoreTake(endMeasSemaphore, portMAX_DELAY);
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <app_measureCore1Sending+0x80>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fd49 	bl	8009640 <xQueueSemaphoreTake>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	240000a0 	.word	0x240000a0
 8000bbc:	240000a4 	.word	0x240000a4
 8000bc0:	0800d37c 	.word	0x0800d37c
 8000bc4:	30010008 	.word	0x30010008
 8000bc8:	2400009c 	.word	0x2400009c

08000bcc <app_measureCore1Recieving>:

void app_measureCore1Recieving(void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  static uint8_t nextValue = 0;
  uint32_t recievedBytes, sizeFromMessage;
  static uint8_t recieveBuffer[MAX_DATA_SIZE];

  recievedBytes = xMessageBufferReceive(xDataMessageBuffers[MB2TO1_IDX],
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <app_measureCore1Recieving+0x6c>)
 8000bd4:	6858      	ldr	r0, [r3, #4]
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	f643 72f8 	movw	r2, #16376	; 0x3ff8
 8000bde:	4917      	ldr	r1, [pc, #92]	; (8000c3c <app_measureCore1Recieving+0x70>)
 8000be0:	f009 f957 	bl	8009e92 <xStreamBufferReceive>
 8000be4:	6078      	str	r0, [r7, #4]
                                        recieveBuffer,
                                        sizeof(recieveBuffer),
                                        portMAX_DELAY);
  time_endTime();
 8000be6:	f7ff fe79 	bl	80008dc <time_endTime>

  /* Error checking, size and last element */
  sscanf((char*)recieveBuffer, "%lu", &sizeFromMessage);
 8000bea:	463b      	mov	r3, r7
 8000bec:	461a      	mov	r2, r3
 8000bee:	4914      	ldr	r1, [pc, #80]	; (8000c40 <app_measureCore1Recieving+0x74>)
 8000bf0:	4812      	ldr	r0, [pc, #72]	; (8000c3c <app_measureCore1Recieving+0x70>)
 8000bf2:	f00b fb4d 	bl	800c290 <siscanf>
  if(recievedBytes != sizeFromMessage ||
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d10a      	bne.n	8000c14 <app_measureCore1Recieving+0x48>
      (sizeFromMessage > 2 && recieveBuffer[recievedBytes - 1] != nextValue)){
 8000bfe:	683b      	ldr	r3, [r7, #0]
  if(recievedBytes != sizeFromMessage ||
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d909      	bls.n	8000c18 <app_measureCore1Recieving+0x4c>
      (sizeFromMessage > 2 && recieveBuffer[recievedBytes - 1] != nextValue)){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <app_measureCore1Recieving+0x70>)
 8000c0a:	5cd2      	ldrb	r2, [r2, r3]
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <app_measureCore1Recieving+0x78>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d001      	beq.n	8000c18 <app_measureCore1Recieving+0x4c>
    ErrorHandler();
 8000c14:	f7ff feb4 	bl	8000980 <ErrorHandler>
    }

  memset(recieveBuffer, 0x00, recievedBytes);
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <app_measureCore1Recieving+0x70>)
 8000c1e:	f00b fa01 	bl	800c024 <memset>
  ++nextValue;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <app_measureCore1Recieving+0x78>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <app_measureCore1Recieving+0x78>)
 8000c2c:	701a      	strb	r2, [r3, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	30010008 	.word	0x30010008
 8000c3c:	2400409c 	.word	0x2400409c
 8000c40:	0800d37c 	.word	0x0800d37c
 8000c44:	24008094 	.word	0x24008094

08000c48 <app_createTasks>:

void app_createTasks(void){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af02      	add	r7, sp, #8
  // creating the tasks for the M7 core
  const uint8_t mainAMP_TASK_PRIORITY = configMAX_PRIORITIES - 2;
 8000c4e:	2336      	movs	r3, #54	; 0x36
 8000c50:	71fb      	strb	r3, [r7, #7]
  xTaskCreate(core1MeasurementTask, "AMPCore1", configMINIMAL_STACK_SIZE, \
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <app_createTasks+0x44>)
 8000c56:	9201      	str	r2, [sp, #4]
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	490c      	ldr	r1, [pc, #48]	; (8000c90 <app_createTasks+0x48>)
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <app_createTasks+0x4c>)
 8000c62:	f009 fc2b 	bl	800a4bc <xTaskCreate>
      NULL, mainAMP_TASK_PRIORITY, &core1TaskHandle);
  configASSERT( core1TaskHandle );
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <app_createTasks+0x44>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10a      	bne.n	8000c84 <app_createTasks+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c72:	f383 8811 	msr	BASEPRI, r3
 8000c76:	f3bf 8f6f 	isb	sy
 8000c7a:	f3bf 8f4f 	dsb	sy
 8000c7e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000c80:	bf00      	nop
 8000c82:	e7fe      	b.n	8000c82 <app_createTasks+0x3a>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	24000098 	.word	0x24000098
 8000c90:	0800d380 	.word	0x0800d380
 8000c94:	080009c9 	.word	0x080009c9

08000c98 <createIPCMessageBuffers>:
#include "ipc_mb.h"

void createIPCMessageBuffers(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af02      	add	r7, sp, #8
    /* MBs used for m7->m4 communication */
    /* Create control message buffer */
    xControlMessageBuffer[MB1TO2_IDX] = xMessageBufferCreateStatic(
 8000c9e:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <createIPCMessageBuffers+0xe4>)
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <createIPCMessageBuffers+0xe8>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2018      	movs	r0, #24
 8000caa:	f008 ff5b 	bl	8009b64 <xStreamBufferGenericCreateStatic>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a34      	ldr	r2, [pc, #208]	; (8000d84 <createIPCMessageBuffers+0xec>)
 8000cb2:	6013      	str	r3, [r2, #0]
        mbaCONTROL_MESSAGE_BUFFER_SIZE, ucStorageBuffer_ctrl[MB1TO2_IDX], 
        &xStreamBufferStruct[MB1TO2_IDX*2]);  
    /* Create data message buffer */
    xDataMessageBuffers[MB1TO2_IDX] = xMessageBufferCreateStatic(
 8000cb4:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <createIPCMessageBuffers+0xf0>)
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <createIPCMessageBuffers+0xf4>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cc2:	f008 ff4f 	bl	8009b64 <xStreamBufferGenericCreateStatic>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <createIPCMessageBuffers+0xf8>)
 8000cca:	6013      	str	r3, [r2, #0]
        mbaTASK_MESSAGE_BUFFER_SIZE, &ucStorageBuffer[MB1TO2_IDX][0],
        &xStreamBufferStruct[MB1TO2_IDX*2 + 1]);
    configASSERT( xDataMessageBuffers[MB1TO2_IDX] );
 8000ccc:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <createIPCMessageBuffers+0xf8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10a      	bne.n	8000cea <createIPCMessageBuffers+0x52>
	__asm volatile
 8000cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd8:	f383 8811 	msr	BASEPRI, r3
 8000cdc:	f3bf 8f6f 	isb	sy
 8000ce0:	f3bf 8f4f 	dsb	sy
 8000ce4:	60fb      	str	r3, [r7, #12]
}
 8000ce6:	bf00      	nop
 8000ce8:	e7fe      	b.n	8000ce8 <createIPCMessageBuffers+0x50>
    configASSERT( xControlMessageBuffer[MB1TO2_IDX] );
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <createIPCMessageBuffers+0xec>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10a      	bne.n	8000d08 <createIPCMessageBuffers+0x70>
	__asm volatile
 8000cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf6:	f383 8811 	msr	BASEPRI, r3
 8000cfa:	f3bf 8f6f 	isb	sy
 8000cfe:	f3bf 8f4f 	dsb	sy
 8000d02:	60bb      	str	r3, [r7, #8]
}
 8000d04:	bf00      	nop
 8000d06:	e7fe      	b.n	8000d06 <createIPCMessageBuffers+0x6e>
    
    /* MBs used for m4->m7 communication */
    xControlMessageBuffer[MB2TO1_IDX] = xMessageBufferCreateStatic(
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <createIPCMessageBuffers+0xfc>)
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <createIPCMessageBuffers+0x100>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2100      	movs	r1, #0
 8000d12:	2018      	movs	r0, #24
 8000d14:	f008 ff26 	bl	8009b64 <xStreamBufferGenericCreateStatic>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <createIPCMessageBuffers+0xec>)
 8000d1c:	6053      	str	r3, [r2, #4]
        mbaCONTROL_MESSAGE_BUFFER_SIZE, ucStorageBuffer_ctrl[MB2TO1_IDX], 
        &xStreamBufferStruct[MB2TO1_IDX*2]);  
    /* Create data message buffer */
    xDataMessageBuffers[MB2TO1_IDX] = xMessageBufferCreateStatic(
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <createIPCMessageBuffers+0x104>)
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <createIPCMessageBuffers+0x108>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	2100      	movs	r1, #0
 8000d28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d2c:	f008 ff1a 	bl	8009b64 <xStreamBufferGenericCreateStatic>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <createIPCMessageBuffers+0xf8>)
 8000d34:	6053      	str	r3, [r2, #4]
        mbaTASK_MESSAGE_BUFFER_SIZE, &ucStorageBuffer[MB2TO1_IDX][0],
        &xStreamBufferStruct[MB2TO1_IDX*2 + 1]);
    configASSERT( xDataMessageBuffers[MB2TO1_IDX] );
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <createIPCMessageBuffers+0xf8>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10a      	bne.n	8000d54 <createIPCMessageBuffers+0xbc>
	__asm volatile
 8000d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d42:	f383 8811 	msr	BASEPRI, r3
 8000d46:	f3bf 8f6f 	isb	sy
 8000d4a:	f3bf 8f4f 	dsb	sy
 8000d4e:	607b      	str	r3, [r7, #4]
}
 8000d50:	bf00      	nop
 8000d52:	e7fe      	b.n	8000d52 <createIPCMessageBuffers+0xba>
    configASSERT( xControlMessageBuffer[MB2TO1_IDX] );
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <createIPCMessageBuffers+0xec>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10a      	bne.n	8000d72 <createIPCMessageBuffers+0xda>
	__asm volatile
 8000d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d60:	f383 8811 	msr	BASEPRI, r3
 8000d64:	f3bf 8f6f 	isb	sy
 8000d68:	f3bf 8f4f 	dsb	sy
 8000d6c:	603b      	str	r3, [r7, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	e7fe      	b.n	8000d70 <createIPCMessageBuffers+0xd8>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	30010010 	.word	0x30010010
 8000d80:	300100a0 	.word	0x300100a0
 8000d84:	30010000 	.word	0x30010000
 8000d88:	30010034 	.word	0x30010034
 8000d8c:	300100d0 	.word	0x300100d0
 8000d90:	30010008 	.word	0x30010008
 8000d94:	30010058 	.word	0x30010058
 8000d98:	300100b8 	.word	0x300100b8
 8000d9c:	3001007c 	.word	0x3001007c
 8000da0:	300140d0 	.word	0x300140d0

08000da4 <initIPC_MessageBuffers>:

void initIPC_MessageBuffers(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    /* AIEC Common configuration: make CPU1 and CPU2 SWI line0
    sensitive to rising edge : Configured only once */
    HAL_EXTI_EdgeConfig(MB1TO2_INT_EXTI_LINE, EXTI_RISING_EDGE);
 8000da8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000dac:	2000      	movs	r0, #0
 8000dae:	f000 fdbf 	bl	8001930 <HAL_EXTI_EdgeConfig>
    /* SW interrupt for message buffer */
    HAL_NVIC_SetPriority(MB2TO1_INT_EXTI_IRQ, 0xFU, 1U);
 8000db2:	2201      	movs	r2, #1
 8000db4:	210f      	movs	r1, #15
 8000db6:	200a      	movs	r0, #10
 8000db8:	f000 fffe 	bl	8001db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MB2TO1_INT_EXTI_IRQ);
 8000dbc:	200a      	movs	r0, #10
 8000dbe:	f001 f815 	bl	8001dec <HAL_NVIC_EnableIRQ>
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dce:	f3bf 8f4f 	dsb	sy
}
 8000dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd4:	f3bf 8f6f 	isb	sy
}
 8000dd8:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8000dda:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <main+0x140>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000de2:	f3bf 8f4f 	dsb	sy
}
 8000de6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000de8:	f3bf 8f6f 	isb	sy
}
 8000dec:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000dee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000df0:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <main+0x140>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000df8:	f3bf 8f4f 	dsb	sy
}
 8000dfc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dfe:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <main+0x140>)
 8000e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e04:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	0b5b      	lsrs	r3, r3, #13
 8000e0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e0e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e18:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	015a      	lsls	r2, r3, #5
 8000e1e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e22:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e28:	4937      	ldr	r1, [pc, #220]	; (8000f08 <main+0x140>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1ef      	bne.n	8000e1a <main+0x52>
    } while(sets-- != 0U);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1e5a      	subs	r2, r3, #1
 8000e3e:	60fa      	str	r2, [r7, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e5      	bne.n	8000e10 <main+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e44:	f3bf 8f4f 	dsb	sy
}
 8000e48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e4a:	f3bf 8f6f 	isb	sy
}
 8000e4e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e50:	bf00      	nop
  SCB_InvalidateICache();
  SCB_InvalidateDCache();
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e52:	f000 fa1f 	bl	8001294 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e5a:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e5c:	bf00      	nop
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <main+0x144>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d004      	beq.n	8000e74 <main+0xac>
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	1e5a      	subs	r2, r3, #1
 8000e6e:	617a      	str	r2, [r7, #20]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	dcf4      	bgt.n	8000e5e <main+0x96>
  if ( timeout < 0 )
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	da01      	bge.n	8000e7e <main+0xb6>
  {
  Error_Handler();
 8000e7a:	f000 fa23 	bl	80012c4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fcef 	bl	8001860 <HAL_Init>

  /* USER CODE BEGIN Init */
  ctrl_initInterrupts();
 8000e82:	f000 fa24 	bl	80012ce <ctrl_initInterrupts>
  initIPC_MessageBuffers();
 8000e86:	f7ff ff8d 	bl	8000da4 <initIPC_MessageBuffers>
  createIPCMessageBuffers();
 8000e8a:	f7ff ff05 	bl	8000c98 <createIPCMessageBuffers>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f841 	bl	8000f14 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <main+0x144>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <main+0x144>)
 8000e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <main+0x144>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f001 ff29 	bl	8002d08 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f001 ff3f 	bl	8002d3c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec2:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ec4:	bf00      	nop
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <main+0x144>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d104      	bne.n	8000edc <main+0x114>
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	1e5a      	subs	r2, r3, #1
 8000ed6:	617a      	str	r2, [r7, #20]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	dcf4      	bgt.n	8000ec6 <main+0xfe>
if ( timeout < 0 )
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da01      	bge.n	8000ee6 <main+0x11e>
{
Error_Handler();
 8000ee2:	f000 f9ef 	bl	80012c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 f92d 	bl	8001144 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000eea:	f000 f8df 	bl	80010ac <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000eee:	f000 f88b 	bl	8001008 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ef2:	f007 f9f3 	bl	80082dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <main+0x148>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  app_createTasks();
 8000efc:	f7ff fea4 	bl	8000c48 <app_createTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f00:	f007 fa10 	bl	8008324 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x13c>
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	24008178 	.word	0x24008178

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b09c      	sub	sp, #112	; 0x70
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	224c      	movs	r2, #76	; 0x4c
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00b f87e 	bl	800c024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f00b f878 	bl	800c024 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f34:	2004      	movs	r0, #4
 8000f36:	f001 ff15 	bl	8002d64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <SystemClock_Config+0xec>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <SystemClock_Config+0xec>)
 8000f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <SystemClock_Config+0xec>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <SystemClock_Config+0xf0>)
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <SystemClock_Config+0xf0>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <SystemClock_Config+0xf0>)
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f6c:	bf00      	nop
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <SystemClock_Config+0xec>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f7a:	d1f8      	bne.n	8000f6e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000f92:	2378      	movs	r3, #120	; 0x78
 8000f94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 ff30 	bl	8002e18 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fbe:	f000 f981 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	233f      	movs	r3, #63	; 0x3f
 8000fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV8;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fd2:	2340      	movs	r3, #64	; 0x40
 8000fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fd6:	2340      	movs	r3, #64	; 0x40
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fb6f 	bl	80036cc <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ff4:	f000 f966 	bl	80012c4 <Error_Handler>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3770      	adds	r7, #112	; 0x70
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	58024800 	.word	0x58024800
 8001004:	58000400 	.word	0x58000400

08001008 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_TIM5_Init+0x9c>)
 8001028:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <MX_TIM5_Init+0xa0>)
 800102a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_TIM5_Init+0x9c>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_TIM5_Init+0x9c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_TIM5_Init+0x9c>)
 800103a:	f04f 32ff 	mov.w	r2, #4294967295
 800103e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_TIM5_Init+0x9c>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_TIM5_Init+0x9c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800104c:	4815      	ldr	r0, [pc, #84]	; (80010a4 <MX_TIM5_Init+0x9c>)
 800104e:	f004 fd37 	bl	8005ac0 <HAL_TIM_Base_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001058:	f000 f934 	bl	80012c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001060:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4619      	mov	r1, r3
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_TIM5_Init+0x9c>)
 800106a:	f004 ff89 	bl	8005f80 <HAL_TIM_ConfigClockSource>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001074:	f000 f926 	bl	80012c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM5_Init+0x9c>)
 8001086:	f005 f9d3 	bl	8006430 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001090:	f000 f918 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start(&htim5);
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM5_Init+0x9c>)
 8001096:	f004 fd6b 	bl	8005b70 <HAL_TIM_Base_Start>
  /* USER CODE END TIM5_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	24008098 	.word	0x24008098
 80010a8:	40000c00 	.word	0x40000c00

080010ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010b2:	4a23      	ldr	r2, [pc, #140]	; (8001140 <MX_USART3_UART_Init+0x94>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010f4:	4811      	ldr	r0, [pc, #68]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010f6:	f005 fa47 	bl	8006588 <HAL_UART_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001100:	f000 f8e0 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_USART3_UART_Init+0x90>)
 8001108:	f006 ffda 	bl	80080c0 <HAL_UARTEx_SetTxFifoThreshold>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001112:	f000 f8d7 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <MX_USART3_UART_Init+0x90>)
 800111a:	f007 f80f 	bl	800813c <HAL_UARTEx_SetRxFifoThreshold>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001124:	f000 f8ce 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_USART3_UART_Init+0x90>)
 800112a:	f006 ff8e 	bl	800804a <HAL_UARTEx_EnableFifoMode>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 f8c6 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	240080e4 	.word	0x240080e4
 8001140:	40004800 	.word	0x40004800

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <MX_GPIO_Init+0x140>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	4a48      	ldr	r2, [pc, #288]	; (8001284 <MX_GPIO_Init+0x140>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <MX_GPIO_Init+0x140>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001178:	4b42      	ldr	r3, [pc, #264]	; (8001284 <MX_GPIO_Init+0x140>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	4a41      	ldr	r2, [pc, #260]	; (8001284 <MX_GPIO_Init+0x140>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001188:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <MX_GPIO_Init+0x140>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <MX_GPIO_Init+0x140>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	4a39      	ldr	r2, [pc, #228]	; (8001284 <MX_GPIO_Init+0x140>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a6:	4b37      	ldr	r3, [pc, #220]	; (8001284 <MX_GPIO_Init+0x140>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <MX_GPIO_Init+0x140>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a32      	ldr	r2, [pc, #200]	; (8001284 <MX_GPIO_Init+0x140>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <MX_GPIO_Init+0x140>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <MX_GPIO_Init+0x140>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	4a2a      	ldr	r2, [pc, #168]	; (8001284 <MX_GPIO_Init+0x140>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e2:	4b28      	ldr	r3, [pc, #160]	; (8001284 <MX_GPIO_Init+0x140>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_GPIO_Init+0x140>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <MX_GPIO_Init+0x140>)
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_GPIO_Init+0x140>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2101      	movs	r1, #1
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <MX_GPIO_Init+0x144>)
 8001214:	f001 fd44 	bl	8002ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2102      	movs	r1, #2
 800121c:	481b      	ldr	r0, [pc, #108]	; (800128c <MX_GPIO_Init+0x148>)
 800121e:	f001 fd3f 	bl	8002ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001222:	2301      	movs	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_GPIO_Init+0x144>)
 800123a:	f001 fb81 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800123e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001250:	230a      	movs	r3, #10
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_GPIO_Init+0x14c>)
 800125c:	f001 fb70 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001260:	2302      	movs	r3, #2
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_GPIO_Init+0x148>)
 8001278:	f001 fb62 	bl	8002940 <HAL_GPIO_Init>

}
 800127c:	bf00      	nop
 800127e:	3730      	adds	r7, #48	; 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58024400 	.word	0x58024400
 8001288:	58020400 	.word	0x58020400
 800128c:	58021000 	.word	0x58021000
 8001290:	58020000 	.word	0x58020000

08001294 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001298:	f000 fdb6 	bl	8001e08 <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800129c:	2004      	movs	r0, #4
 800129e:	f000 fdcb 	bl	8001e38 <HAL_MPU_Enable>

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b6:	d101      	bne.n	80012bc <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b8:	f000 fb0e 	bl	80018d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>

080012ce <ctrl_initInterrupts>:
#include "meas_control.h"

#include "FreeRTOS.h"
#include "stm32h7xx_hal.h"

void ctrl_initInterrupts(void) {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
    /* SW interrupt for end of measurement */
    HAL_NVIC_SetPriority(END_MEAS_INT_EXTI_IRQ, 0xFU, 0U);
 80012d2:	2200      	movs	r2, #0
 80012d4:	210f      	movs	r1, #15
 80012d6:	2008      	movs	r0, #8
 80012d8:	f000 fd6e 	bl	8001db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(END_MEAS_INT_EXTI_IRQ);
 80012dc:	2008      	movs	r0, #8
 80012de:	f000 fd85 	bl	8001dec <HAL_NVIC_EnableIRQ>
    /* SW interrupt for start of measurement */
    HAL_EXTI_EdgeConfig(START_MEAS_INT_EXTI_LINE, EXTI_RISING_EDGE);
 80012e2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80012e6:	2003      	movs	r0, #3
 80012e8:	f000 fb22 	bl	8001930 <HAL_EXTI_EdgeConfig>
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <interruptHandlerIPC_endMeas>:

void interruptHandlerIPC_endMeas( void ){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
    /* Signaling to task with notification*/
    BaseType_t xHigherPriorityTaskWoken;
    xSemaphoreGiveFromISR( endMeasSemaphore, &xHigherPriorityTaskWoken );
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <interruptHandlerIPC_endMeas+0x38>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1d3a      	adds	r2, r7, #4
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f008 f831 	bl	8009366 <xQueueGiveFromISR>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <interruptHandlerIPC_endMeas+0x2a>
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <interruptHandlerIPC_endMeas+0x3c>)
 800130c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	f3bf 8f4f 	dsb	sy
 8001316:	f3bf 8f6f 	isb	sy

    HAL_EXTI_D1_ClearFlag(END_MEAS_INT_EXTI_LINE);
 800131a:	2002      	movs	r0, #2
 800131c:	f000 fb90 	bl	8001a40 <HAL_EXTI_D1_ClearFlag>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2400009c 	.word	0x2400009c
 800132c:	e000ed04 	.word	0xe000ed04

08001330 <generateInterruptIPC_startMeas>:

void generateInterruptIPC_startMeas(void){
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    generateIT_IPC(START_MEAS_INT_EXTI_LINE);
 8001334:	2003      	movs	r0, #3
 8001336:	f7ff fa11 	bl	800075c <generateIT_IPC>
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_MspInit+0x38>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_MspInit+0x38>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_MspInit+0x38>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	210f      	movs	r1, #15
 8001368:	f06f 0001 	mvn.w	r0, #1
 800136c:	f000 fd24 	bl	8001db8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58024400 	.word	0x58024400

0800137c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <HAL_TIM_Base_MspInit+0x3c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10e      	bne.n	80013ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_TIM_Base_MspInit+0x40>)
 8001390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_TIM_Base_MspInit+0x40>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_TIM_Base_MspInit+0x40>)
 80013a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40000c00 	.word	0x40000c00
 80013bc:	58024400 	.word	0x58024400

080013c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0ba      	sub	sp, #232	; 0xe8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	22c0      	movs	r2, #192	; 0xc0
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00a fe1f 	bl	800c024 <memset>
  if(huart->Instance==USART3)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a2b      	ldr	r2, [pc, #172]	; (8001498 <HAL_UART_MspInit+0xd8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d14e      	bne.n	800148e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013f0:	f04f 0202 	mov.w	r2, #2
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fd2e 	bl	8003e68 <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001412:	f7ff ff57 	bl	80012c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_UART_MspInit+0xdc>)
 8001418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_UART_MspInit+0xdc>)
 800141e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001422:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_UART_MspInit+0xdc>)
 8001428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800142c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_UART_MspInit+0xdc>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	4a18      	ldr	r2, [pc, #96]	; (800149c <HAL_UART_MspInit+0xdc>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_UART_MspInit+0xdc>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001452:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800146c:	2307      	movs	r3, #7
 800146e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001472:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001476:	4619      	mov	r1, r3
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <HAL_UART_MspInit+0xe0>)
 800147a:	f001 fa61 	bl	8002940 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2027      	movs	r0, #39	; 0x27
 8001484:	f000 fc98 	bl	8001db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001488:	2027      	movs	r0, #39	; 0x27
 800148a:	f000 fcaf 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	37e8      	adds	r7, #232	; 0xe8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40004800 	.word	0x40004800
 800149c:	58024400 	.word	0x58024400
 80014a0:	58020c00 	.word	0x58020c00

080014a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b090      	sub	sp, #64	; 0x40
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	d827      	bhi.n	8001502 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 80014b2:	2200      	movs	r2, #0
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	201c      	movs	r0, #28
 80014b8:	f000 fc7e 	bl	8001db8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014bc:	201c      	movs	r0, #28
 80014be:	f000 fc95 	bl	8001dec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014c2:	4a29      	ldr	r2, [pc, #164]	; (8001568 <HAL_InitTick+0xc4>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <HAL_InitTick+0xc8>)
 80014ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ce:	4a27      	ldr	r2, [pc, #156]	; (800156c <HAL_InitTick+0xc8>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_InitTick+0xc8>)
 80014da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e6:	f107 0210 	add.w	r2, r7, #16
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fc77 	bl	8003de4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <HAL_InitTick+0x6a>
 8001500:	e001      	b.n	8001506 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e02c      	b.n	8001560 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001506:	f002 fc41 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 800150a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800150c:	e004      	b.n	8001518 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800150e:	f002 fc3d 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8001512:	4603      	mov	r3, r0
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <HAL_InitTick+0xcc>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	3b01      	subs	r3, #1
 8001524:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_InitTick+0xd0>)
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_InitTick+0xd0>)
 8001530:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001534:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_InitTick+0xd0>)
 8001538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_InitTick+0xd0>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_InitTick+0xd0>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <HAL_InitTick+0xd0>)
 800154a:	f004 fab9 	bl	8005ac0 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <HAL_InitTick+0xd0>)
 8001556:	f004 fb7b 	bl	8005c50 <HAL_TIM_Base_Start_IT>
 800155a:	4603      	mov	r3, r0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3740      	adds	r7, #64	; 0x40
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2400000c 	.word	0x2400000c
 800156c:	58024400 	.word	0x58024400
 8001570:	431bde83 	.word	0x431bde83
 8001574:	2400817c 	.word	0x2400817c

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800157c:	e7fe      	b.n	800157c <NMI_Handler+0x4>

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM2_IRQHandler+0x10>)
 80015aa:	f004 fbc9 	bl	8005d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2400817c 	.word	0x2400817c

080015b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <USART3_IRQHandler+0x10>)
 80015be:	f005 f989 	bl	80068d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	240080e4 	.word	0x240080e4

080015cc <EXTI2_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI2_IRQHandler(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(END_MEAS_GPIO_PIN);
 80015d0:	2004      	movs	r0, #4
 80015d2:	f001 fb7e 	bl	8002cd2 <HAL_GPIO_EXTI_IRQHandler>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}

080015da <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(MB2TO1_GPIO_PIN);
 80015de:	2010      	movs	r0, #16
 80015e0:	f001 fb77 	bl	8002cd2 <HAL_GPIO_EXTI_IRQHandler>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f00a fcca 	bl	800bfb0 <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	24080000 	.word	0x24080000
 8001648:	00000400 	.word	0x00000400
 800164c:	240081c8 	.word	0x240081c8
 8001650:	2400cbf0 	.word	0x2400cbf0

08001654 <uart_isdigit>:
#include "uart_state_machine.h"

/* Static local function returning if the char is a digit*/
static inline bool uart_isdigit(char ch){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
    return ch >= '0' && ch <= '9';
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b2f      	cmp	r3, #47	; 0x2f
 8001662:	d904      	bls.n	800166e <uart_isdigit+0x1a>
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b39      	cmp	r3, #57	; 0x39
 8001668:	d801      	bhi.n	800166e <uart_isdigit+0x1a>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <uart_isdigit+0x1c>
 800166e:	2300      	movs	r3, #0
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <uart_resetSM>:

// reset all the used storage and state
void uart_resetSM(uartStateMachine *stateMachine){
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
    stateMachine->state = IDLE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    memset(stateMachine->stringNumMeas, 0x00, NUM_MEAS_STRING_LEN);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	2210      	movs	r2, #16
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f00a fcc3 	bl	800c024 <memset>
    memset(stateMachine->stringMeasData, 0x00, MEAS_DATA_SIZE_STRING_LEN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3311      	adds	r3, #17
 80016a2:	2210      	movs	r2, #16
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00a fcbc 	bl	800c024 <memset>
    stateMachine->stringIndex = 0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <uart_stateMachineStep>:

// perform a state transition on the parameter state machine used for
//      handling the charachters received over uart
bool uart_stateMachineStep(char input, uartStateMachine* stateMachine,
        uint32_t* pNumMeas, uint32_t* pMeasDataSize,
        uart_measDirection* pMeasDirection){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
    bool ret = false;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]

    switch(stateMachine->state){
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d04b      	beq.n	8001770 <uart_stateMachineStep+0xb4>
 80016d8:	2b02      	cmp	r3, #2
 80016da:	f300 808a 	bgt.w	80017f2 <uart_stateMachineStep+0x136>
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <uart_stateMachineStep+0x2c>
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d018      	beq.n	8001718 <uart_stateMachineStep+0x5c>
 80016e6:	e084      	b.n	80017f2 <uart_stateMachineStep+0x136>
    case IDLE:
        // start character indicating the direction
        if(input == 's' || input == 'r'){
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b73      	cmp	r3, #115	; 0x73
 80016ec:	d002      	beq.n	80016f4 <uart_stateMachineStep+0x38>
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b72      	cmp	r3, #114	; 0x72
 80016f2:	d10d      	bne.n	8001710 <uart_stateMachineStep+0x54>
            stateMachine->state = NUM_OF_MEAS_NEXT;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
            stateMachine->direction = (input == 's') ? SEND : RECIEVE;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2b73      	cmp	r3, #115	; 0x73
 80016fe:	bf14      	ite	ne
 8001700:	2301      	movne	r3, #1
 8001702:	2300      	moveq	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        }
        else{
            uart_resetSM(stateMachine);
        }
    break;
 800170e:	e077      	b.n	8001800 <uart_stateMachineStep+0x144>
            uart_resetSM(stateMachine);
 8001710:	68b8      	ldr	r0, [r7, #8]
 8001712:	f7ff ffb6 	bl	8001682 <uart_resetSM>
    break;
 8001716:	e073      	b.n	8001800 <uart_stateMachineStep+0x144>
    case NUM_OF_MEAS_NEXT:
        if(uart_isdigit(input)){
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff9a 	bl	8001654 <uart_isdigit>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d015      	beq.n	8001752 <uart_stateMachineStep+0x96>
            stateMachine->stringNumMeas[stateMachine->stringIndex] = input;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172c:	461a      	mov	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	4413      	add	r3, r2
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	705a      	strb	r2, [r3, #1]
            if (stateMachine->stringIndex < NUM_MEAS_STRING_LEN - 1){
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800173c:	2b0e      	cmp	r3, #14
 800173e:	d85c      	bhi.n	80017fa <uart_stateMachineStep+0x13e>
                ++(stateMachine->stringIndex);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001746:	3301      	adds	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            stateMachine->stringIndex = 0;
        }
        else{
            uart_resetSM(stateMachine);
        }
    break;
 8001750:	e053      	b.n	80017fa <uart_stateMachineStep+0x13e>
        else if(input == '\r'){
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	2b0d      	cmp	r3, #13
 8001756:	d107      	bne.n	8001768 <uart_stateMachineStep+0xac>
            stateMachine->state = DATA_SIZE_NEXT;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
            stateMachine->stringIndex = 0;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    break;
 8001766:	e048      	b.n	80017fa <uart_stateMachineStep+0x13e>
            uart_resetSM(stateMachine);
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	f7ff ff8a 	bl	8001682 <uart_resetSM>
    break;
 800176e:	e044      	b.n	80017fa <uart_stateMachineStep+0x13e>
    case DATA_SIZE_NEXT:
        if(uart_isdigit(input)){
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff6e 	bl	8001654 <uart_isdigit>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d015      	beq.n	80017aa <uart_stateMachineStep+0xee>
            stateMachine->stringMeasData[stateMachine->stringIndex] = input;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4413      	add	r3, r2
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	745a      	strb	r2, [r3, #17]
            if (stateMachine->stringIndex < MEAS_DATA_SIZE_STRING_LEN - 1){
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001794:	2b0e      	cmp	r3, #14
 8001796:	d832      	bhi.n	80017fe <uart_stateMachineStep+0x142>
                ++(stateMachine->stringIndex);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            ret = true;
        }
        else{
            uart_resetSM(stateMachine);
        }
    break;
 80017a8:	e029      	b.n	80017fe <uart_stateMachineStep+0x142>
        else if(input == '\r'){ // the meas can be started
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b0d      	cmp	r3, #13
 80017ae:	d11c      	bne.n	80017ea <uart_stateMachineStep+0x12e>
            *pNumMeas = atoi(stateMachine->stringNumMeas);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a fbf7 	bl	800bfa8 <atoi>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
            *pMeasDataSize = atoi(stateMachine->stringMeasData);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3311      	adds	r3, #17
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00a fbee 	bl	800bfa8 <atoi>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	601a      	str	r2, [r3, #0]
            *pMeasDirection = stateMachine->direction;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	701a      	strb	r2, [r3, #0]
            uart_resetSM(stateMachine);
 80017de:	68b8      	ldr	r0, [r7, #8]
 80017e0:	f7ff ff4f 	bl	8001682 <uart_resetSM>
            ret = true;
 80017e4:	2301      	movs	r3, #1
 80017e6:	75fb      	strb	r3, [r7, #23]
    break;
 80017e8:	e009      	b.n	80017fe <uart_stateMachineStep+0x142>
            uart_resetSM(stateMachine);
 80017ea:	68b8      	ldr	r0, [r7, #8]
 80017ec:	f7ff ff49 	bl	8001682 <uart_resetSM>
    break;
 80017f0:	e005      	b.n	80017fe <uart_stateMachineStep+0x142>
    default:
        uart_resetSM(stateMachine);
 80017f2:	68b8      	ldr	r0, [r7, #8]
 80017f4:	f7ff ff45 	bl	8001682 <uart_resetSM>
    break;
 80017f8:	e002      	b.n	8001800 <uart_stateMachineStep+0x144>
    break;
 80017fa:	bf00      	nop
 80017fc:	e000      	b.n	8001800 <uart_stateMachineStep+0x144>
    break;
 80017fe:	bf00      	nop
    }
    return ret;   
 8001800:	7dfb      	ldrb	r3, [r7, #23]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001810:	f7fe ffbc 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	; (800184c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	; (8001858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f00a fbbf 	bl	800bfbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7ff fac3 	bl	8000dc8 <main>
  bx  lr
 8001842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001848:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800184c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001850:	0800d5a8 	.word	0x0800d5a8
  ldr r2, =_sbss
 8001854:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001858:	2400cbf0 	.word	0x2400cbf0

0800185c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC3_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001866:	2003      	movs	r0, #3
 8001868:	f000 fa9b 	bl	8001da2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800186c:	f002 f8e4 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_Init+0x68>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	4913      	ldr	r1, [pc, #76]	; (80018cc <HAL_Init+0x6c>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_Init+0x68>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_Init+0x6c>)
 8001894:	5cd3      	ldrb	r3, [r2, r3]
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_Init+0x70>)
 80018a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018a4:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <HAL_Init+0x74>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018aa:	200f      	movs	r0, #15
 80018ac:	f7ff fdfa 	bl	80014a4 <HAL_InitTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e002      	b.n	80018c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018ba:	f7ff fd41 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	58024400 	.word	0x58024400
 80018cc:	0800d3b0 	.word	0x0800d3b0
 80018d0:	24000004 	.word	0x24000004
 80018d4:	24000000 	.word	0x24000000

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	24000010 	.word	0x24000010
 80018fc:	240081cc 	.word	0x240081cc

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	240081cc 	.word	0x240081cc

08001918 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetREVID+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0c1b      	lsrs	r3, r3, #16
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	5c001000 	.word	0x5c001000

08001930 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	095b      	lsrs	r3, r3, #5
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_EXTI_EdgeConfig+0xcc>)
 8001942:	4413      	add	r3, r2
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	2201      	movs	r2, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	0158      	lsls	r0, r3, #5
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_EXTI_EdgeConfig+0xcc>)
 800195c:	4403      	add	r3, r0
 800195e:	4618      	mov	r0, r3
 8001960:	ea01 0302 	and.w	r3, r1, r2
 8001964:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
 800196e:	015b      	lsls	r3, r3, #5
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	0949      	lsrs	r1, r1, #5
 8001984:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
 8001988:	0149      	lsls	r1, r1, #5
 800198a:	4013      	ands	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d012      	beq.n	80019be <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
 80019a0:	015b      	lsls	r3, r3, #5
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	0949      	lsrs	r1, r1, #5
 80019b4:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
 80019b8:	0149      	lsls	r1, r1, #5
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_EXTI_EdgeConfig+0xcc>)
 80019d0:	4413      	add	r3, r2
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	2201      	movs	r2, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	0158      	lsls	r0, r3, #5
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_EXTI_EdgeConfig+0xcc>)
 80019e6:	4403      	add	r3, r0
 80019e8:	4618      	mov	r0, r3
 80019ea:	ea41 0302 	orr.w	r3, r1, r2
 80019ee:	6003      	str	r3, [r0, #0]
  }
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	58000004 	.word	0x58000004

08001a00 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_EXTI_GenerateSWInterrupt+0x3c>)
 8001a10:	4413      	add	r3, r2
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	0158      	lsls	r0, r3, #5
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_EXTI_GenerateSWInterrupt+0x3c>)
 8001a26:	4403      	add	r3, r0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	ea41 0302 	orr.w	r3, r1, r2
 8001a2e:	6003      	str	r3, [r0, #0]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	58000008 	.word	0x58000008

08001a40 <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 021f 	and.w	r2, r3, #31
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	0119      	lsls	r1, r3, #4
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_EXTI_D1_ClearFlag+0x2c>)
 8001a56:	440b      	add	r3, r1
 8001a58:	4619      	mov	r1, r3
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]

}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	58000088 	.word	0x58000088

08001a70 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d02d      	beq.n	8001ae2 <HAL_EXTI_D1_EventInputConfig+0x72>
  {
     if( EXTI_LineCmd == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d116      	bne.n	8001aba <HAL_EXTI_D1_EventInputConfig+0x4a>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	095a      	lsrs	r2, r3, #5
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_EXTI_D1_EventInputConfig+0xe4>)
 8001a92:	4413      	add	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	6819      	ldr	r1, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	0958      	lsrs	r0, r3, #5
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_EXTI_D1_EventInputConfig+0xe4>)
 8001aac:	4403      	add	r3, r0
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	ea01 0302 	and.w	r3, r1, r2
 8001ab6:	6003      	str	r3, [r0, #0]
 8001ab8:	e013      	b.n	8001ae2 <HAL_EXTI_D1_EventInputConfig+0x72>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	095a      	lsrs	r2, r3, #5
 8001abe:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_EXTI_D1_EventInputConfig+0xe4>)
 8001ac0:	4413      	add	r3, r2
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2201      	movs	r2, #1
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0958      	lsrs	r0, r3, #5
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_EXTI_D1_EventInputConfig+0xe4>)
 8001ad6:	4403      	add	r3, r0
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	ea41 0302 	orr.w	r3, r1, r2
 8001ae0:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d02d      	beq.n	8001b48 <HAL_EXTI_D1_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d116      	bne.n	8001b20 <HAL_EXTI_D1_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	011a      	lsls	r2, r3, #4
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_EXTI_D1_EventInputConfig+0xe8>)
 8001afa:	4413      	add	r3, r2
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2201      	movs	r2, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	0118      	lsls	r0, r3, #4
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_EXTI_D1_EventInputConfig+0xe8>)
 8001b14:	4403      	add	r3, r0
 8001b16:	4618      	mov	r0, r3
 8001b18:	ea01 0302 	and.w	r3, r1, r2
 8001b1c:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 8001b1e:	e013      	b.n	8001b48 <HAL_EXTI_D1_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	011a      	lsls	r2, r3, #4
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_EXTI_D1_EventInputConfig+0xe8>)
 8001b28:	4413      	add	r3, r2
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2201      	movs	r2, #1
 8001b34:	409a      	lsls	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	0118      	lsls	r0, r3, #4
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_EXTI_D1_EventInputConfig+0xe8>)
 8001b3e:	4403      	add	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	ea41 0302 	orr.w	r3, r1, r2
 8001b46:	6003      	str	r3, [r0, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	05800008 	.word	0x05800008
 8001b58:	58000084 	.word	0x58000084

08001b5c <HAL_EXTI_D2_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D2_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D2_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d02d      	beq.n	8001bce <HAL_EXTI_D2_EventInputConfig+0x72>
  {
    if( EXTI_LineCmd == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d116      	bne.n	8001ba6 <HAL_EXTI_D2_EventInputConfig+0x4a>
    {
    /* Clear EXTI line configuration */
     CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	095a      	lsrs	r2, r3, #5
 8001b7c:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43da      	mvns	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0958      	lsrs	r0, r3, #5
 8001b96:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8001b98:	4403      	add	r3, r0
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	ea01 0302 	and.w	r3, r1, r2
 8001ba2:	6003      	str	r3, [r0, #0]
 8001ba4:	e013      	b.n	8001bce <HAL_EXTI_D2_EventInputConfig+0x72>
    }
    else
    {
     SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	095a      	lsrs	r2, r3, #5
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8001bac:	4413      	add	r3, r2
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	2201      	movs	r2, #1
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	0958      	lsrs	r0, r3, #5
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8001bc2:	4403      	add	r3, r0
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	ea41 0302 	orr.w	r3, r1, r2
 8001bcc:	6003      	str	r3, [r0, #0]
    }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d02d      	beq.n	8001c34 <HAL_EXTI_D2_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_EXTI_D2_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	011a      	lsls	r2, r3, #4
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8001be6:	4413      	add	r3, r2
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	0118      	lsls	r0, r3, #4
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8001c00:	4403      	add	r3, r0
 8001c02:	4618      	mov	r0, r3
 8001c04:	ea01 0302 	and.w	r3, r1, r2
 8001c08:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 8001c0a:	e013      	b.n	8001c34 <HAL_EXTI_D2_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	011a      	lsls	r2, r3, #4
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8001c14:	4413      	add	r3, r2
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2201      	movs	r2, #1
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	0118      	lsls	r0, r3, #4
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8001c2a:	4403      	add	r3, r0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	ea41 0302 	orr.w	r3, r1, r2
 8001c32:	6003      	str	r3, [r0, #0]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	0580000c 	.word	0x0580000c
 8001c44:	580000c4 	.word	0x580000c4

08001c48 <__NVIC_SetPriorityGrouping>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <__NVIC_SetPriorityGrouping+0x40>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x40>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00
 8001c8c:	05fa0000 	.word	0x05fa0000

08001c90 <__NVIC_GetPriorityGrouping>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff4c 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc6:	f7ff ff63 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001dca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	6978      	ldr	r0, [r7, #20]
 8001dd2:	f7ff ffb3 	bl	8001d3c <NVIC_EncodePriority>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff82 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff56 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e0c:	f3bf 8f5f 	dmb	sy
}
 8001e10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_MPU_Disable+0x28>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <HAL_MPU_Disable+0x28>)
 8001e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_MPU_Disable+0x2c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00
 8001e34:	e000ed90 	.word	0xe000ed90

08001e38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e40:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <HAL_MPU_Enable+0x38>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_MPU_Enable+0x3c>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_MPU_Enable+0x3c>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e56:	f3bf 8f4f 	dsb	sy
}
 8001e5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5c:	f3bf 8f6f 	isb	sy
}
 8001e60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed90 	.word	0xe000ed90
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff fd3e 	bl	8001900 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e2dc      	b.n	800244a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d008      	beq.n	8001eae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e2cd      	b.n	800244a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a76      	ldr	r2, [pc, #472]	; (800208c <HAL_DMA_Abort+0x214>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d04a      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a74      	ldr	r2, [pc, #464]	; (8002090 <HAL_DMA_Abort+0x218>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d045      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a73      	ldr	r2, [pc, #460]	; (8002094 <HAL_DMA_Abort+0x21c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d040      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a71      	ldr	r2, [pc, #452]	; (8002098 <HAL_DMA_Abort+0x220>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d03b      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a70      	ldr	r2, [pc, #448]	; (800209c <HAL_DMA_Abort+0x224>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d036      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a6e      	ldr	r2, [pc, #440]	; (80020a0 <HAL_DMA_Abort+0x228>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d031      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6d      	ldr	r2, [pc, #436]	; (80020a4 <HAL_DMA_Abort+0x22c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d02c      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a6b      	ldr	r2, [pc, #428]	; (80020a8 <HAL_DMA_Abort+0x230>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d027      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6a      	ldr	r2, [pc, #424]	; (80020ac <HAL_DMA_Abort+0x234>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d022      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a68      	ldr	r2, [pc, #416]	; (80020b0 <HAL_DMA_Abort+0x238>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01d      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a67      	ldr	r2, [pc, #412]	; (80020b4 <HAL_DMA_Abort+0x23c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d018      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_DMA_Abort+0x240>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a64      	ldr	r2, [pc, #400]	; (80020bc <HAL_DMA_Abort+0x244>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00e      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a62      	ldr	r2, [pc, #392]	; (80020c0 <HAL_DMA_Abort+0x248>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d009      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a61      	ldr	r2, [pc, #388]	; (80020c4 <HAL_DMA_Abort+0x24c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d004      	beq.n	8001f4e <HAL_DMA_Abort+0xd6>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a5f      	ldr	r2, [pc, #380]	; (80020c8 <HAL_DMA_Abort+0x250>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Abort+0xda>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_DMA_Abort+0xdc>
 8001f52:	2300      	movs	r3, #0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 021e 	bic.w	r2, r2, #30
 8001f66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e00a      	b.n	8001f96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 020e 	bic.w	r2, r2, #14
 8001f8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a3c      	ldr	r2, [pc, #240]	; (800208c <HAL_DMA_Abort+0x214>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d072      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a3a      	ldr	r2, [pc, #232]	; (8002090 <HAL_DMA_Abort+0x218>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d06d      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a39      	ldr	r2, [pc, #228]	; (8002094 <HAL_DMA_Abort+0x21c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d068      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a37      	ldr	r2, [pc, #220]	; (8002098 <HAL_DMA_Abort+0x220>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d063      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a36      	ldr	r2, [pc, #216]	; (800209c <HAL_DMA_Abort+0x224>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d05e      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a34      	ldr	r2, [pc, #208]	; (80020a0 <HAL_DMA_Abort+0x228>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d059      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a33      	ldr	r2, [pc, #204]	; (80020a4 <HAL_DMA_Abort+0x22c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d054      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <HAL_DMA_Abort+0x230>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04f      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a30      	ldr	r2, [pc, #192]	; (80020ac <HAL_DMA_Abort+0x234>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d04a      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	; (80020b0 <HAL_DMA_Abort+0x238>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d045      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2d      	ldr	r2, [pc, #180]	; (80020b4 <HAL_DMA_Abort+0x23c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d040      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <HAL_DMA_Abort+0x240>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d03b      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2a      	ldr	r2, [pc, #168]	; (80020bc <HAL_DMA_Abort+0x244>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d036      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_DMA_Abort+0x248>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d031      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <HAL_DMA_Abort+0x24c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d02c      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <HAL_DMA_Abort+0x250>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d027      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <HAL_DMA_Abort+0x254>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d022      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <HAL_DMA_Abort+0x258>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01d      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <HAL_DMA_Abort+0x25c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d018      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <HAL_DMA_Abort+0x260>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <HAL_DMA_Abort+0x264>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_DMA_Abort+0x268>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_DMA_Abort+0x26c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d004      	beq.n	8002086 <HAL_DMA_Abort+0x20e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <HAL_DMA_Abort+0x270>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d132      	bne.n	80020ec <HAL_DMA_Abort+0x274>
 8002086:	2301      	movs	r3, #1
 8002088:	e031      	b.n	80020ee <HAL_DMA_Abort+0x276>
 800208a:	bf00      	nop
 800208c:	40020010 	.word	0x40020010
 8002090:	40020028 	.word	0x40020028
 8002094:	40020040 	.word	0x40020040
 8002098:	40020058 	.word	0x40020058
 800209c:	40020070 	.word	0x40020070
 80020a0:	40020088 	.word	0x40020088
 80020a4:	400200a0 	.word	0x400200a0
 80020a8:	400200b8 	.word	0x400200b8
 80020ac:	40020410 	.word	0x40020410
 80020b0:	40020428 	.word	0x40020428
 80020b4:	40020440 	.word	0x40020440
 80020b8:	40020458 	.word	0x40020458
 80020bc:	40020470 	.word	0x40020470
 80020c0:	40020488 	.word	0x40020488
 80020c4:	400204a0 	.word	0x400204a0
 80020c8:	400204b8 	.word	0x400204b8
 80020cc:	58025408 	.word	0x58025408
 80020d0:	5802541c 	.word	0x5802541c
 80020d4:	58025430 	.word	0x58025430
 80020d8:	58025444 	.word	0x58025444
 80020dc:	58025458 	.word	0x58025458
 80020e0:	5802546c 	.word	0x5802546c
 80020e4:	58025480 	.word	0x58025480
 80020e8:	58025494 	.word	0x58025494
 80020ec:	2300      	movs	r3, #0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002100:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6d      	ldr	r2, [pc, #436]	; (80022bc <HAL_DMA_Abort+0x444>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d04a      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a6b      	ldr	r2, [pc, #428]	; (80022c0 <HAL_DMA_Abort+0x448>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d045      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6a      	ldr	r2, [pc, #424]	; (80022c4 <HAL_DMA_Abort+0x44c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d040      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <HAL_DMA_Abort+0x450>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d03b      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a67      	ldr	r2, [pc, #412]	; (80022cc <HAL_DMA_Abort+0x454>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d036      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <HAL_DMA_Abort+0x458>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a64      	ldr	r2, [pc, #400]	; (80022d4 <HAL_DMA_Abort+0x45c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d02c      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a62      	ldr	r2, [pc, #392]	; (80022d8 <HAL_DMA_Abort+0x460>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d027      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a61      	ldr	r2, [pc, #388]	; (80022dc <HAL_DMA_Abort+0x464>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d022      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a5f      	ldr	r2, [pc, #380]	; (80022e0 <HAL_DMA_Abort+0x468>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01d      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5e      	ldr	r2, [pc, #376]	; (80022e4 <HAL_DMA_Abort+0x46c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d018      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a5c      	ldr	r2, [pc, #368]	; (80022e8 <HAL_DMA_Abort+0x470>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a5b      	ldr	r2, [pc, #364]	; (80022ec <HAL_DMA_Abort+0x474>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00e      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a59      	ldr	r2, [pc, #356]	; (80022f0 <HAL_DMA_Abort+0x478>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_DMA_Abort+0x47c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_DMA_Abort+0x32a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <HAL_DMA_Abort+0x480>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d108      	bne.n	80021b4 <HAL_DMA_Abort+0x33c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e007      	b.n	80021c4 <HAL_DMA_Abort+0x34c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021c4:	e013      	b.n	80021ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c6:	f7ff fb9b 	bl	8001900 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d90c      	bls.n	80021ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2203      	movs	r2, #3
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e12d      	b.n	800244a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1e5      	bne.n	80021c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <HAL_DMA_Abort+0x444>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <HAL_DMA_Abort+0x448>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_Abort+0x422>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <HAL_DMA_Abort+0x44c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <HAL_DMA_Abort+0x450>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a29      	ldr	r2, [pc, #164]	; (80022cc <HAL_DMA_Abort+0x454>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_Abort+0x422>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <HAL_DMA_Abort+0x458>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <HAL_DMA_Abort+0x45c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <HAL_DMA_Abort+0x460>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_Abort+0x422>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_DMA_Abort+0x464>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <HAL_DMA_Abort+0x468>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_Abort+0x422>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <HAL_DMA_Abort+0x46c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <HAL_DMA_Abort+0x470>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_DMA_Abort+0x474>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_Abort+0x422>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <HAL_DMA_Abort+0x478>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <HAL_DMA_Abort+0x47c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_Abort+0x422>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_DMA_Abort+0x480>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_DMA_Abort+0x426>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_DMA_Abort+0x428>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02b      	beq.n	80022fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	223f      	movs	r2, #63	; 0x3f
 80022b4:	409a      	lsls	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	e02a      	b.n	8002312 <HAL_DMA_Abort+0x49a>
 80022bc:	40020010 	.word	0x40020010
 80022c0:	40020028 	.word	0x40020028
 80022c4:	40020040 	.word	0x40020040
 80022c8:	40020058 	.word	0x40020058
 80022cc:	40020070 	.word	0x40020070
 80022d0:	40020088 	.word	0x40020088
 80022d4:	400200a0 	.word	0x400200a0
 80022d8:	400200b8 	.word	0x400200b8
 80022dc:	40020410 	.word	0x40020410
 80022e0:	40020428 	.word	0x40020428
 80022e4:	40020440 	.word	0x40020440
 80022e8:	40020458 	.word	0x40020458
 80022ec:	40020470 	.word	0x40020470
 80022f0:	40020488 	.word	0x40020488
 80022f4:	400204a0 	.word	0x400204a0
 80022f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2201      	movs	r2, #1
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a4f      	ldr	r2, [pc, #316]	; (8002454 <HAL_DMA_Abort+0x5dc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d072      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a4d      	ldr	r2, [pc, #308]	; (8002458 <HAL_DMA_Abort+0x5e0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d06d      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a4c      	ldr	r2, [pc, #304]	; (800245c <HAL_DMA_Abort+0x5e4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d068      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a4a      	ldr	r2, [pc, #296]	; (8002460 <HAL_DMA_Abort+0x5e8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d063      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a49      	ldr	r2, [pc, #292]	; (8002464 <HAL_DMA_Abort+0x5ec>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d05e      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a47      	ldr	r2, [pc, #284]	; (8002468 <HAL_DMA_Abort+0x5f0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d059      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a46      	ldr	r2, [pc, #280]	; (800246c <HAL_DMA_Abort+0x5f4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d054      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a44      	ldr	r2, [pc, #272]	; (8002470 <HAL_DMA_Abort+0x5f8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d04f      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a43      	ldr	r2, [pc, #268]	; (8002474 <HAL_DMA_Abort+0x5fc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d04a      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a41      	ldr	r2, [pc, #260]	; (8002478 <HAL_DMA_Abort+0x600>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d045      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a40      	ldr	r2, [pc, #256]	; (800247c <HAL_DMA_Abort+0x604>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d040      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3e      	ldr	r2, [pc, #248]	; (8002480 <HAL_DMA_Abort+0x608>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d03b      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a3d      	ldr	r2, [pc, #244]	; (8002484 <HAL_DMA_Abort+0x60c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d036      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <HAL_DMA_Abort+0x610>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d031      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a3a      	ldr	r2, [pc, #232]	; (800248c <HAL_DMA_Abort+0x614>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d02c      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a38      	ldr	r2, [pc, #224]	; (8002490 <HAL_DMA_Abort+0x618>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d027      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a37      	ldr	r2, [pc, #220]	; (8002494 <HAL_DMA_Abort+0x61c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d022      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a35      	ldr	r2, [pc, #212]	; (8002498 <HAL_DMA_Abort+0x620>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01d      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a34      	ldr	r2, [pc, #208]	; (800249c <HAL_DMA_Abort+0x624>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d018      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a32      	ldr	r2, [pc, #200]	; (80024a0 <HAL_DMA_Abort+0x628>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <HAL_DMA_Abort+0x62c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00e      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2f      	ldr	r2, [pc, #188]	; (80024a8 <HAL_DMA_Abort+0x630>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2e      	ldr	r2, [pc, #184]	; (80024ac <HAL_DMA_Abort+0x634>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_DMA_Abort+0x58a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2c      	ldr	r2, [pc, #176]	; (80024b0 <HAL_DMA_Abort+0x638>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_DMA_Abort+0x58e>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_DMA_Abort+0x590>
 8002406:	2300      	movs	r3, #0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002414:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00c      	beq.n	8002438 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800242c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002436:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40020010 	.word	0x40020010
 8002458:	40020028 	.word	0x40020028
 800245c:	40020040 	.word	0x40020040
 8002460:	40020058 	.word	0x40020058
 8002464:	40020070 	.word	0x40020070
 8002468:	40020088 	.word	0x40020088
 800246c:	400200a0 	.word	0x400200a0
 8002470:	400200b8 	.word	0x400200b8
 8002474:	40020410 	.word	0x40020410
 8002478:	40020428 	.word	0x40020428
 800247c:	40020440 	.word	0x40020440
 8002480:	40020458 	.word	0x40020458
 8002484:	40020470 	.word	0x40020470
 8002488:	40020488 	.word	0x40020488
 800248c:	400204a0 	.word	0x400204a0
 8002490:	400204b8 	.word	0x400204b8
 8002494:	58025408 	.word	0x58025408
 8002498:	5802541c 	.word	0x5802541c
 800249c:	58025430 	.word	0x58025430
 80024a0:	58025444 	.word	0x58025444
 80024a4:	58025458 	.word	0x58025458
 80024a8:	5802546c 	.word	0x5802546c
 80024ac:	58025480 	.word	0x58025480
 80024b0:	58025494 	.word	0x58025494

080024b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e237      	b.n	8002936 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d004      	beq.n	80024dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e22c      	b.n	8002936 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <HAL_DMA_Abort_IT+0x1a0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d04a      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a5b      	ldr	r2, [pc, #364]	; (8002658 <HAL_DMA_Abort_IT+0x1a4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d045      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a59      	ldr	r2, [pc, #356]	; (800265c <HAL_DMA_Abort_IT+0x1a8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d040      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_DMA_Abort_IT+0x1ac>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d03b      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a56      	ldr	r2, [pc, #344]	; (8002664 <HAL_DMA_Abort_IT+0x1b0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d036      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a55      	ldr	r2, [pc, #340]	; (8002668 <HAL_DMA_Abort_IT+0x1b4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d031      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a53      	ldr	r2, [pc, #332]	; (800266c <HAL_DMA_Abort_IT+0x1b8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d02c      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_DMA_Abort_IT+0x1bc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d027      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <HAL_DMA_Abort_IT+0x1c0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d022      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a4f      	ldr	r2, [pc, #316]	; (8002678 <HAL_DMA_Abort_IT+0x1c4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d01d      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4d      	ldr	r2, [pc, #308]	; (800267c <HAL_DMA_Abort_IT+0x1c8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d018      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a4c      	ldr	r2, [pc, #304]	; (8002680 <HAL_DMA_Abort_IT+0x1cc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d013      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a4a      	ldr	r2, [pc, #296]	; (8002684 <HAL_DMA_Abort_IT+0x1d0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00e      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a49      	ldr	r2, [pc, #292]	; (8002688 <HAL_DMA_Abort_IT+0x1d4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d009      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a47      	ldr	r2, [pc, #284]	; (800268c <HAL_DMA_Abort_IT+0x1d8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d004      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a46      	ldr	r2, [pc, #280]	; (8002690 <HAL_DMA_Abort_IT+0x1dc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_DMA_Abort_IT+0xcc>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_DMA_Abort_IT+0xce>
 8002580:	2300      	movs	r3, #0
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8086 	beq.w	8002694 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2204      	movs	r2, #4
 800258c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <HAL_DMA_Abort_IT+0x1a0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d04a      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a2e      	ldr	r2, [pc, #184]	; (8002658 <HAL_DMA_Abort_IT+0x1a4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d045      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a2c      	ldr	r2, [pc, #176]	; (800265c <HAL_DMA_Abort_IT+0x1a8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d040      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <HAL_DMA_Abort_IT+0x1ac>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d03b      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a29      	ldr	r2, [pc, #164]	; (8002664 <HAL_DMA_Abort_IT+0x1b0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d036      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_DMA_Abort_IT+0x1b4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d031      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a26      	ldr	r2, [pc, #152]	; (800266c <HAL_DMA_Abort_IT+0x1b8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d02c      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a25      	ldr	r2, [pc, #148]	; (8002670 <HAL_DMA_Abort_IT+0x1bc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d027      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <HAL_DMA_Abort_IT+0x1c0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d022      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_DMA_Abort_IT+0x1c4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d01d      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a20      	ldr	r2, [pc, #128]	; (800267c <HAL_DMA_Abort_IT+0x1c8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d018      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <HAL_DMA_Abort_IT+0x1cc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <HAL_DMA_Abort_IT+0x1d0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00e      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <HAL_DMA_Abort_IT+0x1d4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1a      	ldr	r2, [pc, #104]	; (800268c <HAL_DMA_Abort_IT+0x1d8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_DMA_Abort_IT+0x17c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_DMA_Abort_IT+0x1dc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <HAL_DMA_Abort_IT+0x18e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e178      	b.n	8002934 <HAL_DMA_Abort_IT+0x480>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e16f      	b.n	8002934 <HAL_DMA_Abort_IT+0x480>
 8002654:	40020010 	.word	0x40020010
 8002658:	40020028 	.word	0x40020028
 800265c:	40020040 	.word	0x40020040
 8002660:	40020058 	.word	0x40020058
 8002664:	40020070 	.word	0x40020070
 8002668:	40020088 	.word	0x40020088
 800266c:	400200a0 	.word	0x400200a0
 8002670:	400200b8 	.word	0x400200b8
 8002674:	40020410 	.word	0x40020410
 8002678:	40020428 	.word	0x40020428
 800267c:	40020440 	.word	0x40020440
 8002680:	40020458 	.word	0x40020458
 8002684:	40020470 	.word	0x40020470
 8002688:	40020488 	.word	0x40020488
 800268c:	400204a0 	.word	0x400204a0
 8002690:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020e 	bic.w	r2, r2, #14
 80026a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6c      	ldr	r2, [pc, #432]	; (800285c <HAL_DMA_Abort_IT+0x3a8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d04a      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6b      	ldr	r2, [pc, #428]	; (8002860 <HAL_DMA_Abort_IT+0x3ac>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d045      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a69      	ldr	r2, [pc, #420]	; (8002864 <HAL_DMA_Abort_IT+0x3b0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d040      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a68      	ldr	r2, [pc, #416]	; (8002868 <HAL_DMA_Abort_IT+0x3b4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d03b      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a66      	ldr	r2, [pc, #408]	; (800286c <HAL_DMA_Abort_IT+0x3b8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d036      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a65      	ldr	r2, [pc, #404]	; (8002870 <HAL_DMA_Abort_IT+0x3bc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d031      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a63      	ldr	r2, [pc, #396]	; (8002874 <HAL_DMA_Abort_IT+0x3c0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02c      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a62      	ldr	r2, [pc, #392]	; (8002878 <HAL_DMA_Abort_IT+0x3c4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d027      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a60      	ldr	r2, [pc, #384]	; (800287c <HAL_DMA_Abort_IT+0x3c8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d022      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5f      	ldr	r2, [pc, #380]	; (8002880 <HAL_DMA_Abort_IT+0x3cc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d01d      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a5d      	ldr	r2, [pc, #372]	; (8002884 <HAL_DMA_Abort_IT+0x3d0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d018      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a5c      	ldr	r2, [pc, #368]	; (8002888 <HAL_DMA_Abort_IT+0x3d4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d013      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5a      	ldr	r2, [pc, #360]	; (800288c <HAL_DMA_Abort_IT+0x3d8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00e      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a59      	ldr	r2, [pc, #356]	; (8002890 <HAL_DMA_Abort_IT+0x3dc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a57      	ldr	r2, [pc, #348]	; (8002894 <HAL_DMA_Abort_IT+0x3e0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d004      	beq.n	8002744 <HAL_DMA_Abort_IT+0x290>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_DMA_Abort_IT+0x3e4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d108      	bne.n	8002756 <HAL_DMA_Abort_IT+0x2a2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	e007      	b.n	8002766 <HAL_DMA_Abort_IT+0x2b2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <HAL_DMA_Abort_IT+0x3a8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d072      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3a      	ldr	r2, [pc, #232]	; (8002860 <HAL_DMA_Abort_IT+0x3ac>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d06d      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a39      	ldr	r2, [pc, #228]	; (8002864 <HAL_DMA_Abort_IT+0x3b0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d068      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a37      	ldr	r2, [pc, #220]	; (8002868 <HAL_DMA_Abort_IT+0x3b4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d063      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a36      	ldr	r2, [pc, #216]	; (800286c <HAL_DMA_Abort_IT+0x3b8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d05e      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a34      	ldr	r2, [pc, #208]	; (8002870 <HAL_DMA_Abort_IT+0x3bc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d059      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a33      	ldr	r2, [pc, #204]	; (8002874 <HAL_DMA_Abort_IT+0x3c0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d054      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_DMA_Abort_IT+0x3c4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d04f      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <HAL_DMA_Abort_IT+0x3c8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d04a      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2e      	ldr	r2, [pc, #184]	; (8002880 <HAL_DMA_Abort_IT+0x3cc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d045      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <HAL_DMA_Abort_IT+0x3d0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d040      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2b      	ldr	r2, [pc, #172]	; (8002888 <HAL_DMA_Abort_IT+0x3d4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d03b      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2a      	ldr	r2, [pc, #168]	; (800288c <HAL_DMA_Abort_IT+0x3d8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d036      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a28      	ldr	r2, [pc, #160]	; (8002890 <HAL_DMA_Abort_IT+0x3dc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d031      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_DMA_Abort_IT+0x3e0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d02c      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a25      	ldr	r2, [pc, #148]	; (8002898 <HAL_DMA_Abort_IT+0x3e4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d027      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a24      	ldr	r2, [pc, #144]	; (800289c <HAL_DMA_Abort_IT+0x3e8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d022      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_DMA_Abort_IT+0x3ec>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01d      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_DMA_Abort_IT+0x3f0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d018      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_DMA_Abort_IT+0x3f4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_DMA_Abort_IT+0x3f8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00e      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <HAL_DMA_Abort_IT+0x3fc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_DMA_Abort_IT+0x400>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <HAL_DMA_Abort_IT+0x3a2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_DMA_Abort_IT+0x404>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d132      	bne.n	80028bc <HAL_DMA_Abort_IT+0x408>
 8002856:	2301      	movs	r3, #1
 8002858:	e031      	b.n	80028be <HAL_DMA_Abort_IT+0x40a>
 800285a:	bf00      	nop
 800285c:	40020010 	.word	0x40020010
 8002860:	40020028 	.word	0x40020028
 8002864:	40020040 	.word	0x40020040
 8002868:	40020058 	.word	0x40020058
 800286c:	40020070 	.word	0x40020070
 8002870:	40020088 	.word	0x40020088
 8002874:	400200a0 	.word	0x400200a0
 8002878:	400200b8 	.word	0x400200b8
 800287c:	40020410 	.word	0x40020410
 8002880:	40020428 	.word	0x40020428
 8002884:	40020440 	.word	0x40020440
 8002888:	40020458 	.word	0x40020458
 800288c:	40020470 	.word	0x40020470
 8002890:	40020488 	.word	0x40020488
 8002894:	400204a0 	.word	0x400204a0
 8002898:	400204b8 	.word	0x400204b8
 800289c:	58025408 	.word	0x58025408
 80028a0:	5802541c 	.word	0x5802541c
 80028a4:	58025430 	.word	0x58025430
 80028a8:	58025444 	.word	0x58025444
 80028ac:	58025458 	.word	0x58025458
 80028b0:	5802546c 	.word	0x5802546c
 80028b4:	58025480 	.word	0x58025480
 80028b8:	58025494 	.word	0x58025494
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d028      	beq.n	8002914 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2201      	movs	r2, #1
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00c      	beq.n	8002914 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002908:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002912:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800294e:	4b89      	ldr	r3, [pc, #548]	; (8002b74 <HAL_GPIO_Init+0x234>)
 8002950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002952:	e194      	b.n	8002c7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8186 	beq.w	8002c78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d005      	beq.n	8002984 <HAL_GPIO_Init+0x44>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d130      	bne.n	80029e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ba:	2201      	movs	r2, #1
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f003 0201 	and.w	r2, r3, #1
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d017      	beq.n	8002a22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d123      	bne.n	8002a76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	08da      	lsrs	r2, r3, #3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3208      	adds	r2, #8
 8002a70:	69b9      	ldr	r1, [r7, #24]
 8002a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0203 	and.w	r2, r3, #3
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80e0 	beq.w	8002c78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab8:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_GPIO_Init+0x238>)
 8002aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002abe:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <HAL_GPIO_Init+0x238>)
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_GPIO_Init+0x238>)
 8002aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad6:	4a29      	ldr	r2, [pc, #164]	; (8002b7c <HAL_GPIO_Init+0x23c>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_GPIO_Init+0x240>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d052      	beq.n	8002ba8 <HAL_GPIO_Init+0x268>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_GPIO_Init+0x244>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d031      	beq.n	8002b6e <HAL_GPIO_Init+0x22e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_GPIO_Init+0x248>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02b      	beq.n	8002b6a <HAL_GPIO_Init+0x22a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_GPIO_Init+0x24c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d025      	beq.n	8002b66 <HAL_GPIO_Init+0x226>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_GPIO_Init+0x250>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01f      	beq.n	8002b62 <HAL_GPIO_Init+0x222>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <HAL_GPIO_Init+0x254>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x21e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_GPIO_Init+0x258>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x21a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <HAL_GPIO_Init+0x25c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x216>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_GPIO_Init+0x260>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x212>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_GPIO_Init+0x264>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x20e>
 8002b4a:	2309      	movs	r3, #9
 8002b4c:	e02d      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b4e:	230a      	movs	r3, #10
 8002b50:	e02b      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b52:	2308      	movs	r3, #8
 8002b54:	e029      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b56:	2307      	movs	r3, #7
 8002b58:	e027      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	e025      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e023      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e021      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e01f      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e01d      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e01b      	b.n	8002baa <HAL_GPIO_Init+0x26a>
 8002b72:	bf00      	nop
 8002b74:	58000080 	.word	0x58000080
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	58000400 	.word	0x58000400
 8002b80:	58020000 	.word	0x58020000
 8002b84:	58020400 	.word	0x58020400
 8002b88:	58020800 	.word	0x58020800
 8002b8c:	58020c00 	.word	0x58020c00
 8002b90:	58021000 	.word	0x58021000
 8002b94:	58021400 	.word	0x58021400
 8002b98:	58021800 	.word	0x58021800
 8002b9c:	58021c00 	.word	0x58021c00
 8002ba0:	58022000 	.word	0x58022000
 8002ba4:	58022400 	.word	0x58022400
 8002ba8:	2300      	movs	r3, #0
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	f002 0203 	and.w	r2, r2, #3
 8002bb0:	0092      	lsls	r2, r2, #2
 8002bb2:	4093      	lsls	r3, r2
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bba:	4938      	ldr	r1, [pc, #224]	; (8002c9c <HAL_GPIO_Init+0x35c>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f47f ae63 	bne.w	8002954 <HAL_GPIO_Init+0x14>
  }
}
 8002c8e:	bf00      	nop
 8002c90:	bf00      	nop
 8002c92:	3724      	adds	r7, #36	; 0x24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	58000400 	.word	0x58000400

08002ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
 8002cac:	4613      	mov	r3, r2
 8002cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cb0:	787b      	ldrb	r3, [r7, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002cbc:	e003      	b.n	8002cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	041a      	lsls	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	619a      	str	r2, [r3, #24]
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fe49 	bl	8000990 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002d10:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_HSEM_FastTake+0x2c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3320      	adds	r3, #32
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_HSEM_FastTake+0x30>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d101      	bne.n	8002d24 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	58026400 	.word	0x58026400
 8002d38:	80000300 	.word	0x80000300

08002d3c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002d46:	4906      	ldr	r1, [pc, #24]	; (8002d60 <HAL_HSEM_Release+0x24>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	58026400 	.word	0x58026400

08002d64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d6c:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	2b06      	cmp	r3, #6
 8002d76:	d00a      	beq.n	8002d8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d78:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e040      	b.n	8002e0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e03e      	b.n	8002e0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d96:	491f      	ldr	r1, [pc, #124]	; (8002e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d9e:	f7fe fdaf 	bl	8001900 <HAL_GetTick>
 8002da2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002da4:	e009      	b.n	8002dba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002da6:	f7fe fdab 	bl	8001900 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002db4:	d901      	bls.n	8002dba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e028      	b.n	8002e0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc6:	d1ee      	bne.n	8002da6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b1e      	cmp	r3, #30
 8002dcc:	d008      	beq.n	8002de0 <HAL_PWREx_ConfigSupply+0x7c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8002dd2:	d005      	beq.n	8002de0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b1d      	cmp	r3, #29
 8002dd8:	d002      	beq.n	8002de0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b2d      	cmp	r3, #45	; 0x2d
 8002dde:	d114      	bne.n	8002e0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002de0:	f7fe fd8e 	bl	8001900 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002de6:	e009      	b.n	8002dfc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002de8:	f7fe fd8a 	bl	8001900 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df6:	d901      	bls.n	8002dfc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d1ee      	bne.n	8002de8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	58024800 	.word	0x58024800

08002e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	; 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f000 bc48 	b.w	80036bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8088 	beq.w	8002f4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3a:	4b99      	ldr	r3, [pc, #612]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e44:	4b96      	ldr	r3, [pc, #600]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d007      	beq.n	8002e60 <HAL_RCC_OscConfig+0x48>
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	2b18      	cmp	r3, #24
 8002e54:	d111      	bne.n	8002e7a <HAL_RCC_OscConfig+0x62>
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4b8f      	ldr	r3, [pc, #572]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d06d      	beq.n	8002f48 <HAL_RCC_OscConfig+0x130>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d169      	bne.n	8002f48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f000 bc21 	b.w	80036bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x7a>
 8002e84:	4b86      	ldr	r3, [pc, #536]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a85      	ldr	r2, [pc, #532]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	e02e      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x9c>
 8002e9a:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a80      	ldr	r2, [pc, #512]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b7e      	ldr	r3, [pc, #504]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7d      	ldr	r2, [pc, #500]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e01d      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xc0>
 8002ebe:	4b78      	ldr	r3, [pc, #480]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a77      	ldr	r2, [pc, #476]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b75      	ldr	r3, [pc, #468]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a74      	ldr	r2, [pc, #464]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd8>
 8002ed8:	4b71      	ldr	r3, [pc, #452]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a70      	ldr	r2, [pc, #448]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b6e      	ldr	r3, [pc, #440]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6d      	ldr	r2, [pc, #436]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d013      	beq.n	8002f20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fd02 	bl	8001900 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe fcfe 	bl	8001900 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e3d4      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f12:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe8>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe fcee 	bl	8001900 <HAL_GetTick>
 8002f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7fe fcea 	bl	8001900 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e3c0      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f3a:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x110>
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80ca 	beq.w	80030ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f58:	4b51      	ldr	r3, [pc, #324]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f62:	4b4f      	ldr	r3, [pc, #316]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_RCC_OscConfig+0x166>
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	2b18      	cmp	r3, #24
 8002f72:	d156      	bne.n	8003022 <HAL_RCC_OscConfig+0x20a>
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d151      	bne.n	8003022 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7e:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_RCC_OscConfig+0x17e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e392      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f96:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0219 	bic.w	r2, r3, #25
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	493f      	ldr	r1, [pc, #252]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fcaa 	bl	8001900 <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fca6 	bl	8001900 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e37c      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fc2:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	f7fe fca3 	bl	8001918 <HAL_GetREVID>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d817      	bhi.n	800300c <HAL_RCC_OscConfig+0x1f4>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d108      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x1de>
 8002fe4:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fec:	4a2c      	ldr	r2, [pc, #176]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff4:	e07a      	b.n	80030ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	031b      	lsls	r3, r3, #12
 8003004:	4926      	ldr	r1, [pc, #152]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300a:	e06f      	b.n	80030ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	4921      	ldr	r1, [pc, #132]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003020:	e064      	b.n	80030ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d047      	beq.n	80030ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 0219 	bic.w	r2, r3, #25
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	491a      	ldr	r1, [pc, #104]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fc60 	bl	8001900 <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe fc5c 	bl	8001900 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e332      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	f7fe fc59 	bl	8001918 <HAL_GetREVID>
 8003066:	4603      	mov	r3, r0
 8003068:	f241 0203 	movw	r2, #4099	; 0x1003
 800306c:	4293      	cmp	r3, r2
 800306e:	d819      	bhi.n	80030a4 <HAL_RCC_OscConfig+0x28c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d108      	bne.n	800308a <HAL_RCC_OscConfig+0x272>
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003080:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 8003082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003086:	6053      	str	r3, [r2, #4]
 8003088:	e030      	b.n	80030ec <HAL_RCC_OscConfig+0x2d4>
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	031b      	lsls	r3, r3, #12
 8003098:	4901      	ldr	r1, [pc, #4]	; (80030a0 <HAL_RCC_OscConfig+0x288>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
 800309e:	e025      	b.n	80030ec <HAL_RCC_OscConfig+0x2d4>
 80030a0:	58024400 	.word	0x58024400
 80030a4:	4b9a      	ldr	r3, [pc, #616]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	4997      	ldr	r1, [pc, #604]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
 80030b8:	e018      	b.n	80030ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	4b95      	ldr	r3, [pc, #596]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a94      	ldr	r2, [pc, #592]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fe fc1b 	bl	8001900 <HAL_GetTick>
 80030ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fc17 	bl	8001900 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e2ed      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030e0:	4b8b      	ldr	r3, [pc, #556]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a9 	beq.w	800324c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fa:	4b85      	ldr	r3, [pc, #532]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003102:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003104:	4b82      	ldr	r3, [pc, #520]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d007      	beq.n	8003120 <HAL_RCC_OscConfig+0x308>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b18      	cmp	r3, #24
 8003114:	d13a      	bne.n	800318c <HAL_RCC_OscConfig+0x374>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d135      	bne.n	800318c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003120:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_OscConfig+0x320>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d001      	beq.n	8003138 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e2c1      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003138:	f7fe fbee 	bl	8001918 <HAL_GetREVID>
 800313c:	4603      	mov	r3, r0
 800313e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003142:	4293      	cmp	r3, r2
 8003144:	d817      	bhi.n	8003176 <HAL_RCC_OscConfig+0x35e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	2b20      	cmp	r3, #32
 800314c:	d108      	bne.n	8003160 <HAL_RCC_OscConfig+0x348>
 800314e:	4b70      	ldr	r3, [pc, #448]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003156:	4a6e      	ldr	r2, [pc, #440]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800315c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800315e:	e075      	b.n	800324c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003160:	4b6b      	ldr	r3, [pc, #428]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	069b      	lsls	r3, r3, #26
 800316e:	4968      	ldr	r1, [pc, #416]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003174:	e06a      	b.n	800324c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003176:	4b66      	ldr	r3, [pc, #408]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	061b      	lsls	r3, r3, #24
 8003184:	4962      	ldr	r1, [pc, #392]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003186:	4313      	orrs	r3, r2
 8003188:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800318a:	e05f      	b.n	800324c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d042      	beq.n	800321a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003194:	4b5e      	ldr	r3, [pc, #376]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5d      	ldr	r2, [pc, #372]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 800319a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fbae 	bl	8001900 <HAL_GetTick>
 80031a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031a8:	f7fe fbaa 	bl	8001900 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e280      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031ba:	4b55      	ldr	r3, [pc, #340]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031c6:	f7fe fba7 	bl	8001918 <HAL_GetREVID>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d817      	bhi.n	8003204 <HAL_RCC_OscConfig+0x3ec>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d108      	bne.n	80031ee <HAL_RCC_OscConfig+0x3d6>
 80031dc:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80031e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ea:	6053      	str	r3, [r2, #4]
 80031ec:	e02e      	b.n	800324c <HAL_RCC_OscConfig+0x434>
 80031ee:	4b48      	ldr	r3, [pc, #288]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	069b      	lsls	r3, r3, #26
 80031fc:	4944      	ldr	r1, [pc, #272]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
 8003202:	e023      	b.n	800324c <HAL_RCC_OscConfig+0x434>
 8003204:	4b42      	ldr	r3, [pc, #264]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	493f      	ldr	r1, [pc, #252]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003214:	4313      	orrs	r3, r2
 8003216:	60cb      	str	r3, [r1, #12]
 8003218:	e018      	b.n	800324c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a3c      	ldr	r2, [pc, #240]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe fb6b 	bl	8001900 <HAL_GetTick>
 800322a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800322e:	f7fe fb67 	bl	8001900 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e23d      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003240:	4b33      	ldr	r3, [pc, #204]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d036      	beq.n	80032c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d019      	beq.n	8003294 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003264:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe fb48 	bl	8001900 <HAL_GetTick>
 8003270:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003274:	f7fe fb44 	bl	8001900 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e21a      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x45c>
 8003292:	e018      	b.n	80032c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003294:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003298:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe fb2e 	bl	8001900 <HAL_GetTick>
 80032a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a8:	f7fe fb2a 	bl	8001900 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e200      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80032bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d039      	beq.n	8003346 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01c      	beq.n	8003314 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 80032e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032e6:	f7fe fb0b 	bl	8001900 <HAL_GetTick>
 80032ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ee:	f7fe fb07 	bl	8001900 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e1dd      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCC_OscConfig+0x4f8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x4d6>
 800330c:	e01b      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
 800330e:	bf00      	nop
 8003310:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003314:	4b9b      	ldr	r3, [pc, #620]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a9a      	ldr	r2, [pc, #616]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800331a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800331e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003320:	f7fe faee 	bl	8001900 <HAL_GetTick>
 8003324:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003328:	f7fe faea 	bl	8001900 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1c0      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800333a:	4b92      	ldr	r3, [pc, #584]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8081 	beq.w	8003456 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003354:	4b8c      	ldr	r3, [pc, #560]	; (8003588 <HAL_RCC_OscConfig+0x770>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a8b      	ldr	r2, [pc, #556]	; (8003588 <HAL_RCC_OscConfig+0x770>)
 800335a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003360:	f7fe face 	bl	8001900 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003368:	f7fe faca 	bl	8001900 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1a0      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800337a:	4b83      	ldr	r3, [pc, #524]	; (8003588 <HAL_RCC_OscConfig+0x770>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x584>
 800338e:	4b7d      	ldr	r3, [pc, #500]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a7c      	ldr	r2, [pc, #496]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	e02d      	b.n	80033f8 <HAL_RCC_OscConfig+0x5e0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10c      	bne.n	80033be <HAL_RCC_OscConfig+0x5a6>
 80033a4:	4b77      	ldr	r3, [pc, #476]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a76      	ldr	r2, [pc, #472]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	4b74      	ldr	r3, [pc, #464]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a73      	ldr	r2, [pc, #460]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033b6:	f023 0304 	bic.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	e01c      	b.n	80033f8 <HAL_RCC_OscConfig+0x5e0>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x5c8>
 80033c6:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a6e      	ldr	r2, [pc, #440]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
 80033d2:	4b6c      	ldr	r3, [pc, #432]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a6b      	ldr	r2, [pc, #428]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0x5e0>
 80033e0:	4b68      	ldr	r3, [pc, #416]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a67      	ldr	r2, [pc, #412]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	4b65      	ldr	r3, [pc, #404]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a64      	ldr	r2, [pc, #400]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80033f2:	f023 0304 	bic.w	r3, r3, #4
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe fa7e 	bl	8001900 <HAL_GetTick>
 8003404:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fe fa7a 	bl	8001900 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e14e      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800341e:	4b59      	ldr	r3, [pc, #356]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ee      	beq.n	8003408 <HAL_RCC_OscConfig+0x5f0>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe fa68 	bl	8001900 <HAL_GetTick>
 8003430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003432:	e00a      	b.n	800344a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7fe fa64 	bl	8001900 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e138      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800344a:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1ee      	bne.n	8003434 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 812d 	beq.w	80036ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003460:	4b48      	ldr	r3, [pc, #288]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003468:	2b18      	cmp	r3, #24
 800346a:	f000 80bd 	beq.w	80035e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2b02      	cmp	r3, #2
 8003474:	f040 809e 	bne.w	80035b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b42      	ldr	r3, [pc, #264]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a41      	ldr	r2, [pc, #260]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe fa3c 	bl	8001900 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fa38 	bl	8001900 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e10e      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80034ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_RCC_OscConfig+0x774>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	430a      	orrs	r2, r1
 80034be:	4931      	ldr	r1, [pc, #196]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	628b      	str	r3, [r1, #40]	; 0x28
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	3b01      	subs	r3, #1
 80034ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	3b01      	subs	r3, #1
 80034d4:	025b      	lsls	r3, r3, #9
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	3b01      	subs	r3, #1
 80034e0:	041b      	lsls	r3, r3, #16
 80034e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ec:	3b01      	subs	r3, #1
 80034ee:	061b      	lsls	r3, r3, #24
 80034f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034f4:	4923      	ldr	r1, [pc, #140]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	4a21      	ldr	r2, [pc, #132]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350a:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800350c:	4013      	ands	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003512:	00d2      	lsls	r2, r2, #3
 8003514:	491b      	ldr	r1, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	f023 020c 	bic.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4917      	ldr	r1, [pc, #92]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003528:	4313      	orrs	r3, r2
 800352a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800352c:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	f023 0202 	bic.w	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	4912      	ldr	r1, [pc, #72]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	4a0d      	ldr	r2, [pc, #52]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	4a07      	ldr	r2, [pc, #28]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_RCC_OscConfig+0x76c>)
 8003574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fe f9c1 	bl	8001900 <HAL_GetTick>
 800357e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003580:	e011      	b.n	80035a6 <HAL_RCC_OscConfig+0x78e>
 8003582:	bf00      	nop
 8003584:	58024400 	.word	0x58024400
 8003588:	58024800 	.word	0x58024800
 800358c:	fffffc0c 	.word	0xfffffc0c
 8003590:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fe f9b4 	bl	8001900 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e08a      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x77c>
 80035b2:	e082      	b.n	80036ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a42      	ldr	r2, [pc, #264]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe f99e 	bl	8001900 <HAL_GetTick>
 80035c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe f99a 	bl	8001900 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e070      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035da:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x7b0>
 80035e6:	e068      	b.n	80036ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035e8:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035ee:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d031      	beq.n	8003660 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0203 	and.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d12a      	bne.n	8003660 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d122      	bne.n	8003660 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d11a      	bne.n	8003660 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0a5b      	lsrs	r3, r3, #9
 800362e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d111      	bne.n	8003660 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	0c1b      	lsrs	r3, r3, #16
 8003640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d108      	bne.n	8003660 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	0e1b      	lsrs	r3, r3, #24
 8003652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e02b      	b.n	80036bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 8003666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003668:	08db      	lsrs	r3, r3, #3
 800366a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800366e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	429a      	cmp	r2, r3
 8003678:	d01f      	beq.n	80036ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	4a11      	ldr	r2, [pc, #68]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003686:	f7fe f93b 	bl	8001900 <HAL_GetTick>
 800368a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800368c:	bf00      	nop
 800368e:	f7fe f937 	bl	8001900 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	4293      	cmp	r3, r2
 8003698:	d0f9      	beq.n	800368e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 800369c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_RCC_OscConfig+0x8b0>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036a6:	00d2      	lsls	r2, r2, #3
 80036a8:	4906      	ldr	r1, [pc, #24]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_RCC_OscConfig+0x8ac>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3730      	adds	r7, #48	; 0x30
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	58024400 	.word	0x58024400
 80036c8:	ffff0007 	.word	0xffff0007

080036cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e19c      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b8a      	ldr	r3, [pc, #552]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b87      	ldr	r3, [pc, #540]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 020f 	bic.w	r2, r3, #15
 80036f6:	4985      	ldr	r1, [pc, #532]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b83      	ldr	r3, [pc, #524]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e184      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	4b7b      	ldr	r3, [pc, #492]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003728:	429a      	cmp	r2, r3
 800372a:	d908      	bls.n	800373e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800372c:	4b78      	ldr	r3, [pc, #480]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	4975      	ldr	r1, [pc, #468]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800373a:	4313      	orrs	r3, r2
 800373c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	4b70      	ldr	r3, [pc, #448]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003756:	429a      	cmp	r2, r3
 8003758:	d908      	bls.n	800376c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800375a:	4b6d      	ldr	r3, [pc, #436]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	496a      	ldr	r1, [pc, #424]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003768:	4313      	orrs	r3, r2
 800376a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	4b64      	ldr	r3, [pc, #400]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003784:	429a      	cmp	r2, r3
 8003786:	d908      	bls.n	800379a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003788:	4b61      	ldr	r3, [pc, #388]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	495e      	ldr	r1, [pc, #376]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003796:	4313      	orrs	r3, r2
 8003798:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	4b59      	ldr	r3, [pc, #356]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d908      	bls.n	80037c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037b6:	4b56      	ldr	r3, [pc, #344]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4953      	ldr	r1, [pc, #332]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d010      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	4b4d      	ldr	r3, [pc, #308]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d908      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e4:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f023 020f 	bic.w	r2, r3, #15
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4947      	ldr	r1, [pc, #284]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d055      	beq.n	80038ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003802:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4940      	ldr	r1, [pc, #256]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003810:	4313      	orrs	r3, r2
 8003812:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d107      	bne.n	800382c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800381c:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d121      	bne.n	800386c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0f6      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d107      	bne.n	8003844 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d115      	bne.n	800386c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0ea      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800384c:	4b30      	ldr	r3, [pc, #192]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0de      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800385c:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0d6      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f023 0207 	bic.w	r2, r3, #7
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4925      	ldr	r1, [pc, #148]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800387a:	4313      	orrs	r3, r2
 800387c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387e:	f7fe f83f 	bl	8001900 <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003884:	e00a      	b.n	800389c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003886:	f7fe f83b 	bl	8001900 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	; 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0be      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389c:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d1eb      	bne.n	8003886 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d010      	beq.n	80038dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d208      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f023 020f 	bic.w	r2, r3, #15
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	490e      	ldr	r1, [pc, #56]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d214      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	4906      	ldr	r1, [pc, #24]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e086      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
 800390c:	52002000 	.word	0x52002000
 8003910:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d010      	beq.n	8003942 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800392c:	429a      	cmp	r2, r3
 800392e:	d208      	bcs.n	8003942 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003930:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	4939      	ldr	r1, [pc, #228]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 800393e:	4313      	orrs	r3, r2
 8003940:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d010      	beq.n	8003970 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800395a:	429a      	cmp	r2, r3
 800395c:	d208      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	492e      	ldr	r1, [pc, #184]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003988:	429a      	cmp	r2, r3
 800398a:	d208      	bcs.n	800399e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800398c:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	4922      	ldr	r1, [pc, #136]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 800399a:	4313      	orrs	r3, r2
 800399c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d208      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039ba:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4917      	ldr	r1, [pc, #92]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039cc:	f000 f834 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	4912      	ldr	r1, [pc, #72]	; (8003a28 <HAL_RCC_ClockConfig+0x35c>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <HAL_RCC_ClockConfig+0x35c>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <HAL_RCC_ClockConfig+0x360>)
 8003a02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x364>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x368>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd fd48 	bl	80014a4 <HAL_InitTick>
 8003a14:	4603      	mov	r3, r0
 8003a16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	58024400 	.word	0x58024400
 8003a28:	0800d3b0 	.word	0x0800d3b0
 8003a2c:	24000004 	.word	0x24000004
 8003a30:	24000000 	.word	0x24000000
 8003a34:	2400000c 	.word	0x2400000c

08003a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3e:	4bb3      	ldr	r3, [pc, #716]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a46:	2b18      	cmp	r3, #24
 8003a48:	f200 8155 	bhi.w	8003cf6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003ab9 	.word	0x08003ab9
 8003a58:	08003cf7 	.word	0x08003cf7
 8003a5c:	08003cf7 	.word	0x08003cf7
 8003a60:	08003cf7 	.word	0x08003cf7
 8003a64:	08003cf7 	.word	0x08003cf7
 8003a68:	08003cf7 	.word	0x08003cf7
 8003a6c:	08003cf7 	.word	0x08003cf7
 8003a70:	08003cf7 	.word	0x08003cf7
 8003a74:	08003adf 	.word	0x08003adf
 8003a78:	08003cf7 	.word	0x08003cf7
 8003a7c:	08003cf7 	.word	0x08003cf7
 8003a80:	08003cf7 	.word	0x08003cf7
 8003a84:	08003cf7 	.word	0x08003cf7
 8003a88:	08003cf7 	.word	0x08003cf7
 8003a8c:	08003cf7 	.word	0x08003cf7
 8003a90:	08003cf7 	.word	0x08003cf7
 8003a94:	08003ae5 	.word	0x08003ae5
 8003a98:	08003cf7 	.word	0x08003cf7
 8003a9c:	08003cf7 	.word	0x08003cf7
 8003aa0:	08003cf7 	.word	0x08003cf7
 8003aa4:	08003cf7 	.word	0x08003cf7
 8003aa8:	08003cf7 	.word	0x08003cf7
 8003aac:	08003cf7 	.word	0x08003cf7
 8003ab0:	08003cf7 	.word	0x08003cf7
 8003ab4:	08003aeb 	.word	0x08003aeb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ab8:	4b94      	ldr	r3, [pc, #592]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ac4:	4b91      	ldr	r3, [pc, #580]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	4a90      	ldr	r2, [pc, #576]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ad6:	e111      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ad8:	4b8d      	ldr	r3, [pc, #564]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ada:	61bb      	str	r3, [r7, #24]
      break;
 8003adc:	e10e      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ade:	4b8d      	ldr	r3, [pc, #564]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ae0:	61bb      	str	r3, [r7, #24]
      break;
 8003ae2:	e10b      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ae4:	4b8c      	ldr	r3, [pc, #560]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ae6:	61bb      	str	r3, [r7, #24]
      break;
 8003ae8:	e108      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003aea:	4b88      	ldr	r3, [pc, #544]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003af4:	4b85      	ldr	r3, [pc, #532]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003afe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b00:	4b82      	ldr	r3, [pc, #520]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b0a:	4b80      	ldr	r3, [pc, #512]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	08db      	lsrs	r3, r3, #3
 8003b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80e1 	beq.w	8003cf0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	f000 8083 	beq.w	8003c3c <HAL_RCC_GetSysClockFreq+0x204>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	f200 80a1 	bhi.w	8003c80 <HAL_RCC_GetSysClockFreq+0x248>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0x114>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d056      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b4a:	e099      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b4c:	4b6f      	ldr	r3, [pc, #444]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02d      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b58:	4b6c      	ldr	r3, [pc, #432]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	08db      	lsrs	r3, r3, #3
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	4a6b      	ldr	r2, [pc, #428]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
 8003b68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b82:	4b62      	ldr	r3, [pc, #392]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b96:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003bb2:	e087      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc6:	4b51      	ldr	r3, [pc, #324]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bda:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bf6:	e065      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0a:	4b40      	ldr	r3, [pc, #256]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c3a:	e043      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4e:	4b2f      	ldr	r3, [pc, #188]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c7e:	e021      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ca6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	0a5b      	lsrs	r3, r3, #9
 8003cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cce:	3301      	adds	r3, #1
 8003cd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce8:	ee17 3a90 	vmov	r3, s15
 8003cec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
      break;
 8003cf4:	e002      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cf8:	61bb      	str	r3, [r7, #24]
      break;
 8003cfa:	bf00      	nop
  }

  return sysclockfreq;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3724      	adds	r7, #36	; 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	03d09000 	.word	0x03d09000
 8003d14:	003d0900 	.word	0x003d0900
 8003d18:	007a1200 	.word	0x007a1200
 8003d1c:	46000000 	.word	0x46000000
 8003d20:	4c742400 	.word	0x4c742400
 8003d24:	4a742400 	.word	0x4a742400
 8003d28:	4af42400 	.word	0x4af42400

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d32:	f7ff fe81 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	490f      	ldr	r1, [pc, #60]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d5a:	5cd3      	ldrb	r3, [r2, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	4a07      	ldr	r2, [pc, #28]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	0800d3b0 	.word	0x0800d3b0
 8003d84:	24000004 	.word	0x24000004
 8003d88:	24000000 	.word	0x24000000

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d90:	f7ff ffcc 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4904      	ldr	r1, [pc, #16]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	58024400 	.word	0x58024400
 8003db4:	0800d3b0 	.word	0x0800d3b0

08003db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003dbc:	f7ff ffb6 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4904      	ldr	r1, [pc, #16]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	0800d3b0 	.word	0x0800d3b0

08003de4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	223f      	movs	r2, #63	; 0x3f
 8003df2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <HAL_RCC_GetClockConfig+0x7c>)
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0207 	and.w	r2, r3, #7
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003e00:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <HAL_RCC_GetClockConfig+0x7c>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <HAL_RCC_GetClockConfig+0x7c>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 020f 	and.w	r2, r3, #15
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003e18:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <HAL_RCC_GetClockConfig+0x7c>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <HAL_RCC_GetClockConfig+0x7c>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_GetClockConfig+0x7c>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_RCC_GetClockConfig+0x7c>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_RCC_GetClockConfig+0x80>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 020f 	and.w	r2, r3, #15
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	601a      	str	r2, [r3, #0]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	58024400 	.word	0x58024400
 8003e64:	52002000 	.word	0x52002000

08003e68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e6c:	b0ca      	sub	sp, #296	; 0x128
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e88:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003e8c:	2500      	movs	r5, #0
 8003e8e:	ea54 0305 	orrs.w	r3, r4, r5
 8003e92:	d049      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e9e:	d02f      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ea0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ea4:	d828      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eaa:	d01a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eb0:	d822      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eba:	d007      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ebc:	e01c      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebe:	4bb8      	ldr	r3, [pc, #736]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4ab7      	ldr	r2, [pc, #732]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003eca:	e01a      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 fc8f 	bl	80057f8 <RCCEx_PLL2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ee0:	e00f      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee6:	3328      	adds	r3, #40	; 0x28
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 fd36 	bl	800595c <RCCEx_PLL3_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ef6:	e004      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f0a:	4ba5      	ldr	r3, [pc, #660]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f18:	4aa1      	ldr	r2, [pc, #644]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	6513      	str	r3, [r2, #80]	; 0x50
 8003f1e:	e003      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003f34:	f04f 0900 	mov.w	r9, #0
 8003f38:	ea58 0309 	orrs.w	r3, r8, r9
 8003f3c:	d047      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d82a      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f65 	.word	0x08003f65
 8003f54:	08003f73 	.word	0x08003f73
 8003f58:	08003f89 	.word	0x08003f89
 8003f5c:	08003fa7 	.word	0x08003fa7
 8003f60:	08003fa7 	.word	0x08003fa7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f64:	4b8e      	ldr	r3, [pc, #568]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	4a8d      	ldr	r2, [pc, #564]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f70:	e01a      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f76:	3308      	adds	r3, #8
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f001 fc3c 	bl	80057f8 <RCCEx_PLL2_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f86:	e00f      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8c:	3328      	adds	r3, #40	; 0x28
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 fce3 	bl	800595c <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f9c:	e004      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb0:	4b7b      	ldr	r3, [pc, #492]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb4:	f023 0107 	bic.w	r1, r3, #7
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	4a78      	ldr	r2, [pc, #480]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6513      	str	r3, [r2, #80]	; 0x50
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003fda:	f04f 0b00 	mov.w	fp, #0
 8003fde:	ea5a 030b 	orrs.w	r3, sl, fp
 8003fe2:	d04c      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fee:	d030      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff4:	d829      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ff8:	d02d      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8003ffc:	d825      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d018      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004002:	2b80      	cmp	r3, #128	; 0x80
 8004004:	d821      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d007      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800400e:	e01c      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004010:	4b63      	ldr	r3, [pc, #396]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4a62      	ldr	r2, [pc, #392]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800401c:	e01c      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	3308      	adds	r3, #8
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f001 fbe6 	bl	80057f8 <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004032:	e011      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004038:	3328      	adds	r3, #40	; 0x28
 800403a:	2100      	movs	r1, #0
 800403c:	4618      	mov	r0, r3
 800403e:	f001 fc8d 	bl	800595c <RCCEx_PLL3_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004050:	e002      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004060:	4b4f      	ldr	r3, [pc, #316]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004064:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	4a4c      	ldr	r2, [pc, #304]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004070:	430b      	orrs	r3, r1
 8004072:	6513      	str	r3, [r2, #80]	; 0x50
 8004074:	e003      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800407a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800408a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004094:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004098:	460b      	mov	r3, r1
 800409a:	4313      	orrs	r3, r2
 800409c:	d053      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040aa:	d035      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80040ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b0:	d82e      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040b6:	d031      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80040b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040bc:	d828      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d01a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80040c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c8:	d822      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80040ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d2:	d007      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80040d4:	e01c      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d6:	4b32      	ldr	r3, [pc, #200]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	4a31      	ldr	r2, [pc, #196]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040e2:	e01c      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e8:	3308      	adds	r3, #8
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 fb83 	bl	80057f8 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040f8:	e011      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fe:	3328      	adds	r3, #40	; 0x28
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f001 fc2a 	bl	800595c <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800410e:	e006      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004116:	e002      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004118:	bf00      	nop
 800411a:	e000      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800411c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004126:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800412e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004132:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004136:	4a1a      	ldr	r2, [pc, #104]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004138:	430b      	orrs	r3, r1
 800413a:	6593      	str	r3, [r2, #88]	; 0x58
 800413c:	e003      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004142:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004152:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800415c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004160:	460b      	mov	r3, r1
 8004162:	4313      	orrs	r3, r2
 8004164:	d056      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800416e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004172:	d038      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004178:	d831      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800417a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800417e:	d034      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004180:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004184:	d82b      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800418a:	d01d      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800418c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004190:	d825      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004196:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800419c:	e01f      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800419e:	bf00      	nop
 80041a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a4:	4ba2      	ldr	r3, [pc, #648]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	4aa1      	ldr	r2, [pc, #644]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041b0:	e01c      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b6:	3308      	adds	r3, #8
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 fb1c 	bl	80057f8 <RCCEx_PLL2_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80041c6:	e011      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	3328      	adds	r3, #40	; 0x28
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 fbc3 	bl	800595c <RCCEx_PLL3_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80041ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80041f4:	4b8e      	ldr	r3, [pc, #568]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004200:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004204:	4a8a      	ldr	r2, [pc, #552]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004206:	430b      	orrs	r3, r1
 8004208:	6593      	str	r3, [r2, #88]	; 0x58
 800420a:	e003      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004220:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800422a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800422e:	460b      	mov	r3, r1
 8004230:	4313      	orrs	r3, r2
 8004232:	d03a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423a:	2b30      	cmp	r3, #48	; 0x30
 800423c:	d01f      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800423e:	2b30      	cmp	r3, #48	; 0x30
 8004240:	d819      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004242:	2b20      	cmp	r3, #32
 8004244:	d00c      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004246:	2b20      	cmp	r3, #32
 8004248:	d815      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d019      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800424e:	2b10      	cmp	r3, #16
 8004250:	d111      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004252:	4b77      	ldr	r3, [pc, #476]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	4a76      	ldr	r2, [pc, #472]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800425e:	e011      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004264:	3308      	adds	r3, #8
 8004266:	2102      	movs	r1, #2
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fac5 	bl	80057f8 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004274:	e006      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800427c:	e002      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800428c:	4b68      	ldr	r3, [pc, #416]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800428e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004290:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	4a65      	ldr	r2, [pc, #404]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429c:	430b      	orrs	r3, r1
 800429e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a0:	e003      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80042b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80042ba:	2300      	movs	r3, #0
 80042bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80042c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4313      	orrs	r3, r2
 80042c8:	d051      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d4:	d035      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80042d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042da:	d82e      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80042dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042e0:	d031      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80042e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042e6:	d828      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80042e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ec:	d01a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80042ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f2:	d822      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fc:	d007      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80042fe:	e01c      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004300:	4b4b      	ldr	r3, [pc, #300]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a4a      	ldr	r2, [pc, #296]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800430c:	e01c      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004312:	3308      	adds	r3, #8
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f001 fa6e 	bl	80057f8 <RCCEx_PLL2_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004328:	3328      	adds	r3, #40	; 0x28
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f001 fb15 	bl	800595c <RCCEx_PLL3_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004338:	e006      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004340:	e002      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004350:	4b37      	ldr	r3, [pc, #220]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435e:	4a34      	ldr	r2, [pc, #208]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004360:	430b      	orrs	r3, r1
 8004362:	6513      	str	r3, [r2, #80]	; 0x50
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800436a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800437a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004384:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004388:	460b      	mov	r3, r1
 800438a:	4313      	orrs	r3, r2
 800438c:	d056      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004398:	d033      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800439a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800439e:	d82c      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043a4:	d02f      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80043a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043aa:	d826      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043b0:	d02b      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80043b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043b6:	d820      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043bc:	d012      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80043be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c2:	d81a      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d022      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d115      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d2:	3308      	adds	r3, #8
 80043d4:	2101      	movs	r1, #1
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 fa0e 	bl	80057f8 <RCCEx_PLL2_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80043e2:	e015      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e8:	3328      	adds	r3, #40	; 0x28
 80043ea:	2101      	movs	r1, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 fab5 	bl	800595c <RCCEx_PLL3_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80043f8:	e00a      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004400:	e006      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004402:	bf00      	nop
 8004404:	e004      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004406:	bf00      	nop
 8004408:	e002      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800440e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10d      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004426:	4a02      	ldr	r2, [pc, #8]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004428:	430b      	orrs	r3, r1
 800442a:	6513      	str	r3, [r2, #80]	; 0x50
 800442c:	e006      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004438:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004452:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d055      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004460:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004468:	d033      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800446a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800446e:	d82c      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d02f      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447a:	d826      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800447c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004480:	d02b      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004482:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004486:	d820      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448c:	d012      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800448e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004492:	d81a      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d022      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004498:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800449c:	d115      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a2:	3308      	adds	r3, #8
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 f9a6 	bl	80057f8 <RCCEx_PLL2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044b2:	e015      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b8:	3328      	adds	r3, #40	; 0x28
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 fa4d 	bl	800595c <RCCEx_PLL3_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044c8:	e00a      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044d0:	e006      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044d2:	bf00      	nop
 80044d4:	e004      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044e8:	4ba3      	ldr	r3, [pc, #652]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044f8:	4a9f      	ldr	r2, [pc, #636]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044fa:	430b      	orrs	r3, r1
 80044fc:	6593      	str	r3, [r2, #88]	; 0x58
 80044fe:	e003      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004504:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800451e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d037      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004532:	d00e      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004538:	d816      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d018      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800453e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004542:	d111      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004544:	4b8c      	ldr	r3, [pc, #560]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	4a8b      	ldr	r2, [pc, #556]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800454a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004550:	e00f      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004556:	3308      	adds	r3, #8
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f001 f94c 	bl	80057f8 <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004566:	e004      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10a      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800457a:	4b7f      	ldr	r3, [pc, #508]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800457c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a7b      	ldr	r2, [pc, #492]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800458a:	430b      	orrs	r3, r1
 800458c:	6513      	str	r3, [r2, #80]	; 0x50
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004594:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80045a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	d039      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d81c      	bhi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	08004605 	.word	0x08004605
 80045cc:	080045d9 	.word	0x080045d9
 80045d0:	080045e7 	.word	0x080045e7
 80045d4:	08004605 	.word	0x08004605
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4b67      	ldr	r3, [pc, #412]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	4a66      	ldr	r2, [pc, #408]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80045e4:	e00f      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	3308      	adds	r3, #8
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 f902 	bl	80057f8 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80045fa:	e004      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004602:	e000      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800460e:	4b5a      	ldr	r3, [pc, #360]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004612:	f023 0103 	bic.w	r1, r3, #3
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	4a56      	ldr	r2, [pc, #344]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800461e:	430b      	orrs	r3, r1
 8004620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004622:	e003      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004628:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004642:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004646:	460b      	mov	r3, r1
 8004648:	4313      	orrs	r3, r2
 800464a:	f000 809f 	beq.w	800478c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464e:	4b4b      	ldr	r3, [pc, #300]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a4a      	ldr	r2, [pc, #296]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800465a:	f7fd f951 	bl	8001900 <HAL_GetTick>
 800465e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004662:	e00b      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004664:	f7fd f94c 	bl	8001900 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b64      	cmp	r3, #100	; 0x64
 8004672:	d903      	bls.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800467a:	e005      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800467c:	4b3f      	ldr	r3, [pc, #252]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ed      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004688:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468c:	2b00      	cmp	r3, #0
 800468e:	d179      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004690:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004692:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800469c:	4053      	eors	r3, r2
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d015      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a6:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b2:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a30      	ldr	r2, [pc, #192]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046be:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a2d      	ldr	r2, [pc, #180]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046ca:	4a2b      	ldr	r2, [pc, #172]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046de:	d118      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fd f90e 	bl	8001900 <HAL_GetTick>
 80046e4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e8:	e00d      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fd f909 	bl	8001900 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046f4:	1ad2      	subs	r2, r2, r3
 80046f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d903      	bls.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004704:	e005      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004706:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0eb      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004716:	2b00      	cmp	r3, #0
 8004718:	d129      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800472a:	d10e      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800473c:	091a      	lsrs	r2, r3, #4
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004740:	4013      	ands	r3, r2
 8004742:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004744:	430b      	orrs	r3, r1
 8004746:	6113      	str	r3, [r2, #16]
 8004748:	e005      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004750:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004754:	6113      	str	r3, [r2, #16]
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004758:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004766:	4a04      	ldr	r2, [pc, #16]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004768:	430b      	orrs	r3, r1
 800476a:	6713      	str	r3, [r2, #112]	; 0x70
 800476c:	e00e      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004772:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004776:	e009      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004778:	58024400 	.word	0x58024400
 800477c:	58024800 	.word	0x58024800
 8004780:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004788:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f002 0301 	and.w	r3, r2, #1
 8004798:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800479c:	2300      	movs	r3, #0
 800479e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f000 8089 	beq.w	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b4:	2b28      	cmp	r3, #40	; 0x28
 80047b6:	d86b      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80047b8:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047be:	bf00      	nop
 80047c0:	08004899 	.word	0x08004899
 80047c4:	08004891 	.word	0x08004891
 80047c8:	08004891 	.word	0x08004891
 80047cc:	08004891 	.word	0x08004891
 80047d0:	08004891 	.word	0x08004891
 80047d4:	08004891 	.word	0x08004891
 80047d8:	08004891 	.word	0x08004891
 80047dc:	08004891 	.word	0x08004891
 80047e0:	08004865 	.word	0x08004865
 80047e4:	08004891 	.word	0x08004891
 80047e8:	08004891 	.word	0x08004891
 80047ec:	08004891 	.word	0x08004891
 80047f0:	08004891 	.word	0x08004891
 80047f4:	08004891 	.word	0x08004891
 80047f8:	08004891 	.word	0x08004891
 80047fc:	08004891 	.word	0x08004891
 8004800:	0800487b 	.word	0x0800487b
 8004804:	08004891 	.word	0x08004891
 8004808:	08004891 	.word	0x08004891
 800480c:	08004891 	.word	0x08004891
 8004810:	08004891 	.word	0x08004891
 8004814:	08004891 	.word	0x08004891
 8004818:	08004891 	.word	0x08004891
 800481c:	08004891 	.word	0x08004891
 8004820:	08004899 	.word	0x08004899
 8004824:	08004891 	.word	0x08004891
 8004828:	08004891 	.word	0x08004891
 800482c:	08004891 	.word	0x08004891
 8004830:	08004891 	.word	0x08004891
 8004834:	08004891 	.word	0x08004891
 8004838:	08004891 	.word	0x08004891
 800483c:	08004891 	.word	0x08004891
 8004840:	08004899 	.word	0x08004899
 8004844:	08004891 	.word	0x08004891
 8004848:	08004891 	.word	0x08004891
 800484c:	08004891 	.word	0x08004891
 8004850:	08004891 	.word	0x08004891
 8004854:	08004891 	.word	0x08004891
 8004858:	08004891 	.word	0x08004891
 800485c:	08004891 	.word	0x08004891
 8004860:	08004899 	.word	0x08004899
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004868:	3308      	adds	r3, #8
 800486a:	2101      	movs	r1, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f000 ffc3 	bl	80057f8 <RCCEx_PLL2_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004878:	e00f      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487e:	3328      	adds	r3, #40	; 0x28
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f001 f86a 	bl	800595c <RCCEx_PLL3_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800488e:	e004      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004896:	e000      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048a2:	4bbf      	ldr	r3, [pc, #764]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b0:	4abb      	ldr	r2, [pc, #748]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	6553      	str	r3, [r2, #84]	; 0x54
 80048b6:	e003      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f002 0302 	and.w	r3, r2, #2
 80048cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80048da:	460b      	mov	r3, r1
 80048dc:	4313      	orrs	r3, r2
 80048de:	d041      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d824      	bhi.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	0800493d 	.word	0x0800493d
 80048f4:	08004909 	.word	0x08004909
 80048f8:	0800491f 	.word	0x0800491f
 80048fc:	0800493d 	.word	0x0800493d
 8004900:	0800493d 	.word	0x0800493d
 8004904:	0800493d 	.word	0x0800493d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490c:	3308      	adds	r3, #8
 800490e:	2101      	movs	r1, #1
 8004910:	4618      	mov	r0, r3
 8004912:	f000 ff71 	bl	80057f8 <RCCEx_PLL2_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800491c:	e00f      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004922:	3328      	adds	r3, #40	; 0x28
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f001 f818 	bl	800595c <RCCEx_PLL3_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004932:	e004      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800493a:	e000      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800493c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004946:	4b96      	ldr	r3, [pc, #600]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494a:	f023 0107 	bic.w	r1, r3, #7
 800494e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004954:	4a92      	ldr	r2, [pc, #584]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004956:	430b      	orrs	r3, r1
 8004958:	6553      	str	r3, [r2, #84]	; 0x54
 800495a:	e003      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004960:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f002 0304 	and.w	r3, r2, #4
 8004970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004974:	2300      	movs	r3, #0
 8004976:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800497a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d044      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800498c:	2b05      	cmp	r3, #5
 800498e:	d825      	bhi.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049e5 	.word	0x080049e5
 800499c:	080049b1 	.word	0x080049b1
 80049a0:	080049c7 	.word	0x080049c7
 80049a4:	080049e5 	.word	0x080049e5
 80049a8:	080049e5 	.word	0x080049e5
 80049ac:	080049e5 	.word	0x080049e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b4:	3308      	adds	r3, #8
 80049b6:	2101      	movs	r1, #1
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 ff1d 	bl	80057f8 <RCCEx_PLL2_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049c4:	e00f      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ca:	3328      	adds	r3, #40	; 0x28
 80049cc:	2101      	movs	r1, #1
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 ffc4 	bl	800595c <RCCEx_PLL3_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049da:	e004      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049e2:	e000      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80049e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049ee:	4b6c      	ldr	r3, [pc, #432]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	f023 0107 	bic.w	r1, r3, #7
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fe:	4a68      	ldr	r2, [pc, #416]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a00:	430b      	orrs	r3, r1
 8004a02:	6593      	str	r3, [r2, #88]	; 0x58
 8004a04:	e003      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	f002 0320 	and.w	r3, r2, #32
 8004a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	d055      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a3a:	d033      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a40:	d82c      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d02f      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4c:	d826      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a52:	d02b      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004a54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a58:	d820      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5e:	d012      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a64:	d81a      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d022      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a6e:	d115      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a74:	3308      	adds	r3, #8
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 febd 	bl	80057f8 <RCCEx_PLL2_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a84:	e015      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a8a:	3328      	adds	r3, #40	; 0x28
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 ff64 	bl	800595c <RCCEx_PLL3_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aa2:	e006      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004aa4:	bf00      	nop
 8004aa6:	e004      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004aa8:	bf00      	nop
 8004aaa:	e002      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aba:	4b39      	ldr	r3, [pc, #228]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	4a35      	ldr	r2, [pc, #212]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004acc:	430b      	orrs	r3, r1
 8004ace:	6553      	str	r3, [r2, #84]	; 0x54
 8004ad0:	e003      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004af0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4313      	orrs	r3, r2
 8004af8:	d058      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b06:	d033      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004b08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b0c:	d82c      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b12:	d02f      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b18:	d826      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b1e:	d02b      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b24:	d820      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2a:	d012      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b30:	d81a      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d022      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3a:	d115      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b40:	3308      	adds	r3, #8
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fe57 	bl	80057f8 <RCCEx_PLL2_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b50:	e015      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b56:	3328      	adds	r3, #40	; 0x28
 8004b58:	2102      	movs	r1, #2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fefe 	bl	800595c <RCCEx_PLL3_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b66:	e00a      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b6e:	e006      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b70:	bf00      	nop
 8004b72:	e004      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b74:	bf00      	nop
 8004b76:	e002      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10e      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b96:	4a02      	ldr	r2, [pc, #8]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004b9e:	bf00      	nop
 8004ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bc2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	d055      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bd8:	d033      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004bda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bde:	d82c      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be4:	d02f      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bea:	d826      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004bec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bf0:	d02b      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004bf2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bf6:	d820      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bfc:	d012      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c02:	d81a      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d022      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0c:	d115      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c12:	3308      	adds	r3, #8
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fdee 	bl	80057f8 <RCCEx_PLL2_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c22:	e015      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c28:	3328      	adds	r3, #40	; 0x28
 8004c2a:	2102      	movs	r1, #2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fe95 	bl	800595c <RCCEx_PLL3_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c38:	e00a      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c40:	e006      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c58:	4ba1      	ldr	r3, [pc, #644]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c68:	4a9d      	ldr	r2, [pc, #628]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c6e:	e003      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f002 0308 	and.w	r3, r2, #8
 8004c84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004c92:	460b      	mov	r3, r1
 8004c94:	4313      	orrs	r3, r2
 8004c96:	d01e      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004caa:	3328      	adds	r3, #40	; 0x28
 8004cac:	2102      	movs	r1, #2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fe54 	bl	800595c <RCCEx_PLL3_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004cc0:	4b87      	ldr	r3, [pc, #540]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd0:	4a83      	ldr	r2, [pc, #524]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f002 0310 	and.w	r3, r2, #16
 8004ce2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	d01e      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d02:	d10c      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d08:	3328      	adds	r3, #40	; 0x28
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fe25 	bl	800595c <RCCEx_PLL3_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d1e:	4b70      	ldr	r3, [pc, #448]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d2e:	4a6c      	ldr	r2, [pc, #432]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d44:	2300      	movs	r3, #0
 8004d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4313      	orrs	r3, r2
 8004d52:	d03e      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d60:	d022      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d66:	d81b      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d70:	d00b      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004d72:	e015      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d78:	3308      	adds	r3, #8
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fd3b 	bl	80057f8 <RCCEx_PLL2_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d88:	e00f      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8e:	3328      	adds	r3, #40	; 0x28
 8004d90:	2102      	movs	r1, #2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fde2 	bl	800595c <RCCEx_PLL3_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d9e:	e004      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004da6:	e000      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004db2:	4b4b      	ldr	r3, [pc, #300]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004dc2:	4a47      	ldr	r2, [pc, #284]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc8:	e003      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004dde:	67bb      	str	r3, [r7, #120]	; 0x78
 8004de0:	2300      	movs	r3, #0
 8004de2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004de4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004de8:	460b      	mov	r3, r1
 8004dea:	4313      	orrs	r3, r2
 8004dec:	d03b      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dfa:	d01f      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004dfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e00:	d818      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e06:	d003      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e0c:	d007      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004e0e:	e011      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e10:	4b33      	ldr	r3, [pc, #204]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e1c:	e00f      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e22:	3328      	adds	r3, #40	; 0x28
 8004e24:	2101      	movs	r1, #1
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fd98 	bl	800595c <RCCEx_PLL3_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e32:	e004      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e46:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6553      	str	r3, [r2, #84]	; 0x54
 8004e5c:	e003      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004e72:	673b      	str	r3, [r7, #112]	; 0x70
 8004e74:	2300      	movs	r3, #0
 8004e76:	677b      	str	r3, [r7, #116]	; 0x74
 8004e78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	d034      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d007      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004e92:	e011      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	4a11      	ldr	r2, [pc, #68]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ea0:	e00e      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fca4 	bl	80057f8 <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004eb6:	e003      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10d      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ecc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed6:	4a02      	ldr	r2, [pc, #8]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004edc:	e006      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004ede:	bf00      	nop
 8004ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ee8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004ef8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004efa:	2300      	movs	r3, #0
 8004efc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004efe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004f02:	460b      	mov	r3, r1
 8004f04:	4313      	orrs	r3, r2
 8004f06:	d00c      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f0c:	3328      	adds	r3, #40	; 0x28
 8004f0e:	2102      	movs	r1, #2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fd23 	bl	800595c <RCCEx_PLL3_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f30:	2300      	movs	r3, #0
 8004f32:	667b      	str	r3, [r7, #100]	; 0x64
 8004f34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	d038      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4a:	d018      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f50:	d811      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f56:	d014      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f5c:	d80b      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f66:	d106      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f68:	4bc3      	ldr	r3, [pc, #780]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	4ac2      	ldr	r2, [pc, #776]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f7c:	e004      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f7e:	bf00      	nop
 8004f80:	e002      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f82:	bf00      	nop
 8004f84:	e000      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f90:	4bb9      	ldr	r3, [pc, #740]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa0:	4ab5      	ldr	r2, [pc, #724]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	6553      	str	r3, [r2, #84]	; 0x54
 8004fa6:	e003      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	d009      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fcc:	4baa      	ldr	r3, [pc, #680]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fda:	4aa7      	ldr	r2, [pc, #668]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004fec:	653b      	str	r3, [r7, #80]	; 0x50
 8004fee:	2300      	movs	r3, #0
 8004ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ff2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ffc:	4b9e      	ldr	r3, [pc, #632]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005008:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800500c:	4a9a      	ldr	r2, [pc, #616]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800500e:	430b      	orrs	r3, r1
 8005010:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800501e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005020:	2300      	movs	r3, #0
 8005022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005024:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005028:	460b      	mov	r3, r1
 800502a:	4313      	orrs	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800502e:	4b92      	ldr	r3, [pc, #584]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005032:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800503a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503c:	4a8e      	ldr	r2, [pc, #568]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800503e:	430b      	orrs	r3, r1
 8005040:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800504e:	643b      	str	r3, [r7, #64]	; 0x40
 8005050:	2300      	movs	r3, #0
 8005052:	647b      	str	r3, [r7, #68]	; 0x44
 8005054:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005058:	460b      	mov	r3, r1
 800505a:	4313      	orrs	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800505e:	4b86      	ldr	r3, [pc, #536]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	4a85      	ldr	r2, [pc, #532]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005064:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005068:	6113      	str	r3, [r2, #16]
 800506a:	4b83      	ldr	r3, [pc, #524]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800506c:	6919      	ldr	r1, [r3, #16]
 800506e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005072:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005076:	4a80      	ldr	r2, [pc, #512]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005078:	430b      	orrs	r3, r1
 800507a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800507c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005088:	63bb      	str	r3, [r7, #56]	; 0x38
 800508a:	2300      	movs	r3, #0
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800508e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005092:	460b      	mov	r3, r1
 8005094:	4313      	orrs	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005098:	4b77      	ldr	r3, [pc, #476]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80050a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a6:	4a74      	ldr	r2, [pc, #464]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a8:	430b      	orrs	r3, r1
 80050aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
 80050ba:	2300      	movs	r3, #0
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80050c2:	460b      	mov	r3, r1
 80050c4:	4313      	orrs	r3, r2
 80050c6:	d00a      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050c8:	4b6b      	ldr	r3, [pc, #428]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d8:	4a67      	ldr	r2, [pc, #412]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050da:	430b      	orrs	r3, r1
 80050dc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80050de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	2100      	movs	r1, #0
 80050e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80050f4:	460b      	mov	r3, r1
 80050f6:	4313      	orrs	r3, r2
 80050f8:	d011      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fe:	3308      	adds	r3, #8
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fb78 	bl	80057f8 <RCCEx_PLL2_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800510e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800511a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	2100      	movs	r1, #0
 8005128:	6239      	str	r1, [r7, #32]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
 8005130:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005134:	460b      	mov	r3, r1
 8005136:	4313      	orrs	r3, r2
 8005138:	d011      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513e:	3308      	adds	r3, #8
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fb58 	bl	80057f8 <RCCEx_PLL2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800514e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800515a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	2100      	movs	r1, #0
 8005168:	61b9      	str	r1, [r7, #24]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005174:	460b      	mov	r3, r1
 8005176:	4313      	orrs	r3, r2
 8005178:	d011      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517e:	3308      	adds	r3, #8
 8005180:	2102      	movs	r1, #2
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fb38 	bl	80057f8 <RCCEx_PLL2_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800518e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800519a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	2100      	movs	r1, #0
 80051a8:	6139      	str	r1, [r7, #16]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80051b4:	460b      	mov	r3, r1
 80051b6:	4313      	orrs	r3, r2
 80051b8:	d011      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051be:	3328      	adds	r3, #40	; 0x28
 80051c0:	2100      	movs	r1, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fbca 	bl	800595c <RCCEx_PLL3_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80051ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	2100      	movs	r1, #0
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80051f4:	460b      	mov	r3, r1
 80051f6:	4313      	orrs	r3, r2
 80051f8:	d011      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fe:	3328      	adds	r3, #40	; 0x28
 8005200:	2101      	movs	r1, #1
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fbaa 	bl	800595c <RCCEx_PLL3_Config>
 8005208:	4603      	mov	r3, r0
 800520a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800520e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800521a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	2100      	movs	r1, #0
 8005228:	6039      	str	r1, [r7, #0]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005234:	460b      	mov	r3, r1
 8005236:	4313      	orrs	r3, r2
 8005238:	d011      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800523a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523e:	3328      	adds	r3, #40	; 0x28
 8005240:	2102      	movs	r1, #2
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fb8a 	bl	800595c <RCCEx_PLL3_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800524e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800525e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e000      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
}
 800526c:	4618      	mov	r0, r3
 800526e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005272:	46bd      	mov	sp, r7
 8005274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005278:	58024400 	.word	0x58024400

0800527c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005280:	f7fe fd54 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8005284:	4602      	mov	r2, r0
 8005286:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	4904      	ldr	r1, [pc, #16]	; (80052a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005292:	5ccb      	ldrb	r3, [r1, r3]
 8005294:	f003 031f 	and.w	r3, r3, #31
 8005298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800529c:	4618      	mov	r0, r3
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	58024400 	.word	0x58024400
 80052a4:	0800d3b0 	.word	0x0800d3b0

080052a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b089      	sub	sp, #36	; 0x24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052b0:	4ba1      	ldr	r3, [pc, #644]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80052ba:	4b9f      	ldr	r3, [pc, #636]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	0b1b      	lsrs	r3, r3, #12
 80052c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052c6:	4b9c      	ldr	r3, [pc, #624]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80052d2:	4b99      	ldr	r3, [pc, #612]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	08db      	lsrs	r3, r3, #3
 80052d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8111 	beq.w	8005518 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	f000 8083 	beq.w	8005404 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b02      	cmp	r3, #2
 8005302:	f200 80a1 	bhi.w	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d056      	beq.n	80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005312:	e099      	b.n	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005314:	4b88      	ldr	r3, [pc, #544]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b00      	cmp	r3, #0
 800531e:	d02d      	beq.n	800537c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005320:	4b85      	ldr	r3, [pc, #532]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	08db      	lsrs	r3, r3, #3
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	4a84      	ldr	r2, [pc, #528]	; (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
 8005330:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	ee07 3a90 	vmov	s15, r3
 8005338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534a:	4b7b      	ldr	r3, [pc, #492]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535a:	ed97 6a03 	vldr	s12, [r7, #12]
 800535e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005376:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800537a:	e087      	b.n	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b6a      	ldr	r3, [pc, #424]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053be:	e065      	b.n	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	4b59      	ldr	r3, [pc, #356]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005402:	e043      	b.n	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800554c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005416:	4b48      	ldr	r3, [pc, #288]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	ed97 6a03 	vldr	s12, [r7, #12]
 800542a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005446:	e021      	b.n	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545a:	4b37      	ldr	r3, [pc, #220]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546a:	ed97 6a03 	vldr	s12, [r7, #12]
 800546e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800548a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800548c:	4b2a      	ldr	r3, [pc, #168]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	0a5b      	lsrs	r3, r3, #9
 8005492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b2:	ee17 2a90 	vmov	r2, s15
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80054ba:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e0:	ee17 2a90 	vmov	r2, s15
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80054e8:	4b13      	ldr	r3, [pc, #76]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	0e1b      	lsrs	r3, r3, #24
 80054ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005502:	edd7 6a07 	vldr	s13, [r7, #28]
 8005506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800550a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800550e:	ee17 2a90 	vmov	r2, s15
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005516:	e008      	b.n	800552a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	609a      	str	r2, [r3, #8]
}
 800552a:	bf00      	nop
 800552c:	3724      	adds	r7, #36	; 0x24
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	58024400 	.word	0x58024400
 800553c:	03d09000 	.word	0x03d09000
 8005540:	46000000 	.word	0x46000000
 8005544:	4c742400 	.word	0x4c742400
 8005548:	4a742400 	.word	0x4a742400
 800554c:	4af42400 	.word	0x4af42400

08005550 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005558:	4ba1      	ldr	r3, [pc, #644]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005562:	4b9f      	ldr	r3, [pc, #636]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	0d1b      	lsrs	r3, r3, #20
 8005568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800556c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800556e:	4b9c      	ldr	r3, [pc, #624]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800557a:	4b99      	ldr	r3, [pc, #612]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	08db      	lsrs	r3, r3, #3
 8005580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8111 	beq.w	80057c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	f000 8083 	beq.w	80056ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	f200 80a1 	bhi.w	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d056      	beq.n	8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055ba:	e099      	b.n	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055bc:	4b88      	ldr	r3, [pc, #544]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02d      	beq.n	8005624 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055c8:	4b85      	ldr	r3, [pc, #532]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	08db      	lsrs	r3, r3, #3
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	4a84      	ldr	r2, [pc, #528]	; (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80055d4:	fa22 f303 	lsr.w	r3, r2, r3
 80055d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	ee07 3a90 	vmov	s15, r3
 80055e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f2:	4b7b      	ldr	r3, [pc, #492]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005602:	ed97 6a03 	vldr	s12, [r7, #12]
 8005606:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800560a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005622:	e087      	b.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b6a      	ldr	r3, [pc, #424]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a03 	vldr	s12, [r7, #12]
 800564a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005666:	e065      	b.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	4b59      	ldr	r3, [pc, #356]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568a:	ed97 6a03 	vldr	s12, [r7, #12]
 800568e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056aa:	e043      	b.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b48      	ldr	r3, [pc, #288]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ee:	e021      	b.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b37      	ldr	r3, [pc, #220]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a03 	vldr	s12, [r7, #12]
 8005716:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005732:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005734:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	0a5b      	lsrs	r3, r3, #9
 800573a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800574a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800574e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800575a:	ee17 2a90 	vmov	r2, s15
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005762:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005778:	ee37 7a87 	vadd.f32	s14, s15, s14
 800577c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005788:	ee17 2a90 	vmov	r2, s15
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005790:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	0e1b      	lsrs	r3, r3, #24
 8005796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80057ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b6:	ee17 2a90 	vmov	r2, s15
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057be:	e008      	b.n	80057d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	609a      	str	r2, [r3, #8]
}
 80057d2:	bf00      	nop
 80057d4:	3724      	adds	r7, #36	; 0x24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	58024400 	.word	0x58024400
 80057e4:	03d09000 	.word	0x03d09000
 80057e8:	46000000 	.word	0x46000000
 80057ec:	4c742400 	.word	0x4c742400
 80057f0:	4a742400 	.word	0x4a742400
 80057f4:	4af42400 	.word	0x4af42400

080057f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005806:	4b53      	ldr	r3, [pc, #332]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b03      	cmp	r3, #3
 8005810:	d101      	bne.n	8005816 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e099      	b.n	800594a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005816:	4b4f      	ldr	r3, [pc, #316]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a4e      	ldr	r2, [pc, #312]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 800581c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005822:	f7fc f86d 	bl	8001900 <HAL_GetTick>
 8005826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005828:	e008      	b.n	800583c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800582a:	f7fc f869 	bl	8001900 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e086      	b.n	800594a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800583c:	4b45      	ldr	r3, [pc, #276]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005848:	4b42      	ldr	r3, [pc, #264]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	031b      	lsls	r3, r3, #12
 8005856:	493f      	ldr	r1, [pc, #252]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 8005858:	4313      	orrs	r3, r2
 800585a:	628b      	str	r3, [r1, #40]	; 0x28
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	3b01      	subs	r3, #1
 8005862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	3b01      	subs	r3, #1
 800586c:	025b      	lsls	r3, r3, #9
 800586e:	b29b      	uxth	r3, r3
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	3b01      	subs	r3, #1
 8005878:	041b      	lsls	r3, r3, #16
 800587a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	3b01      	subs	r3, #1
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800588c:	4931      	ldr	r1, [pc, #196]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005892:	4b30      	ldr	r3, [pc, #192]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	492d      	ldr	r1, [pc, #180]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058a4:	4b2b      	ldr	r3, [pc, #172]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	f023 0220 	bic.w	r2, r3, #32
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	4928      	ldr	r1, [pc, #160]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058b6:	4b27      	ldr	r3, [pc, #156]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	4a26      	ldr	r2, [pc, #152]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058bc:	f023 0310 	bic.w	r3, r3, #16
 80058c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058c2:	4b24      	ldr	r3, [pc, #144]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c6:	4b24      	ldr	r3, [pc, #144]	; (8005958 <RCCEx_PLL2_Config+0x160>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	69d2      	ldr	r2, [r2, #28]
 80058ce:	00d2      	lsls	r2, r2, #3
 80058d0:	4920      	ldr	r1, [pc, #128]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058d6:	4b1f      	ldr	r3, [pc, #124]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	4a1e      	ldr	r2, [pc, #120]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058dc:	f043 0310 	orr.w	r3, r3, #16
 80058e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058e8:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4a19      	ldr	r2, [pc, #100]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058f4:	e00f      	b.n	8005916 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d106      	bne.n	800590a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058fc:	4b15      	ldr	r3, [pc, #84]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	4a14      	ldr	r2, [pc, #80]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005906:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005908:	e005      	b.n	8005916 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800590a:	4b12      	ldr	r3, [pc, #72]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	4a11      	ldr	r2, [pc, #68]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 8005910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005914:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005916:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a0e      	ldr	r2, [pc, #56]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 800591c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005922:	f7fb ffed 	bl	8001900 <HAL_GetTick>
 8005926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005928:	e008      	b.n	800593c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800592a:	f7fb ffe9 	bl	8001900 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e006      	b.n	800594a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <RCCEx_PLL2_Config+0x15c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	58024400 	.word	0x58024400
 8005958:	ffff0007 	.word	0xffff0007

0800595c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800596a:	4b53      	ldr	r3, [pc, #332]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b03      	cmp	r3, #3
 8005974:	d101      	bne.n	800597a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e099      	b.n	8005aae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800597a:	4b4f      	ldr	r3, [pc, #316]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a4e      	ldr	r2, [pc, #312]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005986:	f7fb ffbb 	bl	8001900 <HAL_GetTick>
 800598a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800598c:	e008      	b.n	80059a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800598e:	f7fb ffb7 	bl	8001900 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e086      	b.n	8005aae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059a0:	4b45      	ldr	r3, [pc, #276]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f0      	bne.n	800598e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059ac:	4b42      	ldr	r3, [pc, #264]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	051b      	lsls	r3, r3, #20
 80059ba:	493f      	ldr	r1, [pc, #252]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	628b      	str	r3, [r1, #40]	; 0x28
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	025b      	lsls	r3, r3, #9
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	3b01      	subs	r3, #1
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	061b      	lsls	r3, r3, #24
 80059ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059f0:	4931      	ldr	r1, [pc, #196]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059f6:	4b30      	ldr	r3, [pc, #192]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	492d      	ldr	r1, [pc, #180]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a08:	4b2b      	ldr	r3, [pc, #172]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	4928      	ldr	r1, [pc, #160]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a1a:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	4a26      	ldr	r2, [pc, #152]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a2a:	4b24      	ldr	r3, [pc, #144]	; (8005abc <RCCEx_PLL3_Config+0x160>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	69d2      	ldr	r2, [r2, #28]
 8005a32:	00d2      	lsls	r2, r2, #3
 8005a34:	4920      	ldr	r1, [pc, #128]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a3a:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	4a1e      	ldr	r2, [pc, #120]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	4a19      	ldr	r2, [pc, #100]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a58:	e00f      	b.n	8005a7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d106      	bne.n	8005a6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a60:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a6c:	e005      	b.n	8005a7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a6e:	4b12      	ldr	r3, [pc, #72]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	4a11      	ldr	r2, [pc, #68]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a0e      	ldr	r2, [pc, #56]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a86:	f7fb ff3b 	bl	8001900 <HAL_GetTick>
 8005a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a8c:	e008      	b.n	8005aa0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a8e:	f7fb ff37 	bl	8001900 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e006      	b.n	8005aae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <RCCEx_PLL3_Config+0x15c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	ffff0007 	.word	0xffff0007

08005ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e049      	b.n	8005b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fb fc48 	bl	800137c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f000 fb5e 	bl	80061c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d001      	beq.n	8005b88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e04c      	b.n	8005c22 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a26      	ldr	r2, [pc, #152]	; (8005c30 <HAL_TIM_Base_Start+0xc0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d022      	beq.n	8005be0 <HAL_TIM_Base_Start+0x70>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba2:	d01d      	beq.n	8005be0 <HAL_TIM_Base_Start+0x70>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a22      	ldr	r2, [pc, #136]	; (8005c34 <HAL_TIM_Base_Start+0xc4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d018      	beq.n	8005be0 <HAL_TIM_Base_Start+0x70>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a21      	ldr	r2, [pc, #132]	; (8005c38 <HAL_TIM_Base_Start+0xc8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d013      	beq.n	8005be0 <HAL_TIM_Base_Start+0x70>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <HAL_TIM_Base_Start+0xcc>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00e      	beq.n	8005be0 <HAL_TIM_Base_Start+0x70>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <HAL_TIM_Base_Start+0xd0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d009      	beq.n	8005be0 <HAL_TIM_Base_Start+0x70>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <HAL_TIM_Base_Start+0xd4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIM_Base_Start+0x70>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <HAL_TIM_Base_Start+0xd8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d115      	bne.n	8005c0c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <HAL_TIM_Base_Start+0xdc>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b06      	cmp	r3, #6
 8005bf0:	d015      	beq.n	8005c1e <HAL_TIM_Base_Start+0xae>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf8:	d011      	beq.n	8005c1e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0201 	orr.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0a:	e008      	b.n	8005c1e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e000      	b.n	8005c20 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40000400 	.word	0x40000400
 8005c38:	40000800 	.word	0x40000800
 8005c3c:	40000c00 	.word	0x40000c00
 8005c40:	40010400 	.word	0x40010400
 8005c44:	40001800 	.word	0x40001800
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	00010007 	.word	0x00010007

08005c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d001      	beq.n	8005c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e054      	b.n	8005d12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d022      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d01d      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a22      	ldr	r2, [pc, #136]	; (8005d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a21      	ldr	r2, [pc, #132]	; (8005d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <HAL_TIM_Base_Start_IT+0xe0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <HAL_TIM_Base_Start_IT+0xe4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d115      	bne.n	8005cfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <HAL_TIM_Base_Start_IT+0xec>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b06      	cmp	r3, #6
 8005ce0:	d015      	beq.n	8005d0e <HAL_TIM_Base_Start_IT+0xbe>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce8:	d011      	beq.n	8005d0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	e008      	b.n	8005d0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e000      	b.n	8005d10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800
 8005d2c:	40000c00 	.word	0x40000c00
 8005d30:	40010400 	.word	0x40010400
 8005d34:	40001800 	.word	0x40001800
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	00010007 	.word	0x00010007

08005d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d122      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d11b      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0202 	mvn.w	r2, #2
 8005d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f9fe 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005d88:	e005      	b.n	8005d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9f0 	bl	8006170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fa01 	bl	8006198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0204 	mvn.w	r2, #4
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f9d4 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9c6 	bl	8006170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f9d7 	bl	8006198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d122      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d11b      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0208 	mvn.w	r2, #8
 8005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f9aa 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f99c 	bl	8006170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f9ad 	bl	8006198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0210 	mvn.w	r2, #16
 8005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f980 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f972 	bl	8006170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f983 	bl	8006198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10e      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0201 	mvn.w	r2, #1
 8005ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fb f9f1 	bl	80012a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fb38 	bl	8006560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efe:	d10e      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b80      	cmp	r3, #128	; 0x80
 8005f0c:	d107      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fb2b 	bl	8006574 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d10e      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f931 	bl	80061ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d10e      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f06f 0220 	mvn.w	r2, #32
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 faeb 	bl	800654c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e0dc      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x1d6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	4b6a      	ldr	r3, [pc, #424]	; (8006160 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a64      	ldr	r2, [pc, #400]	; (8006164 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	f000 80a9 	beq.w	800612a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fd8:	4a62      	ldr	r2, [pc, #392]	; (8006164 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	f200 80ae 	bhi.w	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fe0:	4a61      	ldr	r2, [pc, #388]	; (8006168 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	f000 80a1 	beq.w	800612a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fe8:	4a5f      	ldr	r2, [pc, #380]	; (8006168 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	f200 80a6 	bhi.w	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 8005ff0:	4a5e      	ldr	r2, [pc, #376]	; (800616c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	f000 8099 	beq.w	800612a <HAL_TIM_ConfigClockSource+0x1aa>
 8005ff8:	4a5c      	ldr	r2, [pc, #368]	; (800616c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	f200 809e 	bhi.w	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 8006000:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006004:	f000 8091 	beq.w	800612a <HAL_TIM_ConfigClockSource+0x1aa>
 8006008:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800600c:	f200 8096 	bhi.w	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 8006010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006014:	f000 8089 	beq.w	800612a <HAL_TIM_ConfigClockSource+0x1aa>
 8006018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800601c:	f200 808e 	bhi.w	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 8006020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006024:	d03e      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0x124>
 8006026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602a:	f200 8087 	bhi.w	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	f000 8086 	beq.w	8006142 <HAL_TIM_ConfigClockSource+0x1c2>
 8006036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603a:	d87f      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 800603c:	2b70      	cmp	r3, #112	; 0x70
 800603e:	d01a      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0xf6>
 8006040:	2b70      	cmp	r3, #112	; 0x70
 8006042:	d87b      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 8006044:	2b60      	cmp	r3, #96	; 0x60
 8006046:	d050      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x16a>
 8006048:	2b60      	cmp	r3, #96	; 0x60
 800604a:	d877      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 800604c:	2b50      	cmp	r3, #80	; 0x50
 800604e:	d03c      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x14a>
 8006050:	2b50      	cmp	r3, #80	; 0x50
 8006052:	d873      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d058      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x18a>
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d86f      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 800605c:	2b30      	cmp	r3, #48	; 0x30
 800605e:	d064      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1aa>
 8006060:	2b30      	cmp	r3, #48	; 0x30
 8006062:	d86b      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d060      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1aa>
 8006068:	2b20      	cmp	r3, #32
 800606a:	d867      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x1bc>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d05c      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1aa>
 8006070:	2b10      	cmp	r3, #16
 8006072:	d05a      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1aa>
 8006074:	e062      	b.n	800613c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6899      	ldr	r1, [r3, #8]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f000 f9b3 	bl	80063f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	609a      	str	r2, [r3, #8]
      break;
 80060a2:	e04f      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6899      	ldr	r1, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f000 f99c 	bl	80063f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060c6:	609a      	str	r2, [r3, #8]
      break;
 80060c8:	e03c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f000 f90c 	bl	80062f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2150      	movs	r1, #80	; 0x50
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f966 	bl	80063b4 <TIM_ITRx_SetConfig>
      break;
 80060e8:	e02c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 f92b 	bl	8006352 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2160      	movs	r1, #96	; 0x60
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f956 	bl	80063b4 <TIM_ITRx_SetConfig>
      break;
 8006108:	e01c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6859      	ldr	r1, [r3, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	461a      	mov	r2, r3
 8006118:	f000 f8ec 	bl	80062f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2140      	movs	r1, #64	; 0x40
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f946 	bl	80063b4 <TIM_ITRx_SetConfig>
      break;
 8006128:	e00c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f000 f93d 	bl	80063b4 <TIM_ITRx_SetConfig>
      break;
 800613a:	e003      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
      break;
 8006140:	e000      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	ffceff88 	.word	0xffceff88
 8006164:	00100040 	.word	0x00100040
 8006168:	00100030 	.word	0x00100030
 800616c:	00100020 	.word	0x00100020

08006170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a40      	ldr	r2, [pc, #256]	; (80062d4 <TIM_Base_SetConfig+0x114>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061de:	d00f      	beq.n	8006200 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a3d      	ldr	r2, [pc, #244]	; (80062d8 <TIM_Base_SetConfig+0x118>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00b      	beq.n	8006200 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a3c      	ldr	r2, [pc, #240]	; (80062dc <TIM_Base_SetConfig+0x11c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d007      	beq.n	8006200 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a3b      	ldr	r2, [pc, #236]	; (80062e0 <TIM_Base_SetConfig+0x120>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a3a      	ldr	r2, [pc, #232]	; (80062e4 <TIM_Base_SetConfig+0x124>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d108      	bne.n	8006212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2f      	ldr	r2, [pc, #188]	; (80062d4 <TIM_Base_SetConfig+0x114>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01f      	beq.n	800625a <TIM_Base_SetConfig+0x9a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006220:	d01b      	beq.n	800625a <TIM_Base_SetConfig+0x9a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2c      	ldr	r2, [pc, #176]	; (80062d8 <TIM_Base_SetConfig+0x118>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d017      	beq.n	800625a <TIM_Base_SetConfig+0x9a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2b      	ldr	r2, [pc, #172]	; (80062dc <TIM_Base_SetConfig+0x11c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <TIM_Base_SetConfig+0x9a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2a      	ldr	r2, [pc, #168]	; (80062e0 <TIM_Base_SetConfig+0x120>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00f      	beq.n	800625a <TIM_Base_SetConfig+0x9a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a29      	ldr	r2, [pc, #164]	; (80062e4 <TIM_Base_SetConfig+0x124>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00b      	beq.n	800625a <TIM_Base_SetConfig+0x9a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a28      	ldr	r2, [pc, #160]	; (80062e8 <TIM_Base_SetConfig+0x128>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <TIM_Base_SetConfig+0x9a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a27      	ldr	r2, [pc, #156]	; (80062ec <TIM_Base_SetConfig+0x12c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_Base_SetConfig+0x9a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a26      	ldr	r2, [pc, #152]	; (80062f0 <TIM_Base_SetConfig+0x130>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d108      	bne.n	800626c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a10      	ldr	r2, [pc, #64]	; (80062d4 <TIM_Base_SetConfig+0x114>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00f      	beq.n	80062b8 <TIM_Base_SetConfig+0xf8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a12      	ldr	r2, [pc, #72]	; (80062e4 <TIM_Base_SetConfig+0x124>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00b      	beq.n	80062b8 <TIM_Base_SetConfig+0xf8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a11      	ldr	r2, [pc, #68]	; (80062e8 <TIM_Base_SetConfig+0x128>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_Base_SetConfig+0xf8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a10      	ldr	r2, [pc, #64]	; (80062ec <TIM_Base_SetConfig+0x12c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_Base_SetConfig+0xf8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a0f      	ldr	r2, [pc, #60]	; (80062f0 <TIM_Base_SetConfig+0x130>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d103      	bne.n	80062c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	615a      	str	r2, [r3, #20]
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	40010400 	.word	0x40010400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40014400 	.word	0x40014400
 80062f0:	40014800 	.word	0x40014800

080062f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f023 0201 	bic.w	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800631e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f023 030a 	bic.w	r3, r3, #10
 8006330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006352:	b480      	push	{r7}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f023 0210 	bic.w	r2, r3, #16
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800637c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	031b      	lsls	r3, r3, #12
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800638e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	621a      	str	r2, [r3, #32]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <TIM_ITRx_SetConfig+0x38>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f043 0307 	orr.w	r3, r3, #7
 80063d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	609a      	str	r2, [r3, #8]
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	ffcfff8f 	.word	0xffcfff8f

080063f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800640a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	021a      	lsls	r2, r3, #8
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	431a      	orrs	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4313      	orrs	r3, r2
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	609a      	str	r2, [r3, #8]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006444:	2302      	movs	r3, #2
 8006446:	e06d      	b.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a30      	ldr	r2, [pc, #192]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2f      	ldr	r2, [pc, #188]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d108      	bne.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006494:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a20      	ldr	r2, [pc, #128]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d022      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ba:	d01d      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1d      	ldr	r2, [pc, #116]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d018      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1c      	ldr	r2, [pc, #112]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d013      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1a      	ldr	r2, [pc, #104]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00e      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a15      	ldr	r2, [pc, #84]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d009      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a16      	ldr	r2, [pc, #88]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d004      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a15      	ldr	r2, [pc, #84]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10c      	bne.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	4313      	orrs	r3, r2
 8006508:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40010000 	.word	0x40010000
 8006534:	40010400 	.word	0x40010400
 8006538:	40000400 	.word	0x40000400
 800653c:	40000800 	.word	0x40000800
 8006540:	40000c00 	.word	0x40000c00
 8006544:	40001800 	.word	0x40001800
 8006548:	40014000 	.word	0x40014000

0800654c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e042      	b.n	8006620 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d106      	bne.n	80065b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fa ff07 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2224      	movs	r2, #36	; 0x24
 80065b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fd5c 	bl	8007088 <UART_SetConfig>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e022      	b.n	8006620 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fab8 	bl	8007b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fb3f 	bl	8007c9c <UART_CheckIdleState>
 800661e:	4603      	mov	r3, r0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	2b20      	cmp	r3, #32
 8006640:	d17b      	bne.n	800673a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_UART_Transmit+0x26>
 8006648:	88fb      	ldrh	r3, [r7, #6]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e074      	b.n	800673c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2221      	movs	r2, #33	; 0x21
 800665e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006662:	f7fb f94d 	bl	8001900 <HAL_GetTick>
 8006666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006680:	d108      	bne.n	8006694 <HAL_UART_Transmit+0x6c>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	e003      	b.n	800669c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006698:	2300      	movs	r3, #0
 800669a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800669c:	e030      	b.n	8006700 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2180      	movs	r1, #128	; 0x80
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f001 fba1 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e03d      	b.n	800673c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	3302      	adds	r3, #2
 80066da:	61bb      	str	r3, [r7, #24]
 80066dc:	e007      	b.n	80066ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	3301      	adds	r3, #1
 80066ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006706:	b29b      	uxth	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1c8      	bne.n	800669e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2200      	movs	r2, #0
 8006714:	2140      	movs	r1, #64	; 0x40
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f001 fb6a 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e006      	b.n	800673c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	e000      	b.n	800673c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800673a:	2302      	movs	r3, #2
  }
}
 800673c:	4618      	mov	r0, r3
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	; 0x28
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800675a:	2b20      	cmp	r3, #32
 800675c:	f040 80b5 	bne.w	80068ca <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_UART_Receive+0x28>
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0ad      	b.n	80068cc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2222      	movs	r2, #34	; 0x22
 800677c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006786:	f7fb f8bb 	bl	8001900 <HAL_GetTick>
 800678a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a4:	d10e      	bne.n	80067c4 <HAL_UART_Receive+0x80>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d105      	bne.n	80067ba <HAL_UART_Receive+0x76>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067b8:	e02d      	b.n	8006816 <HAL_UART_Receive+0xd2>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	22ff      	movs	r2, #255	; 0xff
 80067be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067c2:	e028      	b.n	8006816 <HAL_UART_Receive+0xd2>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10d      	bne.n	80067e8 <HAL_UART_Receive+0xa4>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d104      	bne.n	80067de <HAL_UART_Receive+0x9a>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	22ff      	movs	r2, #255	; 0xff
 80067d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067dc:	e01b      	b.n	8006816 <HAL_UART_Receive+0xd2>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	227f      	movs	r2, #127	; 0x7f
 80067e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067e6:	e016      	b.n	8006816 <HAL_UART_Receive+0xd2>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067f0:	d10d      	bne.n	800680e <HAL_UART_Receive+0xca>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <HAL_UART_Receive+0xc0>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	227f      	movs	r2, #127	; 0x7f
 80067fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006802:	e008      	b.n	8006816 <HAL_UART_Receive+0xd2>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	223f      	movs	r2, #63	; 0x3f
 8006808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800680c:	e003      	b.n	8006816 <HAL_UART_Receive+0xd2>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800681c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006826:	d108      	bne.n	800683a <HAL_UART_Receive+0xf6>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d104      	bne.n	800683a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	e003      	b.n	8006842 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006842:	e036      	b.n	80068b2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2200      	movs	r2, #0
 800684c:	2120      	movs	r1, #32
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f001 face 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e032      	b.n	80068cc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10c      	bne.n	8006886 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	b29a      	uxth	r2, r3
 8006874:	8a7b      	ldrh	r3, [r7, #18]
 8006876:	4013      	ands	r3, r2
 8006878:	b29a      	uxth	r2, r3
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	3302      	adds	r3, #2
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	e00c      	b.n	80068a0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	b2da      	uxtb	r2, r3
 800688e:	8a7b      	ldrh	r3, [r7, #18]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	4013      	ands	r3, r2
 8006894:	b2da      	uxtb	r2, r3
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	3301      	adds	r3, #1
 800689e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1c2      	bne.n	8006844 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e000      	b.n	80068cc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80068ca:	2302      	movs	r3, #2
  }
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3720      	adds	r7, #32
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b0ba      	sub	sp, #232	; 0xe8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80068fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006902:	4013      	ands	r3, r2
 8006904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d11b      	bne.n	8006948 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b00      	cmp	r3, #0
 800691a:	d015      	beq.n	8006948 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d105      	bne.n	8006934 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800692c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8377 	beq.w	800702c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
      }
      return;
 8006946:	e371      	b.n	800702c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8123 	beq.w	8006b98 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006952:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006956:	4b8d      	ldr	r3, [pc, #564]	; (8006b8c <HAL_UART_IRQHandler+0x2b8>)
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800695e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006962:	4b8b      	ldr	r3, [pc, #556]	; (8006b90 <HAL_UART_IRQHandler+0x2bc>)
 8006964:	4013      	ands	r3, r2
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8116 	beq.w	8006b98 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d011      	beq.n	800699c <HAL_UART_IRQHandler+0xc8>
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2201      	movs	r2, #1
 800698a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006992:	f043 0201 	orr.w	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d011      	beq.n	80069cc <HAL_UART_IRQHandler+0xf8>
 80069a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2202      	movs	r2, #2
 80069ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c2:	f043 0204 	orr.w	r2, r3, #4
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d011      	beq.n	80069fc <HAL_UART_IRQHandler+0x128>
 80069d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2204      	movs	r2, #4
 80069ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f2:	f043 0202 	orr.w	r2, r3, #2
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d017      	beq.n	8006a38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a18:	4b5c      	ldr	r3, [pc, #368]	; (8006b8c <HAL_UART_IRQHandler+0x2b8>)
 8006a1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2208      	movs	r2, #8
 8006a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f043 0208 	orr.w	r2, r3, #8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d012      	beq.n	8006a6a <HAL_UART_IRQHandler+0x196>
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00c      	beq.n	8006a6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 82dd 	beq.w	8007030 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d013      	beq.n	8006aaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d005      	beq.n	8006ace <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d054      	beq.n	8006b78 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 f9f6 	bl	8007ec0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d146      	bne.n	8006b70 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1d9      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d017      	beq.n	8006b68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b3e:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <HAL_UART_IRQHandler+0x2c0>)
 8006b40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fb fcb3 	bl	80024b4 <HAL_DMA_Abort_IT>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d019      	beq.n	8006b88 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006b62:	4610      	mov	r0, r2
 8006b64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b66:	e00f      	b.n	8006b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fa77 	bl	800705c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6e:	e00b      	b.n	8006b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fa73 	bl	800705c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b76:	e007      	b.n	8006b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fa6f 	bl	800705c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006b86:	e253      	b.n	8007030 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	bf00      	nop
    return;
 8006b8a:	e251      	b.n	8007030 <HAL_UART_IRQHandler+0x75c>
 8006b8c:	10000001 	.word	0x10000001
 8006b90:	04000120 	.word	0x04000120
 8006b94:	08007f8d 	.word	0x08007f8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f040 81e7 	bne.w	8006f70 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 81e0 	beq.w	8006f70 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 81d9 	beq.w	8006f70 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2210      	movs	r2, #16
 8006bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	f040 8151 	bne.w	8006e78 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a96      	ldr	r2, [pc, #600]	; (8006e38 <HAL_UART_IRQHandler+0x564>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d068      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a93      	ldr	r2, [pc, #588]	; (8006e3c <HAL_UART_IRQHandler+0x568>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d061      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a91      	ldr	r2, [pc, #580]	; (8006e40 <HAL_UART_IRQHandler+0x56c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d05a      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a8e      	ldr	r2, [pc, #568]	; (8006e44 <HAL_UART_IRQHandler+0x570>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d053      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a8c      	ldr	r2, [pc, #560]	; (8006e48 <HAL_UART_IRQHandler+0x574>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d04c      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a89      	ldr	r2, [pc, #548]	; (8006e4c <HAL_UART_IRQHandler+0x578>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d045      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a87      	ldr	r2, [pc, #540]	; (8006e50 <HAL_UART_IRQHandler+0x57c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d03e      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a84      	ldr	r2, [pc, #528]	; (8006e54 <HAL_UART_IRQHandler+0x580>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d037      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a82      	ldr	r2, [pc, #520]	; (8006e58 <HAL_UART_IRQHandler+0x584>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d030      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a7f      	ldr	r2, [pc, #508]	; (8006e5c <HAL_UART_IRQHandler+0x588>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d029      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a7d      	ldr	r2, [pc, #500]	; (8006e60 <HAL_UART_IRQHandler+0x58c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d022      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a7a      	ldr	r2, [pc, #488]	; (8006e64 <HAL_UART_IRQHandler+0x590>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d01b      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a78      	ldr	r2, [pc, #480]	; (8006e68 <HAL_UART_IRQHandler+0x594>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d014      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a75      	ldr	r2, [pc, #468]	; (8006e6c <HAL_UART_IRQHandler+0x598>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00d      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a73      	ldr	r2, [pc, #460]	; (8006e70 <HAL_UART_IRQHandler+0x59c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d006      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x3e2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a70      	ldr	r2, [pc, #448]	; (8006e74 <HAL_UART_IRQHandler+0x5a0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d106      	bne.n	8006cc4 <HAL_UART_IRQHandler+0x3f0>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	e005      	b.n	8006cd0 <HAL_UART_IRQHandler+0x3fc>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 81ab 	beq.w	8007034 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ce4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	f080 81a3 	bcs.w	8007034 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d04:	f000 8087 	beq.w	8006e16 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1da      	bne.n	8006d08 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e1      	bne.n	8006d52 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006db2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006db4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de4:	f023 0310 	bic.w	r3, r3, #16
 8006de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006df8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e4      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fb f831 	bl	8001e78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f91d 	bl	8007070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e36:	e0fd      	b.n	8007034 <HAL_UART_IRQHandler+0x760>
 8006e38:	40020010 	.word	0x40020010
 8006e3c:	40020028 	.word	0x40020028
 8006e40:	40020040 	.word	0x40020040
 8006e44:	40020058 	.word	0x40020058
 8006e48:	40020070 	.word	0x40020070
 8006e4c:	40020088 	.word	0x40020088
 8006e50:	400200a0 	.word	0x400200a0
 8006e54:	400200b8 	.word	0x400200b8
 8006e58:	40020410 	.word	0x40020410
 8006e5c:	40020428 	.word	0x40020428
 8006e60:	40020440 	.word	0x40020440
 8006e64:	40020458 	.word	0x40020458
 8006e68:	40020470 	.word	0x40020470
 8006e6c:	40020488 	.word	0x40020488
 8006e70:	400204a0 	.word	0x400204a0
 8006e74:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80cf 	beq.w	8007038 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006e9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 80ca 	beq.w	8007038 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ec8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e4      	bne.n	8006ea4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eea:	6a3a      	ldr	r2, [r7, #32]
 8006eec:	4b55      	ldr	r3, [pc, #340]	; (8007044 <HAL_UART_IRQHandler+0x770>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006efe:	633a      	str	r2, [r7, #48]	; 0x30
 8006f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e3      	bne.n	8006eda <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0310 	bic.w	r3, r3, #16
 8006f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f48:	61fb      	str	r3, [r7, #28]
 8006f4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	69b9      	ldr	r1, [r7, #24]
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	617b      	str	r3, [r7, #20]
   return(result);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e4      	bne.n	8006f26 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f881 	bl	8007070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f6e:	e063      	b.n	8007038 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00e      	beq.n	8006f9a <HAL_UART_IRQHandler+0x6c6>
 8006f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 f83b 	bl	800800e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f98:	e051      	b.n	800703e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d014      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d105      	bne.n	8006fbe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d008      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d03a      	beq.n	800703c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
    }
    return;
 8006fce:	e035      	b.n	800703c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d009      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x71c>
 8006fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 ffe5 	bl	8007fb8 <UART_EndTransmit_IT>
    return;
 8006fee:	e026      	b.n	800703e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d009      	beq.n	8007010 <HAL_UART_IRQHandler+0x73c>
 8006ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007000:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 f814 	bl	8008036 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800700e:	e016      	b.n	800703e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d010      	beq.n	800703e <HAL_UART_IRQHandler+0x76a>
 800701c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007020:	2b00      	cmp	r3, #0
 8007022:	da0c      	bge.n	800703e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fffc 	bl	8008022 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800702a:	e008      	b.n	800703e <HAL_UART_IRQHandler+0x76a>
      return;
 800702c:	bf00      	nop
 800702e:	e006      	b.n	800703e <HAL_UART_IRQHandler+0x76a>
    return;
 8007030:	bf00      	nop
 8007032:	e004      	b.n	800703e <HAL_UART_IRQHandler+0x76a>
      return;
 8007034:	bf00      	nop
 8007036:	e002      	b.n	800703e <HAL_UART_IRQHandler+0x76a>
      return;
 8007038:	bf00      	nop
 800703a:	e000      	b.n	800703e <HAL_UART_IRQHandler+0x76a>
    return;
 800703c:	bf00      	nop
  }
}
 800703e:	37e8      	adds	r7, #232	; 0xe8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	effffffe 	.word	0xeffffffe

08007048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800708c:	b092      	sub	sp, #72	; 0x48
 800708e:	af00      	add	r7, sp, #0
 8007090:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	431a      	orrs	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4bbe      	ldr	r3, [pc, #760]	; (80073b0 <UART_SetConfig+0x328>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070c0:	430b      	orrs	r3, r1
 80070c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4ab3      	ldr	r2, [pc, #716]	; (80073b4 <UART_SetConfig+0x32c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f0:	4313      	orrs	r3, r2
 80070f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	4baf      	ldr	r3, [pc, #700]	; (80073b8 <UART_SetConfig+0x330>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	6812      	ldr	r2, [r2, #0]
 8007102:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007104:	430b      	orrs	r3, r1
 8007106:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	f023 010f 	bic.w	r1, r3, #15
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4aa6      	ldr	r2, [pc, #664]	; (80073bc <UART_SetConfig+0x334>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d177      	bne.n	8007218 <UART_SetConfig+0x190>
 8007128:	4ba5      	ldr	r3, [pc, #660]	; (80073c0 <UART_SetConfig+0x338>)
 800712a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007130:	2b28      	cmp	r3, #40	; 0x28
 8007132:	d86d      	bhi.n	8007210 <UART_SetConfig+0x188>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0xb4>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	080071e1 	.word	0x080071e1
 8007140:	08007211 	.word	0x08007211
 8007144:	08007211 	.word	0x08007211
 8007148:	08007211 	.word	0x08007211
 800714c:	08007211 	.word	0x08007211
 8007150:	08007211 	.word	0x08007211
 8007154:	08007211 	.word	0x08007211
 8007158:	08007211 	.word	0x08007211
 800715c:	080071e9 	.word	0x080071e9
 8007160:	08007211 	.word	0x08007211
 8007164:	08007211 	.word	0x08007211
 8007168:	08007211 	.word	0x08007211
 800716c:	08007211 	.word	0x08007211
 8007170:	08007211 	.word	0x08007211
 8007174:	08007211 	.word	0x08007211
 8007178:	08007211 	.word	0x08007211
 800717c:	080071f1 	.word	0x080071f1
 8007180:	08007211 	.word	0x08007211
 8007184:	08007211 	.word	0x08007211
 8007188:	08007211 	.word	0x08007211
 800718c:	08007211 	.word	0x08007211
 8007190:	08007211 	.word	0x08007211
 8007194:	08007211 	.word	0x08007211
 8007198:	08007211 	.word	0x08007211
 800719c:	080071f9 	.word	0x080071f9
 80071a0:	08007211 	.word	0x08007211
 80071a4:	08007211 	.word	0x08007211
 80071a8:	08007211 	.word	0x08007211
 80071ac:	08007211 	.word	0x08007211
 80071b0:	08007211 	.word	0x08007211
 80071b4:	08007211 	.word	0x08007211
 80071b8:	08007211 	.word	0x08007211
 80071bc:	08007201 	.word	0x08007201
 80071c0:	08007211 	.word	0x08007211
 80071c4:	08007211 	.word	0x08007211
 80071c8:	08007211 	.word	0x08007211
 80071cc:	08007211 	.word	0x08007211
 80071d0:	08007211 	.word	0x08007211
 80071d4:	08007211 	.word	0x08007211
 80071d8:	08007211 	.word	0x08007211
 80071dc:	08007209 	.word	0x08007209
 80071e0:	2301      	movs	r3, #1
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e6:	e222      	b.n	800762e <UART_SetConfig+0x5a6>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ee:	e21e      	b.n	800762e <UART_SetConfig+0x5a6>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f6:	e21a      	b.n	800762e <UART_SetConfig+0x5a6>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e216      	b.n	800762e <UART_SetConfig+0x5a6>
 8007200:	2320      	movs	r3, #32
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e212      	b.n	800762e <UART_SetConfig+0x5a6>
 8007208:	2340      	movs	r3, #64	; 0x40
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e20e      	b.n	800762e <UART_SetConfig+0x5a6>
 8007210:	2380      	movs	r3, #128	; 0x80
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e20a      	b.n	800762e <UART_SetConfig+0x5a6>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a69      	ldr	r2, [pc, #420]	; (80073c4 <UART_SetConfig+0x33c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d130      	bne.n	8007284 <UART_SetConfig+0x1fc>
 8007222:	4b67      	ldr	r3, [pc, #412]	; (80073c0 <UART_SetConfig+0x338>)
 8007224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	2b05      	cmp	r3, #5
 800722c:	d826      	bhi.n	800727c <UART_SetConfig+0x1f4>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <UART_SetConfig+0x1ac>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	0800724d 	.word	0x0800724d
 8007238:	08007255 	.word	0x08007255
 800723c:	0800725d 	.word	0x0800725d
 8007240:	08007265 	.word	0x08007265
 8007244:	0800726d 	.word	0x0800726d
 8007248:	08007275 	.word	0x08007275
 800724c:	2300      	movs	r3, #0
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007252:	e1ec      	b.n	800762e <UART_SetConfig+0x5a6>
 8007254:	2304      	movs	r3, #4
 8007256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725a:	e1e8      	b.n	800762e <UART_SetConfig+0x5a6>
 800725c:	2308      	movs	r3, #8
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007262:	e1e4      	b.n	800762e <UART_SetConfig+0x5a6>
 8007264:	2310      	movs	r3, #16
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726a:	e1e0      	b.n	800762e <UART_SetConfig+0x5a6>
 800726c:	2320      	movs	r3, #32
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e1dc      	b.n	800762e <UART_SetConfig+0x5a6>
 8007274:	2340      	movs	r3, #64	; 0x40
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727a:	e1d8      	b.n	800762e <UART_SetConfig+0x5a6>
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007282:	e1d4      	b.n	800762e <UART_SetConfig+0x5a6>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a4f      	ldr	r2, [pc, #316]	; (80073c8 <UART_SetConfig+0x340>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d130      	bne.n	80072f0 <UART_SetConfig+0x268>
 800728e:	4b4c      	ldr	r3, [pc, #304]	; (80073c0 <UART_SetConfig+0x338>)
 8007290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	2b05      	cmp	r3, #5
 8007298:	d826      	bhi.n	80072e8 <UART_SetConfig+0x260>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <UART_SetConfig+0x218>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072b9 	.word	0x080072b9
 80072a4:	080072c1 	.word	0x080072c1
 80072a8:	080072c9 	.word	0x080072c9
 80072ac:	080072d1 	.word	0x080072d1
 80072b0:	080072d9 	.word	0x080072d9
 80072b4:	080072e1 	.word	0x080072e1
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072be:	e1b6      	b.n	800762e <UART_SetConfig+0x5a6>
 80072c0:	2304      	movs	r3, #4
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c6:	e1b2      	b.n	800762e <UART_SetConfig+0x5a6>
 80072c8:	2308      	movs	r3, #8
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ce:	e1ae      	b.n	800762e <UART_SetConfig+0x5a6>
 80072d0:	2310      	movs	r3, #16
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d6:	e1aa      	b.n	800762e <UART_SetConfig+0x5a6>
 80072d8:	2320      	movs	r3, #32
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072de:	e1a6      	b.n	800762e <UART_SetConfig+0x5a6>
 80072e0:	2340      	movs	r3, #64	; 0x40
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e6:	e1a2      	b.n	800762e <UART_SetConfig+0x5a6>
 80072e8:	2380      	movs	r3, #128	; 0x80
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ee:	e19e      	b.n	800762e <UART_SetConfig+0x5a6>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a35      	ldr	r2, [pc, #212]	; (80073cc <UART_SetConfig+0x344>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d130      	bne.n	800735c <UART_SetConfig+0x2d4>
 80072fa:	4b31      	ldr	r3, [pc, #196]	; (80073c0 <UART_SetConfig+0x338>)
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	2b05      	cmp	r3, #5
 8007304:	d826      	bhi.n	8007354 <UART_SetConfig+0x2cc>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0x284>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007325 	.word	0x08007325
 8007310:	0800732d 	.word	0x0800732d
 8007314:	08007335 	.word	0x08007335
 8007318:	0800733d 	.word	0x0800733d
 800731c:	08007345 	.word	0x08007345
 8007320:	0800734d 	.word	0x0800734d
 8007324:	2300      	movs	r3, #0
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732a:	e180      	b.n	800762e <UART_SetConfig+0x5a6>
 800732c:	2304      	movs	r3, #4
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007332:	e17c      	b.n	800762e <UART_SetConfig+0x5a6>
 8007334:	2308      	movs	r3, #8
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733a:	e178      	b.n	800762e <UART_SetConfig+0x5a6>
 800733c:	2310      	movs	r3, #16
 800733e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007342:	e174      	b.n	800762e <UART_SetConfig+0x5a6>
 8007344:	2320      	movs	r3, #32
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734a:	e170      	b.n	800762e <UART_SetConfig+0x5a6>
 800734c:	2340      	movs	r3, #64	; 0x40
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007352:	e16c      	b.n	800762e <UART_SetConfig+0x5a6>
 8007354:	2380      	movs	r3, #128	; 0x80
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735a:	e168      	b.n	800762e <UART_SetConfig+0x5a6>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <UART_SetConfig+0x348>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d142      	bne.n	80073ec <UART_SetConfig+0x364>
 8007366:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <UART_SetConfig+0x338>)
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	2b05      	cmp	r3, #5
 8007370:	d838      	bhi.n	80073e4 <UART_SetConfig+0x35c>
 8007372:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <UART_SetConfig+0x2f0>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	08007391 	.word	0x08007391
 800737c:	08007399 	.word	0x08007399
 8007380:	080073a1 	.word	0x080073a1
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073d5 	.word	0x080073d5
 800738c:	080073dd 	.word	0x080073dd
 8007390:	2300      	movs	r3, #0
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007396:	e14a      	b.n	800762e <UART_SetConfig+0x5a6>
 8007398:	2304      	movs	r3, #4
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739e:	e146      	b.n	800762e <UART_SetConfig+0x5a6>
 80073a0:	2308      	movs	r3, #8
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a6:	e142      	b.n	800762e <UART_SetConfig+0x5a6>
 80073a8:	2310      	movs	r3, #16
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ae:	e13e      	b.n	800762e <UART_SetConfig+0x5a6>
 80073b0:	cfff69f3 	.word	0xcfff69f3
 80073b4:	58000c00 	.word	0x58000c00
 80073b8:	11fff4ff 	.word	0x11fff4ff
 80073bc:	40011000 	.word	0x40011000
 80073c0:	58024400 	.word	0x58024400
 80073c4:	40004400 	.word	0x40004400
 80073c8:	40004800 	.word	0x40004800
 80073cc:	40004c00 	.word	0x40004c00
 80073d0:	40005000 	.word	0x40005000
 80073d4:	2320      	movs	r3, #32
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073da:	e128      	b.n	800762e <UART_SetConfig+0x5a6>
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e2:	e124      	b.n	800762e <UART_SetConfig+0x5a6>
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ea:	e120      	b.n	800762e <UART_SetConfig+0x5a6>
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4acb      	ldr	r2, [pc, #812]	; (8007720 <UART_SetConfig+0x698>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d176      	bne.n	80074e4 <UART_SetConfig+0x45c>
 80073f6:	4bcb      	ldr	r3, [pc, #812]	; (8007724 <UART_SetConfig+0x69c>)
 80073f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073fe:	2b28      	cmp	r3, #40	; 0x28
 8007400:	d86c      	bhi.n	80074dc <UART_SetConfig+0x454>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <UART_SetConfig+0x380>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	080074ad 	.word	0x080074ad
 800740c:	080074dd 	.word	0x080074dd
 8007410:	080074dd 	.word	0x080074dd
 8007414:	080074dd 	.word	0x080074dd
 8007418:	080074dd 	.word	0x080074dd
 800741c:	080074dd 	.word	0x080074dd
 8007420:	080074dd 	.word	0x080074dd
 8007424:	080074dd 	.word	0x080074dd
 8007428:	080074b5 	.word	0x080074b5
 800742c:	080074dd 	.word	0x080074dd
 8007430:	080074dd 	.word	0x080074dd
 8007434:	080074dd 	.word	0x080074dd
 8007438:	080074dd 	.word	0x080074dd
 800743c:	080074dd 	.word	0x080074dd
 8007440:	080074dd 	.word	0x080074dd
 8007444:	080074dd 	.word	0x080074dd
 8007448:	080074bd 	.word	0x080074bd
 800744c:	080074dd 	.word	0x080074dd
 8007450:	080074dd 	.word	0x080074dd
 8007454:	080074dd 	.word	0x080074dd
 8007458:	080074dd 	.word	0x080074dd
 800745c:	080074dd 	.word	0x080074dd
 8007460:	080074dd 	.word	0x080074dd
 8007464:	080074dd 	.word	0x080074dd
 8007468:	080074c5 	.word	0x080074c5
 800746c:	080074dd 	.word	0x080074dd
 8007470:	080074dd 	.word	0x080074dd
 8007474:	080074dd 	.word	0x080074dd
 8007478:	080074dd 	.word	0x080074dd
 800747c:	080074dd 	.word	0x080074dd
 8007480:	080074dd 	.word	0x080074dd
 8007484:	080074dd 	.word	0x080074dd
 8007488:	080074cd 	.word	0x080074cd
 800748c:	080074dd 	.word	0x080074dd
 8007490:	080074dd 	.word	0x080074dd
 8007494:	080074dd 	.word	0x080074dd
 8007498:	080074dd 	.word	0x080074dd
 800749c:	080074dd 	.word	0x080074dd
 80074a0:	080074dd 	.word	0x080074dd
 80074a4:	080074dd 	.word	0x080074dd
 80074a8:	080074d5 	.word	0x080074d5
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b2:	e0bc      	b.n	800762e <UART_SetConfig+0x5a6>
 80074b4:	2304      	movs	r3, #4
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ba:	e0b8      	b.n	800762e <UART_SetConfig+0x5a6>
 80074bc:	2308      	movs	r3, #8
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c2:	e0b4      	b.n	800762e <UART_SetConfig+0x5a6>
 80074c4:	2310      	movs	r3, #16
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ca:	e0b0      	b.n	800762e <UART_SetConfig+0x5a6>
 80074cc:	2320      	movs	r3, #32
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d2:	e0ac      	b.n	800762e <UART_SetConfig+0x5a6>
 80074d4:	2340      	movs	r3, #64	; 0x40
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074da:	e0a8      	b.n	800762e <UART_SetConfig+0x5a6>
 80074dc:	2380      	movs	r3, #128	; 0x80
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e2:	e0a4      	b.n	800762e <UART_SetConfig+0x5a6>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a8f      	ldr	r2, [pc, #572]	; (8007728 <UART_SetConfig+0x6a0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d130      	bne.n	8007550 <UART_SetConfig+0x4c8>
 80074ee:	4b8d      	ldr	r3, [pc, #564]	; (8007724 <UART_SetConfig+0x69c>)
 80074f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	d826      	bhi.n	8007548 <UART_SetConfig+0x4c0>
 80074fa:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <UART_SetConfig+0x478>)
 80074fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007500:	08007519 	.word	0x08007519
 8007504:	08007521 	.word	0x08007521
 8007508:	08007529 	.word	0x08007529
 800750c:	08007531 	.word	0x08007531
 8007510:	08007539 	.word	0x08007539
 8007514:	08007541 	.word	0x08007541
 8007518:	2300      	movs	r3, #0
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751e:	e086      	b.n	800762e <UART_SetConfig+0x5a6>
 8007520:	2304      	movs	r3, #4
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007526:	e082      	b.n	800762e <UART_SetConfig+0x5a6>
 8007528:	2308      	movs	r3, #8
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752e:	e07e      	b.n	800762e <UART_SetConfig+0x5a6>
 8007530:	2310      	movs	r3, #16
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007536:	e07a      	b.n	800762e <UART_SetConfig+0x5a6>
 8007538:	2320      	movs	r3, #32
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753e:	e076      	b.n	800762e <UART_SetConfig+0x5a6>
 8007540:	2340      	movs	r3, #64	; 0x40
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007546:	e072      	b.n	800762e <UART_SetConfig+0x5a6>
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754e:	e06e      	b.n	800762e <UART_SetConfig+0x5a6>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a75      	ldr	r2, [pc, #468]	; (800772c <UART_SetConfig+0x6a4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d130      	bne.n	80075bc <UART_SetConfig+0x534>
 800755a:	4b72      	ldr	r3, [pc, #456]	; (8007724 <UART_SetConfig+0x69c>)
 800755c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	2b05      	cmp	r3, #5
 8007564:	d826      	bhi.n	80075b4 <UART_SetConfig+0x52c>
 8007566:	a201      	add	r2, pc, #4	; (adr r2, 800756c <UART_SetConfig+0x4e4>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	08007585 	.word	0x08007585
 8007570:	0800758d 	.word	0x0800758d
 8007574:	08007595 	.word	0x08007595
 8007578:	0800759d 	.word	0x0800759d
 800757c:	080075a5 	.word	0x080075a5
 8007580:	080075ad 	.word	0x080075ad
 8007584:	2300      	movs	r3, #0
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758a:	e050      	b.n	800762e <UART_SetConfig+0x5a6>
 800758c:	2304      	movs	r3, #4
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007592:	e04c      	b.n	800762e <UART_SetConfig+0x5a6>
 8007594:	2308      	movs	r3, #8
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759a:	e048      	b.n	800762e <UART_SetConfig+0x5a6>
 800759c:	2310      	movs	r3, #16
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a2:	e044      	b.n	800762e <UART_SetConfig+0x5a6>
 80075a4:	2320      	movs	r3, #32
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075aa:	e040      	b.n	800762e <UART_SetConfig+0x5a6>
 80075ac:	2340      	movs	r3, #64	; 0x40
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b2:	e03c      	b.n	800762e <UART_SetConfig+0x5a6>
 80075b4:	2380      	movs	r3, #128	; 0x80
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ba:	e038      	b.n	800762e <UART_SetConfig+0x5a6>
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a5b      	ldr	r2, [pc, #364]	; (8007730 <UART_SetConfig+0x6a8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d130      	bne.n	8007628 <UART_SetConfig+0x5a0>
 80075c6:	4b57      	ldr	r3, [pc, #348]	; (8007724 <UART_SetConfig+0x69c>)
 80075c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	2b05      	cmp	r3, #5
 80075d0:	d826      	bhi.n	8007620 <UART_SetConfig+0x598>
 80075d2:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <UART_SetConfig+0x550>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	080075f1 	.word	0x080075f1
 80075dc:	080075f9 	.word	0x080075f9
 80075e0:	08007601 	.word	0x08007601
 80075e4:	08007609 	.word	0x08007609
 80075e8:	08007611 	.word	0x08007611
 80075ec:	08007619 	.word	0x08007619
 80075f0:	2302      	movs	r3, #2
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f6:	e01a      	b.n	800762e <UART_SetConfig+0x5a6>
 80075f8:	2304      	movs	r3, #4
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fe:	e016      	b.n	800762e <UART_SetConfig+0x5a6>
 8007600:	2308      	movs	r3, #8
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007606:	e012      	b.n	800762e <UART_SetConfig+0x5a6>
 8007608:	2310      	movs	r3, #16
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760e:	e00e      	b.n	800762e <UART_SetConfig+0x5a6>
 8007610:	2320      	movs	r3, #32
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007616:	e00a      	b.n	800762e <UART_SetConfig+0x5a6>
 8007618:	2340      	movs	r3, #64	; 0x40
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761e:	e006      	b.n	800762e <UART_SetConfig+0x5a6>
 8007620:	2380      	movs	r3, #128	; 0x80
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007626:	e002      	b.n	800762e <UART_SetConfig+0x5a6>
 8007628:	2380      	movs	r3, #128	; 0x80
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a3f      	ldr	r2, [pc, #252]	; (8007730 <UART_SetConfig+0x6a8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	f040 80f8 	bne.w	800782a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800763a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800763e:	2b20      	cmp	r3, #32
 8007640:	dc46      	bgt.n	80076d0 <UART_SetConfig+0x648>
 8007642:	2b02      	cmp	r3, #2
 8007644:	f2c0 8082 	blt.w	800774c <UART_SetConfig+0x6c4>
 8007648:	3b02      	subs	r3, #2
 800764a:	2b1e      	cmp	r3, #30
 800764c:	d87e      	bhi.n	800774c <UART_SetConfig+0x6c4>
 800764e:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <UART_SetConfig+0x5cc>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	080076d7 	.word	0x080076d7
 8007658:	0800774d 	.word	0x0800774d
 800765c:	080076df 	.word	0x080076df
 8007660:	0800774d 	.word	0x0800774d
 8007664:	0800774d 	.word	0x0800774d
 8007668:	0800774d 	.word	0x0800774d
 800766c:	080076ef 	.word	0x080076ef
 8007670:	0800774d 	.word	0x0800774d
 8007674:	0800774d 	.word	0x0800774d
 8007678:	0800774d 	.word	0x0800774d
 800767c:	0800774d 	.word	0x0800774d
 8007680:	0800774d 	.word	0x0800774d
 8007684:	0800774d 	.word	0x0800774d
 8007688:	0800774d 	.word	0x0800774d
 800768c:	080076ff 	.word	0x080076ff
 8007690:	0800774d 	.word	0x0800774d
 8007694:	0800774d 	.word	0x0800774d
 8007698:	0800774d 	.word	0x0800774d
 800769c:	0800774d 	.word	0x0800774d
 80076a0:	0800774d 	.word	0x0800774d
 80076a4:	0800774d 	.word	0x0800774d
 80076a8:	0800774d 	.word	0x0800774d
 80076ac:	0800774d 	.word	0x0800774d
 80076b0:	0800774d 	.word	0x0800774d
 80076b4:	0800774d 	.word	0x0800774d
 80076b8:	0800774d 	.word	0x0800774d
 80076bc:	0800774d 	.word	0x0800774d
 80076c0:	0800774d 	.word	0x0800774d
 80076c4:	0800774d 	.word	0x0800774d
 80076c8:	0800774d 	.word	0x0800774d
 80076cc:	0800773f 	.word	0x0800773f
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	d037      	beq.n	8007744 <UART_SetConfig+0x6bc>
 80076d4:	e03a      	b.n	800774c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80076d6:	f7fd fdd1 	bl	800527c <HAL_RCCEx_GetD3PCLK1Freq>
 80076da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076dc:	e03c      	b.n	8007758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fd fde0 	bl	80052a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ec:	e034      	b.n	8007758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ee:	f107 0318 	add.w	r3, r7, #24
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd ff2c 	bl	8005550 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076fc:	e02c      	b.n	8007758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <UART_SetConfig+0x69c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	d016      	beq.n	8007738 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <UART_SetConfig+0x69c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	08db      	lsrs	r3, r3, #3
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	4a07      	ldr	r2, [pc, #28]	; (8007734 <UART_SetConfig+0x6ac>)
 8007716:	fa22 f303 	lsr.w	r3, r2, r3
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800771c:	e01c      	b.n	8007758 <UART_SetConfig+0x6d0>
 800771e:	bf00      	nop
 8007720:	40011400 	.word	0x40011400
 8007724:	58024400 	.word	0x58024400
 8007728:	40007800 	.word	0x40007800
 800772c:	40007c00 	.word	0x40007c00
 8007730:	58000c00 	.word	0x58000c00
 8007734:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007738:	4b9d      	ldr	r3, [pc, #628]	; (80079b0 <UART_SetConfig+0x928>)
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800773c:	e00c      	b.n	8007758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800773e:	4b9d      	ldr	r3, [pc, #628]	; (80079b4 <UART_SetConfig+0x92c>)
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007742:	e009      	b.n	8007758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800774a:	e005      	b.n	8007758 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007756:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 81de 	beq.w	8007b1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	4a94      	ldr	r2, [pc, #592]	; (80079b8 <UART_SetConfig+0x930>)
 8007766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800776a:	461a      	mov	r2, r3
 800776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007772:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	4613      	mov	r3, r2
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	4413      	add	r3, r2
 800777e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007780:	429a      	cmp	r2, r3
 8007782:	d305      	bcc.n	8007790 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800778a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778c:	429a      	cmp	r2, r3
 800778e:	d903      	bls.n	8007798 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007796:	e1c1      	b.n	8007b1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779a:	2200      	movs	r2, #0
 800779c:	60bb      	str	r3, [r7, #8]
 800779e:	60fa      	str	r2, [r7, #12]
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	4a84      	ldr	r2, [pc, #528]	; (80079b8 <UART_SetConfig+0x930>)
 80077a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2200      	movs	r2, #0
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	607a      	str	r2, [r7, #4]
 80077b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077ba:	f7f8 fde9 	bl	8000390 <__aeabi_uldivmod>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4610      	mov	r0, r2
 80077c4:	4619      	mov	r1, r3
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	020b      	lsls	r3, r1, #8
 80077d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077d4:	0202      	lsls	r2, r0, #8
 80077d6:	6979      	ldr	r1, [r7, #20]
 80077d8:	6849      	ldr	r1, [r1, #4]
 80077da:	0849      	lsrs	r1, r1, #1
 80077dc:	2000      	movs	r0, #0
 80077de:	460c      	mov	r4, r1
 80077e0:	4605      	mov	r5, r0
 80077e2:	eb12 0804 	adds.w	r8, r2, r4
 80077e6:	eb43 0905 	adc.w	r9, r3, r5
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	469a      	mov	sl, r3
 80077f2:	4693      	mov	fp, r2
 80077f4:	4652      	mov	r2, sl
 80077f6:	465b      	mov	r3, fp
 80077f8:	4640      	mov	r0, r8
 80077fa:	4649      	mov	r1, r9
 80077fc:	f7f8 fdc8 	bl	8000390 <__aeabi_uldivmod>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4613      	mov	r3, r2
 8007806:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780e:	d308      	bcc.n	8007822 <UART_SetConfig+0x79a>
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007816:	d204      	bcs.n	8007822 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800781e:	60da      	str	r2, [r3, #12]
 8007820:	e17c      	b.n	8007b1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007828:	e178      	b.n	8007b1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007832:	f040 80c5 	bne.w	80079c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007836:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800783a:	2b20      	cmp	r3, #32
 800783c:	dc48      	bgt.n	80078d0 <UART_SetConfig+0x848>
 800783e:	2b00      	cmp	r3, #0
 8007840:	db7b      	blt.n	800793a <UART_SetConfig+0x8b2>
 8007842:	2b20      	cmp	r3, #32
 8007844:	d879      	bhi.n	800793a <UART_SetConfig+0x8b2>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <UART_SetConfig+0x7c4>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	080078d7 	.word	0x080078d7
 8007850:	080078df 	.word	0x080078df
 8007854:	0800793b 	.word	0x0800793b
 8007858:	0800793b 	.word	0x0800793b
 800785c:	080078e7 	.word	0x080078e7
 8007860:	0800793b 	.word	0x0800793b
 8007864:	0800793b 	.word	0x0800793b
 8007868:	0800793b 	.word	0x0800793b
 800786c:	080078f7 	.word	0x080078f7
 8007870:	0800793b 	.word	0x0800793b
 8007874:	0800793b 	.word	0x0800793b
 8007878:	0800793b 	.word	0x0800793b
 800787c:	0800793b 	.word	0x0800793b
 8007880:	0800793b 	.word	0x0800793b
 8007884:	0800793b 	.word	0x0800793b
 8007888:	0800793b 	.word	0x0800793b
 800788c:	08007907 	.word	0x08007907
 8007890:	0800793b 	.word	0x0800793b
 8007894:	0800793b 	.word	0x0800793b
 8007898:	0800793b 	.word	0x0800793b
 800789c:	0800793b 	.word	0x0800793b
 80078a0:	0800793b 	.word	0x0800793b
 80078a4:	0800793b 	.word	0x0800793b
 80078a8:	0800793b 	.word	0x0800793b
 80078ac:	0800793b 	.word	0x0800793b
 80078b0:	0800793b 	.word	0x0800793b
 80078b4:	0800793b 	.word	0x0800793b
 80078b8:	0800793b 	.word	0x0800793b
 80078bc:	0800793b 	.word	0x0800793b
 80078c0:	0800793b 	.word	0x0800793b
 80078c4:	0800793b 	.word	0x0800793b
 80078c8:	0800793b 	.word	0x0800793b
 80078cc:	0800792d 	.word	0x0800792d
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d02e      	beq.n	8007932 <UART_SetConfig+0x8aa>
 80078d4:	e031      	b.n	800793a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078d6:	f7fc fa59 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 80078da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078dc:	e033      	b.n	8007946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078de:	f7fc fa6b 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 80078e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078e4:	e02f      	b.n	8007946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fd fcdc 	bl	80052a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078f4:	e027      	b.n	8007946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f6:	f107 0318 	add.w	r3, r7, #24
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fd fe28 	bl	8005550 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007904:	e01f      	b.n	8007946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007906:	4b2d      	ldr	r3, [pc, #180]	; (80079bc <UART_SetConfig+0x934>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007912:	4b2a      	ldr	r3, [pc, #168]	; (80079bc <UART_SetConfig+0x934>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	08db      	lsrs	r3, r3, #3
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	4a24      	ldr	r2, [pc, #144]	; (80079b0 <UART_SetConfig+0x928>)
 800791e:	fa22 f303 	lsr.w	r3, r2, r3
 8007922:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007924:	e00f      	b.n	8007946 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007926:	4b22      	ldr	r3, [pc, #136]	; (80079b0 <UART_SetConfig+0x928>)
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800792a:	e00c      	b.n	8007946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800792c:	4b21      	ldr	r3, [pc, #132]	; (80079b4 <UART_SetConfig+0x92c>)
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007930:	e009      	b.n	8007946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007938:	e005      	b.n	8007946 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80e7 	beq.w	8007b1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	4a19      	ldr	r2, [pc, #100]	; (80079b8 <UART_SetConfig+0x930>)
 8007954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007958:	461a      	mov	r2, r3
 800795a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800795c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007960:	005a      	lsls	r2, r3, #1
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	085b      	lsrs	r3, r3, #1
 8007968:	441a      	add	r2, r3
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007972:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007976:	2b0f      	cmp	r3, #15
 8007978:	d916      	bls.n	80079a8 <UART_SetConfig+0x920>
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007980:	d212      	bcs.n	80079a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	b29b      	uxth	r3, r3
 8007986:	f023 030f 	bic.w	r3, r3, #15
 800798a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	b29b      	uxth	r3, r3
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	b29a      	uxth	r2, r3
 8007998:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800799a:	4313      	orrs	r3, r2
 800799c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80079a4:	60da      	str	r2, [r3, #12]
 80079a6:	e0b9      	b.n	8007b1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80079ae:	e0b5      	b.n	8007b1c <UART_SetConfig+0xa94>
 80079b0:	03d09000 	.word	0x03d09000
 80079b4:	003d0900 	.word	0x003d0900
 80079b8:	0800d3c0 	.word	0x0800d3c0
 80079bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80079c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80079c4:	2b20      	cmp	r3, #32
 80079c6:	dc49      	bgt.n	8007a5c <UART_SetConfig+0x9d4>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	db7c      	blt.n	8007ac6 <UART_SetConfig+0xa3e>
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	d87a      	bhi.n	8007ac6 <UART_SetConfig+0xa3e>
 80079d0:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <UART_SetConfig+0x950>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	08007a63 	.word	0x08007a63
 80079dc:	08007a6b 	.word	0x08007a6b
 80079e0:	08007ac7 	.word	0x08007ac7
 80079e4:	08007ac7 	.word	0x08007ac7
 80079e8:	08007a73 	.word	0x08007a73
 80079ec:	08007ac7 	.word	0x08007ac7
 80079f0:	08007ac7 	.word	0x08007ac7
 80079f4:	08007ac7 	.word	0x08007ac7
 80079f8:	08007a83 	.word	0x08007a83
 80079fc:	08007ac7 	.word	0x08007ac7
 8007a00:	08007ac7 	.word	0x08007ac7
 8007a04:	08007ac7 	.word	0x08007ac7
 8007a08:	08007ac7 	.word	0x08007ac7
 8007a0c:	08007ac7 	.word	0x08007ac7
 8007a10:	08007ac7 	.word	0x08007ac7
 8007a14:	08007ac7 	.word	0x08007ac7
 8007a18:	08007a93 	.word	0x08007a93
 8007a1c:	08007ac7 	.word	0x08007ac7
 8007a20:	08007ac7 	.word	0x08007ac7
 8007a24:	08007ac7 	.word	0x08007ac7
 8007a28:	08007ac7 	.word	0x08007ac7
 8007a2c:	08007ac7 	.word	0x08007ac7
 8007a30:	08007ac7 	.word	0x08007ac7
 8007a34:	08007ac7 	.word	0x08007ac7
 8007a38:	08007ac7 	.word	0x08007ac7
 8007a3c:	08007ac7 	.word	0x08007ac7
 8007a40:	08007ac7 	.word	0x08007ac7
 8007a44:	08007ac7 	.word	0x08007ac7
 8007a48:	08007ac7 	.word	0x08007ac7
 8007a4c:	08007ac7 	.word	0x08007ac7
 8007a50:	08007ac7 	.word	0x08007ac7
 8007a54:	08007ac7 	.word	0x08007ac7
 8007a58:	08007ab9 	.word	0x08007ab9
 8007a5c:	2b40      	cmp	r3, #64	; 0x40
 8007a5e:	d02e      	beq.n	8007abe <UART_SetConfig+0xa36>
 8007a60:	e031      	b.n	8007ac6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a62:	f7fc f993 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8007a66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a68:	e033      	b.n	8007ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a6a:	f7fc f9a5 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8007a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a70:	e02f      	b.n	8007ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fd fc16 	bl	80052a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a80:	e027      	b.n	8007ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a82:	f107 0318 	add.w	r3, r7, #24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fd fd62 	bl	8005550 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a90:	e01f      	b.n	8007ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a92:	4b2d      	ldr	r3, [pc, #180]	; (8007b48 <UART_SetConfig+0xac0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a9e:	4b2a      	ldr	r3, [pc, #168]	; (8007b48 <UART_SetConfig+0xac0>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	08db      	lsrs	r3, r3, #3
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	4a28      	ldr	r2, [pc, #160]	; (8007b4c <UART_SetConfig+0xac4>)
 8007aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ab0:	e00f      	b.n	8007ad2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007ab2:	4b26      	ldr	r3, [pc, #152]	; (8007b4c <UART_SetConfig+0xac4>)
 8007ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ab6:	e00c      	b.n	8007ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ab8:	4b25      	ldr	r3, [pc, #148]	; (8007b50 <UART_SetConfig+0xac8>)
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007abc:	e009      	b.n	8007ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac4:	e005      	b.n	8007ad2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ad0:	bf00      	nop
    }

    if (pclk != 0U)
 8007ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d021      	beq.n	8007b1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <UART_SetConfig+0xacc>)
 8007ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	085b      	lsrs	r3, r3, #1
 8007af0:	441a      	add	r2, r3
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	d909      	bls.n	8007b16 <UART_SetConfig+0xa8e>
 8007b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b08:	d205      	bcs.n	8007b16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	60da      	str	r2, [r3, #12]
 8007b14:	e002      	b.n	8007b1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2200      	movs	r2, #0
 8007b36:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007b38:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3748      	adds	r7, #72	; 0x48
 8007b40:	46bd      	mov	sp, r7
 8007b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b46:	bf00      	nop
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	03d09000 	.word	0x03d09000
 8007b50:	003d0900 	.word	0x003d0900
 8007b54:	0800d3c0 	.word	0x0800d3c0

08007b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	f003 0310 	and.w	r3, r3, #16
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01a      	beq.n	8007c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c56:	d10a      	bne.n	8007c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	605a      	str	r2, [r3, #4]
  }
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b098      	sub	sp, #96	; 0x60
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cac:	f7f9 fe28 	bl	8001900 <HAL_GetTick>
 8007cb0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d12f      	bne.n	8007d20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f88e 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d022      	beq.n	8007d20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cee:	653b      	str	r3, [r7, #80]	; 0x50
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8007cfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e6      	bne.n	8007cda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e063      	b.n	8007de8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d149      	bne.n	8007dc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d36:	2200      	movs	r2, #0
 8007d38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f857 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d03c      	beq.n	8007dc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	623b      	str	r3, [r7, #32]
   return(result);
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d66:	633b      	str	r3, [r7, #48]	; 0x30
 8007d68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e6      	bne.n	8007d48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3308      	adds	r3, #8
 8007d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3308      	adds	r3, #8
 8007d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d9a:	61fa      	str	r2, [r7, #28]
 8007d9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	69b9      	ldr	r1, [r7, #24]
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	617b      	str	r3, [r7, #20]
   return(result);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e5      	bne.n	8007d7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2220      	movs	r2, #32
 8007db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e012      	b.n	8007de8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3758      	adds	r7, #88	; 0x58
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e00:	e049      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d045      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e0a:	f7f9 fd79 	bl	8001900 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d302      	bcc.n	8007e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e048      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0304 	and.w	r3, r3, #4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d031      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d110      	bne.n	8007e62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2208      	movs	r2, #8
 8007e46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f839 	bl	8007ec0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2208      	movs	r2, #8
 8007e52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e029      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e70:	d111      	bne.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f81f 	bl	8007ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e00f      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69da      	ldr	r2, [r3, #28]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	bf0c      	ite	eq
 8007ea6:	2301      	moveq	r3, #1
 8007ea8:	2300      	movne	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	461a      	mov	r2, r3
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d0a6      	beq.n	8007e02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b095      	sub	sp, #84	; 0x54
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ee8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e6      	bne.n	8007ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3308      	adds	r3, #8
 8007f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <UART_EndRxTransfer+0xc8>)
 8007f0e:	4013      	ands	r3, r2
 8007f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3308      	adds	r3, #8
 8007f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e5      	bne.n	8007efa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d118      	bne.n	8007f68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f023 0310 	bic.w	r3, r3, #16
 8007f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6979      	ldr	r1, [r7, #20]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	613b      	str	r3, [r7, #16]
   return(result);
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e6      	bne.n	8007f36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007f7c:	bf00      	nop
 8007f7e:	3754      	adds	r7, #84	; 0x54
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	effffffe 	.word	0xeffffffe

08007f8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f7ff f856 	bl	800705c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	61bb      	str	r3, [r7, #24]
 8007fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6979      	ldr	r1, [r7, #20]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	613b      	str	r3, [r7, #16]
   return(result);
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e6      	bne.n	8007fc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff f821 	bl	8007048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008006:	bf00      	nop
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_UARTEx_EnableFifoMode+0x16>
 800805c:	2302      	movs	r3, #2
 800805e:	e02b      	b.n	80080b8 <HAL_UARTEx_EnableFifoMode+0x6e>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2224      	movs	r2, #36	; 0x24
 800806c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800808e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008096:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f889 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e02d      	b.n	8008134 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2224      	movs	r2, #36	; 0x24
 80080e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f84f 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008150:	2302      	movs	r3, #2
 8008152:	e02d      	b.n	80081b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2224      	movs	r2, #36	; 0x24
 8008160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f811 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d108      	bne.n	80081da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081d8:	e031      	b.n	800823e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081da:	2310      	movs	r3, #16
 80081dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081de:	2310      	movs	r3, #16
 80081e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	0e5b      	lsrs	r3, r3, #25
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	0f5b      	lsrs	r3, r3, #29
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	7b3a      	ldrb	r2, [r7, #12]
 8008206:	4911      	ldr	r1, [pc, #68]	; (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008208:	5c8a      	ldrb	r2, [r1, r2]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800820e:	7b3a      	ldrb	r2, [r7, #12]
 8008210:	490f      	ldr	r1, [pc, #60]	; (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008214:	fb93 f3f2 	sdiv	r3, r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	7b7a      	ldrb	r2, [r7, #13]
 8008224:	4909      	ldr	r1, [pc, #36]	; (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008226:	5c8a      	ldrb	r2, [r1, r2]
 8008228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800822c:	7b7a      	ldrb	r2, [r7, #13]
 800822e:	4908      	ldr	r1, [pc, #32]	; (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008232:	fb93 f3f2 	sdiv	r3, r3, r2
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800823e:	bf00      	nop
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	0800d3d8 	.word	0x0800d3d8
 8008250:	0800d3e0 	.word	0x0800d3e0

08008254 <__NVIC_SetPriority>:
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008264:	2b00      	cmp	r3, #0
 8008266:	db0a      	blt.n	800827e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	b2da      	uxtb	r2, r3
 800826c:	490c      	ldr	r1, [pc, #48]	; (80082a0 <__NVIC_SetPriority+0x4c>)
 800826e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008272:	0112      	lsls	r2, r2, #4
 8008274:	b2d2      	uxtb	r2, r2
 8008276:	440b      	add	r3, r1
 8008278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800827c:	e00a      	b.n	8008294 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	4908      	ldr	r1, [pc, #32]	; (80082a4 <__NVIC_SetPriority+0x50>)
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	f003 030f 	and.w	r3, r3, #15
 800828a:	3b04      	subs	r3, #4
 800828c:	0112      	lsls	r2, r2, #4
 800828e:	b2d2      	uxtb	r2, r2
 8008290:	440b      	add	r3, r1
 8008292:	761a      	strb	r2, [r3, #24]
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	e000e100 	.word	0xe000e100
 80082a4:	e000ed00 	.word	0xe000ed00

080082a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <SysTick_Handler+0x1c>)
 80082ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80082b0:	f002 ff26 	bl	800b100 <xTaskGetSchedulerState>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d001      	beq.n	80082be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80082ba:	f000 fced 	bl	8008c98 <xPortSysTickHandler>
  }
}
 80082be:	bf00      	nop
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	e000e010 	.word	0xe000e010

080082c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80082cc:	2100      	movs	r1, #0
 80082ce:	f06f 0004 	mvn.w	r0, #4
 80082d2:	f7ff ffbf 	bl	8008254 <__NVIC_SetPriority>
#endif
}
 80082d6:	bf00      	nop
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e2:	f3ef 8305 	mrs	r3, IPSR
 80082e6:	603b      	str	r3, [r7, #0]
  return(result);
 80082e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80082ee:	f06f 0305 	mvn.w	r3, #5
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e00c      	b.n	8008310 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082f6:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <osKernelInitialize+0x44>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d105      	bne.n	800830a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082fe:	4b08      	ldr	r3, [pc, #32]	; (8008320 <osKernelInitialize+0x44>)
 8008300:	2201      	movs	r2, #1
 8008302:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008304:	2300      	movs	r3, #0
 8008306:	607b      	str	r3, [r7, #4]
 8008308:	e002      	b.n	8008310 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800830a:	f04f 33ff 	mov.w	r3, #4294967295
 800830e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008310:	687b      	ldr	r3, [r7, #4]
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	240081d0 	.word	0x240081d0

08008324 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800832a:	f3ef 8305 	mrs	r3, IPSR
 800832e:	603b      	str	r3, [r7, #0]
  return(result);
 8008330:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008336:	f06f 0305 	mvn.w	r3, #5
 800833a:	607b      	str	r3, [r7, #4]
 800833c:	e010      	b.n	8008360 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800833e:	4b0b      	ldr	r3, [pc, #44]	; (800836c <osKernelStart+0x48>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d109      	bne.n	800835a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008346:	f7ff ffbf 	bl	80082c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800834a:	4b08      	ldr	r3, [pc, #32]	; (800836c <osKernelStart+0x48>)
 800834c:	2202      	movs	r2, #2
 800834e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008350:	f002 fa44 	bl	800a7dc <vTaskStartScheduler>
      stat = osOK;
 8008354:	2300      	movs	r3, #0
 8008356:	607b      	str	r3, [r7, #4]
 8008358:	e002      	b.n	8008360 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800835a:	f04f 33ff 	mov.w	r3, #4294967295
 800835e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008360:	687b      	ldr	r3, [r7, #4]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	240081d0 	.word	0x240081d0

08008370 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4a07      	ldr	r2, [pc, #28]	; (800839c <vApplicationGetIdleTaskMemory+0x2c>)
 8008380:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	4a06      	ldr	r2, [pc, #24]	; (80083a0 <vApplicationGetIdleTaskMemory+0x30>)
 8008386:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	601a      	str	r2, [r3, #0]
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	240081d4 	.word	0x240081d4
 80083a0:	24008290 	.word	0x24008290

080083a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4a07      	ldr	r2, [pc, #28]	; (80083d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80083b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	4a06      	ldr	r2, [pc, #24]	; (80083d4 <vApplicationGetTimerTaskMemory+0x30>)
 80083ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083c2:	601a      	str	r2, [r3, #0]
}
 80083c4:	bf00      	nop
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	24008490 	.word	0x24008490
 80083d4:	2400854c 	.word	0x2400854c

080083d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083e4:	f002 fa6a 	bl	800a8bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083e8:	4b5b      	ldr	r3, [pc, #364]	; (8008558 <pvPortMalloc+0x180>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083f0:	f000 f920 	bl	8008634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083f4:	4b59      	ldr	r3, [pc, #356]	; (800855c <pvPortMalloc+0x184>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4013      	ands	r3, r2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f040 8093 	bne.w	8008528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01d      	beq.n	8008444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008408:	2208      	movs	r2, #8
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b00      	cmp	r3, #0
 8008418:	d014      	beq.n	8008444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f023 0307 	bic.w	r3, r3, #7
 8008420:	3308      	adds	r3, #8
 8008422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <pvPortMalloc+0x6c>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	617b      	str	r3, [r7, #20]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d06e      	beq.n	8008528 <pvPortMalloc+0x150>
 800844a:	4b45      	ldr	r3, [pc, #276]	; (8008560 <pvPortMalloc+0x188>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d869      	bhi.n	8008528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008454:	4b43      	ldr	r3, [pc, #268]	; (8008564 <pvPortMalloc+0x18c>)
 8008456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008458:	4b42      	ldr	r3, [pc, #264]	; (8008564 <pvPortMalloc+0x18c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800845e:	e004      	b.n	800846a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d903      	bls.n	800847c <pvPortMalloc+0xa4>
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f1      	bne.n	8008460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800847c:	4b36      	ldr	r3, [pc, #216]	; (8008558 <pvPortMalloc+0x180>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	429a      	cmp	r2, r3
 8008484:	d050      	beq.n	8008528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2208      	movs	r2, #8
 800848c:	4413      	add	r3, r2
 800848e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	2308      	movs	r3, #8
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d91f      	bls.n	80084e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <pvPortMalloc+0xf8>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	613b      	str	r3, [r7, #16]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	1ad2      	subs	r2, r2, r3
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084e2:	69b8      	ldr	r0, [r7, #24]
 80084e4:	f000 f908 	bl	80086f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084e8:	4b1d      	ldr	r3, [pc, #116]	; (8008560 <pvPortMalloc+0x188>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	4a1b      	ldr	r2, [pc, #108]	; (8008560 <pvPortMalloc+0x188>)
 80084f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084f6:	4b1a      	ldr	r3, [pc, #104]	; (8008560 <pvPortMalloc+0x188>)
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <pvPortMalloc+0x190>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d203      	bcs.n	800850a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008502:	4b17      	ldr	r3, [pc, #92]	; (8008560 <pvPortMalloc+0x188>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a18      	ldr	r2, [pc, #96]	; (8008568 <pvPortMalloc+0x190>)
 8008508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	4b13      	ldr	r3, [pc, #76]	; (800855c <pvPortMalloc+0x184>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	431a      	orrs	r2, r3
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <pvPortMalloc+0x194>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	4a11      	ldr	r2, [pc, #68]	; (800856c <pvPortMalloc+0x194>)
 8008526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008528:	f002 f9d6 	bl	800a8d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <pvPortMalloc+0x174>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60fb      	str	r3, [r7, #12]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <pvPortMalloc+0x172>
	return pvReturn;
 800854c:	69fb      	ldr	r3, [r7, #28]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3728      	adds	r7, #40	; 0x28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	2400c554 	.word	0x2400c554
 800855c:	2400c568 	.word	0x2400c568
 8008560:	2400c558 	.word	0x2400c558
 8008564:	2400c54c 	.word	0x2400c54c
 8008568:	2400c55c 	.word	0x2400c55c
 800856c:	2400c560 	.word	0x2400c560

08008570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d04d      	beq.n	800861e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008582:	2308      	movs	r3, #8
 8008584:	425b      	negs	r3, r3
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4413      	add	r3, r2
 800858a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	4b24      	ldr	r3, [pc, #144]	; (8008628 <vPortFree+0xb8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4013      	ands	r3, r2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10a      	bne.n	80085b4 <vPortFree+0x44>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
}
 80085b0:	bf00      	nop
 80085b2:	e7fe      	b.n	80085b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <vPortFree+0x62>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60bb      	str	r3, [r7, #8]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	4b14      	ldr	r3, [pc, #80]	; (8008628 <vPortFree+0xb8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4013      	ands	r3, r2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01e      	beq.n	800861e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d11a      	bne.n	800861e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <vPortFree+0xb8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	43db      	mvns	r3, r3
 80085f2:	401a      	ands	r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085f8:	f002 f960 	bl	800a8bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	4b0a      	ldr	r3, [pc, #40]	; (800862c <vPortFree+0xbc>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4413      	add	r3, r2
 8008606:	4a09      	ldr	r2, [pc, #36]	; (800862c <vPortFree+0xbc>)
 8008608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800860a:	6938      	ldr	r0, [r7, #16]
 800860c:	f000 f874 	bl	80086f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <vPortFree+0xc0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	4a06      	ldr	r2, [pc, #24]	; (8008630 <vPortFree+0xc0>)
 8008618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800861a:	f002 f95d 	bl	800a8d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800861e:	bf00      	nop
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	2400c568 	.word	0x2400c568
 800862c:	2400c558 	.word	0x2400c558
 8008630:	2400c564 	.word	0x2400c564

08008634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800863a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800863e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008640:	4b27      	ldr	r3, [pc, #156]	; (80086e0 <prvHeapInit+0xac>)
 8008642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00c      	beq.n	8008668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3307      	adds	r3, #7
 8008652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	4a1f      	ldr	r2, [pc, #124]	; (80086e0 <prvHeapInit+0xac>)
 8008664:	4413      	add	r3, r2
 8008666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800866c:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <prvHeapInit+0xb0>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <prvHeapInit+0xb0>)
 8008674:	2200      	movs	r2, #0
 8008676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	4413      	add	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008680:	2208      	movs	r2, #8
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	1a9b      	subs	r3, r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a15      	ldr	r2, [pc, #84]	; (80086e8 <prvHeapInit+0xb4>)
 8008694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <prvHeapInit+0xb4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800869e:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <prvHeapInit+0xb4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	1ad2      	subs	r2, r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086b4:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <prvHeapInit+0xb4>)
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	4a0a      	ldr	r2, [pc, #40]	; (80086ec <prvHeapInit+0xb8>)
 80086c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <prvHeapInit+0xbc>)
 80086ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086cc:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <prvHeapInit+0xc0>)
 80086ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	2400894c 	.word	0x2400894c
 80086e4:	2400c54c 	.word	0x2400c54c
 80086e8:	2400c554 	.word	0x2400c554
 80086ec:	2400c55c 	.word	0x2400c55c
 80086f0:	2400c558 	.word	0x2400c558
 80086f4:	2400c568 	.word	0x2400c568

080086f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008700:	4b28      	ldr	r3, [pc, #160]	; (80087a4 <prvInsertBlockIntoFreeList+0xac>)
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e002      	b.n	800870c <prvInsertBlockIntoFreeList+0x14>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	429a      	cmp	r2, r3
 8008714:	d8f7      	bhi.n	8008706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	4413      	add	r3, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	429a      	cmp	r2, r3
 8008726:	d108      	bne.n	800873a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	441a      	add	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	441a      	add	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d118      	bne.n	8008780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d00d      	beq.n	8008776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	441a      	add	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e008      	b.n	8008788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008776:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	e003      	b.n	8008788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d002      	beq.n	8008796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	2400c54c 	.word	0x2400c54c
 80087a8:	2400c554 	.word	0x2400c554

080087ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f103 0208 	add.w	r2, r3, #8
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f04f 32ff 	mov.w	r2, #4294967295
 80087c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f103 0208 	add.w	r2, r3, #8
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f103 0208 	add.w	r2, r3, #8
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	601a      	str	r2, [r3, #0]
}
 8008842:	bf00      	nop
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800884e:	b480      	push	{r7}
 8008850:	b085      	sub	sp, #20
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008864:	d103      	bne.n	800886e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	e00c      	b.n	8008888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3308      	adds	r3, #8
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	e002      	b.n	800887c <vListInsert+0x2e>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	429a      	cmp	r2, r3
 8008886:	d2f6      	bcs.n	8008876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	601a      	str	r2, [r3, #0]
}
 80088b4:	bf00      	nop
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6892      	ldr	r2, [r2, #8]
 80088d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6852      	ldr	r2, [r2, #4]
 80088e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d103      	bne.n	80088f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	1e5a      	subs	r2, r3, #1
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3b04      	subs	r3, #4
 8008924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800892c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3b04      	subs	r3, #4
 8008932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f023 0201 	bic.w	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3b04      	subs	r3, #4
 8008942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008944:	4a0c      	ldr	r2, [pc, #48]	; (8008978 <pxPortInitialiseStack+0x64>)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3b14      	subs	r3, #20
 800894e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3b04      	subs	r3, #4
 800895a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f06f 0202 	mvn.w	r2, #2
 8008962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3b20      	subs	r3, #32
 8008968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	0800897d 	.word	0x0800897d

0800897c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008986:	4b12      	ldr	r3, [pc, #72]	; (80089d0 <prvTaskExitError+0x54>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898e:	d00a      	beq.n	80089a6 <prvTaskExitError+0x2a>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60fb      	str	r3, [r7, #12]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <prvTaskExitError+0x28>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ba:	bf00      	nop
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0fc      	beq.n	80089bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	24000014 	.word	0x24000014
	...

080089e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089e0:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <pxCurrentTCBConst2>)
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	6808      	ldr	r0, [r1, #0]
 80089e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	f380 8809 	msr	PSP, r0
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8811 	msr	BASEPRI, r0
 80089fa:	4770      	bx	lr
 80089fc:	f3af 8000 	nop.w

08008a00 <pxCurrentTCBConst2>:
 8008a00:	2400c5b4 	.word	0x2400c5b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a08:	4808      	ldr	r0, [pc, #32]	; (8008a2c <prvPortStartFirstTask+0x24>)
 8008a0a:	6800      	ldr	r0, [r0, #0]
 8008a0c:	6800      	ldr	r0, [r0, #0]
 8008a0e:	f380 8808 	msr	MSP, r0
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8814 	msr	CONTROL, r0
 8008a1a:	b662      	cpsie	i
 8008a1c:	b661      	cpsie	f
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	df00      	svc	0
 8008a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a2a:	bf00      	nop
 8008a2c:	e000ed08 	.word	0xe000ed08

08008a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a36:	4b46      	ldr	r3, [pc, #280]	; (8008b50 <xPortStartScheduler+0x120>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a46      	ldr	r2, [pc, #280]	; (8008b54 <xPortStartScheduler+0x124>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10a      	bne.n	8008a56 <xPortStartScheduler+0x26>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	613b      	str	r3, [r7, #16]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a56:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <xPortStartScheduler+0x120>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a3f      	ldr	r2, [pc, #252]	; (8008b58 <xPortStartScheduler+0x128>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10a      	bne.n	8008a76 <xPortStartScheduler+0x46>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	60fb      	str	r3, [r7, #12]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a76:	4b39      	ldr	r3, [pc, #228]	; (8008b5c <xPortStartScheduler+0x12c>)
 8008a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	4b31      	ldr	r3, [pc, #196]	; (8008b60 <xPortStartScheduler+0x130>)
 8008a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a9e:	4b31      	ldr	r3, [pc, #196]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aa4:	e009      	b.n	8008aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008aa6:	4b2f      	ldr	r3, [pc, #188]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	4a2d      	ldr	r2, [pc, #180]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac2:	2b80      	cmp	r3, #128	; 0x80
 8008ac4:	d0ef      	beq.n	8008aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ac6:	4b27      	ldr	r3, [pc, #156]	; (8008b64 <xPortStartScheduler+0x134>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f1c3 0307 	rsb	r3, r3, #7
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d00a      	beq.n	8008ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60bb      	str	r3, [r7, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	e7fe      	b.n	8008ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ae8:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	4a1d      	ldr	r2, [pc, #116]	; (8008b64 <xPortStartScheduler+0x134>)
 8008af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008af2:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <xPortStartScheduler+0x134>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008afa:	4a1a      	ldr	r2, [pc, #104]	; (8008b64 <xPortStartScheduler+0x134>)
 8008afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b06:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a14      	ldr	r2, [pc, #80]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b1e:	f000 f8dd 	bl	8008cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b22:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <xPortStartScheduler+0x13c>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b28:	f000 f8fc 	bl	8008d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <xPortStartScheduler+0x140>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a0f      	ldr	r2, [pc, #60]	; (8008b70 <xPortStartScheduler+0x140>)
 8008b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b38:	f7ff ff66 	bl	8008a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b3c:	f002 f834 	bl	800aba8 <vTaskSwitchContext>
	prvTaskExitError();
 8008b40:	f7ff ff1c 	bl	800897c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	e000ed00 	.word	0xe000ed00
 8008b54:	410fc271 	.word	0x410fc271
 8008b58:	410fc270 	.word	0x410fc270
 8008b5c:	e000e400 	.word	0xe000e400
 8008b60:	2400c56c 	.word	0x2400c56c
 8008b64:	2400c570 	.word	0x2400c570
 8008b68:	e000ed20 	.word	0xe000ed20
 8008b6c:	24000014 	.word	0x24000014
 8008b70:	e000ef34 	.word	0xe000ef34

08008b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	607b      	str	r3, [r7, #4]
}
 8008b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b8e:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3301      	adds	r3, #1
 8008b94:	4a0d      	ldr	r2, [pc, #52]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d10f      	bne.n	8008bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <vPortEnterCritical+0x5c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	603b      	str	r3, [r7, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <vPortEnterCritical+0x4a>
	}
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	24000014 	.word	0x24000014
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <vPortExitCritical+0x50>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <vPortExitCritical+0x24>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	607b      	str	r3, [r7, #4]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <vPortExitCritical+0x50>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <vPortExitCritical+0x50>)
 8008c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c02:	4b08      	ldr	r3, [pc, #32]	; (8008c24 <vPortExitCritical+0x50>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d105      	bne.n	8008c16 <vPortExitCritical+0x42>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	24000014 	.word	0x24000014
	...

08008c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c30:	f3ef 8009 	mrs	r0, PSP
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <pxCurrentTCBConst>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	f01e 0f10 	tst.w	lr, #16
 8008c40:	bf08      	it	eq
 8008c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	6010      	str	r0, [r2, #0]
 8008c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c54:	f380 8811 	msr	BASEPRI, r0
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f001 ffa2 	bl	800aba8 <vTaskSwitchContext>
 8008c64:	f04f 0000 	mov.w	r0, #0
 8008c68:	f380 8811 	msr	BASEPRI, r0
 8008c6c:	bc09      	pop	{r0, r3}
 8008c6e:	6819      	ldr	r1, [r3, #0]
 8008c70:	6808      	ldr	r0, [r1, #0]
 8008c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c76:	f01e 0f10 	tst.w	lr, #16
 8008c7a:	bf08      	it	eq
 8008c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c80:	f380 8809 	msr	PSP, r0
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst>:
 8008c90:	2400c5b4 	.word	0x2400c5b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	607b      	str	r3, [r7, #4]
}
 8008cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cb2:	f001 febf 	bl	800aa34 <xTaskIncrementTick>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <xPortSysTickHandler+0x40>)
 8008cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f383 8811 	msr	BASEPRI, r3
}
 8008cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <vPortSetupTimerInterrupt+0x34>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ce6:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <vPortSetupTimerInterrupt+0x38>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cec:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <vPortSetupTimerInterrupt+0x3c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	; (8008d1c <vPortSetupTimerInterrupt+0x40>)
 8008cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf6:	099b      	lsrs	r3, r3, #6
 8008cf8:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <vPortSetupTimerInterrupt+0x44>)
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <vPortSetupTimerInterrupt+0x34>)
 8008d00:	2207      	movs	r2, #7
 8008d02:	601a      	str	r2, [r3, #0]
}
 8008d04:	bf00      	nop
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	e000e010 	.word	0xe000e010
 8008d14:	e000e018 	.word	0xe000e018
 8008d18:	24000000 	.word	0x24000000
 8008d1c:	10624dd3 	.word	0x10624dd3
 8008d20:	e000e014 	.word	0xe000e014

08008d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d34 <vPortEnableVFP+0x10>
 8008d28:	6801      	ldr	r1, [r0, #0]
 8008d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d2e:	6001      	str	r1, [r0, #0]
 8008d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d32:	bf00      	nop
 8008d34:	e000ed88 	.word	0xe000ed88

08008d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d3e:	f3ef 8305 	mrs	r3, IPSR
 8008d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b0f      	cmp	r3, #15
 8008d48:	d914      	bls.n	8008d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d4a:	4a17      	ldr	r2, [pc, #92]	; (8008da8 <vPortValidateInterruptPriority+0x70>)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d54:	4b15      	ldr	r3, [pc, #84]	; (8008dac <vPortValidateInterruptPriority+0x74>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	7afa      	ldrb	r2, [r7, #11]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d20a      	bcs.n	8008d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	607b      	str	r3, [r7, #4]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <vPortValidateInterruptPriority+0x78>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d7c:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <vPortValidateInterruptPriority+0x7c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d90a      	bls.n	8008d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	603b      	str	r3, [r7, #0]
}
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <vPortValidateInterruptPriority+0x60>
	}
 8008d9a:	bf00      	nop
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	e000e3f0 	.word	0xe000e3f0
 8008dac:	2400c56c 	.word	0x2400c56c
 8008db0:	e000ed0c 	.word	0xe000ed0c
 8008db4:	2400c570 	.word	0x2400c570

08008db8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <xQueueGenericReset+0x2a>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	60bb      	str	r3, [r7, #8]
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008de2:	f7ff fec7 	bl	8008b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	68f9      	ldr	r1, [r7, #12]
 8008df0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008df2:	fb01 f303 	mul.w	r3, r1, r3
 8008df6:	441a      	add	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e12:	3b01      	subs	r3, #1
 8008e14:	68f9      	ldr	r1, [r7, #12]
 8008e16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	441a      	add	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	22ff      	movs	r2, #255	; 0xff
 8008e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	22ff      	movs	r2, #255	; 0xff
 8008e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d114      	bne.n	8008e62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01a      	beq.n	8008e76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3310      	adds	r3, #16
 8008e44:	4618      	mov	r0, r3
 8008e46:	f001 ff63 	bl	800ad10 <xTaskRemoveFromEventList>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d012      	beq.n	8008e76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <xQueueGenericReset+0xcc>)
 8008e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	e009      	b.n	8008e76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3310      	adds	r3, #16
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff fca0 	bl	80087ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3324      	adds	r3, #36	; 0x24
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7ff fc9b 	bl	80087ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e76:	f7ff fead 	bl	8008bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e7a:	2301      	movs	r3, #1
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	e000ed04 	.word	0xe000ed04

08008e88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08e      	sub	sp, #56	; 0x38
 8008e8c:	af02      	add	r7, sp, #8
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008eae:	bf00      	nop
 8008eb0:	e7fe      	b.n	8008eb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <xQueueGenericCreateStatic+0x52>
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <xQueueGenericCreateStatic+0x56>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e000      	b.n	8008ee0 <xQueueGenericCreateStatic+0x58>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10a      	bne.n	8008efa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	623b      	str	r3, [r7, #32]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d102      	bne.n	8008f06 <xQueueGenericCreateStatic+0x7e>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <xQueueGenericCreateStatic+0x82>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <xQueueGenericCreateStatic+0x84>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	61fb      	str	r3, [r7, #28]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f26:	2350      	movs	r3, #80	; 0x50
 8008f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b50      	cmp	r3, #80	; 0x50
 8008f2e:	d00a      	beq.n	8008f46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	61bb      	str	r3, [r7, #24]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00d      	beq.n	8008f6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4613      	mov	r3, r2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	68b9      	ldr	r1, [r7, #8]
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 f83f 	bl	8008fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3730      	adds	r7, #48	; 0x30
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08a      	sub	sp, #40	; 0x28
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	613b      	str	r3, [r7, #16]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	fb02 f303 	mul.w	r3, r2, r3
 8008faa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	3350      	adds	r3, #80	; 0x50
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff fa11 	bl	80083d8 <pvPortMalloc>
 8008fb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d011      	beq.n	8008fe2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	3350      	adds	r3, #80	; 0x50
 8008fc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fd0:	79fa      	ldrb	r2, [r7, #7]
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	68b9      	ldr	r1, [r7, #8]
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 f805 	bl	8008fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3720      	adds	r7, #32
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d103      	bne.n	8009008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	e002      	b.n	800900e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800901a:	2101      	movs	r1, #1
 800901c:	69b8      	ldr	r0, [r7, #24]
 800901e:	f7ff fecb 	bl	8008db8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08e      	sub	sp, #56	; 0x38
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009042:	2300      	movs	r3, #0
 8009044:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10a      	bne.n	8009066 <xQueueGenericSend+0x32>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009062:	bf00      	nop
 8009064:	e7fe      	b.n	8009064 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <xQueueGenericSend+0x40>
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <xQueueGenericSend+0x44>
 8009074:	2301      	movs	r3, #1
 8009076:	e000      	b.n	800907a <xQueueGenericSend+0x46>
 8009078:	2300      	movs	r3, #0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10a      	bne.n	8009094 <xQueueGenericSend+0x60>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009090:	bf00      	nop
 8009092:	e7fe      	b.n	8009092 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d103      	bne.n	80090a2 <xQueueGenericSend+0x6e>
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d101      	bne.n	80090a6 <xQueueGenericSend+0x72>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e000      	b.n	80090a8 <xQueueGenericSend+0x74>
 80090a6:	2300      	movs	r3, #0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	623b      	str	r3, [r7, #32]
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090c2:	f002 f81d 	bl	800b100 <xTaskGetSchedulerState>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <xQueueGenericSend+0x9e>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <xQueueGenericSend+0xa2>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <xQueueGenericSend+0xa4>
 80090d6:	2300      	movs	r3, #0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10a      	bne.n	80090f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	61fb      	str	r3, [r7, #28]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090f2:	f7ff fd3f 	bl	8008b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fe:	429a      	cmp	r2, r3
 8009100:	d302      	bcc.n	8009108 <xQueueGenericSend+0xd4>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d129      	bne.n	800915c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800910e:	f000 fbbb 	bl	8009888 <prvCopyDataToQueue>
 8009112:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	2b00      	cmp	r3, #0
 800911a:	d010      	beq.n	800913e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	3324      	adds	r3, #36	; 0x24
 8009120:	4618      	mov	r0, r3
 8009122:	f001 fdf5 	bl	800ad10 <xTaskRemoveFromEventList>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d013      	beq.n	8009154 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800912c:	4b3f      	ldr	r3, [pc, #252]	; (800922c <xQueueGenericSend+0x1f8>)
 800912e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	e00a      	b.n	8009154 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d007      	beq.n	8009154 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009144:	4b39      	ldr	r3, [pc, #228]	; (800922c <xQueueGenericSend+0x1f8>)
 8009146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009154:	f7ff fd3e 	bl	8008bd4 <vPortExitCritical>
				return pdPASS;
 8009158:	2301      	movs	r3, #1
 800915a:	e063      	b.n	8009224 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d103      	bne.n	800916a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009162:	f7ff fd37 	bl	8008bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009166:	2300      	movs	r3, #0
 8009168:	e05c      	b.n	8009224 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800916a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916c:	2b00      	cmp	r3, #0
 800916e:	d106      	bne.n	800917e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009170:	f107 0314 	add.w	r3, r7, #20
 8009174:	4618      	mov	r0, r3
 8009176:	f001 fe55 	bl	800ae24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800917a:	2301      	movs	r3, #1
 800917c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800917e:	f7ff fd29 	bl	8008bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009182:	f001 fb9b 	bl	800a8bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009186:	f7ff fcf5 	bl	8008b74 <vPortEnterCritical>
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009190:	b25b      	sxtb	r3, r3
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d103      	bne.n	80091a0 <xQueueGenericSend+0x16c>
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091a6:	b25b      	sxtb	r3, r3
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ac:	d103      	bne.n	80091b6 <xQueueGenericSend+0x182>
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091b6:	f7ff fd0d 	bl	8008bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091ba:	1d3a      	adds	r2, r7, #4
 80091bc:	f107 0314 	add.w	r3, r7, #20
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f001 fe44 	bl	800ae50 <xTaskCheckForTimeOut>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d124      	bne.n	8009218 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091d0:	f000 fc52 	bl	8009a78 <prvIsQueueFull>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d018      	beq.n	800920c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	3310      	adds	r3, #16
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 fd44 	bl	800ac70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ea:	f000 fbdd 	bl	80099a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091ee:	f001 fb73 	bl	800a8d8 <xTaskResumeAll>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f47f af7c 	bne.w	80090f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80091fa:	4b0c      	ldr	r3, [pc, #48]	; (800922c <xQueueGenericSend+0x1f8>)
 80091fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	e772      	b.n	80090f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800920c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800920e:	f000 fbcb 	bl	80099a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009212:	f001 fb61 	bl	800a8d8 <xTaskResumeAll>
 8009216:	e76c      	b.n	80090f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800921a:	f000 fbc5 	bl	80099a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800921e:	f001 fb5b 	bl	800a8d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009222:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009224:	4618      	mov	r0, r3
 8009226:	3738      	adds	r7, #56	; 0x38
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	e000ed04 	.word	0xe000ed04

08009230 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b090      	sub	sp, #64	; 0x40
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d103      	bne.n	800926c <xQueueGenericSendFromISR+0x3c>
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <xQueueGenericSendFromISR+0x40>
 800926c:	2301      	movs	r3, #1
 800926e:	e000      	b.n	8009272 <xQueueGenericSendFromISR+0x42>
 8009270:	2300      	movs	r3, #0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009288:	bf00      	nop
 800928a:	e7fe      	b.n	800928a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b02      	cmp	r3, #2
 8009290:	d103      	bne.n	800929a <xQueueGenericSendFromISR+0x6a>
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009296:	2b01      	cmp	r3, #1
 8009298:	d101      	bne.n	800929e <xQueueGenericSendFromISR+0x6e>
 800929a:	2301      	movs	r3, #1
 800929c:	e000      	b.n	80092a0 <xQueueGenericSendFromISR+0x70>
 800929e:	2300      	movs	r3, #0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	623b      	str	r3, [r7, #32]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ba:	f7ff fd3d 	bl	8008d38 <vPortValidateInterruptPriority>
	__asm volatile
 80092be:	f3ef 8211 	mrs	r2, BASEPRI
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	61fa      	str	r2, [r7, #28]
 80092d4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80092d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d302      	bcc.n	80092ec <xQueueGenericSendFromISR+0xbc>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d12f      	bne.n	800934c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009302:	f000 fac1 	bl	8009888 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009306:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800930a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930e:	d112      	bne.n	8009336 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	d016      	beq.n	8009346 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	3324      	adds	r3, #36	; 0x24
 800931c:	4618      	mov	r0, r3
 800931e:	f001 fcf7 	bl	800ad10 <xTaskRemoveFromEventList>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00e      	beq.n	8009346 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	e007      	b.n	8009346 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009336:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800933a:	3301      	adds	r3, #1
 800933c:	b2db      	uxtb	r3, r3
 800933e:	b25a      	sxtb	r2, r3
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009346:	2301      	movs	r3, #1
 8009348:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800934a:	e001      	b.n	8009350 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800934c:	2300      	movs	r3, #0
 800934e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009352:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f383 8811 	msr	BASEPRI, r3
}
 800935a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800935c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800935e:	4618      	mov	r0, r3
 8009360:	3740      	adds	r7, #64	; 0x40
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b08e      	sub	sp, #56	; 0x38
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10a      	bne.n	8009390 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	623b      	str	r3, [r7, #32]
}
 800938c:	bf00      	nop
 800938e:	e7fe      	b.n	800938e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	61fb      	str	r3, [r7, #28]
}
 80093aa:	bf00      	nop
 80093ac:	e7fe      	b.n	80093ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80093ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d103      	bne.n	80093be <xQueueGiveFromISR+0x58>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <xQueueGiveFromISR+0x5c>
 80093be:	2301      	movs	r3, #1
 80093c0:	e000      	b.n	80093c4 <xQueueGiveFromISR+0x5e>
 80093c2:	2300      	movs	r3, #0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xQueueGiveFromISR+0x78>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	61bb      	str	r3, [r7, #24]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093de:	f7ff fcab 	bl	8008d38 <vPortValidateInterruptPriority>
	__asm volatile
 80093e2:	f3ef 8211 	mrs	r2, BASEPRI
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	617a      	str	r2, [r7, #20]
 80093f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80093fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800940a:	429a      	cmp	r2, r3
 800940c:	d22b      	bcs.n	8009466 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d112      	bne.n	8009450 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	2b00      	cmp	r3, #0
 8009430:	d016      	beq.n	8009460 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	3324      	adds	r3, #36	; 0x24
 8009436:	4618      	mov	r0, r3
 8009438:	f001 fc6a 	bl	800ad10 <xTaskRemoveFromEventList>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00e      	beq.n	8009460 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00b      	beq.n	8009460 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2201      	movs	r2, #1
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	e007      	b.n	8009460 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009454:	3301      	adds	r3, #1
 8009456:	b2db      	uxtb	r3, r3
 8009458:	b25a      	sxtb	r2, r3
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009460:	2301      	movs	r3, #1
 8009462:	637b      	str	r3, [r7, #52]	; 0x34
 8009464:	e001      	b.n	800946a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009466:	2300      	movs	r3, #0
 8009468:	637b      	str	r3, [r7, #52]	; 0x34
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f383 8811 	msr	BASEPRI, r3
}
 8009474:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009478:	4618      	mov	r0, r3
 800947a:	3738      	adds	r7, #56	; 0x38
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08c      	sub	sp, #48	; 0x30
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800948c:	2300      	movs	r3, #0
 800948e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10a      	bne.n	80094b0 <xQueueReceive+0x30>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	623b      	str	r3, [r7, #32]
}
 80094ac:	bf00      	nop
 80094ae:	e7fe      	b.n	80094ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d103      	bne.n	80094be <xQueueReceive+0x3e>
 80094b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <xQueueReceive+0x42>
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <xQueueReceive+0x44>
 80094c2:	2300      	movs	r3, #0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <xQueueReceive+0x5e>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	61fb      	str	r3, [r7, #28]
}
 80094da:	bf00      	nop
 80094dc:	e7fe      	b.n	80094dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094de:	f001 fe0f 	bl	800b100 <xTaskGetSchedulerState>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <xQueueReceive+0x6e>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <xQueueReceive+0x72>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e000      	b.n	80094f4 <xQueueReceive+0x74>
 80094f2:	2300      	movs	r3, #0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10a      	bne.n	800950e <xQueueReceive+0x8e>
	__asm volatile
 80094f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	61bb      	str	r3, [r7, #24]
}
 800950a:	bf00      	nop
 800950c:	e7fe      	b.n	800950c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800950e:	f7ff fb31 	bl	8008b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	2b00      	cmp	r3, #0
 800951c:	d01f      	beq.n	800955e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800951e:	68b9      	ldr	r1, [r7, #8]
 8009520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009522:	f000 fa1b 	bl	800995c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	1e5a      	subs	r2, r3, #1
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00f      	beq.n	8009556 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	3310      	adds	r3, #16
 800953a:	4618      	mov	r0, r3
 800953c:	f001 fbe8 	bl	800ad10 <xTaskRemoveFromEventList>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d007      	beq.n	8009556 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009546:	4b3d      	ldr	r3, [pc, #244]	; (800963c <xQueueReceive+0x1bc>)
 8009548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009556:	f7ff fb3d 	bl	8008bd4 <vPortExitCritical>
				return pdPASS;
 800955a:	2301      	movs	r3, #1
 800955c:	e069      	b.n	8009632 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009564:	f7ff fb36 	bl	8008bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009568:	2300      	movs	r3, #0
 800956a:	e062      	b.n	8009632 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d106      	bne.n	8009580 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009572:	f107 0310 	add.w	r3, r7, #16
 8009576:	4618      	mov	r0, r3
 8009578:	f001 fc54 	bl	800ae24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800957c:	2301      	movs	r3, #1
 800957e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009580:	f7ff fb28 	bl	8008bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009584:	f001 f99a 	bl	800a8bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009588:	f7ff faf4 	bl	8008b74 <vPortEnterCritical>
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009592:	b25b      	sxtb	r3, r3
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009598:	d103      	bne.n	80095a2 <xQueueReceive+0x122>
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095a8:	b25b      	sxtb	r3, r3
 80095aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ae:	d103      	bne.n	80095b8 <xQueueReceive+0x138>
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095b8:	f7ff fb0c 	bl	8008bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095bc:	1d3a      	adds	r2, r7, #4
 80095be:	f107 0310 	add.w	r3, r7, #16
 80095c2:	4611      	mov	r1, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f001 fc43 	bl	800ae50 <xTaskCheckForTimeOut>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d123      	bne.n	8009618 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095d2:	f000 fa3b 	bl	8009a4c <prvIsQueueEmpty>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d017      	beq.n	800960c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	3324      	adds	r3, #36	; 0x24
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f001 fb43 	bl	800ac70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ec:	f000 f9dc 	bl	80099a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095f0:	f001 f972 	bl	800a8d8 <xTaskResumeAll>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d189      	bne.n	800950e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80095fa:	4b10      	ldr	r3, [pc, #64]	; (800963c <xQueueReceive+0x1bc>)
 80095fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	e780      	b.n	800950e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800960c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800960e:	f000 f9cb 	bl	80099a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009612:	f001 f961 	bl	800a8d8 <xTaskResumeAll>
 8009616:	e77a      	b.n	800950e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800961a:	f000 f9c5 	bl	80099a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800961e:	f001 f95b 	bl	800a8d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009624:	f000 fa12 	bl	8009a4c <prvIsQueueEmpty>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	f43f af6f 	beq.w	800950e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009632:	4618      	mov	r0, r3
 8009634:	3730      	adds	r7, #48	; 0x30
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	e000ed04 	.word	0xe000ed04

08009640 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08e      	sub	sp, #56	; 0x38
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800964a:	2300      	movs	r3, #0
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009652:	2300      	movs	r3, #0
 8009654:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10a      	bne.n	8009672 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	623b      	str	r3, [r7, #32]
}
 800966e:	bf00      	nop
 8009670:	e7fe      	b.n	8009670 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	61fb      	str	r3, [r7, #28]
}
 800968c:	bf00      	nop
 800968e:	e7fe      	b.n	800968e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009690:	f001 fd36 	bl	800b100 <xTaskGetSchedulerState>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d102      	bne.n	80096a0 <xQueueSemaphoreTake+0x60>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <xQueueSemaphoreTake+0x64>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e000      	b.n	80096a6 <xQueueSemaphoreTake+0x66>
 80096a4:	2300      	movs	r3, #0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	61bb      	str	r3, [r7, #24]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096c0:	f7ff fa58 	bl	8008b74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80096ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d024      	beq.n	800971a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	1e5a      	subs	r2, r3, #1
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d104      	bne.n	80096ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80096e0:	f001 fe84 	bl	800b3ec <pvTaskIncrementMutexHeldCount>
 80096e4:	4602      	mov	r2, r0
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00f      	beq.n	8009712 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f4:	3310      	adds	r3, #16
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 fb0a 	bl	800ad10 <xTaskRemoveFromEventList>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009702:	4b54      	ldr	r3, [pc, #336]	; (8009854 <xQueueSemaphoreTake+0x214>)
 8009704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009712:	f7ff fa5f 	bl	8008bd4 <vPortExitCritical>
				return pdPASS;
 8009716:	2301      	movs	r3, #1
 8009718:	e097      	b.n	800984a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d111      	bne.n	8009744 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	617b      	str	r3, [r7, #20]
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800973c:	f7ff fa4a 	bl	8008bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009740:	2300      	movs	r3, #0
 8009742:	e082      	b.n	800984a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009746:	2b00      	cmp	r3, #0
 8009748:	d106      	bne.n	8009758 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800974a:	f107 030c 	add.w	r3, r7, #12
 800974e:	4618      	mov	r0, r3
 8009750:	f001 fb68 	bl	800ae24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009754:	2301      	movs	r3, #1
 8009756:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009758:	f7ff fa3c 	bl	8008bd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800975c:	f001 f8ae 	bl	800a8bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009760:	f7ff fa08 	bl	8008b74 <vPortEnterCritical>
 8009764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800976a:	b25b      	sxtb	r3, r3
 800976c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009770:	d103      	bne.n	800977a <xQueueSemaphoreTake+0x13a>
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009780:	b25b      	sxtb	r3, r3
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d103      	bne.n	8009790 <xQueueSemaphoreTake+0x150>
 8009788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009790:	f7ff fa20 	bl	8008bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009794:	463a      	mov	r2, r7
 8009796:	f107 030c 	add.w	r3, r7, #12
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f001 fb57 	bl	800ae50 <xTaskCheckForTimeOut>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d132      	bne.n	800980e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097aa:	f000 f94f 	bl	8009a4c <prvIsQueueEmpty>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d026      	beq.n	8009802 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d109      	bne.n	80097d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80097bc:	f7ff f9da 	bl	8008b74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f001 fcb9 	bl	800b13c <xTaskPriorityInherit>
 80097ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80097cc:	f7ff fa02 	bl	8008bd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d2:	3324      	adds	r3, #36	; 0x24
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fa49 	bl	800ac70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097e0:	f000 f8e2 	bl	80099a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097e4:	f001 f878 	bl	800a8d8 <xTaskResumeAll>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f47f af68 	bne.w	80096c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80097f0:	4b18      	ldr	r3, [pc, #96]	; (8009854 <xQueueSemaphoreTake+0x214>)
 80097f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	e75e      	b.n	80096c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009804:	f000 f8d0 	bl	80099a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009808:	f001 f866 	bl	800a8d8 <xTaskResumeAll>
 800980c:	e758      	b.n	80096c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800980e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009810:	f000 f8ca 	bl	80099a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009814:	f001 f860 	bl	800a8d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800981a:	f000 f917 	bl	8009a4c <prvIsQueueEmpty>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	f43f af4d 	beq.w	80096c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00d      	beq.n	8009848 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800982c:	f7ff f9a2 	bl	8008b74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009832:	f000 f811 	bl	8009858 <prvGetDisinheritPriorityAfterTimeout>
 8009836:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800983e:	4618      	mov	r0, r3
 8009840:	f001 fd52 	bl	800b2e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009844:	f7ff f9c6 	bl	8008bd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800984a:	4618      	mov	r0, r3
 800984c:	3738      	adds	r7, #56	; 0x38
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	d006      	beq.n	8009876 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	e001      	b.n	800987a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009876:	2300      	movs	r3, #0
 8009878:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800987a:	68fb      	ldr	r3, [r7, #12]
	}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10d      	bne.n	80098c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d14d      	bne.n	800994a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f001 fcaa 	bl	800b20c <xTaskPriorityDisinherit>
 80098b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	609a      	str	r2, [r3, #8]
 80098c0:	e043      	b.n	800994a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d119      	bne.n	80098fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6858      	ldr	r0, [r3, #4]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d0:	461a      	mov	r2, r3
 80098d2:	68b9      	ldr	r1, [r7, #8]
 80098d4:	f002 fb98 	bl	800c008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e0:	441a      	add	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d32b      	bcc.n	800994a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	605a      	str	r2, [r3, #4]
 80098fa:	e026      	b.n	800994a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	68d8      	ldr	r0, [r3, #12]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009904:	461a      	mov	r2, r3
 8009906:	68b9      	ldr	r1, [r7, #8]
 8009908:	f002 fb7e 	bl	800c008 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	68da      	ldr	r2, [r3, #12]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009914:	425b      	negs	r3, r3
 8009916:	441a      	add	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	68da      	ldr	r2, [r3, #12]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	429a      	cmp	r2, r3
 8009926:	d207      	bcs.n	8009938 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009930:	425b      	negs	r3, r3
 8009932:	441a      	add	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d105      	bne.n	800994a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3b01      	subs	r3, #1
 8009948:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009952:	697b      	ldr	r3, [r7, #20]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996a:	2b00      	cmp	r3, #0
 800996c:	d018      	beq.n	80099a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68da      	ldr	r2, [r3, #12]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009976:	441a      	add	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68da      	ldr	r2, [r3, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	429a      	cmp	r2, r3
 8009986:	d303      	bcc.n	8009990 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68d9      	ldr	r1, [r3, #12]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009998:	461a      	mov	r2, r3
 800999a:	6838      	ldr	r0, [r7, #0]
 800999c:	f002 fb34 	bl	800c008 <memcpy>
	}
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099b0:	f7ff f8e0 	bl	8008b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099bc:	e011      	b.n	80099e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d012      	beq.n	80099ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3324      	adds	r3, #36	; 0x24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f001 f9a0 	bl	800ad10 <xTaskRemoveFromEventList>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099d6:	f001 fa9d 	bl	800af14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	3b01      	subs	r3, #1
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	dce9      	bgt.n	80099be <prvUnlockQueue+0x16>
 80099ea:	e000      	b.n	80099ee <prvUnlockQueue+0x46>
					break;
 80099ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	22ff      	movs	r2, #255	; 0xff
 80099f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099f6:	f7ff f8ed 	bl	8008bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099fa:	f7ff f8bb 	bl	8008b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a06:	e011      	b.n	8009a2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d012      	beq.n	8009a36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3310      	adds	r3, #16
 8009a14:	4618      	mov	r0, r3
 8009a16:	f001 f97b 	bl	800ad10 <xTaskRemoveFromEventList>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a20:	f001 fa78 	bl	800af14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	3b01      	subs	r3, #1
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dce9      	bgt.n	8009a08 <prvUnlockQueue+0x60>
 8009a34:	e000      	b.n	8009a38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	22ff      	movs	r2, #255	; 0xff
 8009a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a40:	f7ff f8c8 	bl	8008bd4 <vPortExitCritical>
}
 8009a44:	bf00      	nop
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a54:	f7ff f88e 	bl	8008b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d102      	bne.n	8009a66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a60:	2301      	movs	r3, #1
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	e001      	b.n	8009a6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a6a:	f7ff f8b3 	bl	8008bd4 <vPortExitCritical>

	return xReturn;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a80:	f7ff f878 	bl	8008b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d102      	bne.n	8009a96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a90:	2301      	movs	r3, #1
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	e001      	b.n	8009a9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a9a:	f7ff f89b 	bl	8008bd4 <vPortExitCritical>

	return xReturn;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60fb      	str	r3, [r7, #12]
 8009ab6:	e014      	b.n	8009ae2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ab8:	4a0f      	ldr	r2, [pc, #60]	; (8009af8 <vQueueAddToRegistry+0x50>)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10b      	bne.n	8009adc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ac4:	490c      	ldr	r1, [pc, #48]	; (8009af8 <vQueueAddToRegistry+0x50>)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ace:	4a0a      	ldr	r2, [pc, #40]	; (8009af8 <vQueueAddToRegistry+0x50>)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	00db      	lsls	r3, r3, #3
 8009ad4:	4413      	add	r3, r2
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ada:	e006      	b.n	8009aea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b07      	cmp	r3, #7
 8009ae6:	d9e7      	bls.n	8009ab8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	2400c574 	.word	0x2400c574

08009afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b0c:	f7ff f832 	bl	8008b74 <vPortEnterCritical>
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b16:	b25b      	sxtb	r3, r3
 8009b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1c:	d103      	bne.n	8009b26 <vQueueWaitForMessageRestricted+0x2a>
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b2c:	b25b      	sxtb	r3, r3
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b32:	d103      	bne.n	8009b3c <vQueueWaitForMessageRestricted+0x40>
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b3c:	f7ff f84a 	bl	8008bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d106      	bne.n	8009b56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	3324      	adds	r3, #36	; 0x24
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 f8b1 	bl	800acb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b56:	6978      	ldr	r0, [r7, #20]
 8009b58:	f7ff ff26 	bl	80099a8 <prvUnlockQueue>
	}
 8009b5c:	bf00      	nop
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b090      	sub	sp, #64	; 0x40
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8009b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <xStreamBufferGenericCreateStatic+0x2e>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8009b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <xStreamBufferGenericCreateStatic+0x4a>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xStreamBufferGenericCreateStatic+0x48>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d90a      	bls.n	8009bcc <xStreamBufferGenericCreateStatic+0x68>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	623b      	str	r3, [r7, #32]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <xStreamBufferGenericCreateStatic+0x66>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <xStreamBufferGenericCreateStatic+0x72>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <xStreamBufferGenericCreateStatic+0x80>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e002      	b.n	8009bea <xStreamBufferGenericCreateStatic+0x86>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8009be4:	2302      	movs	r3, #2
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	d80a      	bhi.n	8009c06 <xStreamBufferGenericCreateStatic+0xa2>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	61fb      	str	r3, [r7, #28]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xStreamBufferGenericCreateStatic+0xa0>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8009c06:	2324      	movs	r3, #36	; 0x24
 8009c08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b24      	cmp	r3, #36	; 0x24
 8009c0e:	d00a      	beq.n	8009c26 <xStreamBufferGenericCreateStatic+0xc2>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	61bb      	str	r3, [r7, #24]
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <xStreamBufferGenericCreateStatic+0xc0>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d015      	beq.n	8009c58 <xStreamBufferGenericCreateStatic+0xf4>
 8009c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d012      	beq.n	8009c58 <xStreamBufferGenericCreateStatic+0xf4>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8009c32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c40:	f000 fbac 	bl	800a39c <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8009c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c46:	7f1b      	ldrb	r3, [r3, #28]
 8009c48:	f043 0302 	orr.w	r3, r3, #2
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8009c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c54:	637b      	str	r3, [r7, #52]	; 0x34
 8009c56:	e001      	b.n	8009c5c <xStreamBufferGenericCreateStatic+0xf8>
		}
		else
		{
			xReturn = NULL;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	637b      	str	r3, [r7, #52]	; 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3738      	adds	r7, #56	; 0x38
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8009c66:	b480      	push	{r7}
 8009c68:	b087      	sub	sp, #28
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	60fb      	str	r3, [r7, #12]
}
 8009c8a:	bf00      	nop
 8009c8c:	e7fe      	b.n	8009c8c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	689a      	ldr	r2, [r3, #8]
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4413      	add	r3, r2
 8009c98:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d304      	bcc.n	8009cbe <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8009cbe:	697b      	ldr	r3, [r7, #20]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	371c      	adds	r7, #28
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b090      	sub	sp, #64	; 0x40
 8009cd0:	af02      	add	r7, sp, #8
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <xStreamBufferSend+0x36>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8009d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <xStreamBufferSend+0x52>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	623b      	str	r3, [r7, #32]
}
 8009d1a:	bf00      	nop
 8009d1c:	e7fe      	b.n	8009d1c <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	7f1b      	ldrb	r3, [r3, #28]
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d011      	beq.n	8009d4e <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8009d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d80a      	bhi.n	8009d4e <xStreamBufferSend+0x82>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	61fb      	str	r3, [r7, #28]
}
 8009d4a:	bf00      	nop
 8009d4c:	e7fe      	b.n	8009d4c <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d03e      	beq.n	8009dd2 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8009d54:	f107 0310 	add.w	r3, r7, #16
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 f83d 	bl	800add8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8009d5e:	f7fe ff09 	bl	8008b74 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d64:	f7ff ff7f 	bl	8009c66 <xStreamBufferSpacesAvailable>
 8009d68:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8009d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d217      	bcs.n	8009da2 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8009d72:	2000      	movs	r0, #0
 8009d74:	f001 fd50 	bl	800b818 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8009d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <xStreamBufferSend+0xca>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	61bb      	str	r3, [r7, #24]
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8009d96:	f001 f9a3 	bl	800b0e0 <xTaskGetCurrentTaskHandle>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	615a      	str	r2, [r3, #20]
 8009da0:	e002      	b.n	8009da8 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8009da2:	f7fe ff17 	bl	8008bd4 <vPortExitCritical>
					break;
 8009da6:	e014      	b.n	8009dd2 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8009da8:	f7fe ff14 	bl	8008bd4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2200      	movs	r2, #0
 8009db0:	2100      	movs	r1, #0
 8009db2:	2000      	movs	r0, #0
 8009db4:	f001 fb2e 	bl	800b414 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8009db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dba:	2200      	movs	r2, #0
 8009dbc:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8009dbe:	463a      	mov	r2, r7
 8009dc0:	f107 0310 	add.w	r3, r7, #16
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 f842 	bl	800ae50 <xTaskCheckForTimeOut>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d0c5      	beq.n	8009d5e <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d103      	bne.n	8009de0 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dda:	f7ff ff44 	bl	8009c66 <xStreamBufferSpacesAvailable>
 8009dde:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dec:	f000 f814 	bl	8009e18 <prvWriteMessageToBuffer>
 8009df0:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8009df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00a      	beq.n	8009e0e <xStreamBufferSend+0x142>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dfa:	f000 faaf 	bl	800a35c <prvBytesInBuffer>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d302      	bcc.n	8009e0e <xStreamBufferSend+0x142>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8009e08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e0a:	f7f6 fc43 	bl	8000694 <generateInterruptIPC_messageBuffer>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3738      	adds	r7, #56	; 0x38
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	e01d      	b.n	8009e6e <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	7f1b      	ldrb	r3, [r3, #28]
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d108      	bne.n	8009e50 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	4293      	cmp	r3, r2
 8009e48:	bf28      	it	cs
 8009e4a:	4613      	movcs	r3, r2
 8009e4c:	607b      	str	r3, [r7, #4]
 8009e4e:	e00e      	b.n	8009e6e <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d308      	bcc.n	8009e6a <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009e5c:	1d3b      	adds	r3, r7, #4
 8009e5e:	2204      	movs	r2, #4
 8009e60:	4619      	mov	r1, r3
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 f98e 	bl	800a184 <prvWriteBytesToBuffer>
 8009e68:	e001      	b.n	8009e6e <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d007      	beq.n	8009e84 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	461a      	mov	r2, r3
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 f982 	bl	800a184 <prvWriteBytesToBuffer>
 8009e80:	6138      	str	r0, [r7, #16]
 8009e82:	e001      	b.n	8009e88 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8009e88:	693b      	ldr	r3, [r7, #16]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b08e      	sub	sp, #56	; 0x38
 8009e96:	af02      	add	r7, sp, #8
 8009e98:	60f8      	str	r0, [r7, #12]
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	607a      	str	r2, [r7, #4]
 8009e9e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10a      	bne.n	8009ec4 <xStreamBufferReceive+0x32>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	61fb      	str	r3, [r7, #28]
}
 8009ec0:	bf00      	nop
 8009ec2:	e7fe      	b.n	8009ec2 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <xStreamBufferReceive+0x4e>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	61bb      	str	r3, [r7, #24]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	7f1b      	ldrb	r3, [r3, #28]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009eec:	2304      	movs	r3, #4
 8009eee:	627b      	str	r3, [r7, #36]	; 0x24
 8009ef0:	e001      	b.n	8009ef6 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d034      	beq.n	8009f66 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8009efc:	f7fe fe3a 	bl	8008b74 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009f00:	6a38      	ldr	r0, [r7, #32]
 8009f02:	f000 fa2b 	bl	800a35c <prvBytesInBuffer>
 8009f06:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d816      	bhi.n	8009f3e <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8009f10:	2000      	movs	r0, #0
 8009f12:	f001 fc81 	bl	800b818 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <xStreamBufferReceive+0xa2>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	617b      	str	r3, [r7, #20]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8009f34:	f001 f8d4 	bl	800b0e0 <xTaskGetCurrentTaskHandle>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f3e:	f7fe fe49 	bl	8008bd4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d811      	bhi.n	8009f6e <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2100      	movs	r1, #0
 8009f50:	2000      	movs	r0, #0
 8009f52:	f001 fa5f 	bl	800b414 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009f5c:	6a38      	ldr	r0, [r7, #32]
 8009f5e:	f000 f9fd 	bl	800a35c <prvBytesInBuffer>
 8009f62:	62b8      	str	r0, [r7, #40]	; 0x28
 8009f64:	e003      	b.n	8009f6e <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009f66:	6a38      	ldr	r0, [r7, #32]
 8009f68:	f000 f9f8 	bl	800a35c <prvBytesInBuffer>
 8009f6c:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8009f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d91d      	bls.n	8009fb2 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	68b9      	ldr	r1, [r7, #8]
 8009f80:	6a38      	ldr	r0, [r7, #32]
 8009f82:	f000 f88a 	bl	800a09a <prvReadMessageFromBuffer>
 8009f86:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d011      	beq.n	8009fb2 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8009f8e:	f000 fc95 	bl	800a8bc <vTaskSuspendAll>
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <xStreamBufferReceive+0x11c>
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	6958      	ldr	r0, [r3, #20]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	f001 fa96 	bl	800b4d4 <xTaskGenericNotify>
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	2200      	movs	r2, #0
 8009fac:	615a      	str	r2, [r3, #20]
 8009fae:	f000 fc93 	bl	800a8d8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3730      	adds	r7, #48	; 0x30
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b090      	sub	sp, #64	; 0x40
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvRxData );
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <xStreamBufferReceiveFromISR+0x32>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	623b      	str	r3, [r7, #32]
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <xStreamBufferReceiveFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8009fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10a      	bne.n	800a00a <xStreamBufferReceiveFromISR+0x4e>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	61fb      	str	r3, [r7, #28]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <xStreamBufferReceiveFromISR+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	7f1b      	ldrb	r3, [r3, #28]
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <xStreamBufferReceiveFromISR+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800a016:	2304      	movs	r3, #4
 800a018:	633b      	str	r3, [r7, #48]	; 0x30
 800a01a:	e001      	b.n	800a020 <xStreamBufferReceiveFromISR+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800a01c:	2300      	movs	r3, #0
 800a01e:	633b      	str	r3, [r7, #48]	; 0x30
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800a020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a022:	f000 f99b 	bl	800a35c <prvBytesInBuffer>
 800a026:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800a028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d92f      	bls.n	800a090 <xStreamBufferReceiveFromISR+0xd4>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	68b9      	ldr	r1, [r7, #8]
 800a03a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a03c:	f000 f82d 	bl	800a09a <prvReadMessageFromBuffer>
 800a040:	6378      	str	r0, [r7, #52]	; 0x34

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800a042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a044:	2b00      	cmp	r3, #0
 800a046:	d023      	beq.n	800a090 <xStreamBufferReceiveFromISR+0xd4>
	__asm volatile
 800a048:	f3ef 8211 	mrs	r2, BASEPRI
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	61ba      	str	r2, [r7, #24]
 800a05e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a060:	69bb      	ldr	r3, [r7, #24]
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800a062:	627b      	str	r3, [r7, #36]	; 0x24
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00b      	beq.n	800a084 <xStreamBufferReceiveFromISR+0xc8>
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	6958      	ldr	r0, [r3, #20]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	2300      	movs	r3, #0
 800a076:	2200      	movs	r2, #0
 800a078:	2100      	movs	r1, #0
 800a07a:	f001 fae9 	bl	800b650 <xTaskGenericNotifyFromISR>
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	2200      	movs	r2, #0
 800a082:	615a      	str	r2, [r3, #20]
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	f383 8811 	msr	BASEPRI, r3
}
 800a08e:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 800a090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a092:	4618      	mov	r0, r3
 800a094:	3738      	adds	r7, #56	; 0x38
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b088      	sub	sp, #32
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
 800a0a6:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d019      	beq.n	800a0e2 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800a0b4:	f107 0110 	add.w	r1, r7, #16
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 f8d3 	bl	800a268 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800a0ce:	69fa      	ldr	r2, [r7, #28]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d907      	bls.n	800a0e6 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	69ba      	ldr	r2, [r7, #24]
 800a0da:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	61fb      	str	r3, [r7, #28]
 800a0e0:	e001      	b.n	800a0e6 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	69fa      	ldr	r2, [r7, #28]
 800a0ea:	68b9      	ldr	r1, [r7, #8]
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 f8bb 	bl	800a268 <prvReadBytesFromBuffer>
 800a0f2:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800a0f4:	697b      	ldr	r3, [r7, #20]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3720      	adds	r7, #32
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b08c      	sub	sp, #48	; 0x30
 800a102:	af02      	add	r7, sp, #8
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <xStreamBufferSendCompletedFromISR+0x2a>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	61bb      	str	r3, [r7, #24]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 800a128:	f3ef 8211 	mrs	r2, BASEPRI
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	617a      	str	r2, [r7, #20]
 800a13e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a140:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 800a142:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00e      	beq.n	800a16a <xStreamBufferSendCompletedFromISR+0x6c>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	6918      	ldr	r0, [r3, #16]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	2300      	movs	r3, #0
 800a156:	2200      	movs	r2, #0
 800a158:	2100      	movs	r1, #0
 800a15a:	f001 fa79 	bl	800b650 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	2200      	movs	r2, #0
 800a162:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 800a164:	2301      	movs	r3, #1
 800a166:	627b      	str	r3, [r7, #36]	; 0x24
 800a168:	e001      	b.n	800a16e <xStreamBufferSendCompletedFromISR+0x70>
		}
		else
		{
			xReturn = pdFALSE;
 800a16a:	2300      	movs	r3, #0
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f383 8811 	msr	BASEPRI, r3
}
 800a178:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3728      	adds	r7, #40	; 0x28
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b08a      	sub	sp, #40	; 0x28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10a      	bne.n	800a1ac <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	61fb      	str	r3, [r7, #28]
}
 800a1a8:	bf00      	nop
 800a1aa:	e7fe      	b.n	800a1aa <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	bf28      	it	cs
 800a1c0:	4613      	movcs	r3, r2
 800a1c2:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800a1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	441a      	add	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d90a      	bls.n	800a1e8 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	61bb      	str	r3, [r7, #24]
}
 800a1e4:	bf00      	nop
 800a1e6:	e7fe      	b.n	800a1e6 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	699a      	ldr	r2, [r3, #24]
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	4413      	add	r3, r2
 800a1f0:	6a3a      	ldr	r2, [r7, #32]
 800a1f2:	68b9      	ldr	r1, [r7, #8]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f001 ff07 	bl	800c008 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d91c      	bls.n	800a23c <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d90a      	bls.n	800a226 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	617b      	str	r3, [r7, #20]
}
 800a222:	bf00      	nop
 800a224:	e7fe      	b.n	800a224 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6998      	ldr	r0, [r3, #24]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	18d1      	adds	r1, r2, r3
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	461a      	mov	r2, r3
 800a238:	f001 fee6 	bl	800c008 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800a23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4413      	add	r3, r2
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d304      	bcc.n	800a258 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25c:	605a      	str	r2, [r3, #4]

	return xCount;
 800a25e:	687b      	ldr	r3, [r7, #4]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3728      	adds	r7, #40	; 0x28
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08a      	sub	sp, #40	; 0x28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	4293      	cmp	r3, r2
 800a27c:	bf28      	it	cs
 800a27e:	4613      	movcs	r3, r2
 800a280:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d064      	beq.n	800a352 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	6a3a      	ldr	r2, [r7, #32]
 800a298:	4293      	cmp	r3, r2
 800a29a:	bf28      	it	cs
 800a29c:	4613      	movcs	r3, r2
 800a29e:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800a2a0:	69fa      	ldr	r2, [r7, #28]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d90a      	bls.n	800a2be <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	61bb      	str	r3, [r7, #24]
}
 800a2ba:	bf00      	nop
 800a2bc:	e7fe      	b.n	800a2bc <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800a2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	441a      	add	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d90a      	bls.n	800a2e2 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	617b      	str	r3, [r7, #20]
}
 800a2de:	bf00      	nop
 800a2e0:	e7fe      	b.n	800a2e0 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	699a      	ldr	r2, [r3, #24]
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	4413      	add	r3, r2
 800a2ea:	69fa      	ldr	r2, [r7, #28]
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	68b8      	ldr	r0, [r7, #8]
 800a2f0:	f001 fe8a 	bl	800c008 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800a2f4:	6a3a      	ldr	r2, [r7, #32]
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d919      	bls.n	800a330 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800a2fc:	6a3a      	ldr	r2, [r7, #32]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d90a      	bls.n	800a31a <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	613b      	str	r3, [r7, #16]
}
 800a316:	bf00      	nop
 800a318:	e7fe      	b.n	800a318 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	18d0      	adds	r0, r2, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6999      	ldr	r1, [r3, #24]
 800a324:	6a3a      	ldr	r2, [r7, #32]
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	461a      	mov	r2, r3
 800a32c:	f001 fe6c 	bl	800c008 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800a330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	4413      	add	r3, r2
 800a336:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33e:	429a      	cmp	r2, r3
 800a340:	d304      	bcc.n	800a34c <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a350:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a352:	6a3b      	ldr	r3, [r7, #32]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3728      	adds	r7, #40	; 0x28
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	4413      	add	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	429a      	cmp	r2, r3
 800a382:	d304      	bcc.n	800a38e <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a38e:	68fb      	ldr	r3, [r7, #12]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800a3aa:	2355      	movs	r3, #85	; 0x55
 800a3ac:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	6979      	ldr	r1, [r7, #20]
 800a3b2:	68b8      	ldr	r0, [r7, #8]
 800a3b4:	f001 fe36 	bl	800c024 <memset>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d00a      	beq.n	800a3d6 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	613b      	str	r3, [r7, #16]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800a3d6:	2224      	movs	r2, #36	; 0x24
 800a3d8:	2100      	movs	r1, #0
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f001 fe22 	bl	800c024 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a3f8:	771a      	strb	r2, [r3, #28]
}
 800a3fa:	bf00      	nop
 800a3fc:	3718      	adds	r7, #24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a402:	b580      	push	{r7, lr}
 800a404:	b08e      	sub	sp, #56	; 0x38
 800a406:	af04      	add	r7, sp, #16
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	60b9      	str	r1, [r7, #8]
 800a40c:	607a      	str	r2, [r7, #4]
 800a40e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <xTaskCreateStatic+0x2a>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	623b      	str	r3, [r7, #32]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <xTaskCreateStatic+0x46>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	61fb      	str	r3, [r7, #28]
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a448:	23bc      	movs	r3, #188	; 0xbc
 800a44a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2bbc      	cmp	r3, #188	; 0xbc
 800a450:	d00a      	beq.n	800a468 <xTaskCreateStatic+0x66>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	61bb      	str	r3, [r7, #24]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a468:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d01e      	beq.n	800a4ae <xTaskCreateStatic+0xac>
 800a470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a472:	2b00      	cmp	r3, #0
 800a474:	d01b      	beq.n	800a4ae <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a47e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	2202      	movs	r2, #2
 800a484:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a488:	2300      	movs	r3, #0
 800a48a:	9303      	str	r3, [sp, #12]
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	9302      	str	r3, [sp, #8]
 800a490:	f107 0314 	add.w	r3, r7, #20
 800a494:	9301      	str	r3, [sp, #4]
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f851 	bl	800a548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4a8:	f000 f8f4 	bl	800a694 <prvAddNewTaskToReadyList>
 800a4ac:	e001      	b.n	800a4b2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4b2:	697b      	ldr	r3, [r7, #20]
	}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3728      	adds	r7, #40	; 0x28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b08c      	sub	sp, #48	; 0x30
 800a4c0:	af04      	add	r7, sp, #16
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	603b      	str	r3, [r7, #0]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4cc:	88fb      	ldrh	r3, [r7, #6]
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fd ff81 	bl	80083d8 <pvPortMalloc>
 800a4d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00e      	beq.n	800a4fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4de:	20bc      	movs	r0, #188	; 0xbc
 800a4e0:	f7fd ff7a 	bl	80083d8 <pvPortMalloc>
 800a4e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	631a      	str	r2, [r3, #48]	; 0x30
 800a4f2:	e005      	b.n	800a500 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4f4:	6978      	ldr	r0, [r7, #20]
 800a4f6:	f7fe f83b 	bl	8008570 <vPortFree>
 800a4fa:	e001      	b.n	800a500 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d017      	beq.n	800a536 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a50e:	88fa      	ldrh	r2, [r7, #6]
 800a510:	2300      	movs	r3, #0
 800a512:	9303      	str	r3, [sp, #12]
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	9302      	str	r3, [sp, #8]
 800a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51a:	9301      	str	r3, [sp, #4]
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f000 f80f 	bl	800a548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a52a:	69f8      	ldr	r0, [r7, #28]
 800a52c:	f000 f8b2 	bl	800a694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a530:	2301      	movs	r3, #1
 800a532:	61bb      	str	r3, [r7, #24]
 800a534:	e002      	b.n	800a53c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a536:	f04f 33ff 	mov.w	r3, #4294967295
 800a53a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a53c:	69bb      	ldr	r3, [r7, #24]
	}
 800a53e:	4618      	mov	r0, r3
 800a540:	3720      	adds	r7, #32
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	461a      	mov	r2, r3
 800a560:	21a5      	movs	r1, #165	; 0xa5
 800a562:	f001 fd5f 	bl	800c024 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a570:	440b      	add	r3, r1
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	f023 0307 	bic.w	r3, r3, #7
 800a57e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	617b      	str	r3, [r7, #20]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d01f      	beq.n	800a5e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	61fb      	str	r3, [r7, #28]
 800a5aa:	e012      	b.n	800a5d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	7819      	ldrb	r1, [r3, #0]
 800a5b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	3334      	adds	r3, #52	; 0x34
 800a5bc:	460a      	mov	r2, r1
 800a5be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d006      	beq.n	800a5da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	61fb      	str	r3, [r7, #28]
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	2b0f      	cmp	r3, #15
 800a5d6:	d9e9      	bls.n	800a5ac <prvInitialiseNewTask+0x64>
 800a5d8:	e000      	b.n	800a5dc <prvInitialiseNewTask+0x94>
			{
				break;
 800a5da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5e4:	e003      	b.n	800a5ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f0:	2b37      	cmp	r3, #55	; 0x37
 800a5f2:	d901      	bls.n	800a5f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5f4:	2337      	movs	r3, #55	; 0x37
 800a5f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a602:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	2200      	movs	r2, #0
 800a608:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60c:	3304      	adds	r3, #4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe f8ec 	bl	80087ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	3318      	adds	r3, #24
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fe f8e7 	bl	80087ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a622:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a632:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	2200      	movs	r2, #0
 800a638:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a646:	3354      	adds	r3, #84	; 0x54
 800a648:	2260      	movs	r2, #96	; 0x60
 800a64a:	2100      	movs	r1, #0
 800a64c:	4618      	mov	r0, r3
 800a64e:	f001 fce9 	bl	800c024 <memset>
 800a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a654:	4a0c      	ldr	r2, [pc, #48]	; (800a688 <prvInitialiseNewTask+0x140>)
 800a656:	659a      	str	r2, [r3, #88]	; 0x58
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	4a0c      	ldr	r2, [pc, #48]	; (800a68c <prvInitialiseNewTask+0x144>)
 800a65c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	4a0b      	ldr	r2, [pc, #44]	; (800a690 <prvInitialiseNewTask+0x148>)
 800a662:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	68f9      	ldr	r1, [r7, #12]
 800a668:	69b8      	ldr	r0, [r7, #24]
 800a66a:	f7fe f953 	bl	8008914 <pxPortInitialiseStack>
 800a66e:	4602      	mov	r2, r0
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a676:	2b00      	cmp	r3, #0
 800a678:	d002      	beq.n	800a680 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a67e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a680:	bf00      	nop
 800a682:	3720      	adds	r7, #32
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	0800d408 	.word	0x0800d408
 800a68c:	0800d428 	.word	0x0800d428
 800a690:	0800d3e8 	.word	0x0800d3e8

0800a694 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a69c:	f7fe fa6a 	bl	8008b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6a0:	4b2d      	ldr	r3, [pc, #180]	; (800a758 <prvAddNewTaskToReadyList+0xc4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	4a2c      	ldr	r2, [pc, #176]	; (800a758 <prvAddNewTaskToReadyList+0xc4>)
 800a6a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6aa:	4b2c      	ldr	r3, [pc, #176]	; (800a75c <prvAddNewTaskToReadyList+0xc8>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6b2:	4a2a      	ldr	r2, [pc, #168]	; (800a75c <prvAddNewTaskToReadyList+0xc8>)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6b8:	4b27      	ldr	r3, [pc, #156]	; (800a758 <prvAddNewTaskToReadyList+0xc4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d110      	bne.n	800a6e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6c0:	f000 fc4c 	bl	800af5c <prvInitialiseTaskLists>
 800a6c4:	e00d      	b.n	800a6e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6c6:	4b26      	ldr	r3, [pc, #152]	; (800a760 <prvAddNewTaskToReadyList+0xcc>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d109      	bne.n	800a6e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6ce:	4b23      	ldr	r3, [pc, #140]	; (800a75c <prvAddNewTaskToReadyList+0xc8>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d802      	bhi.n	800a6e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6dc:	4a1f      	ldr	r2, [pc, #124]	; (800a75c <prvAddNewTaskToReadyList+0xc8>)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6e2:	4b20      	ldr	r3, [pc, #128]	; (800a764 <prvAddNewTaskToReadyList+0xd0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	4a1e      	ldr	r2, [pc, #120]	; (800a764 <prvAddNewTaskToReadyList+0xd0>)
 800a6ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6ec:	4b1d      	ldr	r3, [pc, #116]	; (800a764 <prvAddNewTaskToReadyList+0xd0>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f8:	4b1b      	ldr	r3, [pc, #108]	; (800a768 <prvAddNewTaskToReadyList+0xd4>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d903      	bls.n	800a708 <prvAddNewTaskToReadyList+0x74>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	4a18      	ldr	r2, [pc, #96]	; (800a768 <prvAddNewTaskToReadyList+0xd4>)
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4a15      	ldr	r2, [pc, #84]	; (800a76c <prvAddNewTaskToReadyList+0xd8>)
 800a716:	441a      	add	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3304      	adds	r3, #4
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f7fe f871 	bl	8008806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a724:	f7fe fa56 	bl	8008bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a728:	4b0d      	ldr	r3, [pc, #52]	; (800a760 <prvAddNewTaskToReadyList+0xcc>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00e      	beq.n	800a74e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a730:	4b0a      	ldr	r3, [pc, #40]	; (800a75c <prvAddNewTaskToReadyList+0xc8>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d207      	bcs.n	800a74e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a73e:	4b0c      	ldr	r3, [pc, #48]	; (800a770 <prvAddNewTaskToReadyList+0xdc>)
 800a740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	2400ca88 	.word	0x2400ca88
 800a75c:	2400c5b4 	.word	0x2400c5b4
 800a760:	2400ca94 	.word	0x2400ca94
 800a764:	2400caa4 	.word	0x2400caa4
 800a768:	2400ca90 	.word	0x2400ca90
 800a76c:	2400c5b8 	.word	0x2400c5b8
 800a770:	e000ed04 	.word	0xe000ed04

0800a774 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d017      	beq.n	800a7b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a786:	4b13      	ldr	r3, [pc, #76]	; (800a7d4 <vTaskDelay+0x60>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00a      	beq.n	800a7a4 <vTaskDelay+0x30>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	60bb      	str	r3, [r7, #8]
}
 800a7a0:	bf00      	nop
 800a7a2:	e7fe      	b.n	800a7a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7a4:	f000 f88a 	bl	800a8bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f001 f85a 	bl	800b864 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7b0:	f000 f892 	bl	800a8d8 <xTaskResumeAll>
 800a7b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d107      	bne.n	800a7cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7bc:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <vTaskDelay+0x64>)
 800a7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7cc:	bf00      	nop
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	2400cab0 	.word	0x2400cab0
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08a      	sub	sp, #40	; 0x28
 800a7e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7ea:	463a      	mov	r2, r7
 800a7ec:	1d39      	adds	r1, r7, #4
 800a7ee:	f107 0308 	add.w	r3, r7, #8
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fd fdbc 	bl	8008370 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	9202      	str	r2, [sp, #8]
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	2300      	movs	r3, #0
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	2300      	movs	r3, #0
 800a808:	460a      	mov	r2, r1
 800a80a:	4924      	ldr	r1, [pc, #144]	; (800a89c <vTaskStartScheduler+0xc0>)
 800a80c:	4824      	ldr	r0, [pc, #144]	; (800a8a0 <vTaskStartScheduler+0xc4>)
 800a80e:	f7ff fdf8 	bl	800a402 <xTaskCreateStatic>
 800a812:	4603      	mov	r3, r0
 800a814:	4a23      	ldr	r2, [pc, #140]	; (800a8a4 <vTaskStartScheduler+0xc8>)
 800a816:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a818:	4b22      	ldr	r3, [pc, #136]	; (800a8a4 <vTaskStartScheduler+0xc8>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a820:	2301      	movs	r3, #1
 800a822:	617b      	str	r3, [r7, #20]
 800a824:	e001      	b.n	800a82a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a826:	2300      	movs	r3, #0
 800a828:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d102      	bne.n	800a836 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a830:	f001 f86c 	bl	800b90c <xTimerCreateTimerTask>
 800a834:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d11b      	bne.n	800a874 <vTaskStartScheduler+0x98>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	613b      	str	r3, [r7, #16]
}
 800a84e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a850:	4b15      	ldr	r3, [pc, #84]	; (800a8a8 <vTaskStartScheduler+0xcc>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3354      	adds	r3, #84	; 0x54
 800a856:	4a15      	ldr	r2, [pc, #84]	; (800a8ac <vTaskStartScheduler+0xd0>)
 800a858:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a85a:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <vTaskStartScheduler+0xd4>)
 800a85c:	f04f 32ff 	mov.w	r2, #4294967295
 800a860:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a862:	4b14      	ldr	r3, [pc, #80]	; (800a8b4 <vTaskStartScheduler+0xd8>)
 800a864:	2201      	movs	r2, #1
 800a866:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a868:	4b13      	ldr	r3, [pc, #76]	; (800a8b8 <vTaskStartScheduler+0xdc>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a86e:	f7fe f8df 	bl	8008a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a872:	e00e      	b.n	800a892 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87a:	d10a      	bne.n	800a892 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	60fb      	str	r3, [r7, #12]
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <vTaskStartScheduler+0xb4>
}
 800a892:	bf00      	nop
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	0800d38c 	.word	0x0800d38c
 800a8a0:	0800af2d 	.word	0x0800af2d
 800a8a4:	2400caac 	.word	0x2400caac
 800a8a8:	2400c5b4 	.word	0x2400c5b4
 800a8ac:	24000018 	.word	0x24000018
 800a8b0:	2400caa8 	.word	0x2400caa8
 800a8b4:	2400ca94 	.word	0x2400ca94
 800a8b8:	2400ca8c 	.word	0x2400ca8c

0800a8bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8c0:	4b04      	ldr	r3, [pc, #16]	; (800a8d4 <vTaskSuspendAll+0x18>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	4a03      	ldr	r2, [pc, #12]	; (800a8d4 <vTaskSuspendAll+0x18>)
 800a8c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8ca:	bf00      	nop
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	2400cab0 	.word	0x2400cab0

0800a8d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8e6:	4b42      	ldr	r3, [pc, #264]	; (800a9f0 <xTaskResumeAll+0x118>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10a      	bne.n	800a904 <xTaskResumeAll+0x2c>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	603b      	str	r3, [r7, #0]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a904:	f7fe f936 	bl	8008b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a908:	4b39      	ldr	r3, [pc, #228]	; (800a9f0 <xTaskResumeAll+0x118>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	4a38      	ldr	r2, [pc, #224]	; (800a9f0 <xTaskResumeAll+0x118>)
 800a910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a912:	4b37      	ldr	r3, [pc, #220]	; (800a9f0 <xTaskResumeAll+0x118>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d162      	bne.n	800a9e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a91a:	4b36      	ldr	r3, [pc, #216]	; (800a9f4 <xTaskResumeAll+0x11c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d05e      	beq.n	800a9e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a922:	e02f      	b.n	800a984 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a924:	4b34      	ldr	r3, [pc, #208]	; (800a9f8 <xTaskResumeAll+0x120>)
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3318      	adds	r3, #24
 800a930:	4618      	mov	r0, r3
 800a932:	f7fd ffc5 	bl	80088c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3304      	adds	r3, #4
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fd ffc0 	bl	80088c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a944:	4b2d      	ldr	r3, [pc, #180]	; (800a9fc <xTaskResumeAll+0x124>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d903      	bls.n	800a954 <xTaskResumeAll+0x7c>
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	4a2a      	ldr	r2, [pc, #168]	; (800a9fc <xTaskResumeAll+0x124>)
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a958:	4613      	mov	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4a27      	ldr	r2, [pc, #156]	; (800aa00 <xTaskResumeAll+0x128>)
 800a962:	441a      	add	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	3304      	adds	r3, #4
 800a968:	4619      	mov	r1, r3
 800a96a:	4610      	mov	r0, r2
 800a96c:	f7fd ff4b 	bl	8008806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a974:	4b23      	ldr	r3, [pc, #140]	; (800aa04 <xTaskResumeAll+0x12c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d302      	bcc.n	800a984 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a97e:	4b22      	ldr	r3, [pc, #136]	; (800aa08 <xTaskResumeAll+0x130>)
 800a980:	2201      	movs	r2, #1
 800a982:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a984:	4b1c      	ldr	r3, [pc, #112]	; (800a9f8 <xTaskResumeAll+0x120>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1cb      	bne.n	800a924 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a992:	f000 fb85 	bl	800b0a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a996:	4b1d      	ldr	r3, [pc, #116]	; (800aa0c <xTaskResumeAll+0x134>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d010      	beq.n	800a9c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9a2:	f000 f847 	bl	800aa34 <xTaskIncrementTick>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9ac:	4b16      	ldr	r3, [pc, #88]	; (800aa08 <xTaskResumeAll+0x130>)
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1f1      	bne.n	800a9a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9be:	4b13      	ldr	r3, [pc, #76]	; (800aa0c <xTaskResumeAll+0x134>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9c4:	4b10      	ldr	r3, [pc, #64]	; (800aa08 <xTaskResumeAll+0x130>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d009      	beq.n	800a9e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9d0:	4b0f      	ldr	r3, [pc, #60]	; (800aa10 <xTaskResumeAll+0x138>)
 800a9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d6:	601a      	str	r2, [r3, #0]
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9e0:	f7fe f8f8 	bl	8008bd4 <vPortExitCritical>

	return xAlreadyYielded;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	2400cab0 	.word	0x2400cab0
 800a9f4:	2400ca88 	.word	0x2400ca88
 800a9f8:	2400ca48 	.word	0x2400ca48
 800a9fc:	2400ca90 	.word	0x2400ca90
 800aa00:	2400c5b8 	.word	0x2400c5b8
 800aa04:	2400c5b4 	.word	0x2400c5b4
 800aa08:	2400ca9c 	.word	0x2400ca9c
 800aa0c:	2400ca98 	.word	0x2400ca98
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa1a:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <xTaskGetTickCount+0x1c>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa20:	687b      	ldr	r3, [r7, #4]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	2400ca8c 	.word	0x2400ca8c

0800aa34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa3e:	4b4f      	ldr	r3, [pc, #316]	; (800ab7c <xTaskIncrementTick+0x148>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f040 808f 	bne.w	800ab66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa48:	4b4d      	ldr	r3, [pc, #308]	; (800ab80 <xTaskIncrementTick+0x14c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa50:	4a4b      	ldr	r2, [pc, #300]	; (800ab80 <xTaskIncrementTick+0x14c>)
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d120      	bne.n	800aa9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa5c:	4b49      	ldr	r3, [pc, #292]	; (800ab84 <xTaskIncrementTick+0x150>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00a      	beq.n	800aa7c <xTaskIncrementTick+0x48>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	603b      	str	r3, [r7, #0]
}
 800aa78:	bf00      	nop
 800aa7a:	e7fe      	b.n	800aa7a <xTaskIncrementTick+0x46>
 800aa7c:	4b41      	ldr	r3, [pc, #260]	; (800ab84 <xTaskIncrementTick+0x150>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	4b41      	ldr	r3, [pc, #260]	; (800ab88 <xTaskIncrementTick+0x154>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a3f      	ldr	r2, [pc, #252]	; (800ab84 <xTaskIncrementTick+0x150>)
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	4a3f      	ldr	r2, [pc, #252]	; (800ab88 <xTaskIncrementTick+0x154>)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	4b3e      	ldr	r3, [pc, #248]	; (800ab8c <xTaskIncrementTick+0x158>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3301      	adds	r3, #1
 800aa96:	4a3d      	ldr	r2, [pc, #244]	; (800ab8c <xTaskIncrementTick+0x158>)
 800aa98:	6013      	str	r3, [r2, #0]
 800aa9a:	f000 fb01 	bl	800b0a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa9e:	4b3c      	ldr	r3, [pc, #240]	; (800ab90 <xTaskIncrementTick+0x15c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d349      	bcc.n	800ab3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaa8:	4b36      	ldr	r3, [pc, #216]	; (800ab84 <xTaskIncrementTick+0x150>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d104      	bne.n	800aabc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab2:	4b37      	ldr	r3, [pc, #220]	; (800ab90 <xTaskIncrementTick+0x15c>)
 800aab4:	f04f 32ff 	mov.w	r2, #4294967295
 800aab8:	601a      	str	r2, [r3, #0]
					break;
 800aaba:	e03f      	b.n	800ab3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aabc:	4b31      	ldr	r3, [pc, #196]	; (800ab84 <xTaskIncrementTick+0x150>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d203      	bcs.n	800aadc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aad4:	4a2e      	ldr	r2, [pc, #184]	; (800ab90 <xTaskIncrementTick+0x15c>)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aada:	e02f      	b.n	800ab3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	3304      	adds	r3, #4
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fd feed 	bl	80088c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d004      	beq.n	800aaf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	3318      	adds	r3, #24
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fd fee4 	bl	80088c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafc:	4b25      	ldr	r3, [pc, #148]	; (800ab94 <xTaskIncrementTick+0x160>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d903      	bls.n	800ab0c <xTaskIncrementTick+0xd8>
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab08:	4a22      	ldr	r2, [pc, #136]	; (800ab94 <xTaskIncrementTick+0x160>)
 800ab0a:	6013      	str	r3, [r2, #0]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab10:	4613      	mov	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4a1f      	ldr	r2, [pc, #124]	; (800ab98 <xTaskIncrementTick+0x164>)
 800ab1a:	441a      	add	r2, r3
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	3304      	adds	r3, #4
 800ab20:	4619      	mov	r1, r3
 800ab22:	4610      	mov	r0, r2
 800ab24:	f7fd fe6f 	bl	8008806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2c:	4b1b      	ldr	r3, [pc, #108]	; (800ab9c <xTaskIncrementTick+0x168>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d3b8      	bcc.n	800aaa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab36:	2301      	movs	r3, #1
 800ab38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab3a:	e7b5      	b.n	800aaa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab3c:	4b17      	ldr	r3, [pc, #92]	; (800ab9c <xTaskIncrementTick+0x168>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab42:	4915      	ldr	r1, [pc, #84]	; (800ab98 <xTaskIncrementTick+0x164>)
 800ab44:	4613      	mov	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	440b      	add	r3, r1
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d901      	bls.n	800ab58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab54:	2301      	movs	r3, #1
 800ab56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab58:	4b11      	ldr	r3, [pc, #68]	; (800aba0 <xTaskIncrementTick+0x16c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab60:	2301      	movs	r3, #1
 800ab62:	617b      	str	r3, [r7, #20]
 800ab64:	e004      	b.n	800ab70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab66:	4b0f      	ldr	r3, [pc, #60]	; (800aba4 <xTaskIncrementTick+0x170>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	4a0d      	ldr	r2, [pc, #52]	; (800aba4 <xTaskIncrementTick+0x170>)
 800ab6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab70:	697b      	ldr	r3, [r7, #20]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	2400cab0 	.word	0x2400cab0
 800ab80:	2400ca8c 	.word	0x2400ca8c
 800ab84:	2400ca40 	.word	0x2400ca40
 800ab88:	2400ca44 	.word	0x2400ca44
 800ab8c:	2400caa0 	.word	0x2400caa0
 800ab90:	2400caa8 	.word	0x2400caa8
 800ab94:	2400ca90 	.word	0x2400ca90
 800ab98:	2400c5b8 	.word	0x2400c5b8
 800ab9c:	2400c5b4 	.word	0x2400c5b4
 800aba0:	2400ca9c 	.word	0x2400ca9c
 800aba4:	2400ca98 	.word	0x2400ca98

0800aba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abae:	4b2a      	ldr	r3, [pc, #168]	; (800ac58 <vTaskSwitchContext+0xb0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abb6:	4b29      	ldr	r3, [pc, #164]	; (800ac5c <vTaskSwitchContext+0xb4>)
 800abb8:	2201      	movs	r2, #1
 800abba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abbc:	e046      	b.n	800ac4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800abbe:	4b27      	ldr	r3, [pc, #156]	; (800ac5c <vTaskSwitchContext+0xb4>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abc4:	4b26      	ldr	r3, [pc, #152]	; (800ac60 <vTaskSwitchContext+0xb8>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	60fb      	str	r3, [r7, #12]
 800abca:	e010      	b.n	800abee <vTaskSwitchContext+0x46>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10a      	bne.n	800abe8 <vTaskSwitchContext+0x40>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	607b      	str	r3, [r7, #4]
}
 800abe4:	bf00      	nop
 800abe6:	e7fe      	b.n	800abe6 <vTaskSwitchContext+0x3e>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3b01      	subs	r3, #1
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	491d      	ldr	r1, [pc, #116]	; (800ac64 <vTaskSwitchContext+0xbc>)
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	440b      	add	r3, r1
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d0e4      	beq.n	800abcc <vTaskSwitchContext+0x24>
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	4613      	mov	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4a15      	ldr	r2, [pc, #84]	; (800ac64 <vTaskSwitchContext+0xbc>)
 800ac0e:	4413      	add	r3, r2
 800ac10:	60bb      	str	r3, [r7, #8]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	605a      	str	r2, [r3, #4]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	685a      	ldr	r2, [r3, #4]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	3308      	adds	r3, #8
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d104      	bne.n	800ac32 <vTaskSwitchContext+0x8a>
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	605a      	str	r2, [r3, #4]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	4a0b      	ldr	r2, [pc, #44]	; (800ac68 <vTaskSwitchContext+0xc0>)
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	4a08      	ldr	r2, [pc, #32]	; (800ac60 <vTaskSwitchContext+0xb8>)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac42:	4b09      	ldr	r3, [pc, #36]	; (800ac68 <vTaskSwitchContext+0xc0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3354      	adds	r3, #84	; 0x54
 800ac48:	4a08      	ldr	r2, [pc, #32]	; (800ac6c <vTaskSwitchContext+0xc4>)
 800ac4a:	6013      	str	r3, [r2, #0]
}
 800ac4c:	bf00      	nop
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr
 800ac58:	2400cab0 	.word	0x2400cab0
 800ac5c:	2400ca9c 	.word	0x2400ca9c
 800ac60:	2400ca90 	.word	0x2400ca90
 800ac64:	2400c5b8 	.word	0x2400c5b8
 800ac68:	2400c5b4 	.word	0x2400c5b4
 800ac6c:	24000018 	.word	0x24000018

0800ac70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10a      	bne.n	800ac96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	60fb      	str	r3, [r7, #12]
}
 800ac92:	bf00      	nop
 800ac94:	e7fe      	b.n	800ac94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac96:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <vTaskPlaceOnEventList+0x44>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	3318      	adds	r3, #24
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7fd fdd5 	bl	800884e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aca4:	2101      	movs	r1, #1
 800aca6:	6838      	ldr	r0, [r7, #0]
 800aca8:	f000 fddc 	bl	800b864 <prvAddCurrentTaskToDelayedList>
}
 800acac:	bf00      	nop
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	2400c5b4 	.word	0x2400c5b4

0800acb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10a      	bne.n	800ace0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	617b      	str	r3, [r7, #20]
}
 800acdc:	bf00      	nop
 800acde:	e7fe      	b.n	800acde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ace0:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <vTaskPlaceOnEventListRestricted+0x54>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3318      	adds	r3, #24
 800ace6:	4619      	mov	r1, r3
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f7fd fd8c 	bl	8008806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800acf4:	f04f 33ff 	mov.w	r3, #4294967295
 800acf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	68b8      	ldr	r0, [r7, #8]
 800acfe:	f000 fdb1 	bl	800b864 <prvAddCurrentTaskToDelayedList>
	}
 800ad02:	bf00      	nop
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	2400c5b4 	.word	0x2400c5b4

0800ad10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10a      	bne.n	800ad3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	60fb      	str	r3, [r7, #12]
}
 800ad38:	bf00      	nop
 800ad3a:	e7fe      	b.n	800ad3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	3318      	adds	r3, #24
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fd fdbd 	bl	80088c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad46:	4b1e      	ldr	r3, [pc, #120]	; (800adc0 <xTaskRemoveFromEventList+0xb0>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d11d      	bne.n	800ad8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	3304      	adds	r3, #4
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fd fdb4 	bl	80088c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad5c:	4b19      	ldr	r3, [pc, #100]	; (800adc4 <xTaskRemoveFromEventList+0xb4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d903      	bls.n	800ad6c <xTaskRemoveFromEventList+0x5c>
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	4a16      	ldr	r2, [pc, #88]	; (800adc4 <xTaskRemoveFromEventList+0xb4>)
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad70:	4613      	mov	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	4413      	add	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4a13      	ldr	r2, [pc, #76]	; (800adc8 <xTaskRemoveFromEventList+0xb8>)
 800ad7a:	441a      	add	r2, r3
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7fd fd3f 	bl	8008806 <vListInsertEnd>
 800ad88:	e005      	b.n	800ad96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	3318      	adds	r3, #24
 800ad8e:	4619      	mov	r1, r3
 800ad90:	480e      	ldr	r0, [pc, #56]	; (800adcc <xTaskRemoveFromEventList+0xbc>)
 800ad92:	f7fd fd38 	bl	8008806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad9a:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <xTaskRemoveFromEventList+0xc0>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d905      	bls.n	800adb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ada4:	2301      	movs	r3, #1
 800ada6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <xTaskRemoveFromEventList+0xc4>)
 800adaa:	2201      	movs	r2, #1
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	e001      	b.n	800adb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800adb0:	2300      	movs	r3, #0
 800adb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adb4:	697b      	ldr	r3, [r7, #20]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	2400cab0 	.word	0x2400cab0
 800adc4:	2400ca90 	.word	0x2400ca90
 800adc8:	2400c5b8 	.word	0x2400c5b8
 800adcc:	2400ca48 	.word	0x2400ca48
 800add0:	2400c5b4 	.word	0x2400c5b4
 800add4:	2400ca9c 	.word	0x2400ca9c

0800add8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10a      	bne.n	800adfc <vTaskSetTimeOutState+0x24>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	60fb      	str	r3, [r7, #12]
}
 800adf8:	bf00      	nop
 800adfa:	e7fe      	b.n	800adfa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800adfc:	f7fd feba 	bl	8008b74 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae00:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <vTaskSetTimeOutState+0x44>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ae08:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <vTaskSetTimeOutState+0x48>)
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ae10:	f7fd fee0 	bl	8008bd4 <vPortExitCritical>
}
 800ae14:	bf00      	nop
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	2400caa0 	.word	0x2400caa0
 800ae20:	2400ca8c 	.word	0x2400ca8c

0800ae24 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae2c:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <vTaskInternalSetTimeOutState+0x24>)
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae34:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <vTaskInternalSetTimeOutState+0x28>)
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	605a      	str	r2, [r3, #4]
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	2400caa0 	.word	0x2400caa0
 800ae4c:	2400ca8c 	.word	0x2400ca8c

0800ae50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	613b      	str	r3, [r7, #16]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	60fb      	str	r3, [r7, #12]
}
 800ae8e:	bf00      	nop
 800ae90:	e7fe      	b.n	800ae90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae92:	f7fd fe6f 	bl	8008b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae96:	4b1d      	ldr	r3, [pc, #116]	; (800af0c <xTaskCheckForTimeOut+0xbc>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeae:	d102      	bne.n	800aeb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61fb      	str	r3, [r7, #28]
 800aeb4:	e023      	b.n	800aefe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	4b15      	ldr	r3, [pc, #84]	; (800af10 <xTaskCheckForTimeOut+0xc0>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d007      	beq.n	800aed2 <xTaskCheckForTimeOut+0x82>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d302      	bcc.n	800aed2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aecc:	2301      	movs	r3, #1
 800aece:	61fb      	str	r3, [r7, #28]
 800aed0:	e015      	b.n	800aefe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d20b      	bcs.n	800aef4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	1ad2      	subs	r2, r2, r3
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff ff9b 	bl	800ae24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	61fb      	str	r3, [r7, #28]
 800aef2:	e004      	b.n	800aefe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aefa:	2301      	movs	r3, #1
 800aefc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aefe:	f7fd fe69 	bl	8008bd4 <vPortExitCritical>

	return xReturn;
 800af02:	69fb      	ldr	r3, [r7, #28]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3720      	adds	r7, #32
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	2400ca8c 	.word	0x2400ca8c
 800af10:	2400caa0 	.word	0x2400caa0

0800af14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af14:	b480      	push	{r7}
 800af16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af18:	4b03      	ldr	r3, [pc, #12]	; (800af28 <vTaskMissedYield+0x14>)
 800af1a:	2201      	movs	r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
}
 800af1e:	bf00      	nop
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	2400ca9c 	.word	0x2400ca9c

0800af2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af34:	f000 f852 	bl	800afdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af38:	4b06      	ldr	r3, [pc, #24]	; (800af54 <prvIdleTask+0x28>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d9f9      	bls.n	800af34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af40:	4b05      	ldr	r3, [pc, #20]	; (800af58 <prvIdleTask+0x2c>)
 800af42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af50:	e7f0      	b.n	800af34 <prvIdleTask+0x8>
 800af52:	bf00      	nop
 800af54:	2400c5b8 	.word	0x2400c5b8
 800af58:	e000ed04 	.word	0xe000ed04

0800af5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af62:	2300      	movs	r3, #0
 800af64:	607b      	str	r3, [r7, #4]
 800af66:	e00c      	b.n	800af82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	4613      	mov	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4413      	add	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4a12      	ldr	r2, [pc, #72]	; (800afbc <prvInitialiseTaskLists+0x60>)
 800af74:	4413      	add	r3, r2
 800af76:	4618      	mov	r0, r3
 800af78:	f7fd fc18 	bl	80087ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3301      	adds	r3, #1
 800af80:	607b      	str	r3, [r7, #4]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b37      	cmp	r3, #55	; 0x37
 800af86:	d9ef      	bls.n	800af68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af88:	480d      	ldr	r0, [pc, #52]	; (800afc0 <prvInitialiseTaskLists+0x64>)
 800af8a:	f7fd fc0f 	bl	80087ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af8e:	480d      	ldr	r0, [pc, #52]	; (800afc4 <prvInitialiseTaskLists+0x68>)
 800af90:	f7fd fc0c 	bl	80087ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af94:	480c      	ldr	r0, [pc, #48]	; (800afc8 <prvInitialiseTaskLists+0x6c>)
 800af96:	f7fd fc09 	bl	80087ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af9a:	480c      	ldr	r0, [pc, #48]	; (800afcc <prvInitialiseTaskLists+0x70>)
 800af9c:	f7fd fc06 	bl	80087ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afa0:	480b      	ldr	r0, [pc, #44]	; (800afd0 <prvInitialiseTaskLists+0x74>)
 800afa2:	f7fd fc03 	bl	80087ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afa6:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <prvInitialiseTaskLists+0x78>)
 800afa8:	4a05      	ldr	r2, [pc, #20]	; (800afc0 <prvInitialiseTaskLists+0x64>)
 800afaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afac:	4b0a      	ldr	r3, [pc, #40]	; (800afd8 <prvInitialiseTaskLists+0x7c>)
 800afae:	4a05      	ldr	r2, [pc, #20]	; (800afc4 <prvInitialiseTaskLists+0x68>)
 800afb0:	601a      	str	r2, [r3, #0]
}
 800afb2:	bf00      	nop
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	2400c5b8 	.word	0x2400c5b8
 800afc0:	2400ca18 	.word	0x2400ca18
 800afc4:	2400ca2c 	.word	0x2400ca2c
 800afc8:	2400ca48 	.word	0x2400ca48
 800afcc:	2400ca5c 	.word	0x2400ca5c
 800afd0:	2400ca74 	.word	0x2400ca74
 800afd4:	2400ca40 	.word	0x2400ca40
 800afd8:	2400ca44 	.word	0x2400ca44

0800afdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afe2:	e019      	b.n	800b018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afe4:	f7fd fdc6 	bl	8008b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe8:	4b10      	ldr	r3, [pc, #64]	; (800b02c <prvCheckTasksWaitingTermination+0x50>)
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3304      	adds	r3, #4
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fd fc63 	bl	80088c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800affa:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <prvCheckTasksWaitingTermination+0x54>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3b01      	subs	r3, #1
 800b000:	4a0b      	ldr	r2, [pc, #44]	; (800b030 <prvCheckTasksWaitingTermination+0x54>)
 800b002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b004:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <prvCheckTasksWaitingTermination+0x58>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3b01      	subs	r3, #1
 800b00a:	4a0a      	ldr	r2, [pc, #40]	; (800b034 <prvCheckTasksWaitingTermination+0x58>)
 800b00c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b00e:	f7fd fde1 	bl	8008bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f810 	bl	800b038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b018:	4b06      	ldr	r3, [pc, #24]	; (800b034 <prvCheckTasksWaitingTermination+0x58>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e1      	bne.n	800afe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b020:	bf00      	nop
 800b022:	bf00      	nop
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	2400ca5c 	.word	0x2400ca5c
 800b030:	2400ca88 	.word	0x2400ca88
 800b034:	2400ca70 	.word	0x2400ca70

0800b038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3354      	adds	r3, #84	; 0x54
 800b044:	4618      	mov	r0, r3
 800b046:	f001 f897 	bl	800c178 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b050:	2b00      	cmp	r3, #0
 800b052:	d108      	bne.n	800b066 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b058:	4618      	mov	r0, r3
 800b05a:	f7fd fa89 	bl	8008570 <vPortFree>
				vPortFree( pxTCB );
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7fd fa86 	bl	8008570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b064:	e018      	b.n	800b098 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d103      	bne.n	800b078 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7fd fa7d 	bl	8008570 <vPortFree>
	}
 800b076:	e00f      	b.n	800b098 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d00a      	beq.n	800b098 <prvDeleteTCB+0x60>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	60fb      	str	r3, [r7, #12]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <prvDeleteTCB+0x5e>
	}
 800b098:	bf00      	nop
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0a6:	4b0c      	ldr	r3, [pc, #48]	; (800b0d8 <prvResetNextTaskUnblockTime+0x38>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d104      	bne.n	800b0ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0b0:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <prvResetNextTaskUnblockTime+0x3c>)
 800b0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0b8:	e008      	b.n	800b0cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ba:	4b07      	ldr	r3, [pc, #28]	; (800b0d8 <prvResetNextTaskUnblockTime+0x38>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	4a04      	ldr	r2, [pc, #16]	; (800b0dc <prvResetNextTaskUnblockTime+0x3c>)
 800b0ca:	6013      	str	r3, [r2, #0]
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	2400ca40 	.word	0x2400ca40
 800b0dc:	2400caa8 	.word	0x2400caa8

0800b0e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b0e6:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <xTaskGetCurrentTaskHandle+0x1c>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b0ec:	687b      	ldr	r3, [r7, #4]
	}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	2400c5b4 	.word	0x2400c5b4

0800b100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b106:	4b0b      	ldr	r3, [pc, #44]	; (800b134 <xTaskGetSchedulerState+0x34>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d102      	bne.n	800b114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b10e:	2301      	movs	r3, #1
 800b110:	607b      	str	r3, [r7, #4]
 800b112:	e008      	b.n	800b126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b114:	4b08      	ldr	r3, [pc, #32]	; (800b138 <xTaskGetSchedulerState+0x38>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b11c:	2302      	movs	r3, #2
 800b11e:	607b      	str	r3, [r7, #4]
 800b120:	e001      	b.n	800b126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b122:	2300      	movs	r3, #0
 800b124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b126:	687b      	ldr	r3, [r7, #4]
	}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	2400ca94 	.word	0x2400ca94
 800b138:	2400cab0 	.word	0x2400cab0

0800b13c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b148:	2300      	movs	r3, #0
 800b14a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d051      	beq.n	800b1f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b156:	4b2a      	ldr	r3, [pc, #168]	; (800b200 <xTaskPriorityInherit+0xc4>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d241      	bcs.n	800b1e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	2b00      	cmp	r3, #0
 800b166:	db06      	blt.n	800b176 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b168:	4b25      	ldr	r3, [pc, #148]	; (800b200 <xTaskPriorityInherit+0xc4>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	6959      	ldr	r1, [r3, #20]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17e:	4613      	mov	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4a1f      	ldr	r2, [pc, #124]	; (800b204 <xTaskPriorityInherit+0xc8>)
 800b188:	4413      	add	r3, r2
 800b18a:	4299      	cmp	r1, r3
 800b18c:	d122      	bne.n	800b1d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	3304      	adds	r3, #4
 800b192:	4618      	mov	r0, r3
 800b194:	f7fd fb94 	bl	80088c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b198:	4b19      	ldr	r3, [pc, #100]	; (800b200 <xTaskPriorityInherit+0xc4>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a6:	4b18      	ldr	r3, [pc, #96]	; (800b208 <xTaskPriorityInherit+0xcc>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d903      	bls.n	800b1b6 <xTaskPriorityInherit+0x7a>
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b2:	4a15      	ldr	r2, [pc, #84]	; (800b208 <xTaskPriorityInherit+0xcc>)
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4a10      	ldr	r2, [pc, #64]	; (800b204 <xTaskPriorityInherit+0xc8>)
 800b1c4:	441a      	add	r2, r3
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	3304      	adds	r3, #4
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	f7fd fb1a 	bl	8008806 <vListInsertEnd>
 800b1d2:	e004      	b.n	800b1de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1d4:	4b0a      	ldr	r3, [pc, #40]	; (800b200 <xTaskPriorityInherit+0xc4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	e008      	b.n	800b1f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1e8:	4b05      	ldr	r3, [pc, #20]	; (800b200 <xTaskPriorityInherit+0xc4>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d201      	bcs.n	800b1f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
	}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	2400c5b4 	.word	0x2400c5b4
 800b204:	2400c5b8 	.word	0x2400c5b8
 800b208:	2400ca90 	.word	0x2400ca90

0800b20c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b218:	2300      	movs	r3, #0
 800b21a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d056      	beq.n	800b2d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b222:	4b2e      	ldr	r3, [pc, #184]	; (800b2dc <xTaskPriorityDisinherit+0xd0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d00a      	beq.n	800b242 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	60fb      	str	r3, [r7, #12]
}
 800b23e:	bf00      	nop
 800b240:	e7fe      	b.n	800b240 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10a      	bne.n	800b260 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	60bb      	str	r3, [r7, #8]
}
 800b25c:	bf00      	nop
 800b25e:	e7fe      	b.n	800b25e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b264:	1e5a      	subs	r2, r3, #1
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b272:	429a      	cmp	r2, r3
 800b274:	d02c      	beq.n	800b2d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d128      	bne.n	800b2d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	3304      	adds	r3, #4
 800b282:	4618      	mov	r0, r3
 800b284:	f7fd fb1c 	bl	80088c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b294:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a0:	4b0f      	ldr	r3, [pc, #60]	; (800b2e0 <xTaskPriorityDisinherit+0xd4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d903      	bls.n	800b2b0 <xTaskPriorityDisinherit+0xa4>
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ac:	4a0c      	ldr	r2, [pc, #48]	; (800b2e0 <xTaskPriorityDisinherit+0xd4>)
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4a09      	ldr	r2, [pc, #36]	; (800b2e4 <xTaskPriorityDisinherit+0xd8>)
 800b2be:	441a      	add	r2, r3
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	f7fd fa9d 	bl	8008806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2d0:	697b      	ldr	r3, [r7, #20]
	}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	2400c5b4 	.word	0x2400c5b4
 800b2e0:	2400ca90 	.word	0x2400ca90
 800b2e4:	2400c5b8 	.word	0x2400c5b8

0800b2e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d06a      	beq.n	800b3d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10a      	bne.n	800b31e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	60fb      	str	r3, [r7, #12]
}
 800b31a:	bf00      	nop
 800b31c:	e7fe      	b.n	800b31c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d902      	bls.n	800b32e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	61fb      	str	r3, [r7, #28]
 800b32c:	e002      	b.n	800b334 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b332:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	69fa      	ldr	r2, [r7, #28]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d04b      	beq.n	800b3d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	429a      	cmp	r2, r3
 800b346:	d146      	bne.n	800b3d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b348:	4b25      	ldr	r3, [pc, #148]	; (800b3e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d10a      	bne.n	800b368 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	60bb      	str	r3, [r7, #8]
}
 800b364:	bf00      	nop
 800b366:	e7fe      	b.n	800b366 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	69fa      	ldr	r2, [r7, #28]
 800b372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	db04      	blt.n	800b386 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	6959      	ldr	r1, [r3, #20]
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	4613      	mov	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4a13      	ldr	r2, [pc, #76]	; (800b3e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b396:	4413      	add	r3, r2
 800b398:	4299      	cmp	r1, r3
 800b39a:	d11c      	bne.n	800b3d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fd fa8d 	bl	80088c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3aa:	4b0f      	ldr	r3, [pc, #60]	; (800b3e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d903      	bls.n	800b3ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b6:	4a0c      	ldr	r2, [pc, #48]	; (800b3e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3be:	4613      	mov	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4413      	add	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4a07      	ldr	r2, [pc, #28]	; (800b3e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b3c8:	441a      	add	r2, r3
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	f7fd fa18 	bl	8008806 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3d6:	bf00      	nop
 800b3d8:	3720      	adds	r7, #32
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	2400c5b4 	.word	0x2400c5b4
 800b3e4:	2400c5b8 	.word	0x2400c5b8
 800b3e8:	2400ca90 	.word	0x2400ca90

0800b3ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b3ec:	b480      	push	{r7}
 800b3ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b3f0:	4b07      	ldr	r3, [pc, #28]	; (800b410 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d004      	beq.n	800b402 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b3f8:	4b05      	ldr	r3, [pc, #20]	; (800b410 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3fe:	3201      	adds	r2, #1
 800b400:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b402:	4b03      	ldr	r3, [pc, #12]	; (800b410 <pvTaskIncrementMutexHeldCount+0x24>)
 800b404:	681b      	ldr	r3, [r3, #0]
	}
 800b406:	4618      	mov	r0, r3
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	2400c5b4 	.word	0x2400c5b4

0800b414 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b422:	f7fd fba7 	bl	8008b74 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b426:	4b29      	ldr	r3, [pc, #164]	; (800b4cc <xTaskNotifyWait+0xb8>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b02      	cmp	r3, #2
 800b432:	d01c      	beq.n	800b46e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b434:	4b25      	ldr	r3, [pc, #148]	; (800b4cc <xTaskNotifyWait+0xb8>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	43d2      	mvns	r2, r2
 800b440:	400a      	ands	r2, r1
 800b442:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b446:	4b21      	ldr	r3, [pc, #132]	; (800b4cc <xTaskNotifyWait+0xb8>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00b      	beq.n	800b46e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b456:	2101      	movs	r1, #1
 800b458:	6838      	ldr	r0, [r7, #0]
 800b45a:	f000 fa03 	bl	800b864 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b45e:	4b1c      	ldr	r3, [pc, #112]	; (800b4d0 <xTaskNotifyWait+0xbc>)
 800b460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b464:	601a      	str	r2, [r3, #0]
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b46e:	f7fd fbb1 	bl	8008bd4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b472:	f7fd fb7f 	bl	8008b74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d005      	beq.n	800b488 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b47c:	4b13      	ldr	r3, [pc, #76]	; (800b4cc <xTaskNotifyWait+0xb8>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b488:	4b10      	ldr	r3, [pc, #64]	; (800b4cc <xTaskNotifyWait+0xb8>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b02      	cmp	r3, #2
 800b494:	d002      	beq.n	800b49c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b496:	2300      	movs	r3, #0
 800b498:	617b      	str	r3, [r7, #20]
 800b49a:	e00a      	b.n	800b4b2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b49c:	4b0b      	ldr	r3, [pc, #44]	; (800b4cc <xTaskNotifyWait+0xb8>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	43d2      	mvns	r2, r2
 800b4a8:	400a      	ands	r2, r1
 800b4aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4b2:	4b06      	ldr	r3, [pc, #24]	; (800b4cc <xTaskNotifyWait+0xb8>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800b4bc:	f7fd fb8a 	bl	8008bd4 <vPortExitCritical>

		return xReturn;
 800b4c0:	697b      	ldr	r3, [r7, #20]
	}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	2400c5b4 	.word	0x2400c5b4
 800b4d0:	e000ed04 	.word	0xe000ed04

0800b4d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08a      	sub	sp, #40	; 0x28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	603b      	str	r3, [r7, #0]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <xTaskGenericNotify+0x30>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	61bb      	str	r3, [r7, #24]
}
 800b500:	bf00      	nop
 800b502:	e7fe      	b.n	800b502 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b508:	f7fd fb34 	bl	8008b74 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d004      	beq.n	800b51c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b522:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	2202      	movs	r2, #2
 800b528:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b52c:	79fb      	ldrb	r3, [r7, #7]
 800b52e:	2b04      	cmp	r3, #4
 800b530:	d82d      	bhi.n	800b58e <xTaskGenericNotify+0xba>
 800b532:	a201      	add	r2, pc, #4	; (adr r2, 800b538 <xTaskGenericNotify+0x64>)
 800b534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b538:	0800b5b1 	.word	0x0800b5b1
 800b53c:	0800b54d 	.word	0x0800b54d
 800b540:	0800b55f 	.word	0x0800b55f
 800b544:	0800b56f 	.word	0x0800b56f
 800b548:	0800b579 	.word	0x0800b579
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	431a      	orrs	r2, r3
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b55c:	e02b      	b.n	800b5b6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	6a3b      	ldr	r3, [r7, #32]
 800b568:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b56c:	e023      	b.n	800b5b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b576:	e01e      	b.n	800b5b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b578:	7ffb      	ldrb	r3, [r7, #31]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d004      	beq.n	800b588 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b586:	e016      	b.n	800b5b6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800b588:	2300      	movs	r3, #0
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b58c:	e013      	b.n	800b5b6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b58e:	6a3b      	ldr	r3, [r7, #32]
 800b590:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b598:	d00c      	beq.n	800b5b4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	617b      	str	r3, [r7, #20]
}
 800b5ac:	bf00      	nop
 800b5ae:	e7fe      	b.n	800b5ae <xTaskGenericNotify+0xda>
					break;
 800b5b0:	bf00      	nop
 800b5b2:	e000      	b.n	800b5b6 <xTaskGenericNotify+0xe2>

					break;
 800b5b4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b5b6:	7ffb      	ldrb	r3, [r7, #31]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d13a      	bne.n	800b632 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	3304      	adds	r3, #4
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fd f97d 	bl	80088c0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ca:	4b1d      	ldr	r3, [pc, #116]	; (800b640 <xTaskGenericNotify+0x16c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d903      	bls.n	800b5da <xTaskGenericNotify+0x106>
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d6:	4a1a      	ldr	r2, [pc, #104]	; (800b640 <xTaskGenericNotify+0x16c>)
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4a17      	ldr	r2, [pc, #92]	; (800b644 <xTaskGenericNotify+0x170>)
 800b5e8:	441a      	add	r2, r3
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	f7fd f908 	bl	8008806 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00a      	beq.n	800b614 <xTaskGenericNotify+0x140>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	613b      	str	r3, [r7, #16]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b618:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <xTaskGenericNotify+0x174>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61e:	429a      	cmp	r2, r3
 800b620:	d907      	bls.n	800b632 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b622:	4b0a      	ldr	r3, [pc, #40]	; (800b64c <xTaskGenericNotify+0x178>)
 800b624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b632:	f7fd facf 	bl	8008bd4 <vPortExitCritical>

		return xReturn;
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b638:	4618      	mov	r0, r3
 800b63a:	3728      	adds	r7, #40	; 0x28
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	2400ca90 	.word	0x2400ca90
 800b644:	2400c5b8 	.word	0x2400c5b8
 800b648:	2400c5b4 	.word	0x2400c5b4
 800b64c:	e000ed04 	.word	0xe000ed04

0800b650 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b650:	b580      	push	{r7, lr}
 800b652:	b08e      	sub	sp, #56	; 0x38
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	4613      	mov	r3, r2
 800b65e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b660:	2301      	movs	r3, #1
 800b662:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10a      	bne.n	800b680 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b67c:	bf00      	nop
 800b67e:	e7fe      	b.n	800b67e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b680:	f7fd fb5a 	bl	8008d38 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b688:	f3ef 8211 	mrs	r2, BASEPRI
 800b68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	623a      	str	r2, [r7, #32]
 800b69e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b6a0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d004      	beq.n	800b6b4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b6ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b6c6:	79fb      	ldrb	r3, [r7, #7]
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d82f      	bhi.n	800b72c <xTaskGenericNotifyFromISR+0xdc>
 800b6cc:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <xTaskGenericNotifyFromISR+0x84>)
 800b6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d2:	bf00      	nop
 800b6d4:	0800b74f 	.word	0x0800b74f
 800b6d8:	0800b6e9 	.word	0x0800b6e9
 800b6dc:	0800b6fb 	.word	0x0800b6fb
 800b6e0:	0800b70b 	.word	0x0800b70b
 800b6e4:	0800b715 	.word	0x0800b715
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b6f8:	e02c      	b.n	800b754 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b708:	e024      	b.n	800b754 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b712:	e01f      	b.n	800b754 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b714:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d004      	beq.n	800b726 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b724:	e016      	b.n	800b754 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b726:	2300      	movs	r3, #0
 800b728:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b72a:	e013      	b.n	800b754 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b736:	d00c      	beq.n	800b752 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	61bb      	str	r3, [r7, #24]
}
 800b74a:	bf00      	nop
 800b74c:	e7fe      	b.n	800b74c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b74e:	bf00      	nop
 800b750:	e000      	b.n	800b754 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b752:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d146      	bne.n	800b7ea <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00a      	beq.n	800b77a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	617b      	str	r3, [r7, #20]
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b77a:	4b21      	ldr	r3, [pc, #132]	; (800b800 <xTaskGenericNotifyFromISR+0x1b0>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d11d      	bne.n	800b7be <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	3304      	adds	r3, #4
 800b786:	4618      	mov	r0, r3
 800b788:	f7fd f89a 	bl	80088c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b790:	4b1c      	ldr	r3, [pc, #112]	; (800b804 <xTaskGenericNotifyFromISR+0x1b4>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	429a      	cmp	r2, r3
 800b796:	d903      	bls.n	800b7a0 <xTaskGenericNotifyFromISR+0x150>
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79c:	4a19      	ldr	r2, [pc, #100]	; (800b804 <xTaskGenericNotifyFromISR+0x1b4>)
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4a16      	ldr	r2, [pc, #88]	; (800b808 <xTaskGenericNotifyFromISR+0x1b8>)
 800b7ae:	441a      	add	r2, r3
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4610      	mov	r0, r2
 800b7b8:	f7fd f825 	bl	8008806 <vListInsertEnd>
 800b7bc:	e005      	b.n	800b7ca <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	3318      	adds	r3, #24
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4811      	ldr	r0, [pc, #68]	; (800b80c <xTaskGenericNotifyFromISR+0x1bc>)
 800b7c6:	f7fd f81e 	bl	8008806 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ce:	4b10      	ldr	r3, [pc, #64]	; (800b810 <xTaskGenericNotifyFromISR+0x1c0>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d908      	bls.n	800b7ea <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b7e4:	4b0b      	ldr	r3, [pc, #44]	; (800b814 <xTaskGenericNotifyFromISR+0x1c4>)
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]
 800b7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f383 8811 	msr	BASEPRI, r3
}
 800b7f4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3738      	adds	r7, #56	; 0x38
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	2400cab0 	.word	0x2400cab0
 800b804:	2400ca90 	.word	0x2400ca90
 800b808:	2400c5b8 	.word	0x2400c5b8
 800b80c:	2400ca48 	.word	0x2400ca48
 800b810:	2400c5b4 	.word	0x2400c5b4
 800b814:	2400ca9c 	.word	0x2400ca9c

0800b818 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d102      	bne.n	800b82c <xTaskNotifyStateClear+0x14>
 800b826:	4b0e      	ldr	r3, [pc, #56]	; (800b860 <xTaskNotifyStateClear+0x48>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	e000      	b.n	800b82e <xTaskNotifyStateClear+0x16>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800b830:	f7fd f9a0 	bl	8008b74 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d106      	bne.n	800b84e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800b848:	2301      	movs	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	e001      	b.n	800b852 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800b84e:	2300      	movs	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800b852:	f7fd f9bf 	bl	8008bd4 <vPortExitCritical>

		return xReturn;
 800b856:	68fb      	ldr	r3, [r7, #12]
	}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	2400c5b4 	.word	0x2400c5b4

0800b864 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b86e:	4b21      	ldr	r3, [pc, #132]	; (800b8f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b874:	4b20      	ldr	r3, [pc, #128]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3304      	adds	r3, #4
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fd f820 	bl	80088c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b886:	d10a      	bne.n	800b89e <prvAddCurrentTaskToDelayedList+0x3a>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d007      	beq.n	800b89e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b88e:	4b1a      	ldr	r3, [pc, #104]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3304      	adds	r3, #4
 800b894:	4619      	mov	r1, r3
 800b896:	4819      	ldr	r0, [pc, #100]	; (800b8fc <prvAddCurrentTaskToDelayedList+0x98>)
 800b898:	f7fc ffb5 	bl	8008806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b89c:	e026      	b.n	800b8ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8a6:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d209      	bcs.n	800b8ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8b6:	4b12      	ldr	r3, [pc, #72]	; (800b900 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	4b0f      	ldr	r3, [pc, #60]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3304      	adds	r3, #4
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	f7fc ffc3 	bl	800884e <vListInsert>
}
 800b8c8:	e010      	b.n	800b8ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8ca:	4b0e      	ldr	r3, [pc, #56]	; (800b904 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	4b0a      	ldr	r3, [pc, #40]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7fc ffb9 	bl	800884e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	; (800b908 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d202      	bcs.n	800b8ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8e6:	4a08      	ldr	r2, [pc, #32]	; (800b908 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6013      	str	r3, [r2, #0]
}
 800b8ec:	bf00      	nop
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	2400ca8c 	.word	0x2400ca8c
 800b8f8:	2400c5b4 	.word	0x2400c5b4
 800b8fc:	2400ca74 	.word	0x2400ca74
 800b900:	2400ca44 	.word	0x2400ca44
 800b904:	2400ca40 	.word	0x2400ca40
 800b908:	2400caa8 	.word	0x2400caa8

0800b90c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08a      	sub	sp, #40	; 0x28
 800b910:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b912:	2300      	movs	r3, #0
 800b914:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b916:	f000 fb07 	bl	800bf28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b91a:	4b1c      	ldr	r3, [pc, #112]	; (800b98c <xTimerCreateTimerTask+0x80>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d021      	beq.n	800b966 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b922:	2300      	movs	r3, #0
 800b924:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b926:	2300      	movs	r3, #0
 800b928:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b92a:	1d3a      	adds	r2, r7, #4
 800b92c:	f107 0108 	add.w	r1, r7, #8
 800b930:	f107 030c 	add.w	r3, r7, #12
 800b934:	4618      	mov	r0, r3
 800b936:	f7fc fd35 	bl	80083a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b93a:	6879      	ldr	r1, [r7, #4]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	9202      	str	r2, [sp, #8]
 800b942:	9301      	str	r3, [sp, #4]
 800b944:	2302      	movs	r3, #2
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	2300      	movs	r3, #0
 800b94a:	460a      	mov	r2, r1
 800b94c:	4910      	ldr	r1, [pc, #64]	; (800b990 <xTimerCreateTimerTask+0x84>)
 800b94e:	4811      	ldr	r0, [pc, #68]	; (800b994 <xTimerCreateTimerTask+0x88>)
 800b950:	f7fe fd57 	bl	800a402 <xTaskCreateStatic>
 800b954:	4603      	mov	r3, r0
 800b956:	4a10      	ldr	r2, [pc, #64]	; (800b998 <xTimerCreateTimerTask+0x8c>)
 800b958:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b95a:	4b0f      	ldr	r3, [pc, #60]	; (800b998 <xTimerCreateTimerTask+0x8c>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b962:	2301      	movs	r3, #1
 800b964:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10a      	bne.n	800b982 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	613b      	str	r3, [r7, #16]
}
 800b97e:	bf00      	nop
 800b980:	e7fe      	b.n	800b980 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b982:	697b      	ldr	r3, [r7, #20]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	2400cae4 	.word	0x2400cae4
 800b990:	0800d394 	.word	0x0800d394
 800b994:	0800bad1 	.word	0x0800bad1
 800b998:	2400cae8 	.word	0x2400cae8

0800b99c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08a      	sub	sp, #40	; 0x28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10a      	bne.n	800b9ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800b9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	623b      	str	r3, [r7, #32]
}
 800b9c6:	bf00      	nop
 800b9c8:	e7fe      	b.n	800b9c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9ca:	4b1a      	ldr	r3, [pc, #104]	; (800ba34 <xTimerGenericCommand+0x98>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d02a      	beq.n	800ba28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	2b05      	cmp	r3, #5
 800b9e2:	dc18      	bgt.n	800ba16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9e4:	f7ff fb8c 	bl	800b100 <xTaskGetSchedulerState>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d109      	bne.n	800ba02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9ee:	4b11      	ldr	r3, [pc, #68]	; (800ba34 <xTimerGenericCommand+0x98>)
 800b9f0:	6818      	ldr	r0, [r3, #0]
 800b9f2:	f107 0110 	add.w	r1, r7, #16
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9fa:	f7fd fb1b 	bl	8009034 <xQueueGenericSend>
 800b9fe:	6278      	str	r0, [r7, #36]	; 0x24
 800ba00:	e012      	b.n	800ba28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba02:	4b0c      	ldr	r3, [pc, #48]	; (800ba34 <xTimerGenericCommand+0x98>)
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	f107 0110 	add.w	r1, r7, #16
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f7fd fb11 	bl	8009034 <xQueueGenericSend>
 800ba12:	6278      	str	r0, [r7, #36]	; 0x24
 800ba14:	e008      	b.n	800ba28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba16:	4b07      	ldr	r3, [pc, #28]	; (800ba34 <xTimerGenericCommand+0x98>)
 800ba18:	6818      	ldr	r0, [r3, #0]
 800ba1a:	f107 0110 	add.w	r1, r7, #16
 800ba1e:	2300      	movs	r3, #0
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	f7fd fc05 	bl	8009230 <xQueueGenericSendFromISR>
 800ba26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3728      	adds	r7, #40	; 0x28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	2400cae4 	.word	0x2400cae4

0800ba38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af02      	add	r7, sp, #8
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba42:	4b22      	ldr	r3, [pc, #136]	; (800bacc <prvProcessExpiredTimer+0x94>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fc ff35 	bl	80088c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba5c:	f003 0304 	and.w	r3, r3, #4
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d022      	beq.n	800baaa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	699a      	ldr	r2, [r3, #24]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	18d1      	adds	r1, r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	6978      	ldr	r0, [r7, #20]
 800ba72:	f000 f8d1 	bl	800bc18 <prvInsertTimerInActiveList>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d01f      	beq.n	800babc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	2300      	movs	r3, #0
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	2100      	movs	r1, #0
 800ba86:	6978      	ldr	r0, [r7, #20]
 800ba88:	f7ff ff88 	bl	800b99c <xTimerGenericCommand>
 800ba8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d113      	bne.n	800babc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	60fb      	str	r3, [r7, #12]
}
 800baa6:	bf00      	nop
 800baa8:	e7fe      	b.n	800baa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bab0:	f023 0301 	bic.w	r3, r3, #1
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	6978      	ldr	r0, [r7, #20]
 800bac2:	4798      	blx	r3
}
 800bac4:	bf00      	nop
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	2400cadc 	.word	0x2400cadc

0800bad0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bad8:	f107 0308 	add.w	r3, r7, #8
 800badc:	4618      	mov	r0, r3
 800bade:	f000 f857 	bl	800bb90 <prvGetNextExpireTime>
 800bae2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	4619      	mov	r1, r3
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f000 f803 	bl	800baf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800baee:	f000 f8d5 	bl	800bc9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800baf2:	e7f1      	b.n	800bad8 <prvTimerTask+0x8>

0800baf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bafe:	f7fe fedd 	bl	800a8bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb02:	f107 0308 	add.w	r3, r7, #8
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 f866 	bl	800bbd8 <prvSampleTimeNow>
 800bb0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d130      	bne.n	800bb76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10a      	bne.n	800bb30 <prvProcessTimerOrBlockTask+0x3c>
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d806      	bhi.n	800bb30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb22:	f7fe fed9 	bl	800a8d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb26:	68f9      	ldr	r1, [r7, #12]
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff ff85 	bl	800ba38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb2e:	e024      	b.n	800bb7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d008      	beq.n	800bb48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb36:	4b13      	ldr	r3, [pc, #76]	; (800bb84 <prvProcessTimerOrBlockTask+0x90>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d101      	bne.n	800bb44 <prvProcessTimerOrBlockTask+0x50>
 800bb40:	2301      	movs	r3, #1
 800bb42:	e000      	b.n	800bb46 <prvProcessTimerOrBlockTask+0x52>
 800bb44:	2300      	movs	r3, #0
 800bb46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb48:	4b0f      	ldr	r3, [pc, #60]	; (800bb88 <prvProcessTimerOrBlockTask+0x94>)
 800bb4a:	6818      	ldr	r0, [r3, #0]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	4619      	mov	r1, r3
 800bb56:	f7fd ffd1 	bl	8009afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb5a:	f7fe febd 	bl	800a8d8 <xTaskResumeAll>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10a      	bne.n	800bb7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb64:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <prvProcessTimerOrBlockTask+0x98>)
 800bb66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	f3bf 8f6f 	isb	sy
}
 800bb74:	e001      	b.n	800bb7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb76:	f7fe feaf 	bl	800a8d8 <xTaskResumeAll>
}
 800bb7a:	bf00      	nop
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	2400cae0 	.word	0x2400cae0
 800bb88:	2400cae4 	.word	0x2400cae4
 800bb8c:	e000ed04 	.word	0xe000ed04

0800bb90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb98:	4b0e      	ldr	r3, [pc, #56]	; (800bbd4 <prvGetNextExpireTime+0x44>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d101      	bne.n	800bba6 <prvGetNextExpireTime+0x16>
 800bba2:	2201      	movs	r2, #1
 800bba4:	e000      	b.n	800bba8 <prvGetNextExpireTime+0x18>
 800bba6:	2200      	movs	r2, #0
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d105      	bne.n	800bbc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbb4:	4b07      	ldr	r3, [pc, #28]	; (800bbd4 <prvGetNextExpireTime+0x44>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	e001      	b.n	800bbc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	2400cadc 	.word	0x2400cadc

0800bbd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbe0:	f7fe ff18 	bl	800aa14 <xTaskGetTickCount>
 800bbe4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbe6:	4b0b      	ldr	r3, [pc, #44]	; (800bc14 <prvSampleTimeNow+0x3c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d205      	bcs.n	800bbfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbf0:	f000 f936 	bl	800be60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	601a      	str	r2, [r3, #0]
 800bbfa:	e002      	b.n	800bc02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc02:	4a04      	ldr	r2, [pc, #16]	; (800bc14 <prvSampleTimeNow+0x3c>)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc08:	68fb      	ldr	r3, [r7, #12]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	2400caec 	.word	0x2400caec

0800bc18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc26:	2300      	movs	r3, #0
 800bc28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d812      	bhi.n	800bc64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	1ad2      	subs	r2, r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	699b      	ldr	r3, [r3, #24]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d302      	bcc.n	800bc52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	617b      	str	r3, [r7, #20]
 800bc50:	e01b      	b.n	800bc8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc52:	4b10      	ldr	r3, [pc, #64]	; (800bc94 <prvInsertTimerInActiveList+0x7c>)
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	f7fc fdf6 	bl	800884e <vListInsert>
 800bc62:	e012      	b.n	800bc8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d206      	bcs.n	800bc7a <prvInsertTimerInActiveList+0x62>
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d302      	bcc.n	800bc7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc74:	2301      	movs	r3, #1
 800bc76:	617b      	str	r3, [r7, #20]
 800bc78:	e007      	b.n	800bc8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc7a:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <prvInsertTimerInActiveList+0x80>)
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3304      	adds	r3, #4
 800bc82:	4619      	mov	r1, r3
 800bc84:	4610      	mov	r0, r2
 800bc86:	f7fc fde2 	bl	800884e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc8a:	697b      	ldr	r3, [r7, #20]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	2400cae0 	.word	0x2400cae0
 800bc98:	2400cadc 	.word	0x2400cadc

0800bc9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08e      	sub	sp, #56	; 0x38
 800bca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bca2:	e0ca      	b.n	800be3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	da18      	bge.n	800bcdc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bcaa:	1d3b      	adds	r3, r7, #4
 800bcac:	3304      	adds	r3, #4
 800bcae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10a      	bne.n	800bccc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	61fb      	str	r3, [r7, #28]
}
 800bcc8:	bf00      	nop
 800bcca:	e7fe      	b.n	800bcca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcd2:	6850      	ldr	r0, [r2, #4]
 800bcd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcd6:	6892      	ldr	r2, [r2, #8]
 800bcd8:	4611      	mov	r1, r2
 800bcda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f2c0 80aa 	blt.w	800be38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d004      	beq.n	800bcfa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	3304      	adds	r3, #4
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fc fde3 	bl	80088c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcfa:	463b      	mov	r3, r7
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff ff6b 	bl	800bbd8 <prvSampleTimeNow>
 800bd02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b09      	cmp	r3, #9
 800bd08:	f200 8097 	bhi.w	800be3a <prvProcessReceivedCommands+0x19e>
 800bd0c:	a201      	add	r2, pc, #4	; (adr r2, 800bd14 <prvProcessReceivedCommands+0x78>)
 800bd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd12:	bf00      	nop
 800bd14:	0800bd3d 	.word	0x0800bd3d
 800bd18:	0800bd3d 	.word	0x0800bd3d
 800bd1c:	0800bd3d 	.word	0x0800bd3d
 800bd20:	0800bdb1 	.word	0x0800bdb1
 800bd24:	0800bdc5 	.word	0x0800bdc5
 800bd28:	0800be0f 	.word	0x0800be0f
 800bd2c:	0800bd3d 	.word	0x0800bd3d
 800bd30:	0800bd3d 	.word	0x0800bd3d
 800bd34:	0800bdb1 	.word	0x0800bdb1
 800bd38:	0800bdc5 	.word	0x0800bdc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd42:	f043 0301 	orr.w	r3, r3, #1
 800bd46:	b2da      	uxtb	r2, r3
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	18d1      	adds	r1, r2, r3
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5c:	f7ff ff5c 	bl	800bc18 <prvInsertTimerInActiveList>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d069      	beq.n	800be3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd74:	f003 0304 	and.w	r3, r3, #4
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d05e      	beq.n	800be3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	441a      	add	r2, r3
 800bd84:	2300      	movs	r3, #0
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd8e:	f7ff fe05 	bl	800b99c <xTimerGenericCommand>
 800bd92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d14f      	bne.n	800be3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	61bb      	str	r3, [r7, #24]
}
 800bdac:	bf00      	nop
 800bdae:	e7fe      	b.n	800bdae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdb6:	f023 0301 	bic.w	r3, r3, #1
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bdc2:	e03a      	b.n	800be3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdca:	f043 0301 	orr.w	r3, r3, #1
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10a      	bne.n	800bdfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	617b      	str	r3, [r7, #20]
}
 800bdf6:	bf00      	nop
 800bdf8:	e7fe      	b.n	800bdf8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfc:	699a      	ldr	r2, [r3, #24]
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	18d1      	adds	r1, r2, r3
 800be02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be08:	f7ff ff06 	bl	800bc18 <prvInsertTimerInActiveList>
					break;
 800be0c:	e015      	b.n	800be3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be14:	f003 0302 	and.w	r3, r3, #2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d103      	bne.n	800be24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800be1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be1e:	f7fc fba7 	bl	8008570 <vPortFree>
 800be22:	e00a      	b.n	800be3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be2a:	f023 0301 	bic.w	r3, r3, #1
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be36:	e000      	b.n	800be3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be3a:	4b08      	ldr	r3, [pc, #32]	; (800be5c <prvProcessReceivedCommands+0x1c0>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	1d39      	adds	r1, r7, #4
 800be40:	2200      	movs	r2, #0
 800be42:	4618      	mov	r0, r3
 800be44:	f7fd fb1c 	bl	8009480 <xQueueReceive>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f47f af2a 	bne.w	800bca4 <prvProcessReceivedCommands+0x8>
	}
}
 800be50:	bf00      	nop
 800be52:	bf00      	nop
 800be54:	3730      	adds	r7, #48	; 0x30
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	2400cae4 	.word	0x2400cae4

0800be60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be66:	e048      	b.n	800befa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be68:	4b2d      	ldr	r3, [pc, #180]	; (800bf20 <prvSwitchTimerLists+0xc0>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be72:	4b2b      	ldr	r3, [pc, #172]	; (800bf20 <prvSwitchTimerLists+0xc0>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	3304      	adds	r3, #4
 800be80:	4618      	mov	r0, r3
 800be82:	f7fc fd1d 	bl	80088c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d02e      	beq.n	800befa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	4413      	add	r3, r2
 800bea4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d90e      	bls.n	800becc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800beba:	4b19      	ldr	r3, [pc, #100]	; (800bf20 <prvSwitchTimerLists+0xc0>)
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3304      	adds	r3, #4
 800bec2:	4619      	mov	r1, r3
 800bec4:	4610      	mov	r0, r2
 800bec6:	f7fc fcc2 	bl	800884e <vListInsert>
 800beca:	e016      	b.n	800befa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800becc:	2300      	movs	r3, #0
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	2300      	movs	r3, #0
 800bed2:	693a      	ldr	r2, [r7, #16]
 800bed4:	2100      	movs	r1, #0
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f7ff fd60 	bl	800b99c <xTimerGenericCommand>
 800bedc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10a      	bne.n	800befa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	603b      	str	r3, [r7, #0]
}
 800bef6:	bf00      	nop
 800bef8:	e7fe      	b.n	800bef8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800befa:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <prvSwitchTimerLists+0xc0>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1b1      	bne.n	800be68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf04:	4b06      	ldr	r3, [pc, #24]	; (800bf20 <prvSwitchTimerLists+0xc0>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf0a:	4b06      	ldr	r3, [pc, #24]	; (800bf24 <prvSwitchTimerLists+0xc4>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a04      	ldr	r2, [pc, #16]	; (800bf20 <prvSwitchTimerLists+0xc0>)
 800bf10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf12:	4a04      	ldr	r2, [pc, #16]	; (800bf24 <prvSwitchTimerLists+0xc4>)
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	6013      	str	r3, [r2, #0]
}
 800bf18:	bf00      	nop
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	2400cadc 	.word	0x2400cadc
 800bf24:	2400cae0 	.word	0x2400cae0

0800bf28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf2e:	f7fc fe21 	bl	8008b74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf32:	4b15      	ldr	r3, [pc, #84]	; (800bf88 <prvCheckForValidListAndQueue+0x60>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d120      	bne.n	800bf7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf3a:	4814      	ldr	r0, [pc, #80]	; (800bf8c <prvCheckForValidListAndQueue+0x64>)
 800bf3c:	f7fc fc36 	bl	80087ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf40:	4813      	ldr	r0, [pc, #76]	; (800bf90 <prvCheckForValidListAndQueue+0x68>)
 800bf42:	f7fc fc33 	bl	80087ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf46:	4b13      	ldr	r3, [pc, #76]	; (800bf94 <prvCheckForValidListAndQueue+0x6c>)
 800bf48:	4a10      	ldr	r2, [pc, #64]	; (800bf8c <prvCheckForValidListAndQueue+0x64>)
 800bf4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf4c:	4b12      	ldr	r3, [pc, #72]	; (800bf98 <prvCheckForValidListAndQueue+0x70>)
 800bf4e:	4a10      	ldr	r2, [pc, #64]	; (800bf90 <prvCheckForValidListAndQueue+0x68>)
 800bf50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf52:	2300      	movs	r3, #0
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	4b11      	ldr	r3, [pc, #68]	; (800bf9c <prvCheckForValidListAndQueue+0x74>)
 800bf58:	4a11      	ldr	r2, [pc, #68]	; (800bfa0 <prvCheckForValidListAndQueue+0x78>)
 800bf5a:	2110      	movs	r1, #16
 800bf5c:	200a      	movs	r0, #10
 800bf5e:	f7fc ff93 	bl	8008e88 <xQueueGenericCreateStatic>
 800bf62:	4603      	mov	r3, r0
 800bf64:	4a08      	ldr	r2, [pc, #32]	; (800bf88 <prvCheckForValidListAndQueue+0x60>)
 800bf66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf68:	4b07      	ldr	r3, [pc, #28]	; (800bf88 <prvCheckForValidListAndQueue+0x60>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d005      	beq.n	800bf7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf70:	4b05      	ldr	r3, [pc, #20]	; (800bf88 <prvCheckForValidListAndQueue+0x60>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	490b      	ldr	r1, [pc, #44]	; (800bfa4 <prvCheckForValidListAndQueue+0x7c>)
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fd fd96 	bl	8009aa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf7c:	f7fc fe2a 	bl	8008bd4 <vPortExitCritical>
}
 800bf80:	bf00      	nop
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	2400cae4 	.word	0x2400cae4
 800bf8c:	2400cab4 	.word	0x2400cab4
 800bf90:	2400cac8 	.word	0x2400cac8
 800bf94:	2400cadc 	.word	0x2400cadc
 800bf98:	2400cae0 	.word	0x2400cae0
 800bf9c:	2400cb90 	.word	0x2400cb90
 800bfa0:	2400caf0 	.word	0x2400caf0
 800bfa4:	0800d39c 	.word	0x0800d39c

0800bfa8 <atoi>:
 800bfa8:	220a      	movs	r2, #10
 800bfaa:	2100      	movs	r1, #0
 800bfac:	f000 ba22 	b.w	800c3f4 <strtol>

0800bfb0 <__errno>:
 800bfb0:	4b01      	ldr	r3, [pc, #4]	; (800bfb8 <__errno+0x8>)
 800bfb2:	6818      	ldr	r0, [r3, #0]
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	24000018 	.word	0x24000018

0800bfbc <__libc_init_array>:
 800bfbc:	b570      	push	{r4, r5, r6, lr}
 800bfbe:	4d0d      	ldr	r5, [pc, #52]	; (800bff4 <__libc_init_array+0x38>)
 800bfc0:	4c0d      	ldr	r4, [pc, #52]	; (800bff8 <__libc_init_array+0x3c>)
 800bfc2:	1b64      	subs	r4, r4, r5
 800bfc4:	10a4      	asrs	r4, r4, #2
 800bfc6:	2600      	movs	r6, #0
 800bfc8:	42a6      	cmp	r6, r4
 800bfca:	d109      	bne.n	800bfe0 <__libc_init_array+0x24>
 800bfcc:	4d0b      	ldr	r5, [pc, #44]	; (800bffc <__libc_init_array+0x40>)
 800bfce:	4c0c      	ldr	r4, [pc, #48]	; (800c000 <__libc_init_array+0x44>)
 800bfd0:	f001 f9be 	bl	800d350 <_init>
 800bfd4:	1b64      	subs	r4, r4, r5
 800bfd6:	10a4      	asrs	r4, r4, #2
 800bfd8:	2600      	movs	r6, #0
 800bfda:	42a6      	cmp	r6, r4
 800bfdc:	d105      	bne.n	800bfea <__libc_init_array+0x2e>
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe4:	4798      	blx	r3
 800bfe6:	3601      	adds	r6, #1
 800bfe8:	e7ee      	b.n	800bfc8 <__libc_init_array+0xc>
 800bfea:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfee:	4798      	blx	r3
 800bff0:	3601      	adds	r6, #1
 800bff2:	e7f2      	b.n	800bfda <__libc_init_array+0x1e>
 800bff4:	0800d5a0 	.word	0x0800d5a0
 800bff8:	0800d5a0 	.word	0x0800d5a0
 800bffc:	0800d5a0 	.word	0x0800d5a0
 800c000:	0800d5a4 	.word	0x0800d5a4

0800c004 <__retarget_lock_acquire_recursive>:
 800c004:	4770      	bx	lr

0800c006 <__retarget_lock_release_recursive>:
 800c006:	4770      	bx	lr

0800c008 <memcpy>:
 800c008:	440a      	add	r2, r1
 800c00a:	4291      	cmp	r1, r2
 800c00c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c010:	d100      	bne.n	800c014 <memcpy+0xc>
 800c012:	4770      	bx	lr
 800c014:	b510      	push	{r4, lr}
 800c016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c01e:	4291      	cmp	r1, r2
 800c020:	d1f9      	bne.n	800c016 <memcpy+0xe>
 800c022:	bd10      	pop	{r4, pc}

0800c024 <memset>:
 800c024:	4402      	add	r2, r0
 800c026:	4603      	mov	r3, r0
 800c028:	4293      	cmp	r3, r2
 800c02a:	d100      	bne.n	800c02e <memset+0xa>
 800c02c:	4770      	bx	lr
 800c02e:	f803 1b01 	strb.w	r1, [r3], #1
 800c032:	e7f9      	b.n	800c028 <memset+0x4>

0800c034 <sbrk_aligned>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	4e0e      	ldr	r6, [pc, #56]	; (800c070 <sbrk_aligned+0x3c>)
 800c038:	460c      	mov	r4, r1
 800c03a:	6831      	ldr	r1, [r6, #0]
 800c03c:	4605      	mov	r5, r0
 800c03e:	b911      	cbnz	r1, 800c046 <sbrk_aligned+0x12>
 800c040:	f000 f8f6 	bl	800c230 <_sbrk_r>
 800c044:	6030      	str	r0, [r6, #0]
 800c046:	4621      	mov	r1, r4
 800c048:	4628      	mov	r0, r5
 800c04a:	f000 f8f1 	bl	800c230 <_sbrk_r>
 800c04e:	1c43      	adds	r3, r0, #1
 800c050:	d00a      	beq.n	800c068 <sbrk_aligned+0x34>
 800c052:	1cc4      	adds	r4, r0, #3
 800c054:	f024 0403 	bic.w	r4, r4, #3
 800c058:	42a0      	cmp	r0, r4
 800c05a:	d007      	beq.n	800c06c <sbrk_aligned+0x38>
 800c05c:	1a21      	subs	r1, r4, r0
 800c05e:	4628      	mov	r0, r5
 800c060:	f000 f8e6 	bl	800c230 <_sbrk_r>
 800c064:	3001      	adds	r0, #1
 800c066:	d101      	bne.n	800c06c <sbrk_aligned+0x38>
 800c068:	f04f 34ff 	mov.w	r4, #4294967295
 800c06c:	4620      	mov	r0, r4
 800c06e:	bd70      	pop	{r4, r5, r6, pc}
 800c070:	2400cbe8 	.word	0x2400cbe8

0800c074 <_malloc_r>:
 800c074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c078:	1ccd      	adds	r5, r1, #3
 800c07a:	f025 0503 	bic.w	r5, r5, #3
 800c07e:	3508      	adds	r5, #8
 800c080:	2d0c      	cmp	r5, #12
 800c082:	bf38      	it	cc
 800c084:	250c      	movcc	r5, #12
 800c086:	2d00      	cmp	r5, #0
 800c088:	4607      	mov	r7, r0
 800c08a:	db01      	blt.n	800c090 <_malloc_r+0x1c>
 800c08c:	42a9      	cmp	r1, r5
 800c08e:	d905      	bls.n	800c09c <_malloc_r+0x28>
 800c090:	230c      	movs	r3, #12
 800c092:	603b      	str	r3, [r7, #0]
 800c094:	2600      	movs	r6, #0
 800c096:	4630      	mov	r0, r6
 800c098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c09c:	4e2e      	ldr	r6, [pc, #184]	; (800c158 <_malloc_r+0xe4>)
 800c09e:	f000 f9b3 	bl	800c408 <__malloc_lock>
 800c0a2:	6833      	ldr	r3, [r6, #0]
 800c0a4:	461c      	mov	r4, r3
 800c0a6:	bb34      	cbnz	r4, 800c0f6 <_malloc_r+0x82>
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	f7ff ffc2 	bl	800c034 <sbrk_aligned>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	d14d      	bne.n	800c152 <_malloc_r+0xde>
 800c0b6:	6834      	ldr	r4, [r6, #0]
 800c0b8:	4626      	mov	r6, r4
 800c0ba:	2e00      	cmp	r6, #0
 800c0bc:	d140      	bne.n	800c140 <_malloc_r+0xcc>
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	eb04 0803 	add.w	r8, r4, r3
 800c0c8:	f000 f8b2 	bl	800c230 <_sbrk_r>
 800c0cc:	4580      	cmp	r8, r0
 800c0ce:	d13a      	bne.n	800c146 <_malloc_r+0xd2>
 800c0d0:	6821      	ldr	r1, [r4, #0]
 800c0d2:	3503      	adds	r5, #3
 800c0d4:	1a6d      	subs	r5, r5, r1
 800c0d6:	f025 0503 	bic.w	r5, r5, #3
 800c0da:	3508      	adds	r5, #8
 800c0dc:	2d0c      	cmp	r5, #12
 800c0de:	bf38      	it	cc
 800c0e0:	250c      	movcc	r5, #12
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f7ff ffa5 	bl	800c034 <sbrk_aligned>
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	d02b      	beq.n	800c146 <_malloc_r+0xd2>
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	442b      	add	r3, r5
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	e00e      	b.n	800c114 <_malloc_r+0xa0>
 800c0f6:	6822      	ldr	r2, [r4, #0]
 800c0f8:	1b52      	subs	r2, r2, r5
 800c0fa:	d41e      	bmi.n	800c13a <_malloc_r+0xc6>
 800c0fc:	2a0b      	cmp	r2, #11
 800c0fe:	d916      	bls.n	800c12e <_malloc_r+0xba>
 800c100:	1961      	adds	r1, r4, r5
 800c102:	42a3      	cmp	r3, r4
 800c104:	6025      	str	r5, [r4, #0]
 800c106:	bf18      	it	ne
 800c108:	6059      	strne	r1, [r3, #4]
 800c10a:	6863      	ldr	r3, [r4, #4]
 800c10c:	bf08      	it	eq
 800c10e:	6031      	streq	r1, [r6, #0]
 800c110:	5162      	str	r2, [r4, r5]
 800c112:	604b      	str	r3, [r1, #4]
 800c114:	4638      	mov	r0, r7
 800c116:	f104 060b 	add.w	r6, r4, #11
 800c11a:	f000 f97b 	bl	800c414 <__malloc_unlock>
 800c11e:	f026 0607 	bic.w	r6, r6, #7
 800c122:	1d23      	adds	r3, r4, #4
 800c124:	1af2      	subs	r2, r6, r3
 800c126:	d0b6      	beq.n	800c096 <_malloc_r+0x22>
 800c128:	1b9b      	subs	r3, r3, r6
 800c12a:	50a3      	str	r3, [r4, r2]
 800c12c:	e7b3      	b.n	800c096 <_malloc_r+0x22>
 800c12e:	6862      	ldr	r2, [r4, #4]
 800c130:	42a3      	cmp	r3, r4
 800c132:	bf0c      	ite	eq
 800c134:	6032      	streq	r2, [r6, #0]
 800c136:	605a      	strne	r2, [r3, #4]
 800c138:	e7ec      	b.n	800c114 <_malloc_r+0xa0>
 800c13a:	4623      	mov	r3, r4
 800c13c:	6864      	ldr	r4, [r4, #4]
 800c13e:	e7b2      	b.n	800c0a6 <_malloc_r+0x32>
 800c140:	4634      	mov	r4, r6
 800c142:	6876      	ldr	r6, [r6, #4]
 800c144:	e7b9      	b.n	800c0ba <_malloc_r+0x46>
 800c146:	230c      	movs	r3, #12
 800c148:	603b      	str	r3, [r7, #0]
 800c14a:	4638      	mov	r0, r7
 800c14c:	f000 f962 	bl	800c414 <__malloc_unlock>
 800c150:	e7a1      	b.n	800c096 <_malloc_r+0x22>
 800c152:	6025      	str	r5, [r4, #0]
 800c154:	e7de      	b.n	800c114 <_malloc_r+0xa0>
 800c156:	bf00      	nop
 800c158:	2400cbe4 	.word	0x2400cbe4

0800c15c <cleanup_glue>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	460c      	mov	r4, r1
 800c160:	6809      	ldr	r1, [r1, #0]
 800c162:	4605      	mov	r5, r0
 800c164:	b109      	cbz	r1, 800c16a <cleanup_glue+0xe>
 800c166:	f7ff fff9 	bl	800c15c <cleanup_glue>
 800c16a:	4621      	mov	r1, r4
 800c16c:	4628      	mov	r0, r5
 800c16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c172:	f000 b955 	b.w	800c420 <_free_r>
	...

0800c178 <_reclaim_reent>:
 800c178:	4b2c      	ldr	r3, [pc, #176]	; (800c22c <_reclaim_reent+0xb4>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4283      	cmp	r3, r0
 800c17e:	b570      	push	{r4, r5, r6, lr}
 800c180:	4604      	mov	r4, r0
 800c182:	d051      	beq.n	800c228 <_reclaim_reent+0xb0>
 800c184:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c186:	b143      	cbz	r3, 800c19a <_reclaim_reent+0x22>
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d14a      	bne.n	800c224 <_reclaim_reent+0xac>
 800c18e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c190:	6819      	ldr	r1, [r3, #0]
 800c192:	b111      	cbz	r1, 800c19a <_reclaim_reent+0x22>
 800c194:	4620      	mov	r0, r4
 800c196:	f000 f943 	bl	800c420 <_free_r>
 800c19a:	6961      	ldr	r1, [r4, #20]
 800c19c:	b111      	cbz	r1, 800c1a4 <_reclaim_reent+0x2c>
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f000 f93e 	bl	800c420 <_free_r>
 800c1a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c1a6:	b111      	cbz	r1, 800c1ae <_reclaim_reent+0x36>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f000 f939 	bl	800c420 <_free_r>
 800c1ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c1b0:	b111      	cbz	r1, 800c1b8 <_reclaim_reent+0x40>
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 f934 	bl	800c420 <_free_r>
 800c1b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c1ba:	b111      	cbz	r1, 800c1c2 <_reclaim_reent+0x4a>
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 f92f 	bl	800c420 <_free_r>
 800c1c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c1c4:	b111      	cbz	r1, 800c1cc <_reclaim_reent+0x54>
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 f92a 	bl	800c420 <_free_r>
 800c1cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c1ce:	b111      	cbz	r1, 800c1d6 <_reclaim_reent+0x5e>
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f000 f925 	bl	800c420 <_free_r>
 800c1d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c1d8:	b111      	cbz	r1, 800c1e0 <_reclaim_reent+0x68>
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f000 f920 	bl	800c420 <_free_r>
 800c1e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1e2:	b111      	cbz	r1, 800c1ea <_reclaim_reent+0x72>
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 f91b 	bl	800c420 <_free_r>
 800c1ea:	69a3      	ldr	r3, [r4, #24]
 800c1ec:	b1e3      	cbz	r3, 800c228 <_reclaim_reent+0xb0>
 800c1ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	4798      	blx	r3
 800c1f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c1f6:	b1b9      	cbz	r1, 800c228 <_reclaim_reent+0xb0>
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1fe:	f7ff bfad 	b.w	800c15c <cleanup_glue>
 800c202:	5949      	ldr	r1, [r1, r5]
 800c204:	b941      	cbnz	r1, 800c218 <_reclaim_reent+0xa0>
 800c206:	3504      	adds	r5, #4
 800c208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c20a:	2d80      	cmp	r5, #128	; 0x80
 800c20c:	68d9      	ldr	r1, [r3, #12]
 800c20e:	d1f8      	bne.n	800c202 <_reclaim_reent+0x8a>
 800c210:	4620      	mov	r0, r4
 800c212:	f000 f905 	bl	800c420 <_free_r>
 800c216:	e7ba      	b.n	800c18e <_reclaim_reent+0x16>
 800c218:	680e      	ldr	r6, [r1, #0]
 800c21a:	4620      	mov	r0, r4
 800c21c:	f000 f900 	bl	800c420 <_free_r>
 800c220:	4631      	mov	r1, r6
 800c222:	e7ef      	b.n	800c204 <_reclaim_reent+0x8c>
 800c224:	2500      	movs	r5, #0
 800c226:	e7ef      	b.n	800c208 <_reclaim_reent+0x90>
 800c228:	bd70      	pop	{r4, r5, r6, pc}
 800c22a:	bf00      	nop
 800c22c:	24000018 	.word	0x24000018

0800c230 <_sbrk_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d06      	ldr	r5, [pc, #24]	; (800c24c <_sbrk_r+0x1c>)
 800c234:	2300      	movs	r3, #0
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	f7f5 f9d4 	bl	80015e8 <_sbrk>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_sbrk_r+0x1a>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_sbrk_r+0x1a>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	2400cbec 	.word	0x2400cbec

0800c250 <siprintf>:
 800c250:	b40e      	push	{r1, r2, r3}
 800c252:	b500      	push	{lr}
 800c254:	b09c      	sub	sp, #112	; 0x70
 800c256:	ab1d      	add	r3, sp, #116	; 0x74
 800c258:	9002      	str	r0, [sp, #8]
 800c25a:	9006      	str	r0, [sp, #24]
 800c25c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c260:	4809      	ldr	r0, [pc, #36]	; (800c288 <siprintf+0x38>)
 800c262:	9107      	str	r1, [sp, #28]
 800c264:	9104      	str	r1, [sp, #16]
 800c266:	4909      	ldr	r1, [pc, #36]	; (800c28c <siprintf+0x3c>)
 800c268:	f853 2b04 	ldr.w	r2, [r3], #4
 800c26c:	9105      	str	r1, [sp, #20]
 800c26e:	6800      	ldr	r0, [r0, #0]
 800c270:	9301      	str	r3, [sp, #4]
 800c272:	a902      	add	r1, sp, #8
 800c274:	f000 f97c 	bl	800c570 <_svfiprintf_r>
 800c278:	9b02      	ldr	r3, [sp, #8]
 800c27a:	2200      	movs	r2, #0
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	b01c      	add	sp, #112	; 0x70
 800c280:	f85d eb04 	ldr.w	lr, [sp], #4
 800c284:	b003      	add	sp, #12
 800c286:	4770      	bx	lr
 800c288:	24000018 	.word	0x24000018
 800c28c:	ffff0208 	.word	0xffff0208

0800c290 <siscanf>:
 800c290:	b40e      	push	{r1, r2, r3}
 800c292:	b510      	push	{r4, lr}
 800c294:	b09f      	sub	sp, #124	; 0x7c
 800c296:	ac21      	add	r4, sp, #132	; 0x84
 800c298:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c29c:	f854 2b04 	ldr.w	r2, [r4], #4
 800c2a0:	9201      	str	r2, [sp, #4]
 800c2a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c2a6:	9004      	str	r0, [sp, #16]
 800c2a8:	9008      	str	r0, [sp, #32]
 800c2aa:	f7f4 f819 	bl	80002e0 <strlen>
 800c2ae:	4b0c      	ldr	r3, [pc, #48]	; (800c2e0 <siscanf+0x50>)
 800c2b0:	9005      	str	r0, [sp, #20]
 800c2b2:	9009      	str	r0, [sp, #36]	; 0x24
 800c2b4:	930d      	str	r3, [sp, #52]	; 0x34
 800c2b6:	480b      	ldr	r0, [pc, #44]	; (800c2e4 <siscanf+0x54>)
 800c2b8:	9a01      	ldr	r2, [sp, #4]
 800c2ba:	6800      	ldr	r0, [r0, #0]
 800c2bc:	9403      	str	r4, [sp, #12]
 800c2be:	2300      	movs	r3, #0
 800c2c0:	9311      	str	r3, [sp, #68]	; 0x44
 800c2c2:	9316      	str	r3, [sp, #88]	; 0x58
 800c2c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c2cc:	a904      	add	r1, sp, #16
 800c2ce:	4623      	mov	r3, r4
 800c2d0:	f000 faa8 	bl	800c824 <__ssvfiscanf_r>
 800c2d4:	b01f      	add	sp, #124	; 0x7c
 800c2d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2da:	b003      	add	sp, #12
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	0800c2e9 	.word	0x0800c2e9
 800c2e4:	24000018 	.word	0x24000018

0800c2e8 <__seofread>:
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	4770      	bx	lr

0800c2ec <_strtol_l.constprop.0>:
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f2:	d001      	beq.n	800c2f8 <_strtol_l.constprop.0+0xc>
 800c2f4:	2b24      	cmp	r3, #36	; 0x24
 800c2f6:	d906      	bls.n	800c306 <_strtol_l.constprop.0+0x1a>
 800c2f8:	f7ff fe5a 	bl	800bfb0 <__errno>
 800c2fc:	2316      	movs	r3, #22
 800c2fe:	6003      	str	r3, [r0, #0]
 800c300:	2000      	movs	r0, #0
 800c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c306:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c3ec <_strtol_l.constprop.0+0x100>
 800c30a:	460d      	mov	r5, r1
 800c30c:	462e      	mov	r6, r5
 800c30e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c312:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c316:	f017 0708 	ands.w	r7, r7, #8
 800c31a:	d1f7      	bne.n	800c30c <_strtol_l.constprop.0+0x20>
 800c31c:	2c2d      	cmp	r4, #45	; 0x2d
 800c31e:	d132      	bne.n	800c386 <_strtol_l.constprop.0+0x9a>
 800c320:	782c      	ldrb	r4, [r5, #0]
 800c322:	2701      	movs	r7, #1
 800c324:	1cb5      	adds	r5, r6, #2
 800c326:	2b00      	cmp	r3, #0
 800c328:	d05b      	beq.n	800c3e2 <_strtol_l.constprop.0+0xf6>
 800c32a:	2b10      	cmp	r3, #16
 800c32c:	d109      	bne.n	800c342 <_strtol_l.constprop.0+0x56>
 800c32e:	2c30      	cmp	r4, #48	; 0x30
 800c330:	d107      	bne.n	800c342 <_strtol_l.constprop.0+0x56>
 800c332:	782c      	ldrb	r4, [r5, #0]
 800c334:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c338:	2c58      	cmp	r4, #88	; 0x58
 800c33a:	d14d      	bne.n	800c3d8 <_strtol_l.constprop.0+0xec>
 800c33c:	786c      	ldrb	r4, [r5, #1]
 800c33e:	2310      	movs	r3, #16
 800c340:	3502      	adds	r5, #2
 800c342:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c346:	f108 38ff 	add.w	r8, r8, #4294967295
 800c34a:	f04f 0c00 	mov.w	ip, #0
 800c34e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c352:	4666      	mov	r6, ip
 800c354:	fb03 8a19 	mls	sl, r3, r9, r8
 800c358:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c35c:	f1be 0f09 	cmp.w	lr, #9
 800c360:	d816      	bhi.n	800c390 <_strtol_l.constprop.0+0xa4>
 800c362:	4674      	mov	r4, lr
 800c364:	42a3      	cmp	r3, r4
 800c366:	dd24      	ble.n	800c3b2 <_strtol_l.constprop.0+0xc6>
 800c368:	f1bc 0f00 	cmp.w	ip, #0
 800c36c:	db1e      	blt.n	800c3ac <_strtol_l.constprop.0+0xc0>
 800c36e:	45b1      	cmp	r9, r6
 800c370:	d31c      	bcc.n	800c3ac <_strtol_l.constprop.0+0xc0>
 800c372:	d101      	bne.n	800c378 <_strtol_l.constprop.0+0x8c>
 800c374:	45a2      	cmp	sl, r4
 800c376:	db19      	blt.n	800c3ac <_strtol_l.constprop.0+0xc0>
 800c378:	fb06 4603 	mla	r6, r6, r3, r4
 800c37c:	f04f 0c01 	mov.w	ip, #1
 800c380:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c384:	e7e8      	b.n	800c358 <_strtol_l.constprop.0+0x6c>
 800c386:	2c2b      	cmp	r4, #43	; 0x2b
 800c388:	bf04      	itt	eq
 800c38a:	782c      	ldrbeq	r4, [r5, #0]
 800c38c:	1cb5      	addeq	r5, r6, #2
 800c38e:	e7ca      	b.n	800c326 <_strtol_l.constprop.0+0x3a>
 800c390:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c394:	f1be 0f19 	cmp.w	lr, #25
 800c398:	d801      	bhi.n	800c39e <_strtol_l.constprop.0+0xb2>
 800c39a:	3c37      	subs	r4, #55	; 0x37
 800c39c:	e7e2      	b.n	800c364 <_strtol_l.constprop.0+0x78>
 800c39e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c3a2:	f1be 0f19 	cmp.w	lr, #25
 800c3a6:	d804      	bhi.n	800c3b2 <_strtol_l.constprop.0+0xc6>
 800c3a8:	3c57      	subs	r4, #87	; 0x57
 800c3aa:	e7db      	b.n	800c364 <_strtol_l.constprop.0+0x78>
 800c3ac:	f04f 3cff 	mov.w	ip, #4294967295
 800c3b0:	e7e6      	b.n	800c380 <_strtol_l.constprop.0+0x94>
 800c3b2:	f1bc 0f00 	cmp.w	ip, #0
 800c3b6:	da05      	bge.n	800c3c4 <_strtol_l.constprop.0+0xd8>
 800c3b8:	2322      	movs	r3, #34	; 0x22
 800c3ba:	6003      	str	r3, [r0, #0]
 800c3bc:	4646      	mov	r6, r8
 800c3be:	b942      	cbnz	r2, 800c3d2 <_strtol_l.constprop.0+0xe6>
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	e79e      	b.n	800c302 <_strtol_l.constprop.0+0x16>
 800c3c4:	b107      	cbz	r7, 800c3c8 <_strtol_l.constprop.0+0xdc>
 800c3c6:	4276      	negs	r6, r6
 800c3c8:	2a00      	cmp	r2, #0
 800c3ca:	d0f9      	beq.n	800c3c0 <_strtol_l.constprop.0+0xd4>
 800c3cc:	f1bc 0f00 	cmp.w	ip, #0
 800c3d0:	d000      	beq.n	800c3d4 <_strtol_l.constprop.0+0xe8>
 800c3d2:	1e69      	subs	r1, r5, #1
 800c3d4:	6011      	str	r1, [r2, #0]
 800c3d6:	e7f3      	b.n	800c3c0 <_strtol_l.constprop.0+0xd4>
 800c3d8:	2430      	movs	r4, #48	; 0x30
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1b1      	bne.n	800c342 <_strtol_l.constprop.0+0x56>
 800c3de:	2308      	movs	r3, #8
 800c3e0:	e7af      	b.n	800c342 <_strtol_l.constprop.0+0x56>
 800c3e2:	2c30      	cmp	r4, #48	; 0x30
 800c3e4:	d0a5      	beq.n	800c332 <_strtol_l.constprop.0+0x46>
 800c3e6:	230a      	movs	r3, #10
 800c3e8:	e7ab      	b.n	800c342 <_strtol_l.constprop.0+0x56>
 800c3ea:	bf00      	nop
 800c3ec:	0800d449 	.word	0x0800d449

0800c3f0 <_strtol_r>:
 800c3f0:	f7ff bf7c 	b.w	800c2ec <_strtol_l.constprop.0>

0800c3f4 <strtol>:
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	460a      	mov	r2, r1
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	4802      	ldr	r0, [pc, #8]	; (800c404 <strtol+0x10>)
 800c3fc:	6800      	ldr	r0, [r0, #0]
 800c3fe:	f7ff bf75 	b.w	800c2ec <_strtol_l.constprop.0>
 800c402:	bf00      	nop
 800c404:	24000018 	.word	0x24000018

0800c408 <__malloc_lock>:
 800c408:	4801      	ldr	r0, [pc, #4]	; (800c410 <__malloc_lock+0x8>)
 800c40a:	f7ff bdfb 	b.w	800c004 <__retarget_lock_acquire_recursive>
 800c40e:	bf00      	nop
 800c410:	2400cbe0 	.word	0x2400cbe0

0800c414 <__malloc_unlock>:
 800c414:	4801      	ldr	r0, [pc, #4]	; (800c41c <__malloc_unlock+0x8>)
 800c416:	f7ff bdf6 	b.w	800c006 <__retarget_lock_release_recursive>
 800c41a:	bf00      	nop
 800c41c:	2400cbe0 	.word	0x2400cbe0

0800c420 <_free_r>:
 800c420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c422:	2900      	cmp	r1, #0
 800c424:	d044      	beq.n	800c4b0 <_free_r+0x90>
 800c426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c42a:	9001      	str	r0, [sp, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f1a1 0404 	sub.w	r4, r1, #4
 800c432:	bfb8      	it	lt
 800c434:	18e4      	addlt	r4, r4, r3
 800c436:	f7ff ffe7 	bl	800c408 <__malloc_lock>
 800c43a:	4a1e      	ldr	r2, [pc, #120]	; (800c4b4 <_free_r+0x94>)
 800c43c:	9801      	ldr	r0, [sp, #4]
 800c43e:	6813      	ldr	r3, [r2, #0]
 800c440:	b933      	cbnz	r3, 800c450 <_free_r+0x30>
 800c442:	6063      	str	r3, [r4, #4]
 800c444:	6014      	str	r4, [r2, #0]
 800c446:	b003      	add	sp, #12
 800c448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c44c:	f7ff bfe2 	b.w	800c414 <__malloc_unlock>
 800c450:	42a3      	cmp	r3, r4
 800c452:	d908      	bls.n	800c466 <_free_r+0x46>
 800c454:	6825      	ldr	r5, [r4, #0]
 800c456:	1961      	adds	r1, r4, r5
 800c458:	428b      	cmp	r3, r1
 800c45a:	bf01      	itttt	eq
 800c45c:	6819      	ldreq	r1, [r3, #0]
 800c45e:	685b      	ldreq	r3, [r3, #4]
 800c460:	1949      	addeq	r1, r1, r5
 800c462:	6021      	streq	r1, [r4, #0]
 800c464:	e7ed      	b.n	800c442 <_free_r+0x22>
 800c466:	461a      	mov	r2, r3
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	b10b      	cbz	r3, 800c470 <_free_r+0x50>
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	d9fa      	bls.n	800c466 <_free_r+0x46>
 800c470:	6811      	ldr	r1, [r2, #0]
 800c472:	1855      	adds	r5, r2, r1
 800c474:	42a5      	cmp	r5, r4
 800c476:	d10b      	bne.n	800c490 <_free_r+0x70>
 800c478:	6824      	ldr	r4, [r4, #0]
 800c47a:	4421      	add	r1, r4
 800c47c:	1854      	adds	r4, r2, r1
 800c47e:	42a3      	cmp	r3, r4
 800c480:	6011      	str	r1, [r2, #0]
 800c482:	d1e0      	bne.n	800c446 <_free_r+0x26>
 800c484:	681c      	ldr	r4, [r3, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	6053      	str	r3, [r2, #4]
 800c48a:	4421      	add	r1, r4
 800c48c:	6011      	str	r1, [r2, #0]
 800c48e:	e7da      	b.n	800c446 <_free_r+0x26>
 800c490:	d902      	bls.n	800c498 <_free_r+0x78>
 800c492:	230c      	movs	r3, #12
 800c494:	6003      	str	r3, [r0, #0]
 800c496:	e7d6      	b.n	800c446 <_free_r+0x26>
 800c498:	6825      	ldr	r5, [r4, #0]
 800c49a:	1961      	adds	r1, r4, r5
 800c49c:	428b      	cmp	r3, r1
 800c49e:	bf04      	itt	eq
 800c4a0:	6819      	ldreq	r1, [r3, #0]
 800c4a2:	685b      	ldreq	r3, [r3, #4]
 800c4a4:	6063      	str	r3, [r4, #4]
 800c4a6:	bf04      	itt	eq
 800c4a8:	1949      	addeq	r1, r1, r5
 800c4aa:	6021      	streq	r1, [r4, #0]
 800c4ac:	6054      	str	r4, [r2, #4]
 800c4ae:	e7ca      	b.n	800c446 <_free_r+0x26>
 800c4b0:	b003      	add	sp, #12
 800c4b2:	bd30      	pop	{r4, r5, pc}
 800c4b4:	2400cbe4 	.word	0x2400cbe4

0800c4b8 <__ssputs_r>:
 800c4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4bc:	688e      	ldr	r6, [r1, #8]
 800c4be:	429e      	cmp	r6, r3
 800c4c0:	4682      	mov	sl, r0
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	4690      	mov	r8, r2
 800c4c6:	461f      	mov	r7, r3
 800c4c8:	d838      	bhi.n	800c53c <__ssputs_r+0x84>
 800c4ca:	898a      	ldrh	r2, [r1, #12]
 800c4cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4d0:	d032      	beq.n	800c538 <__ssputs_r+0x80>
 800c4d2:	6825      	ldr	r5, [r4, #0]
 800c4d4:	6909      	ldr	r1, [r1, #16]
 800c4d6:	eba5 0901 	sub.w	r9, r5, r1
 800c4da:	6965      	ldr	r5, [r4, #20]
 800c4dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	444b      	add	r3, r9
 800c4e8:	106d      	asrs	r5, r5, #1
 800c4ea:	429d      	cmp	r5, r3
 800c4ec:	bf38      	it	cc
 800c4ee:	461d      	movcc	r5, r3
 800c4f0:	0553      	lsls	r3, r2, #21
 800c4f2:	d531      	bpl.n	800c558 <__ssputs_r+0xa0>
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f7ff fdbd 	bl	800c074 <_malloc_r>
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	b950      	cbnz	r0, 800c514 <__ssputs_r+0x5c>
 800c4fe:	230c      	movs	r3, #12
 800c500:	f8ca 3000 	str.w	r3, [sl]
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c50a:	81a3      	strh	r3, [r4, #12]
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
 800c510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c514:	6921      	ldr	r1, [r4, #16]
 800c516:	464a      	mov	r2, r9
 800c518:	f7ff fd76 	bl	800c008 <memcpy>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c526:	81a3      	strh	r3, [r4, #12]
 800c528:	6126      	str	r6, [r4, #16]
 800c52a:	6165      	str	r5, [r4, #20]
 800c52c:	444e      	add	r6, r9
 800c52e:	eba5 0509 	sub.w	r5, r5, r9
 800c532:	6026      	str	r6, [r4, #0]
 800c534:	60a5      	str	r5, [r4, #8]
 800c536:	463e      	mov	r6, r7
 800c538:	42be      	cmp	r6, r7
 800c53a:	d900      	bls.n	800c53e <__ssputs_r+0x86>
 800c53c:	463e      	mov	r6, r7
 800c53e:	6820      	ldr	r0, [r4, #0]
 800c540:	4632      	mov	r2, r6
 800c542:	4641      	mov	r1, r8
 800c544:	f000 feb2 	bl	800d2ac <memmove>
 800c548:	68a3      	ldr	r3, [r4, #8]
 800c54a:	1b9b      	subs	r3, r3, r6
 800c54c:	60a3      	str	r3, [r4, #8]
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	4433      	add	r3, r6
 800c552:	6023      	str	r3, [r4, #0]
 800c554:	2000      	movs	r0, #0
 800c556:	e7db      	b.n	800c510 <__ssputs_r+0x58>
 800c558:	462a      	mov	r2, r5
 800c55a:	f000 fec1 	bl	800d2e0 <_realloc_r>
 800c55e:	4606      	mov	r6, r0
 800c560:	2800      	cmp	r0, #0
 800c562:	d1e1      	bne.n	800c528 <__ssputs_r+0x70>
 800c564:	6921      	ldr	r1, [r4, #16]
 800c566:	4650      	mov	r0, sl
 800c568:	f7ff ff5a 	bl	800c420 <_free_r>
 800c56c:	e7c7      	b.n	800c4fe <__ssputs_r+0x46>
	...

0800c570 <_svfiprintf_r>:
 800c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	4698      	mov	r8, r3
 800c576:	898b      	ldrh	r3, [r1, #12]
 800c578:	061b      	lsls	r3, r3, #24
 800c57a:	b09d      	sub	sp, #116	; 0x74
 800c57c:	4607      	mov	r7, r0
 800c57e:	460d      	mov	r5, r1
 800c580:	4614      	mov	r4, r2
 800c582:	d50e      	bpl.n	800c5a2 <_svfiprintf_r+0x32>
 800c584:	690b      	ldr	r3, [r1, #16]
 800c586:	b963      	cbnz	r3, 800c5a2 <_svfiprintf_r+0x32>
 800c588:	2140      	movs	r1, #64	; 0x40
 800c58a:	f7ff fd73 	bl	800c074 <_malloc_r>
 800c58e:	6028      	str	r0, [r5, #0]
 800c590:	6128      	str	r0, [r5, #16]
 800c592:	b920      	cbnz	r0, 800c59e <_svfiprintf_r+0x2e>
 800c594:	230c      	movs	r3, #12
 800c596:	603b      	str	r3, [r7, #0]
 800c598:	f04f 30ff 	mov.w	r0, #4294967295
 800c59c:	e0d1      	b.n	800c742 <_svfiprintf_r+0x1d2>
 800c59e:	2340      	movs	r3, #64	; 0x40
 800c5a0:	616b      	str	r3, [r5, #20]
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a6:	2320      	movs	r3, #32
 800c5a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5b0:	2330      	movs	r3, #48	; 0x30
 800c5b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c75c <_svfiprintf_r+0x1ec>
 800c5b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5ba:	f04f 0901 	mov.w	r9, #1
 800c5be:	4623      	mov	r3, r4
 800c5c0:	469a      	mov	sl, r3
 800c5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5c6:	b10a      	cbz	r2, 800c5cc <_svfiprintf_r+0x5c>
 800c5c8:	2a25      	cmp	r2, #37	; 0x25
 800c5ca:	d1f9      	bne.n	800c5c0 <_svfiprintf_r+0x50>
 800c5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c5d0:	d00b      	beq.n	800c5ea <_svfiprintf_r+0x7a>
 800c5d2:	465b      	mov	r3, fp
 800c5d4:	4622      	mov	r2, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4638      	mov	r0, r7
 800c5da:	f7ff ff6d 	bl	800c4b8 <__ssputs_r>
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f000 80aa 	beq.w	800c738 <_svfiprintf_r+0x1c8>
 800c5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5e6:	445a      	add	r2, fp
 800c5e8:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f000 80a2 	beq.w	800c738 <_svfiprintf_r+0x1c8>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5fe:	f10a 0a01 	add.w	sl, sl, #1
 800c602:	9304      	str	r3, [sp, #16]
 800c604:	9307      	str	r3, [sp, #28]
 800c606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c60a:	931a      	str	r3, [sp, #104]	; 0x68
 800c60c:	4654      	mov	r4, sl
 800c60e:	2205      	movs	r2, #5
 800c610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c614:	4851      	ldr	r0, [pc, #324]	; (800c75c <_svfiprintf_r+0x1ec>)
 800c616:	f7f3 fe6b 	bl	80002f0 <memchr>
 800c61a:	9a04      	ldr	r2, [sp, #16]
 800c61c:	b9d8      	cbnz	r0, 800c656 <_svfiprintf_r+0xe6>
 800c61e:	06d0      	lsls	r0, r2, #27
 800c620:	bf44      	itt	mi
 800c622:	2320      	movmi	r3, #32
 800c624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c628:	0711      	lsls	r1, r2, #28
 800c62a:	bf44      	itt	mi
 800c62c:	232b      	movmi	r3, #43	; 0x2b
 800c62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c632:	f89a 3000 	ldrb.w	r3, [sl]
 800c636:	2b2a      	cmp	r3, #42	; 0x2a
 800c638:	d015      	beq.n	800c666 <_svfiprintf_r+0xf6>
 800c63a:	9a07      	ldr	r2, [sp, #28]
 800c63c:	4654      	mov	r4, sl
 800c63e:	2000      	movs	r0, #0
 800c640:	f04f 0c0a 	mov.w	ip, #10
 800c644:	4621      	mov	r1, r4
 800c646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c64a:	3b30      	subs	r3, #48	; 0x30
 800c64c:	2b09      	cmp	r3, #9
 800c64e:	d94e      	bls.n	800c6ee <_svfiprintf_r+0x17e>
 800c650:	b1b0      	cbz	r0, 800c680 <_svfiprintf_r+0x110>
 800c652:	9207      	str	r2, [sp, #28]
 800c654:	e014      	b.n	800c680 <_svfiprintf_r+0x110>
 800c656:	eba0 0308 	sub.w	r3, r0, r8
 800c65a:	fa09 f303 	lsl.w	r3, r9, r3
 800c65e:	4313      	orrs	r3, r2
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	46a2      	mov	sl, r4
 800c664:	e7d2      	b.n	800c60c <_svfiprintf_r+0x9c>
 800c666:	9b03      	ldr	r3, [sp, #12]
 800c668:	1d19      	adds	r1, r3, #4
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	9103      	str	r1, [sp, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bfbb      	ittet	lt
 800c672:	425b      	neglt	r3, r3
 800c674:	f042 0202 	orrlt.w	r2, r2, #2
 800c678:	9307      	strge	r3, [sp, #28]
 800c67a:	9307      	strlt	r3, [sp, #28]
 800c67c:	bfb8      	it	lt
 800c67e:	9204      	strlt	r2, [sp, #16]
 800c680:	7823      	ldrb	r3, [r4, #0]
 800c682:	2b2e      	cmp	r3, #46	; 0x2e
 800c684:	d10c      	bne.n	800c6a0 <_svfiprintf_r+0x130>
 800c686:	7863      	ldrb	r3, [r4, #1]
 800c688:	2b2a      	cmp	r3, #42	; 0x2a
 800c68a:	d135      	bne.n	800c6f8 <_svfiprintf_r+0x188>
 800c68c:	9b03      	ldr	r3, [sp, #12]
 800c68e:	1d1a      	adds	r2, r3, #4
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	9203      	str	r2, [sp, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	bfb8      	it	lt
 800c698:	f04f 33ff 	movlt.w	r3, #4294967295
 800c69c:	3402      	adds	r4, #2
 800c69e:	9305      	str	r3, [sp, #20]
 800c6a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c76c <_svfiprintf_r+0x1fc>
 800c6a4:	7821      	ldrb	r1, [r4, #0]
 800c6a6:	2203      	movs	r2, #3
 800c6a8:	4650      	mov	r0, sl
 800c6aa:	f7f3 fe21 	bl	80002f0 <memchr>
 800c6ae:	b140      	cbz	r0, 800c6c2 <_svfiprintf_r+0x152>
 800c6b0:	2340      	movs	r3, #64	; 0x40
 800c6b2:	eba0 000a 	sub.w	r0, r0, sl
 800c6b6:	fa03 f000 	lsl.w	r0, r3, r0
 800c6ba:	9b04      	ldr	r3, [sp, #16]
 800c6bc:	4303      	orrs	r3, r0
 800c6be:	3401      	adds	r4, #1
 800c6c0:	9304      	str	r3, [sp, #16]
 800c6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c6:	4826      	ldr	r0, [pc, #152]	; (800c760 <_svfiprintf_r+0x1f0>)
 800c6c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6cc:	2206      	movs	r2, #6
 800c6ce:	f7f3 fe0f 	bl	80002f0 <memchr>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d038      	beq.n	800c748 <_svfiprintf_r+0x1d8>
 800c6d6:	4b23      	ldr	r3, [pc, #140]	; (800c764 <_svfiprintf_r+0x1f4>)
 800c6d8:	bb1b      	cbnz	r3, 800c722 <_svfiprintf_r+0x1b2>
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	3307      	adds	r3, #7
 800c6de:	f023 0307 	bic.w	r3, r3, #7
 800c6e2:	3308      	adds	r3, #8
 800c6e4:	9303      	str	r3, [sp, #12]
 800c6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e8:	4433      	add	r3, r6
 800c6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ec:	e767      	b.n	800c5be <_svfiprintf_r+0x4e>
 800c6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	2001      	movs	r0, #1
 800c6f6:	e7a5      	b.n	800c644 <_svfiprintf_r+0xd4>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	3401      	adds	r4, #1
 800c6fc:	9305      	str	r3, [sp, #20]
 800c6fe:	4619      	mov	r1, r3
 800c700:	f04f 0c0a 	mov.w	ip, #10
 800c704:	4620      	mov	r0, r4
 800c706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c70a:	3a30      	subs	r2, #48	; 0x30
 800c70c:	2a09      	cmp	r2, #9
 800c70e:	d903      	bls.n	800c718 <_svfiprintf_r+0x1a8>
 800c710:	2b00      	cmp	r3, #0
 800c712:	d0c5      	beq.n	800c6a0 <_svfiprintf_r+0x130>
 800c714:	9105      	str	r1, [sp, #20]
 800c716:	e7c3      	b.n	800c6a0 <_svfiprintf_r+0x130>
 800c718:	fb0c 2101 	mla	r1, ip, r1, r2
 800c71c:	4604      	mov	r4, r0
 800c71e:	2301      	movs	r3, #1
 800c720:	e7f0      	b.n	800c704 <_svfiprintf_r+0x194>
 800c722:	ab03      	add	r3, sp, #12
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	462a      	mov	r2, r5
 800c728:	4b0f      	ldr	r3, [pc, #60]	; (800c768 <_svfiprintf_r+0x1f8>)
 800c72a:	a904      	add	r1, sp, #16
 800c72c:	4638      	mov	r0, r7
 800c72e:	f3af 8000 	nop.w
 800c732:	1c42      	adds	r2, r0, #1
 800c734:	4606      	mov	r6, r0
 800c736:	d1d6      	bne.n	800c6e6 <_svfiprintf_r+0x176>
 800c738:	89ab      	ldrh	r3, [r5, #12]
 800c73a:	065b      	lsls	r3, r3, #25
 800c73c:	f53f af2c 	bmi.w	800c598 <_svfiprintf_r+0x28>
 800c740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c742:	b01d      	add	sp, #116	; 0x74
 800c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c748:	ab03      	add	r3, sp, #12
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	462a      	mov	r2, r5
 800c74e:	4b06      	ldr	r3, [pc, #24]	; (800c768 <_svfiprintf_r+0x1f8>)
 800c750:	a904      	add	r1, sp, #16
 800c752:	4638      	mov	r0, r7
 800c754:	f000 fa4c 	bl	800cbf0 <_printf_i>
 800c758:	e7eb      	b.n	800c732 <_svfiprintf_r+0x1c2>
 800c75a:	bf00      	nop
 800c75c:	0800d549 	.word	0x0800d549
 800c760:	0800d553 	.word	0x0800d553
 800c764:	00000000 	.word	0x00000000
 800c768:	0800c4b9 	.word	0x0800c4b9
 800c76c:	0800d54f 	.word	0x0800d54f

0800c770 <_sungetc_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	1c4b      	adds	r3, r1, #1
 800c774:	4614      	mov	r4, r2
 800c776:	d103      	bne.n	800c780 <_sungetc_r+0x10>
 800c778:	f04f 35ff 	mov.w	r5, #4294967295
 800c77c:	4628      	mov	r0, r5
 800c77e:	bd38      	pop	{r3, r4, r5, pc}
 800c780:	8993      	ldrh	r3, [r2, #12]
 800c782:	f023 0320 	bic.w	r3, r3, #32
 800c786:	8193      	strh	r3, [r2, #12]
 800c788:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c78a:	6852      	ldr	r2, [r2, #4]
 800c78c:	b2cd      	uxtb	r5, r1
 800c78e:	b18b      	cbz	r3, 800c7b4 <_sungetc_r+0x44>
 800c790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c792:	4293      	cmp	r3, r2
 800c794:	dd08      	ble.n	800c7a8 <_sungetc_r+0x38>
 800c796:	6823      	ldr	r3, [r4, #0]
 800c798:	1e5a      	subs	r2, r3, #1
 800c79a:	6022      	str	r2, [r4, #0]
 800c79c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c7a0:	6863      	ldr	r3, [r4, #4]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	6063      	str	r3, [r4, #4]
 800c7a6:	e7e9      	b.n	800c77c <_sungetc_r+0xc>
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	f000 fd45 	bl	800d238 <__submore>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d0f1      	beq.n	800c796 <_sungetc_r+0x26>
 800c7b2:	e7e1      	b.n	800c778 <_sungetc_r+0x8>
 800c7b4:	6921      	ldr	r1, [r4, #16]
 800c7b6:	6823      	ldr	r3, [r4, #0]
 800c7b8:	b151      	cbz	r1, 800c7d0 <_sungetc_r+0x60>
 800c7ba:	4299      	cmp	r1, r3
 800c7bc:	d208      	bcs.n	800c7d0 <_sungetc_r+0x60>
 800c7be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c7c2:	42a9      	cmp	r1, r5
 800c7c4:	d104      	bne.n	800c7d0 <_sungetc_r+0x60>
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	3201      	adds	r2, #1
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	6062      	str	r2, [r4, #4]
 800c7ce:	e7d5      	b.n	800c77c <_sungetc_r+0xc>
 800c7d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c7d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7d8:	6363      	str	r3, [r4, #52]	; 0x34
 800c7da:	2303      	movs	r3, #3
 800c7dc:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7de:	4623      	mov	r3, r4
 800c7e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e7dc      	b.n	800c7a4 <_sungetc_r+0x34>

0800c7ea <__ssrefill_r>:
 800c7ea:	b510      	push	{r4, lr}
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c7f0:	b169      	cbz	r1, 800c80e <__ssrefill_r+0x24>
 800c7f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7f6:	4299      	cmp	r1, r3
 800c7f8:	d001      	beq.n	800c7fe <__ssrefill_r+0x14>
 800c7fa:	f7ff fe11 	bl	800c420 <_free_r>
 800c7fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c800:	6063      	str	r3, [r4, #4]
 800c802:	2000      	movs	r0, #0
 800c804:	6360      	str	r0, [r4, #52]	; 0x34
 800c806:	b113      	cbz	r3, 800c80e <__ssrefill_r+0x24>
 800c808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c80a:	6023      	str	r3, [r4, #0]
 800c80c:	bd10      	pop	{r4, pc}
 800c80e:	6923      	ldr	r3, [r4, #16]
 800c810:	6023      	str	r3, [r4, #0]
 800c812:	2300      	movs	r3, #0
 800c814:	6063      	str	r3, [r4, #4]
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f043 0320 	orr.w	r3, r3, #32
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	f04f 30ff 	mov.w	r0, #4294967295
 800c822:	e7f3      	b.n	800c80c <__ssrefill_r+0x22>

0800c824 <__ssvfiscanf_r>:
 800c824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c828:	460c      	mov	r4, r1
 800c82a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c82e:	2100      	movs	r1, #0
 800c830:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c834:	49a6      	ldr	r1, [pc, #664]	; (800cad0 <__ssvfiscanf_r+0x2ac>)
 800c836:	91a0      	str	r1, [sp, #640]	; 0x280
 800c838:	f10d 0804 	add.w	r8, sp, #4
 800c83c:	49a5      	ldr	r1, [pc, #660]	; (800cad4 <__ssvfiscanf_r+0x2b0>)
 800c83e:	4fa6      	ldr	r7, [pc, #664]	; (800cad8 <__ssvfiscanf_r+0x2b4>)
 800c840:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cadc <__ssvfiscanf_r+0x2b8>
 800c844:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c848:	4606      	mov	r6, r0
 800c84a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	7813      	ldrb	r3, [r2, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 815a 	beq.w	800cb0a <__ssvfiscanf_r+0x2e6>
 800c856:	5dd9      	ldrb	r1, [r3, r7]
 800c858:	f011 0108 	ands.w	r1, r1, #8
 800c85c:	f102 0501 	add.w	r5, r2, #1
 800c860:	d019      	beq.n	800c896 <__ssvfiscanf_r+0x72>
 800c862:	6863      	ldr	r3, [r4, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	dd0f      	ble.n	800c888 <__ssvfiscanf_r+0x64>
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	781a      	ldrb	r2, [r3, #0]
 800c86c:	5cba      	ldrb	r2, [r7, r2]
 800c86e:	0712      	lsls	r2, r2, #28
 800c870:	d401      	bmi.n	800c876 <__ssvfiscanf_r+0x52>
 800c872:	462a      	mov	r2, r5
 800c874:	e7eb      	b.n	800c84e <__ssvfiscanf_r+0x2a>
 800c876:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c878:	3201      	adds	r2, #1
 800c87a:	9245      	str	r2, [sp, #276]	; 0x114
 800c87c:	6862      	ldr	r2, [r4, #4]
 800c87e:	3301      	adds	r3, #1
 800c880:	3a01      	subs	r2, #1
 800c882:	6062      	str	r2, [r4, #4]
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	e7ec      	b.n	800c862 <__ssvfiscanf_r+0x3e>
 800c888:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c88a:	4621      	mov	r1, r4
 800c88c:	4630      	mov	r0, r6
 800c88e:	4798      	blx	r3
 800c890:	2800      	cmp	r0, #0
 800c892:	d0e9      	beq.n	800c868 <__ssvfiscanf_r+0x44>
 800c894:	e7ed      	b.n	800c872 <__ssvfiscanf_r+0x4e>
 800c896:	2b25      	cmp	r3, #37	; 0x25
 800c898:	d012      	beq.n	800c8c0 <__ssvfiscanf_r+0x9c>
 800c89a:	469a      	mov	sl, r3
 800c89c:	6863      	ldr	r3, [r4, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f340 8091 	ble.w	800c9c6 <__ssvfiscanf_r+0x1a2>
 800c8a4:	6822      	ldr	r2, [r4, #0]
 800c8a6:	7813      	ldrb	r3, [r2, #0]
 800c8a8:	4553      	cmp	r3, sl
 800c8aa:	f040 812e 	bne.w	800cb0a <__ssvfiscanf_r+0x2e6>
 800c8ae:	6863      	ldr	r3, [r4, #4]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	6063      	str	r3, [r4, #4]
 800c8b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c8b6:	3201      	adds	r2, #1
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	6022      	str	r2, [r4, #0]
 800c8bc:	9345      	str	r3, [sp, #276]	; 0x114
 800c8be:	e7d8      	b.n	800c872 <__ssvfiscanf_r+0x4e>
 800c8c0:	9141      	str	r1, [sp, #260]	; 0x104
 800c8c2:	9143      	str	r1, [sp, #268]	; 0x10c
 800c8c4:	7853      	ldrb	r3, [r2, #1]
 800c8c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c8:	bf02      	ittt	eq
 800c8ca:	2310      	moveq	r3, #16
 800c8cc:	1c95      	addeq	r5, r2, #2
 800c8ce:	9341      	streq	r3, [sp, #260]	; 0x104
 800c8d0:	220a      	movs	r2, #10
 800c8d2:	46aa      	mov	sl, r5
 800c8d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c8d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c8dc:	2b09      	cmp	r3, #9
 800c8de:	d91d      	bls.n	800c91c <__ssvfiscanf_r+0xf8>
 800c8e0:	487e      	ldr	r0, [pc, #504]	; (800cadc <__ssvfiscanf_r+0x2b8>)
 800c8e2:	2203      	movs	r2, #3
 800c8e4:	f7f3 fd04 	bl	80002f0 <memchr>
 800c8e8:	b140      	cbz	r0, 800c8fc <__ssvfiscanf_r+0xd8>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	eba0 0009 	sub.w	r0, r0, r9
 800c8f0:	fa03 f000 	lsl.w	r0, r3, r0
 800c8f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c8f6:	4318      	orrs	r0, r3
 800c8f8:	9041      	str	r0, [sp, #260]	; 0x104
 800c8fa:	4655      	mov	r5, sl
 800c8fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c900:	2b78      	cmp	r3, #120	; 0x78
 800c902:	d806      	bhi.n	800c912 <__ssvfiscanf_r+0xee>
 800c904:	2b57      	cmp	r3, #87	; 0x57
 800c906:	d810      	bhi.n	800c92a <__ssvfiscanf_r+0x106>
 800c908:	2b25      	cmp	r3, #37	; 0x25
 800c90a:	d0c6      	beq.n	800c89a <__ssvfiscanf_r+0x76>
 800c90c:	d856      	bhi.n	800c9bc <__ssvfiscanf_r+0x198>
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d064      	beq.n	800c9dc <__ssvfiscanf_r+0x1b8>
 800c912:	2303      	movs	r3, #3
 800c914:	9347      	str	r3, [sp, #284]	; 0x11c
 800c916:	230a      	movs	r3, #10
 800c918:	9342      	str	r3, [sp, #264]	; 0x108
 800c91a:	e071      	b.n	800ca00 <__ssvfiscanf_r+0x1dc>
 800c91c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c91e:	fb02 1103 	mla	r1, r2, r3, r1
 800c922:	3930      	subs	r1, #48	; 0x30
 800c924:	9143      	str	r1, [sp, #268]	; 0x10c
 800c926:	4655      	mov	r5, sl
 800c928:	e7d3      	b.n	800c8d2 <__ssvfiscanf_r+0xae>
 800c92a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c92e:	2a20      	cmp	r2, #32
 800c930:	d8ef      	bhi.n	800c912 <__ssvfiscanf_r+0xee>
 800c932:	a101      	add	r1, pc, #4	; (adr r1, 800c938 <__ssvfiscanf_r+0x114>)
 800c934:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c938:	0800c9eb 	.word	0x0800c9eb
 800c93c:	0800c913 	.word	0x0800c913
 800c940:	0800c913 	.word	0x0800c913
 800c944:	0800ca49 	.word	0x0800ca49
 800c948:	0800c913 	.word	0x0800c913
 800c94c:	0800c913 	.word	0x0800c913
 800c950:	0800c913 	.word	0x0800c913
 800c954:	0800c913 	.word	0x0800c913
 800c958:	0800c913 	.word	0x0800c913
 800c95c:	0800c913 	.word	0x0800c913
 800c960:	0800c913 	.word	0x0800c913
 800c964:	0800ca5f 	.word	0x0800ca5f
 800c968:	0800ca35 	.word	0x0800ca35
 800c96c:	0800c9c3 	.word	0x0800c9c3
 800c970:	0800c9c3 	.word	0x0800c9c3
 800c974:	0800c9c3 	.word	0x0800c9c3
 800c978:	0800c913 	.word	0x0800c913
 800c97c:	0800ca39 	.word	0x0800ca39
 800c980:	0800c913 	.word	0x0800c913
 800c984:	0800c913 	.word	0x0800c913
 800c988:	0800c913 	.word	0x0800c913
 800c98c:	0800c913 	.word	0x0800c913
 800c990:	0800ca6f 	.word	0x0800ca6f
 800c994:	0800ca41 	.word	0x0800ca41
 800c998:	0800c9e3 	.word	0x0800c9e3
 800c99c:	0800c913 	.word	0x0800c913
 800c9a0:	0800c913 	.word	0x0800c913
 800c9a4:	0800ca6b 	.word	0x0800ca6b
 800c9a8:	0800c913 	.word	0x0800c913
 800c9ac:	0800ca35 	.word	0x0800ca35
 800c9b0:	0800c913 	.word	0x0800c913
 800c9b4:	0800c913 	.word	0x0800c913
 800c9b8:	0800c9eb 	.word	0x0800c9eb
 800c9bc:	3b45      	subs	r3, #69	; 0x45
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d8a7      	bhi.n	800c912 <__ssvfiscanf_r+0xee>
 800c9c2:	2305      	movs	r3, #5
 800c9c4:	e01b      	b.n	800c9fe <__ssvfiscanf_r+0x1da>
 800c9c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	4798      	blx	r3
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	f43f af68 	beq.w	800c8a4 <__ssvfiscanf_r+0x80>
 800c9d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f040 808d 	bne.w	800caf6 <__ssvfiscanf_r+0x2d2>
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	e08f      	b.n	800cb02 <__ssvfiscanf_r+0x2de>
 800c9e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9e4:	f042 0220 	orr.w	r2, r2, #32
 800c9e8:	9241      	str	r2, [sp, #260]	; 0x104
 800c9ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9f0:	9241      	str	r2, [sp, #260]	; 0x104
 800c9f2:	2210      	movs	r2, #16
 800c9f4:	2b6f      	cmp	r3, #111	; 0x6f
 800c9f6:	9242      	str	r2, [sp, #264]	; 0x108
 800c9f8:	bf34      	ite	cc
 800c9fa:	2303      	movcc	r3, #3
 800c9fc:	2304      	movcs	r3, #4
 800c9fe:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca00:	6863      	ldr	r3, [r4, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	dd42      	ble.n	800ca8c <__ssvfiscanf_r+0x268>
 800ca06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca08:	0659      	lsls	r1, r3, #25
 800ca0a:	d404      	bmi.n	800ca16 <__ssvfiscanf_r+0x1f2>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	781a      	ldrb	r2, [r3, #0]
 800ca10:	5cba      	ldrb	r2, [r7, r2]
 800ca12:	0712      	lsls	r2, r2, #28
 800ca14:	d441      	bmi.n	800ca9a <__ssvfiscanf_r+0x276>
 800ca16:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	dc50      	bgt.n	800cabe <__ssvfiscanf_r+0x29a>
 800ca1c:	466b      	mov	r3, sp
 800ca1e:	4622      	mov	r2, r4
 800ca20:	a941      	add	r1, sp, #260	; 0x104
 800ca22:	4630      	mov	r0, r6
 800ca24:	f000 fa0a 	bl	800ce3c <_scanf_chars>
 800ca28:	2801      	cmp	r0, #1
 800ca2a:	d06e      	beq.n	800cb0a <__ssvfiscanf_r+0x2e6>
 800ca2c:	2802      	cmp	r0, #2
 800ca2e:	f47f af20 	bne.w	800c872 <__ssvfiscanf_r+0x4e>
 800ca32:	e7cf      	b.n	800c9d4 <__ssvfiscanf_r+0x1b0>
 800ca34:	220a      	movs	r2, #10
 800ca36:	e7dd      	b.n	800c9f4 <__ssvfiscanf_r+0x1d0>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	9342      	str	r3, [sp, #264]	; 0x108
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e7de      	b.n	800c9fe <__ssvfiscanf_r+0x1da>
 800ca40:	2308      	movs	r3, #8
 800ca42:	9342      	str	r3, [sp, #264]	; 0x108
 800ca44:	2304      	movs	r3, #4
 800ca46:	e7da      	b.n	800c9fe <__ssvfiscanf_r+0x1da>
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	f000 fb48 	bl	800d0e0 <__sccl>
 800ca50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca56:	9341      	str	r3, [sp, #260]	; 0x104
 800ca58:	4605      	mov	r5, r0
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e7cf      	b.n	800c9fe <__ssvfiscanf_r+0x1da>
 800ca5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca64:	9341      	str	r3, [sp, #260]	; 0x104
 800ca66:	2300      	movs	r3, #0
 800ca68:	e7c9      	b.n	800c9fe <__ssvfiscanf_r+0x1da>
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	e7c7      	b.n	800c9fe <__ssvfiscanf_r+0x1da>
 800ca6e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ca70:	06c3      	lsls	r3, r0, #27
 800ca72:	f53f aefe 	bmi.w	800c872 <__ssvfiscanf_r+0x4e>
 800ca76:	9b00      	ldr	r3, [sp, #0]
 800ca78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca7a:	1d19      	adds	r1, r3, #4
 800ca7c:	9100      	str	r1, [sp, #0]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f010 0f01 	tst.w	r0, #1
 800ca84:	bf14      	ite	ne
 800ca86:	801a      	strhne	r2, [r3, #0]
 800ca88:	601a      	streq	r2, [r3, #0]
 800ca8a:	e6f2      	b.n	800c872 <__ssvfiscanf_r+0x4e>
 800ca8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca8e:	4621      	mov	r1, r4
 800ca90:	4630      	mov	r0, r6
 800ca92:	4798      	blx	r3
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d0b6      	beq.n	800ca06 <__ssvfiscanf_r+0x1e2>
 800ca98:	e79c      	b.n	800c9d4 <__ssvfiscanf_r+0x1b0>
 800ca9a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca9c:	3201      	adds	r2, #1
 800ca9e:	9245      	str	r2, [sp, #276]	; 0x114
 800caa0:	6862      	ldr	r2, [r4, #4]
 800caa2:	3a01      	subs	r2, #1
 800caa4:	2a00      	cmp	r2, #0
 800caa6:	6062      	str	r2, [r4, #4]
 800caa8:	dd02      	ble.n	800cab0 <__ssvfiscanf_r+0x28c>
 800caaa:	3301      	adds	r3, #1
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	e7ad      	b.n	800ca0c <__ssvfiscanf_r+0x1e8>
 800cab0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cab2:	4621      	mov	r1, r4
 800cab4:	4630      	mov	r0, r6
 800cab6:	4798      	blx	r3
 800cab8:	2800      	cmp	r0, #0
 800caba:	d0a7      	beq.n	800ca0c <__ssvfiscanf_r+0x1e8>
 800cabc:	e78a      	b.n	800c9d4 <__ssvfiscanf_r+0x1b0>
 800cabe:	2b04      	cmp	r3, #4
 800cac0:	dc0e      	bgt.n	800cae0 <__ssvfiscanf_r+0x2bc>
 800cac2:	466b      	mov	r3, sp
 800cac4:	4622      	mov	r2, r4
 800cac6:	a941      	add	r1, sp, #260	; 0x104
 800cac8:	4630      	mov	r0, r6
 800caca:	f000 fa11 	bl	800cef0 <_scanf_i>
 800cace:	e7ab      	b.n	800ca28 <__ssvfiscanf_r+0x204>
 800cad0:	0800c771 	.word	0x0800c771
 800cad4:	0800c7eb 	.word	0x0800c7eb
 800cad8:	0800d449 	.word	0x0800d449
 800cadc:	0800d54f 	.word	0x0800d54f
 800cae0:	4b0b      	ldr	r3, [pc, #44]	; (800cb10 <__ssvfiscanf_r+0x2ec>)
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f43f aec5 	beq.w	800c872 <__ssvfiscanf_r+0x4e>
 800cae8:	466b      	mov	r3, sp
 800caea:	4622      	mov	r2, r4
 800caec:	a941      	add	r1, sp, #260	; 0x104
 800caee:	4630      	mov	r0, r6
 800caf0:	f3af 8000 	nop.w
 800caf4:	e798      	b.n	800ca28 <__ssvfiscanf_r+0x204>
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cafc:	bf18      	it	ne
 800cafe:	f04f 30ff 	movne.w	r0, #4294967295
 800cb02:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cb0c:	e7f9      	b.n	800cb02 <__ssvfiscanf_r+0x2de>
 800cb0e:	bf00      	nop
 800cb10:	00000000 	.word	0x00000000

0800cb14 <_printf_common>:
 800cb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb18:	4616      	mov	r6, r2
 800cb1a:	4699      	mov	r9, r3
 800cb1c:	688a      	ldr	r2, [r1, #8]
 800cb1e:	690b      	ldr	r3, [r1, #16]
 800cb20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb24:	4293      	cmp	r3, r2
 800cb26:	bfb8      	it	lt
 800cb28:	4613      	movlt	r3, r2
 800cb2a:	6033      	str	r3, [r6, #0]
 800cb2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb30:	4607      	mov	r7, r0
 800cb32:	460c      	mov	r4, r1
 800cb34:	b10a      	cbz	r2, 800cb3a <_printf_common+0x26>
 800cb36:	3301      	adds	r3, #1
 800cb38:	6033      	str	r3, [r6, #0]
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	0699      	lsls	r1, r3, #26
 800cb3e:	bf42      	ittt	mi
 800cb40:	6833      	ldrmi	r3, [r6, #0]
 800cb42:	3302      	addmi	r3, #2
 800cb44:	6033      	strmi	r3, [r6, #0]
 800cb46:	6825      	ldr	r5, [r4, #0]
 800cb48:	f015 0506 	ands.w	r5, r5, #6
 800cb4c:	d106      	bne.n	800cb5c <_printf_common+0x48>
 800cb4e:	f104 0a19 	add.w	sl, r4, #25
 800cb52:	68e3      	ldr	r3, [r4, #12]
 800cb54:	6832      	ldr	r2, [r6, #0]
 800cb56:	1a9b      	subs	r3, r3, r2
 800cb58:	42ab      	cmp	r3, r5
 800cb5a:	dc26      	bgt.n	800cbaa <_printf_common+0x96>
 800cb5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb60:	1e13      	subs	r3, r2, #0
 800cb62:	6822      	ldr	r2, [r4, #0]
 800cb64:	bf18      	it	ne
 800cb66:	2301      	movne	r3, #1
 800cb68:	0692      	lsls	r2, r2, #26
 800cb6a:	d42b      	bmi.n	800cbc4 <_printf_common+0xb0>
 800cb6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb70:	4649      	mov	r1, r9
 800cb72:	4638      	mov	r0, r7
 800cb74:	47c0      	blx	r8
 800cb76:	3001      	adds	r0, #1
 800cb78:	d01e      	beq.n	800cbb8 <_printf_common+0xa4>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	68e5      	ldr	r5, [r4, #12]
 800cb7e:	6832      	ldr	r2, [r6, #0]
 800cb80:	f003 0306 	and.w	r3, r3, #6
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	bf08      	it	eq
 800cb88:	1aad      	subeq	r5, r5, r2
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	6922      	ldr	r2, [r4, #16]
 800cb8e:	bf0c      	ite	eq
 800cb90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb94:	2500      	movne	r5, #0
 800cb96:	4293      	cmp	r3, r2
 800cb98:	bfc4      	itt	gt
 800cb9a:	1a9b      	subgt	r3, r3, r2
 800cb9c:	18ed      	addgt	r5, r5, r3
 800cb9e:	2600      	movs	r6, #0
 800cba0:	341a      	adds	r4, #26
 800cba2:	42b5      	cmp	r5, r6
 800cba4:	d11a      	bne.n	800cbdc <_printf_common+0xc8>
 800cba6:	2000      	movs	r0, #0
 800cba8:	e008      	b.n	800cbbc <_printf_common+0xa8>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	4652      	mov	r2, sl
 800cbae:	4649      	mov	r1, r9
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	47c0      	blx	r8
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	d103      	bne.n	800cbc0 <_printf_common+0xac>
 800cbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc0:	3501      	adds	r5, #1
 800cbc2:	e7c6      	b.n	800cb52 <_printf_common+0x3e>
 800cbc4:	18e1      	adds	r1, r4, r3
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	2030      	movs	r0, #48	; 0x30
 800cbca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbce:	4422      	add	r2, r4
 800cbd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbd8:	3302      	adds	r3, #2
 800cbda:	e7c7      	b.n	800cb6c <_printf_common+0x58>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	4622      	mov	r2, r4
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	47c0      	blx	r8
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	d0e6      	beq.n	800cbb8 <_printf_common+0xa4>
 800cbea:	3601      	adds	r6, #1
 800cbec:	e7d9      	b.n	800cba2 <_printf_common+0x8e>
	...

0800cbf0 <_printf_i>:
 800cbf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf4:	7e0f      	ldrb	r7, [r1, #24]
 800cbf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cbf8:	2f78      	cmp	r7, #120	; 0x78
 800cbfa:	4691      	mov	r9, r2
 800cbfc:	4680      	mov	r8, r0
 800cbfe:	460c      	mov	r4, r1
 800cc00:	469a      	mov	sl, r3
 800cc02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc06:	d807      	bhi.n	800cc18 <_printf_i+0x28>
 800cc08:	2f62      	cmp	r7, #98	; 0x62
 800cc0a:	d80a      	bhi.n	800cc22 <_printf_i+0x32>
 800cc0c:	2f00      	cmp	r7, #0
 800cc0e:	f000 80d8 	beq.w	800cdc2 <_printf_i+0x1d2>
 800cc12:	2f58      	cmp	r7, #88	; 0x58
 800cc14:	f000 80a3 	beq.w	800cd5e <_printf_i+0x16e>
 800cc18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc20:	e03a      	b.n	800cc98 <_printf_i+0xa8>
 800cc22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc26:	2b15      	cmp	r3, #21
 800cc28:	d8f6      	bhi.n	800cc18 <_printf_i+0x28>
 800cc2a:	a101      	add	r1, pc, #4	; (adr r1, 800cc30 <_printf_i+0x40>)
 800cc2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc30:	0800cc89 	.word	0x0800cc89
 800cc34:	0800cc9d 	.word	0x0800cc9d
 800cc38:	0800cc19 	.word	0x0800cc19
 800cc3c:	0800cc19 	.word	0x0800cc19
 800cc40:	0800cc19 	.word	0x0800cc19
 800cc44:	0800cc19 	.word	0x0800cc19
 800cc48:	0800cc9d 	.word	0x0800cc9d
 800cc4c:	0800cc19 	.word	0x0800cc19
 800cc50:	0800cc19 	.word	0x0800cc19
 800cc54:	0800cc19 	.word	0x0800cc19
 800cc58:	0800cc19 	.word	0x0800cc19
 800cc5c:	0800cda9 	.word	0x0800cda9
 800cc60:	0800cccd 	.word	0x0800cccd
 800cc64:	0800cd8b 	.word	0x0800cd8b
 800cc68:	0800cc19 	.word	0x0800cc19
 800cc6c:	0800cc19 	.word	0x0800cc19
 800cc70:	0800cdcb 	.word	0x0800cdcb
 800cc74:	0800cc19 	.word	0x0800cc19
 800cc78:	0800cccd 	.word	0x0800cccd
 800cc7c:	0800cc19 	.word	0x0800cc19
 800cc80:	0800cc19 	.word	0x0800cc19
 800cc84:	0800cd93 	.word	0x0800cd93
 800cc88:	682b      	ldr	r3, [r5, #0]
 800cc8a:	1d1a      	adds	r2, r3, #4
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	602a      	str	r2, [r5, #0]
 800cc90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e0a3      	b.n	800cde4 <_printf_i+0x1f4>
 800cc9c:	6820      	ldr	r0, [r4, #0]
 800cc9e:	6829      	ldr	r1, [r5, #0]
 800cca0:	0606      	lsls	r6, r0, #24
 800cca2:	f101 0304 	add.w	r3, r1, #4
 800cca6:	d50a      	bpl.n	800ccbe <_printf_i+0xce>
 800cca8:	680e      	ldr	r6, [r1, #0]
 800ccaa:	602b      	str	r3, [r5, #0]
 800ccac:	2e00      	cmp	r6, #0
 800ccae:	da03      	bge.n	800ccb8 <_printf_i+0xc8>
 800ccb0:	232d      	movs	r3, #45	; 0x2d
 800ccb2:	4276      	negs	r6, r6
 800ccb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccb8:	485e      	ldr	r0, [pc, #376]	; (800ce34 <_printf_i+0x244>)
 800ccba:	230a      	movs	r3, #10
 800ccbc:	e019      	b.n	800ccf2 <_printf_i+0x102>
 800ccbe:	680e      	ldr	r6, [r1, #0]
 800ccc0:	602b      	str	r3, [r5, #0]
 800ccc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ccc6:	bf18      	it	ne
 800ccc8:	b236      	sxthne	r6, r6
 800ccca:	e7ef      	b.n	800ccac <_printf_i+0xbc>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	6820      	ldr	r0, [r4, #0]
 800ccd0:	1d19      	adds	r1, r3, #4
 800ccd2:	6029      	str	r1, [r5, #0]
 800ccd4:	0601      	lsls	r1, r0, #24
 800ccd6:	d501      	bpl.n	800ccdc <_printf_i+0xec>
 800ccd8:	681e      	ldr	r6, [r3, #0]
 800ccda:	e002      	b.n	800cce2 <_printf_i+0xf2>
 800ccdc:	0646      	lsls	r6, r0, #25
 800ccde:	d5fb      	bpl.n	800ccd8 <_printf_i+0xe8>
 800cce0:	881e      	ldrh	r6, [r3, #0]
 800cce2:	4854      	ldr	r0, [pc, #336]	; (800ce34 <_printf_i+0x244>)
 800cce4:	2f6f      	cmp	r7, #111	; 0x6f
 800cce6:	bf0c      	ite	eq
 800cce8:	2308      	moveq	r3, #8
 800ccea:	230a      	movne	r3, #10
 800ccec:	2100      	movs	r1, #0
 800ccee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccf2:	6865      	ldr	r5, [r4, #4]
 800ccf4:	60a5      	str	r5, [r4, #8]
 800ccf6:	2d00      	cmp	r5, #0
 800ccf8:	bfa2      	ittt	ge
 800ccfa:	6821      	ldrge	r1, [r4, #0]
 800ccfc:	f021 0104 	bicge.w	r1, r1, #4
 800cd00:	6021      	strge	r1, [r4, #0]
 800cd02:	b90e      	cbnz	r6, 800cd08 <_printf_i+0x118>
 800cd04:	2d00      	cmp	r5, #0
 800cd06:	d04d      	beq.n	800cda4 <_printf_i+0x1b4>
 800cd08:	4615      	mov	r5, r2
 800cd0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd0e:	fb03 6711 	mls	r7, r3, r1, r6
 800cd12:	5dc7      	ldrb	r7, [r0, r7]
 800cd14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd18:	4637      	mov	r7, r6
 800cd1a:	42bb      	cmp	r3, r7
 800cd1c:	460e      	mov	r6, r1
 800cd1e:	d9f4      	bls.n	800cd0a <_printf_i+0x11a>
 800cd20:	2b08      	cmp	r3, #8
 800cd22:	d10b      	bne.n	800cd3c <_printf_i+0x14c>
 800cd24:	6823      	ldr	r3, [r4, #0]
 800cd26:	07de      	lsls	r6, r3, #31
 800cd28:	d508      	bpl.n	800cd3c <_printf_i+0x14c>
 800cd2a:	6923      	ldr	r3, [r4, #16]
 800cd2c:	6861      	ldr	r1, [r4, #4]
 800cd2e:	4299      	cmp	r1, r3
 800cd30:	bfde      	ittt	le
 800cd32:	2330      	movle	r3, #48	; 0x30
 800cd34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd3c:	1b52      	subs	r2, r2, r5
 800cd3e:	6122      	str	r2, [r4, #16]
 800cd40:	f8cd a000 	str.w	sl, [sp]
 800cd44:	464b      	mov	r3, r9
 800cd46:	aa03      	add	r2, sp, #12
 800cd48:	4621      	mov	r1, r4
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	f7ff fee2 	bl	800cb14 <_printf_common>
 800cd50:	3001      	adds	r0, #1
 800cd52:	d14c      	bne.n	800cdee <_printf_i+0x1fe>
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	b004      	add	sp, #16
 800cd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5e:	4835      	ldr	r0, [pc, #212]	; (800ce34 <_printf_i+0x244>)
 800cd60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cd64:	6829      	ldr	r1, [r5, #0]
 800cd66:	6823      	ldr	r3, [r4, #0]
 800cd68:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd6c:	6029      	str	r1, [r5, #0]
 800cd6e:	061d      	lsls	r5, r3, #24
 800cd70:	d514      	bpl.n	800cd9c <_printf_i+0x1ac>
 800cd72:	07df      	lsls	r7, r3, #31
 800cd74:	bf44      	itt	mi
 800cd76:	f043 0320 	orrmi.w	r3, r3, #32
 800cd7a:	6023      	strmi	r3, [r4, #0]
 800cd7c:	b91e      	cbnz	r6, 800cd86 <_printf_i+0x196>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	f023 0320 	bic.w	r3, r3, #32
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	2310      	movs	r3, #16
 800cd88:	e7b0      	b.n	800ccec <_printf_i+0xfc>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	f043 0320 	orr.w	r3, r3, #32
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	2378      	movs	r3, #120	; 0x78
 800cd94:	4828      	ldr	r0, [pc, #160]	; (800ce38 <_printf_i+0x248>)
 800cd96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd9a:	e7e3      	b.n	800cd64 <_printf_i+0x174>
 800cd9c:	0659      	lsls	r1, r3, #25
 800cd9e:	bf48      	it	mi
 800cda0:	b2b6      	uxthmi	r6, r6
 800cda2:	e7e6      	b.n	800cd72 <_printf_i+0x182>
 800cda4:	4615      	mov	r5, r2
 800cda6:	e7bb      	b.n	800cd20 <_printf_i+0x130>
 800cda8:	682b      	ldr	r3, [r5, #0]
 800cdaa:	6826      	ldr	r6, [r4, #0]
 800cdac:	6961      	ldr	r1, [r4, #20]
 800cdae:	1d18      	adds	r0, r3, #4
 800cdb0:	6028      	str	r0, [r5, #0]
 800cdb2:	0635      	lsls	r5, r6, #24
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	d501      	bpl.n	800cdbc <_printf_i+0x1cc>
 800cdb8:	6019      	str	r1, [r3, #0]
 800cdba:	e002      	b.n	800cdc2 <_printf_i+0x1d2>
 800cdbc:	0670      	lsls	r0, r6, #25
 800cdbe:	d5fb      	bpl.n	800cdb8 <_printf_i+0x1c8>
 800cdc0:	8019      	strh	r1, [r3, #0]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	6123      	str	r3, [r4, #16]
 800cdc6:	4615      	mov	r5, r2
 800cdc8:	e7ba      	b.n	800cd40 <_printf_i+0x150>
 800cdca:	682b      	ldr	r3, [r5, #0]
 800cdcc:	1d1a      	adds	r2, r3, #4
 800cdce:	602a      	str	r2, [r5, #0]
 800cdd0:	681d      	ldr	r5, [r3, #0]
 800cdd2:	6862      	ldr	r2, [r4, #4]
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f7f3 fa8a 	bl	80002f0 <memchr>
 800cddc:	b108      	cbz	r0, 800cde2 <_printf_i+0x1f2>
 800cdde:	1b40      	subs	r0, r0, r5
 800cde0:	6060      	str	r0, [r4, #4]
 800cde2:	6863      	ldr	r3, [r4, #4]
 800cde4:	6123      	str	r3, [r4, #16]
 800cde6:	2300      	movs	r3, #0
 800cde8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdec:	e7a8      	b.n	800cd40 <_printf_i+0x150>
 800cdee:	6923      	ldr	r3, [r4, #16]
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4649      	mov	r1, r9
 800cdf4:	4640      	mov	r0, r8
 800cdf6:	47d0      	blx	sl
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	d0ab      	beq.n	800cd54 <_printf_i+0x164>
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	079b      	lsls	r3, r3, #30
 800ce00:	d413      	bmi.n	800ce2a <_printf_i+0x23a>
 800ce02:	68e0      	ldr	r0, [r4, #12]
 800ce04:	9b03      	ldr	r3, [sp, #12]
 800ce06:	4298      	cmp	r0, r3
 800ce08:	bfb8      	it	lt
 800ce0a:	4618      	movlt	r0, r3
 800ce0c:	e7a4      	b.n	800cd58 <_printf_i+0x168>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	4632      	mov	r2, r6
 800ce12:	4649      	mov	r1, r9
 800ce14:	4640      	mov	r0, r8
 800ce16:	47d0      	blx	sl
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d09b      	beq.n	800cd54 <_printf_i+0x164>
 800ce1c:	3501      	adds	r5, #1
 800ce1e:	68e3      	ldr	r3, [r4, #12]
 800ce20:	9903      	ldr	r1, [sp, #12]
 800ce22:	1a5b      	subs	r3, r3, r1
 800ce24:	42ab      	cmp	r3, r5
 800ce26:	dcf2      	bgt.n	800ce0e <_printf_i+0x21e>
 800ce28:	e7eb      	b.n	800ce02 <_printf_i+0x212>
 800ce2a:	2500      	movs	r5, #0
 800ce2c:	f104 0619 	add.w	r6, r4, #25
 800ce30:	e7f5      	b.n	800ce1e <_printf_i+0x22e>
 800ce32:	bf00      	nop
 800ce34:	0800d55a 	.word	0x0800d55a
 800ce38:	0800d56b 	.word	0x0800d56b

0800ce3c <_scanf_chars>:
 800ce3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce40:	4615      	mov	r5, r2
 800ce42:	688a      	ldr	r2, [r1, #8]
 800ce44:	4680      	mov	r8, r0
 800ce46:	460c      	mov	r4, r1
 800ce48:	b932      	cbnz	r2, 800ce58 <_scanf_chars+0x1c>
 800ce4a:	698a      	ldr	r2, [r1, #24]
 800ce4c:	2a00      	cmp	r2, #0
 800ce4e:	bf0c      	ite	eq
 800ce50:	2201      	moveq	r2, #1
 800ce52:	f04f 32ff 	movne.w	r2, #4294967295
 800ce56:	608a      	str	r2, [r1, #8]
 800ce58:	6822      	ldr	r2, [r4, #0]
 800ce5a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ceec <_scanf_chars+0xb0>
 800ce5e:	06d1      	lsls	r1, r2, #27
 800ce60:	bf5f      	itttt	pl
 800ce62:	681a      	ldrpl	r2, [r3, #0]
 800ce64:	1d11      	addpl	r1, r2, #4
 800ce66:	6019      	strpl	r1, [r3, #0]
 800ce68:	6816      	ldrpl	r6, [r2, #0]
 800ce6a:	2700      	movs	r7, #0
 800ce6c:	69a0      	ldr	r0, [r4, #24]
 800ce6e:	b188      	cbz	r0, 800ce94 <_scanf_chars+0x58>
 800ce70:	2801      	cmp	r0, #1
 800ce72:	d107      	bne.n	800ce84 <_scanf_chars+0x48>
 800ce74:	682a      	ldr	r2, [r5, #0]
 800ce76:	7811      	ldrb	r1, [r2, #0]
 800ce78:	6962      	ldr	r2, [r4, #20]
 800ce7a:	5c52      	ldrb	r2, [r2, r1]
 800ce7c:	b952      	cbnz	r2, 800ce94 <_scanf_chars+0x58>
 800ce7e:	2f00      	cmp	r7, #0
 800ce80:	d031      	beq.n	800cee6 <_scanf_chars+0xaa>
 800ce82:	e022      	b.n	800ceca <_scanf_chars+0x8e>
 800ce84:	2802      	cmp	r0, #2
 800ce86:	d120      	bne.n	800ceca <_scanf_chars+0x8e>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ce90:	071b      	lsls	r3, r3, #28
 800ce92:	d41a      	bmi.n	800ceca <_scanf_chars+0x8e>
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	06da      	lsls	r2, r3, #27
 800ce98:	bf5e      	ittt	pl
 800ce9a:	682b      	ldrpl	r3, [r5, #0]
 800ce9c:	781b      	ldrbpl	r3, [r3, #0]
 800ce9e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cea2:	682a      	ldr	r2, [r5, #0]
 800cea4:	686b      	ldr	r3, [r5, #4]
 800cea6:	3201      	adds	r2, #1
 800cea8:	602a      	str	r2, [r5, #0]
 800ceaa:	68a2      	ldr	r2, [r4, #8]
 800ceac:	3b01      	subs	r3, #1
 800ceae:	3a01      	subs	r2, #1
 800ceb0:	606b      	str	r3, [r5, #4]
 800ceb2:	3701      	adds	r7, #1
 800ceb4:	60a2      	str	r2, [r4, #8]
 800ceb6:	b142      	cbz	r2, 800ceca <_scanf_chars+0x8e>
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	dcd7      	bgt.n	800ce6c <_scanf_chars+0x30>
 800cebc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cec0:	4629      	mov	r1, r5
 800cec2:	4640      	mov	r0, r8
 800cec4:	4798      	blx	r3
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d0d0      	beq.n	800ce6c <_scanf_chars+0x30>
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	f013 0310 	ands.w	r3, r3, #16
 800ced0:	d105      	bne.n	800cede <_scanf_chars+0xa2>
 800ced2:	68e2      	ldr	r2, [r4, #12]
 800ced4:	3201      	adds	r2, #1
 800ced6:	60e2      	str	r2, [r4, #12]
 800ced8:	69a2      	ldr	r2, [r4, #24]
 800ceda:	b102      	cbz	r2, 800cede <_scanf_chars+0xa2>
 800cedc:	7033      	strb	r3, [r6, #0]
 800cede:	6923      	ldr	r3, [r4, #16]
 800cee0:	443b      	add	r3, r7
 800cee2:	6123      	str	r3, [r4, #16]
 800cee4:	2000      	movs	r0, #0
 800cee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceea:	bf00      	nop
 800ceec:	0800d449 	.word	0x0800d449

0800cef0 <_scanf_i>:
 800cef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef4:	4698      	mov	r8, r3
 800cef6:	4b76      	ldr	r3, [pc, #472]	; (800d0d0 <_scanf_i+0x1e0>)
 800cef8:	460c      	mov	r4, r1
 800cefa:	4682      	mov	sl, r0
 800cefc:	4616      	mov	r6, r2
 800cefe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf02:	b087      	sub	sp, #28
 800cf04:	ab03      	add	r3, sp, #12
 800cf06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf0a:	4b72      	ldr	r3, [pc, #456]	; (800d0d4 <_scanf_i+0x1e4>)
 800cf0c:	69a1      	ldr	r1, [r4, #24]
 800cf0e:	4a72      	ldr	r2, [pc, #456]	; (800d0d8 <_scanf_i+0x1e8>)
 800cf10:	2903      	cmp	r1, #3
 800cf12:	bf18      	it	ne
 800cf14:	461a      	movne	r2, r3
 800cf16:	68a3      	ldr	r3, [r4, #8]
 800cf18:	9201      	str	r2, [sp, #4]
 800cf1a:	1e5a      	subs	r2, r3, #1
 800cf1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf20:	bf88      	it	hi
 800cf22:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf26:	4627      	mov	r7, r4
 800cf28:	bf82      	ittt	hi
 800cf2a:	eb03 0905 	addhi.w	r9, r3, r5
 800cf2e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf32:	60a3      	strhi	r3, [r4, #8]
 800cf34:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cf38:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cf3c:	bf98      	it	ls
 800cf3e:	f04f 0900 	movls.w	r9, #0
 800cf42:	6023      	str	r3, [r4, #0]
 800cf44:	463d      	mov	r5, r7
 800cf46:	f04f 0b00 	mov.w	fp, #0
 800cf4a:	6831      	ldr	r1, [r6, #0]
 800cf4c:	ab03      	add	r3, sp, #12
 800cf4e:	7809      	ldrb	r1, [r1, #0]
 800cf50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cf54:	2202      	movs	r2, #2
 800cf56:	f7f3 f9cb 	bl	80002f0 <memchr>
 800cf5a:	b328      	cbz	r0, 800cfa8 <_scanf_i+0xb8>
 800cf5c:	f1bb 0f01 	cmp.w	fp, #1
 800cf60:	d159      	bne.n	800d016 <_scanf_i+0x126>
 800cf62:	6862      	ldr	r2, [r4, #4]
 800cf64:	b92a      	cbnz	r2, 800cf72 <_scanf_i+0x82>
 800cf66:	6822      	ldr	r2, [r4, #0]
 800cf68:	2308      	movs	r3, #8
 800cf6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf6e:	6063      	str	r3, [r4, #4]
 800cf70:	6022      	str	r2, [r4, #0]
 800cf72:	6822      	ldr	r2, [r4, #0]
 800cf74:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cf78:	6022      	str	r2, [r4, #0]
 800cf7a:	68a2      	ldr	r2, [r4, #8]
 800cf7c:	1e51      	subs	r1, r2, #1
 800cf7e:	60a1      	str	r1, [r4, #8]
 800cf80:	b192      	cbz	r2, 800cfa8 <_scanf_i+0xb8>
 800cf82:	6832      	ldr	r2, [r6, #0]
 800cf84:	1c51      	adds	r1, r2, #1
 800cf86:	6031      	str	r1, [r6, #0]
 800cf88:	7812      	ldrb	r2, [r2, #0]
 800cf8a:	f805 2b01 	strb.w	r2, [r5], #1
 800cf8e:	6872      	ldr	r2, [r6, #4]
 800cf90:	3a01      	subs	r2, #1
 800cf92:	2a00      	cmp	r2, #0
 800cf94:	6072      	str	r2, [r6, #4]
 800cf96:	dc07      	bgt.n	800cfa8 <_scanf_i+0xb8>
 800cf98:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4650      	mov	r0, sl
 800cfa0:	4790      	blx	r2
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	f040 8085 	bne.w	800d0b2 <_scanf_i+0x1c2>
 800cfa8:	f10b 0b01 	add.w	fp, fp, #1
 800cfac:	f1bb 0f03 	cmp.w	fp, #3
 800cfb0:	d1cb      	bne.n	800cf4a <_scanf_i+0x5a>
 800cfb2:	6863      	ldr	r3, [r4, #4]
 800cfb4:	b90b      	cbnz	r3, 800cfba <_scanf_i+0xca>
 800cfb6:	230a      	movs	r3, #10
 800cfb8:	6063      	str	r3, [r4, #4]
 800cfba:	6863      	ldr	r3, [r4, #4]
 800cfbc:	4947      	ldr	r1, [pc, #284]	; (800d0dc <_scanf_i+0x1ec>)
 800cfbe:	6960      	ldr	r0, [r4, #20]
 800cfc0:	1ac9      	subs	r1, r1, r3
 800cfc2:	f000 f88d 	bl	800d0e0 <__sccl>
 800cfc6:	f04f 0b00 	mov.w	fp, #0
 800cfca:	68a3      	ldr	r3, [r4, #8]
 800cfcc:	6822      	ldr	r2, [r4, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d03d      	beq.n	800d04e <_scanf_i+0x15e>
 800cfd2:	6831      	ldr	r1, [r6, #0]
 800cfd4:	6960      	ldr	r0, [r4, #20]
 800cfd6:	f891 c000 	ldrb.w	ip, [r1]
 800cfda:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d035      	beq.n	800d04e <_scanf_i+0x15e>
 800cfe2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cfe6:	d124      	bne.n	800d032 <_scanf_i+0x142>
 800cfe8:	0510      	lsls	r0, r2, #20
 800cfea:	d522      	bpl.n	800d032 <_scanf_i+0x142>
 800cfec:	f10b 0b01 	add.w	fp, fp, #1
 800cff0:	f1b9 0f00 	cmp.w	r9, #0
 800cff4:	d003      	beq.n	800cffe <_scanf_i+0x10e>
 800cff6:	3301      	adds	r3, #1
 800cff8:	f109 39ff 	add.w	r9, r9, #4294967295
 800cffc:	60a3      	str	r3, [r4, #8]
 800cffe:	6873      	ldr	r3, [r6, #4]
 800d000:	3b01      	subs	r3, #1
 800d002:	2b00      	cmp	r3, #0
 800d004:	6073      	str	r3, [r6, #4]
 800d006:	dd1b      	ble.n	800d040 <_scanf_i+0x150>
 800d008:	6833      	ldr	r3, [r6, #0]
 800d00a:	3301      	adds	r3, #1
 800d00c:	6033      	str	r3, [r6, #0]
 800d00e:	68a3      	ldr	r3, [r4, #8]
 800d010:	3b01      	subs	r3, #1
 800d012:	60a3      	str	r3, [r4, #8]
 800d014:	e7d9      	b.n	800cfca <_scanf_i+0xda>
 800d016:	f1bb 0f02 	cmp.w	fp, #2
 800d01a:	d1ae      	bne.n	800cf7a <_scanf_i+0x8a>
 800d01c:	6822      	ldr	r2, [r4, #0]
 800d01e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d022:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d026:	d1bf      	bne.n	800cfa8 <_scanf_i+0xb8>
 800d028:	2310      	movs	r3, #16
 800d02a:	6063      	str	r3, [r4, #4]
 800d02c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d030:	e7a2      	b.n	800cf78 <_scanf_i+0x88>
 800d032:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d036:	6022      	str	r2, [r4, #0]
 800d038:	780b      	ldrb	r3, [r1, #0]
 800d03a:	f805 3b01 	strb.w	r3, [r5], #1
 800d03e:	e7de      	b.n	800cffe <_scanf_i+0x10e>
 800d040:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d044:	4631      	mov	r1, r6
 800d046:	4650      	mov	r0, sl
 800d048:	4798      	blx	r3
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0df      	beq.n	800d00e <_scanf_i+0x11e>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	05db      	lsls	r3, r3, #23
 800d052:	d50d      	bpl.n	800d070 <_scanf_i+0x180>
 800d054:	42bd      	cmp	r5, r7
 800d056:	d909      	bls.n	800d06c <_scanf_i+0x17c>
 800d058:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d05c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d060:	4632      	mov	r2, r6
 800d062:	4650      	mov	r0, sl
 800d064:	4798      	blx	r3
 800d066:	f105 39ff 	add.w	r9, r5, #4294967295
 800d06a:	464d      	mov	r5, r9
 800d06c:	42bd      	cmp	r5, r7
 800d06e:	d02d      	beq.n	800d0cc <_scanf_i+0x1dc>
 800d070:	6822      	ldr	r2, [r4, #0]
 800d072:	f012 0210 	ands.w	r2, r2, #16
 800d076:	d113      	bne.n	800d0a0 <_scanf_i+0x1b0>
 800d078:	702a      	strb	r2, [r5, #0]
 800d07a:	6863      	ldr	r3, [r4, #4]
 800d07c:	9e01      	ldr	r6, [sp, #4]
 800d07e:	4639      	mov	r1, r7
 800d080:	4650      	mov	r0, sl
 800d082:	47b0      	blx	r6
 800d084:	6821      	ldr	r1, [r4, #0]
 800d086:	f8d8 3000 	ldr.w	r3, [r8]
 800d08a:	f011 0f20 	tst.w	r1, #32
 800d08e:	d013      	beq.n	800d0b8 <_scanf_i+0x1c8>
 800d090:	1d1a      	adds	r2, r3, #4
 800d092:	f8c8 2000 	str.w	r2, [r8]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6018      	str	r0, [r3, #0]
 800d09a:	68e3      	ldr	r3, [r4, #12]
 800d09c:	3301      	adds	r3, #1
 800d09e:	60e3      	str	r3, [r4, #12]
 800d0a0:	1bed      	subs	r5, r5, r7
 800d0a2:	44ab      	add	fp, r5
 800d0a4:	6925      	ldr	r5, [r4, #16]
 800d0a6:	445d      	add	r5, fp
 800d0a8:	6125      	str	r5, [r4, #16]
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	b007      	add	sp, #28
 800d0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b2:	f04f 0b00 	mov.w	fp, #0
 800d0b6:	e7ca      	b.n	800d04e <_scanf_i+0x15e>
 800d0b8:	1d1a      	adds	r2, r3, #4
 800d0ba:	f8c8 2000 	str.w	r2, [r8]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f011 0f01 	tst.w	r1, #1
 800d0c4:	bf14      	ite	ne
 800d0c6:	8018      	strhne	r0, [r3, #0]
 800d0c8:	6018      	streq	r0, [r3, #0]
 800d0ca:	e7e6      	b.n	800d09a <_scanf_i+0x1aa>
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	e7ed      	b.n	800d0ac <_scanf_i+0x1bc>
 800d0d0:	0800d3a4 	.word	0x0800d3a4
 800d0d4:	0800d235 	.word	0x0800d235
 800d0d8:	0800c3f1 	.word	0x0800c3f1
 800d0dc:	0800d595 	.word	0x0800d595

0800d0e0 <__sccl>:
 800d0e0:	b570      	push	{r4, r5, r6, lr}
 800d0e2:	780b      	ldrb	r3, [r1, #0]
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	2b5e      	cmp	r3, #94	; 0x5e
 800d0e8:	bf0b      	itete	eq
 800d0ea:	784b      	ldrbeq	r3, [r1, #1]
 800d0ec:	1c48      	addne	r0, r1, #1
 800d0ee:	1c88      	addeq	r0, r1, #2
 800d0f0:	2200      	movne	r2, #0
 800d0f2:	bf08      	it	eq
 800d0f4:	2201      	moveq	r2, #1
 800d0f6:	1e61      	subs	r1, r4, #1
 800d0f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d0fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d100:	42a9      	cmp	r1, r5
 800d102:	d1fb      	bne.n	800d0fc <__sccl+0x1c>
 800d104:	b90b      	cbnz	r3, 800d10a <__sccl+0x2a>
 800d106:	3801      	subs	r0, #1
 800d108:	bd70      	pop	{r4, r5, r6, pc}
 800d10a:	f082 0201 	eor.w	r2, r2, #1
 800d10e:	54e2      	strb	r2, [r4, r3]
 800d110:	4605      	mov	r5, r0
 800d112:	4628      	mov	r0, r5
 800d114:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d118:	292d      	cmp	r1, #45	; 0x2d
 800d11a:	d006      	beq.n	800d12a <__sccl+0x4a>
 800d11c:	295d      	cmp	r1, #93	; 0x5d
 800d11e:	d0f3      	beq.n	800d108 <__sccl+0x28>
 800d120:	b909      	cbnz	r1, 800d126 <__sccl+0x46>
 800d122:	4628      	mov	r0, r5
 800d124:	e7f0      	b.n	800d108 <__sccl+0x28>
 800d126:	460b      	mov	r3, r1
 800d128:	e7f1      	b.n	800d10e <__sccl+0x2e>
 800d12a:	786e      	ldrb	r6, [r5, #1]
 800d12c:	2e5d      	cmp	r6, #93	; 0x5d
 800d12e:	d0fa      	beq.n	800d126 <__sccl+0x46>
 800d130:	42b3      	cmp	r3, r6
 800d132:	dcf8      	bgt.n	800d126 <__sccl+0x46>
 800d134:	3502      	adds	r5, #2
 800d136:	4619      	mov	r1, r3
 800d138:	3101      	adds	r1, #1
 800d13a:	428e      	cmp	r6, r1
 800d13c:	5462      	strb	r2, [r4, r1]
 800d13e:	dcfb      	bgt.n	800d138 <__sccl+0x58>
 800d140:	1af1      	subs	r1, r6, r3
 800d142:	3901      	subs	r1, #1
 800d144:	1c58      	adds	r0, r3, #1
 800d146:	42b3      	cmp	r3, r6
 800d148:	bfa8      	it	ge
 800d14a:	2100      	movge	r1, #0
 800d14c:	1843      	adds	r3, r0, r1
 800d14e:	e7e0      	b.n	800d112 <__sccl+0x32>

0800d150 <_strtoul_l.constprop.0>:
 800d150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d154:	4f36      	ldr	r7, [pc, #216]	; (800d230 <_strtoul_l.constprop.0+0xe0>)
 800d156:	4686      	mov	lr, r0
 800d158:	460d      	mov	r5, r1
 800d15a:	4628      	mov	r0, r5
 800d15c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d160:	5de6      	ldrb	r6, [r4, r7]
 800d162:	f016 0608 	ands.w	r6, r6, #8
 800d166:	d1f8      	bne.n	800d15a <_strtoul_l.constprop.0+0xa>
 800d168:	2c2d      	cmp	r4, #45	; 0x2d
 800d16a:	d12f      	bne.n	800d1cc <_strtoul_l.constprop.0+0x7c>
 800d16c:	782c      	ldrb	r4, [r5, #0]
 800d16e:	2601      	movs	r6, #1
 800d170:	1c85      	adds	r5, r0, #2
 800d172:	2b00      	cmp	r3, #0
 800d174:	d057      	beq.n	800d226 <_strtoul_l.constprop.0+0xd6>
 800d176:	2b10      	cmp	r3, #16
 800d178:	d109      	bne.n	800d18e <_strtoul_l.constprop.0+0x3e>
 800d17a:	2c30      	cmp	r4, #48	; 0x30
 800d17c:	d107      	bne.n	800d18e <_strtoul_l.constprop.0+0x3e>
 800d17e:	7828      	ldrb	r0, [r5, #0]
 800d180:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d184:	2858      	cmp	r0, #88	; 0x58
 800d186:	d149      	bne.n	800d21c <_strtoul_l.constprop.0+0xcc>
 800d188:	786c      	ldrb	r4, [r5, #1]
 800d18a:	2310      	movs	r3, #16
 800d18c:	3502      	adds	r5, #2
 800d18e:	f04f 38ff 	mov.w	r8, #4294967295
 800d192:	2700      	movs	r7, #0
 800d194:	fbb8 f8f3 	udiv	r8, r8, r3
 800d198:	fb03 f908 	mul.w	r9, r3, r8
 800d19c:	ea6f 0909 	mvn.w	r9, r9
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d1a6:	f1bc 0f09 	cmp.w	ip, #9
 800d1aa:	d814      	bhi.n	800d1d6 <_strtoul_l.constprop.0+0x86>
 800d1ac:	4664      	mov	r4, ip
 800d1ae:	42a3      	cmp	r3, r4
 800d1b0:	dd22      	ble.n	800d1f8 <_strtoul_l.constprop.0+0xa8>
 800d1b2:	2f00      	cmp	r7, #0
 800d1b4:	db1d      	blt.n	800d1f2 <_strtoul_l.constprop.0+0xa2>
 800d1b6:	4580      	cmp	r8, r0
 800d1b8:	d31b      	bcc.n	800d1f2 <_strtoul_l.constprop.0+0xa2>
 800d1ba:	d101      	bne.n	800d1c0 <_strtoul_l.constprop.0+0x70>
 800d1bc:	45a1      	cmp	r9, r4
 800d1be:	db18      	blt.n	800d1f2 <_strtoul_l.constprop.0+0xa2>
 800d1c0:	fb00 4003 	mla	r0, r0, r3, r4
 800d1c4:	2701      	movs	r7, #1
 800d1c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1ca:	e7ea      	b.n	800d1a2 <_strtoul_l.constprop.0+0x52>
 800d1cc:	2c2b      	cmp	r4, #43	; 0x2b
 800d1ce:	bf04      	itt	eq
 800d1d0:	782c      	ldrbeq	r4, [r5, #0]
 800d1d2:	1c85      	addeq	r5, r0, #2
 800d1d4:	e7cd      	b.n	800d172 <_strtoul_l.constprop.0+0x22>
 800d1d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d1da:	f1bc 0f19 	cmp.w	ip, #25
 800d1de:	d801      	bhi.n	800d1e4 <_strtoul_l.constprop.0+0x94>
 800d1e0:	3c37      	subs	r4, #55	; 0x37
 800d1e2:	e7e4      	b.n	800d1ae <_strtoul_l.constprop.0+0x5e>
 800d1e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d1e8:	f1bc 0f19 	cmp.w	ip, #25
 800d1ec:	d804      	bhi.n	800d1f8 <_strtoul_l.constprop.0+0xa8>
 800d1ee:	3c57      	subs	r4, #87	; 0x57
 800d1f0:	e7dd      	b.n	800d1ae <_strtoul_l.constprop.0+0x5e>
 800d1f2:	f04f 37ff 	mov.w	r7, #4294967295
 800d1f6:	e7e6      	b.n	800d1c6 <_strtoul_l.constprop.0+0x76>
 800d1f8:	2f00      	cmp	r7, #0
 800d1fa:	da07      	bge.n	800d20c <_strtoul_l.constprop.0+0xbc>
 800d1fc:	2322      	movs	r3, #34	; 0x22
 800d1fe:	f8ce 3000 	str.w	r3, [lr]
 800d202:	f04f 30ff 	mov.w	r0, #4294967295
 800d206:	b932      	cbnz	r2, 800d216 <_strtoul_l.constprop.0+0xc6>
 800d208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d20c:	b106      	cbz	r6, 800d210 <_strtoul_l.constprop.0+0xc0>
 800d20e:	4240      	negs	r0, r0
 800d210:	2a00      	cmp	r2, #0
 800d212:	d0f9      	beq.n	800d208 <_strtoul_l.constprop.0+0xb8>
 800d214:	b107      	cbz	r7, 800d218 <_strtoul_l.constprop.0+0xc8>
 800d216:	1e69      	subs	r1, r5, #1
 800d218:	6011      	str	r1, [r2, #0]
 800d21a:	e7f5      	b.n	800d208 <_strtoul_l.constprop.0+0xb8>
 800d21c:	2430      	movs	r4, #48	; 0x30
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1b5      	bne.n	800d18e <_strtoul_l.constprop.0+0x3e>
 800d222:	2308      	movs	r3, #8
 800d224:	e7b3      	b.n	800d18e <_strtoul_l.constprop.0+0x3e>
 800d226:	2c30      	cmp	r4, #48	; 0x30
 800d228:	d0a9      	beq.n	800d17e <_strtoul_l.constprop.0+0x2e>
 800d22a:	230a      	movs	r3, #10
 800d22c:	e7af      	b.n	800d18e <_strtoul_l.constprop.0+0x3e>
 800d22e:	bf00      	nop
 800d230:	0800d449 	.word	0x0800d449

0800d234 <_strtoul_r>:
 800d234:	f7ff bf8c 	b.w	800d150 <_strtoul_l.constprop.0>

0800d238 <__submore>:
 800d238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d23c:	460c      	mov	r4, r1
 800d23e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d244:	4299      	cmp	r1, r3
 800d246:	d11d      	bne.n	800d284 <__submore+0x4c>
 800d248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d24c:	f7fe ff12 	bl	800c074 <_malloc_r>
 800d250:	b918      	cbnz	r0, 800d25a <__submore+0x22>
 800d252:	f04f 30ff 	mov.w	r0, #4294967295
 800d256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d25e:	63a3      	str	r3, [r4, #56]	; 0x38
 800d260:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d264:	6360      	str	r0, [r4, #52]	; 0x34
 800d266:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d26a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d26e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d272:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d276:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d27a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d27e:	6020      	str	r0, [r4, #0]
 800d280:	2000      	movs	r0, #0
 800d282:	e7e8      	b.n	800d256 <__submore+0x1e>
 800d284:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d286:	0077      	lsls	r7, r6, #1
 800d288:	463a      	mov	r2, r7
 800d28a:	f000 f829 	bl	800d2e0 <_realloc_r>
 800d28e:	4605      	mov	r5, r0
 800d290:	2800      	cmp	r0, #0
 800d292:	d0de      	beq.n	800d252 <__submore+0x1a>
 800d294:	eb00 0806 	add.w	r8, r0, r6
 800d298:	4601      	mov	r1, r0
 800d29a:	4632      	mov	r2, r6
 800d29c:	4640      	mov	r0, r8
 800d29e:	f7fe feb3 	bl	800c008 <memcpy>
 800d2a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d2a6:	f8c4 8000 	str.w	r8, [r4]
 800d2aa:	e7e9      	b.n	800d280 <__submore+0x48>

0800d2ac <memmove>:
 800d2ac:	4288      	cmp	r0, r1
 800d2ae:	b510      	push	{r4, lr}
 800d2b0:	eb01 0402 	add.w	r4, r1, r2
 800d2b4:	d902      	bls.n	800d2bc <memmove+0x10>
 800d2b6:	4284      	cmp	r4, r0
 800d2b8:	4623      	mov	r3, r4
 800d2ba:	d807      	bhi.n	800d2cc <memmove+0x20>
 800d2bc:	1e43      	subs	r3, r0, #1
 800d2be:	42a1      	cmp	r1, r4
 800d2c0:	d008      	beq.n	800d2d4 <memmove+0x28>
 800d2c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2ca:	e7f8      	b.n	800d2be <memmove+0x12>
 800d2cc:	4402      	add	r2, r0
 800d2ce:	4601      	mov	r1, r0
 800d2d0:	428a      	cmp	r2, r1
 800d2d2:	d100      	bne.n	800d2d6 <memmove+0x2a>
 800d2d4:	bd10      	pop	{r4, pc}
 800d2d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2de:	e7f7      	b.n	800d2d0 <memmove+0x24>

0800d2e0 <_realloc_r>:
 800d2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e4:	4680      	mov	r8, r0
 800d2e6:	4614      	mov	r4, r2
 800d2e8:	460e      	mov	r6, r1
 800d2ea:	b921      	cbnz	r1, 800d2f6 <_realloc_r+0x16>
 800d2ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	f7fe bebf 	b.w	800c074 <_malloc_r>
 800d2f6:	b92a      	cbnz	r2, 800d304 <_realloc_r+0x24>
 800d2f8:	f7ff f892 	bl	800c420 <_free_r>
 800d2fc:	4625      	mov	r5, r4
 800d2fe:	4628      	mov	r0, r5
 800d300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d304:	f000 f81b 	bl	800d33e <_malloc_usable_size_r>
 800d308:	4284      	cmp	r4, r0
 800d30a:	4607      	mov	r7, r0
 800d30c:	d802      	bhi.n	800d314 <_realloc_r+0x34>
 800d30e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d312:	d812      	bhi.n	800d33a <_realloc_r+0x5a>
 800d314:	4621      	mov	r1, r4
 800d316:	4640      	mov	r0, r8
 800d318:	f7fe feac 	bl	800c074 <_malloc_r>
 800d31c:	4605      	mov	r5, r0
 800d31e:	2800      	cmp	r0, #0
 800d320:	d0ed      	beq.n	800d2fe <_realloc_r+0x1e>
 800d322:	42bc      	cmp	r4, r7
 800d324:	4622      	mov	r2, r4
 800d326:	4631      	mov	r1, r6
 800d328:	bf28      	it	cs
 800d32a:	463a      	movcs	r2, r7
 800d32c:	f7fe fe6c 	bl	800c008 <memcpy>
 800d330:	4631      	mov	r1, r6
 800d332:	4640      	mov	r0, r8
 800d334:	f7ff f874 	bl	800c420 <_free_r>
 800d338:	e7e1      	b.n	800d2fe <_realloc_r+0x1e>
 800d33a:	4635      	mov	r5, r6
 800d33c:	e7df      	b.n	800d2fe <_realloc_r+0x1e>

0800d33e <_malloc_usable_size_r>:
 800d33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d342:	1f18      	subs	r0, r3, #4
 800d344:	2b00      	cmp	r3, #0
 800d346:	bfbc      	itt	lt
 800d348:	580b      	ldrlt	r3, [r1, r0]
 800d34a:	18c0      	addlt	r0, r0, r3
 800d34c:	4770      	bx	lr
	...

0800d350 <_init>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	bf00      	nop
 800d354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d356:	bc08      	pop	{r3}
 800d358:	469e      	mov	lr, r3
 800d35a:	4770      	bx	lr

0800d35c <_fini>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	bf00      	nop
 800d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d362:	bc08      	pop	{r3}
 800d364:	469e      	mov	lr, r3
 800d366:	4770      	bx	lr

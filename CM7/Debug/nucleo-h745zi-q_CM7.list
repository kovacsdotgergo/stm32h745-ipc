
nucleo-h745zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800fb54  0800fb54  0001fb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010028  08010028  000480e4  2**0
                  CONTENTS
  4 .ARM          00000008  08010028  08010028  00020028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010030  08010030  000480e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010030  08010030  00020030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010034  08010034  00020034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  08010038  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400007c  080100b4  0003007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000dc  08010114  000300dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d170  2400013c  08010174  0003013c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400d2ac  08010174  0003d2ac  2**0
                  ALLOC
 13 .shared       000080e4  38000000  38000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .ARM.attributes 0000002e  00000000  00000000  000480e4  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003263f  00000000  00000000  00048112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005af4  00000000  00000000  0007a751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002248  00000000  00000000  00080248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002010  00000000  00000000  00082490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00041245  00000000  00000000  000844a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002d5a4  00000000  00000000  000c56e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0019bb05  00000000  00000000  000f2c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  0028e78e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009e80  00000000  00000000  0028e7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400013c 	.word	0x2400013c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fb3c 	.word	0x0800fb3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000140 	.word	0x24000140
 80002dc:	0800fb3c 	.word	0x0800fb3c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <generateInterruptIPC_messageBuffer>:
/* Defines the memory that will actually hold the streams within the stream buffer.*/
volatile uint8_t ucStorageBuffer_ctrl[2][ mbaCONTROL_MESSAGE_BUFFER_SIZE ] __attribute__((section(".shared"))); 
volatile uint8_t ucStorageBuffer[2][ mbaTASK_MESSAGE_BUFFER_SIZE ] __attribute__((section(".shared"))); 


void generateInterruptIPC_messageBuffer(void* updatedMessageBuffer){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  MessageBufferHandle_t xUpdatedBuffer = ( MessageBufferHandle_t ) updatedMessageBuffer;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	60fb      	str	r3, [r7, #12]
  
  if( xUpdatedBuffer != xControlMessageBuffer[CONTROL_SEND_IDX] )
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <generateInterruptIPC_messageBuffer+0x34>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d00a      	beq.n	80006c0 <generateInterruptIPC_messageBuffer+0x2c>
  {
    /* Use xControlMessageBuffer to pass the handle of the message buffer
    written to by core 1 to the interrupt handler about to be generated in
    core 2. */
    xMessageBufferSend( xControlMessageBuffer[CONTROL_SEND_IDX], &xUpdatedBuffer,
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <generateInterruptIPC_messageBuffer+0x34>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	f107 010c 	add.w	r1, r7, #12
 80006b2:	2300      	movs	r3, #0
 80006b4:	2204      	movs	r2, #4
 80006b6:	f00b f999 	bl	800b9ec <xStreamBufferSend>
                        sizeof( xUpdatedBuffer ), mbaDONT_BLOCK );
    
    /* This is where the interrupt would be generated. */
    generateIT_IPC(MB_SEND_EXTI_LINE);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 f84e 	bl	800075c <generateIT_IPC>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	38000000 	.word	0x38000000

080006cc <interruptHandlerIPC_messageBuffer>:

void interruptHandlerIPC_messageBuffer( void ) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
    MessageBufferHandle_t xUpdatedMessageBuffer;
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
    
    /* xControlMessageBuffer contains the handle of the message buffer that
    contains data. */
    if( xMessageBufferReceiveFromISR(
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <interruptHandlerIPC_messageBuffer+0x48>)
 80006d8:	6858      	ldr	r0, [r3, #4]
 80006da:	463b      	mov	r3, r7
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	2204      	movs	r2, #4
 80006e0:	f00b fafc 	bl	800bcdc <xStreamBufferReceiveFromISR>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d105      	bne.n	80006f6 <interruptHandlerIPC_messageBuffer+0x2a>
                xControlMessageBuffer[CONTROL_RECV_IDX], &xUpdatedMessageBuffer,
                sizeof( xUpdatedMessageBuffer ), &xHigherPriorityTaskWoken)
            == sizeof( xUpdatedMessageBuffer ) ) {
        /* API function notifying any task waiting for the messagebuffer*/
        xMessageBufferSendCompletedFromISR( xUpdatedMessageBuffer, &xHigherPriorityTaskWoken );
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	463a      	mov	r2, r7
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00b fb94 	bl	800be1e <xStreamBufferSendCompletedFromISR>
    }
    /* Scheduling with normal FreeRTOS semantics */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d007      	beq.n	800070c <interruptHandlerIPC_messageBuffer+0x40>
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <interruptHandlerIPC_messageBuffer+0x4c>)
 80006fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	f3bf 8f4f 	dsb	sy
 8000708:	f3bf 8f6f 	isb	sy
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	38000000 	.word	0x38000000
 8000718:	e000ed04 	.word	0xe000ed04

0800071c <ctrl_setDataSize>:
#include "stm32h7xx_hal.h"

static volatile uint32_t shDataSize __attribute__((section(".shared"))); 
static volatile measDirection shDirection __attribute__((section(".shared")));

void ctrl_setDataSize(uint32_t dataSize) {
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    shDataSize = dataSize;
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <ctrl_setDataSize+0x1c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	380080d0 	.word	0x380080d0

0800073c <ctrl_setDirection>:

uint32_t ctrl_getDataSize(void) {
    return shDataSize;
}

void ctrl_setDirection(measDirection direction) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
    shDirection = direction;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <ctrl_setDirection+0x1c>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	7013      	strb	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	380080d4 	.word	0x380080d4

0800075c <generateIT_IPC>:

measDirection ctrl_getDirection(void) {
    return shDirection;
}

void generateIT_IPC(uint32_t EXTI_Line) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
#ifdef CORE_CM4
    HAL_EXTI_D2_EventInputConfig(EXTI_Line, EXTI_MODE_IT, DISABLE);
    HAL_EXTI_D1_EventInputConfig(EXTI_Line, EXTI_MODE_IT, ENABLE);
    HAL_EXTI_GenerateSWInterrupt(EXTI_Line);
#elif defined CORE_CM7
    HAL_EXTI_D1_EventInputConfig(EXTI_Line, EXTI_MODE_IT, DISABLE);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f001 ff48 	bl	8002600 <HAL_EXTI_D1_EventInputConfig>
    HAL_EXTI_D2_EventInputConfig(EXTI_Line, EXTI_MODE_IT, ENABLE);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f001 ffb8 	bl	80026ec <HAL_EXTI_D2_EventInputConfig>
    HAL_EXTI_GenerateSWInterrupt(EXTI_Line);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f001 ff07 	bl	8002590 <HAL_EXTI_GenerateSWInterrupt>
#else
    #error Neither core is defined
#endif // CORE
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000790:	4b3d      	ldr	r3, [pc, #244]	; (8000888 <SystemInit+0xfc>)
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	4a3c      	ldr	r2, [pc, #240]	; (8000888 <SystemInit+0xfc>)
 8000798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800079c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80007a0:	4b39      	ldr	r3, [pc, #228]	; (8000888 <SystemInit+0xfc>)
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	4a38      	ldr	r2, [pc, #224]	; (8000888 <SystemInit+0xfc>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <SystemInit+0x100>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	2b06      	cmp	r3, #6
 80007b6:	d807      	bhi.n	80007c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <SystemInit+0x100>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f023 030f 	bic.w	r3, r3, #15
 80007c0:	4a32      	ldr	r2, [pc, #200]	; (800088c <SystemInit+0x100>)
 80007c2:	f043 0307 	orr.w	r3, r3, #7
 80007c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007c8:	4b31      	ldr	r3, [pc, #196]	; (8000890 <SystemInit+0x104>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a30      	ldr	r2, [pc, #192]	; (8000890 <SystemInit+0x104>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007d4:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <SystemInit+0x104>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <SystemInit+0x104>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	492c      	ldr	r1, [pc, #176]	; (8000890 <SystemInit+0x104>)
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <SystemInit+0x108>)
 80007e2:	4013      	ands	r3, r2
 80007e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <SystemInit+0x100>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d007      	beq.n	8000802 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <SystemInit+0x100>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f023 030f 	bic.w	r3, r3, #15
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <SystemInit+0x100>)
 80007fc:	f043 0307 	orr.w	r3, r3, #7
 8000800:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <SystemInit+0x104>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <SystemInit+0x104>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SystemInit+0x104>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <SystemInit+0x104>)
 8000816:	4a20      	ldr	r2, [pc, #128]	; (8000898 <SystemInit+0x10c>)
 8000818:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <SystemInit+0x104>)
 800081c:	4a1f      	ldr	r2, [pc, #124]	; (800089c <SystemInit+0x110>)
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <SystemInit+0x104>)
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <SystemInit+0x114>)
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <SystemInit+0x104>)
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <SystemInit+0x104>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <SystemInit+0x114>)
 8000830:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <SystemInit+0x104>)
 8000834:	2200      	movs	r2, #0
 8000836:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <SystemInit+0x104>)
 800083a:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <SystemInit+0x114>)
 800083c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <SystemInit+0x104>)
 8000840:	2200      	movs	r2, #0
 8000842:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <SystemInit+0x104>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a11      	ldr	r2, [pc, #68]	; (8000890 <SystemInit+0x104>)
 800084a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800084e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <SystemInit+0x104>)
 8000852:	2200      	movs	r2, #0
 8000854:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <SystemInit+0x118>)
 8000858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <SystemInit+0x118>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <SystemInit+0x11c>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <SystemInit+0x120>)
 8000868:	4013      	ands	r3, r2
 800086a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800086e:	d202      	bcs.n	8000876 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <SystemInit+0x124>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <SystemInit+0x128>)
 8000878:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800087c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00
 800088c:	52002000 	.word	0x52002000
 8000890:	58024400 	.word	0x58024400
 8000894:	eaf6ed7f 	.word	0xeaf6ed7f
 8000898:	02020200 	.word	0x02020200
 800089c:	01ff0000 	.word	0x01ff0000
 80008a0:	01010280 	.word	0x01010280
 80008a4:	580000c0 	.word	0x580000c0
 80008a8:	5c001000 	.word	0x5c001000
 80008ac:	ffff0000 	.word	0xffff0000
 80008b0:	51008108 	.word	0x51008108
 80008b4:	52004000 	.word	0x52004000

080008b8 <time_startTime>:
/* Shared variables for time measurement */
static volatile uint32_t shStartTime __attribute__((section(".shared"))); 
static volatile uint32_t shEndTime __attribute__((section(".shared")));
static volatile uint32_t shOffset __attribute__((section(".shared")));

void time_startTime(void) {
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
    shStartTime = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <time_startTime+0x1c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <time_startTime+0x20>)
 80008c6:	6013      	str	r3, [r2, #0]
    __COMPILER_BARRIER();
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	24000008 	.word	0x24000008
 80008d8:	380080d8 	.word	0x380080d8

080008dc <time_endTime>:

void time_endTime(void) {
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
    __COMPILER_BARRIER();
    shEndTime = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <time_endTime+0x1c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <time_endTime+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	24000008 	.word	0x24000008
 80008fc:	380080dc 	.word	0x380080dc

08000900 <time_measureOffset>:

uint32_t time_getSharedOffset() {
    return shOffset;
}

uint32_t time_measureOffset(void) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
    volatile uint32_t st = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <time_measureOffset+0x2c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	607b      	str	r3, [r7, #4]
    __COMPILER_BARRIER();
    volatile uint32_t end = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <time_measureOffset+0x2c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000918:	603b      	str	r3, [r7, #0]
    return end - st;
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	1ad3      	subs	r3, r2, r3
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	24000008 	.word	0x24000008

08000930 <time_getRuntime>:

uint32_t time_getRuntime(uint32_t localOffset) {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    return shEndTime - shStartTime - (localOffset + shOffset)/2; 
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <time_getRuntime+0x2c>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <time_getRuntime+0x30>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1ad2      	subs	r2, r2, r3
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <time_getRuntime+0x34>)
 8000944:	6819      	ldr	r1, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	440b      	add	r3, r1
 800094a:	085b      	lsrs	r3, r3, #1
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	380080dc 	.word	0x380080dc
 8000960:	380080d8 	.word	0x380080d8
 8000964:	380080e0 	.word	0x380080e0

08000968 <ErrorHandler>:
#ifndef ERROR_HANDLER_H
#define ERROR_HANDLER_H

static inline void ErrorHandler() {
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
    while(0) {}
 800096c:	bf00      	nop
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <HAL_GPIO_EXTI_Callback>:
#include <app.h>

TaskHandle_t core1TaskHandle;
SemaphoreHandle_t endMeasSemaphore = NULL;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	2b04      	cmp	r3, #4
 8000986:	d002      	beq.n	800098e <HAL_GPIO_EXTI_Callback+0x16>
 8000988:	2b10      	cmp	r3, #16
 800098a:	d003      	beq.n	8000994 <HAL_GPIO_EXTI_Callback+0x1c>
 800098c:	e008      	b.n	80009a0 <HAL_GPIO_EXTI_Callback+0x28>
  {
  case END_MEAS_GPIO_PIN:
    interruptHandlerIPC_endMeas();
 800098e:	f000 fdfb 	bl	8001588 <interruptHandlerIPC_endMeas>
    break;
 8000992:	e008      	b.n	80009a6 <HAL_GPIO_EXTI_Callback+0x2e>
  case MB2TO1_GPIO_PIN:
    interruptHandlerIPC_messageBuffer();
 8000994:	f7ff fe9a 	bl	80006cc <interruptHandlerIPC_messageBuffer>
    HAL_EXTI_D1_ClearFlag(MB2TO1_GPIO_PIN);
 8000998:	2010      	movs	r0, #16
 800099a:	f001 fe19 	bl	80025d0 <HAL_EXTI_D1_ClearFlag>
    break;
 800099e:	e002      	b.n	80009a6 <HAL_GPIO_EXTI_Callback+0x2e>
  default:
    ErrorHandler();
 80009a0:	f7ff ffe2 	bl	8000968 <ErrorHandler>
    break;
 80009a4:	bf00      	nop
  }
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <processUartControl>:
/** 
 * @brief Processes the UART control messages and returns when the
 *  measurement can be started
 * @param[inout] uartParams parameters of the measurement to be performed
*/
static void processUartControl(uart_measParams* uartParams) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b094      	sub	sp, #80	; 0x50
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    uart_LineBuffer lineBuffer;
    do {
      // Blocking wait for UART, processing by single characters
      uint8_t uartInput;
      HAL_StatusTypeDef receiveSuccess;
      receiveSuccess = HAL_UART_Receive(&huart3, &uartInput,
 80009b8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	2201      	movs	r2, #1
 80009c2:	4838      	ldr	r0, [pc, #224]	; (8000aa4 <processUartControl+0xf4>)
 80009c4:	f007 fa46 	bl	8007e54 <HAL_UART_Receive>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          sizeof(uartInput), HAL_MAX_DELAY);
      if (receiveSuccess != HAL_OK) {
 80009ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d005      	beq.n	80009e2 <processUartControl+0x32>
        // todo handle error in status
        assert(false);
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <processUartControl+0xf8>)
 80009d8:	4a34      	ldr	r2, [pc, #208]	; (8000aac <processUartControl+0xfc>)
 80009da:	2137      	movs	r1, #55	; 0x37
 80009dc:	4834      	ldr	r0, [pc, #208]	; (8000ab0 <processUartControl+0x100>)
 80009de:	f00d f973 	bl	800dcc8 <__assert_func>
      }
      
      bufferStatus = uart_addCharToBuffer(uartInput, &lineBuffer);
 80009e2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80009e6:	f107 0208 	add.w	r2, r7, #8
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 f967 	bl	8001cc0 <uart_addCharToBuffer>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
      if (bufferStatus == BUFFER_OVERFLOW) {
 80009f8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d108      	bne.n	8000a12 <processUartControl+0x62>
        // todo print overflow message
        HAL_UART_Transmit(&huart3, (unsigned char*)"Input buffer overflow", 22, HAL_MAX_DELAY);
 8000a00:	f04f 33ff 	mov.w	r3, #4294967295
 8000a04:	2216      	movs	r2, #22
 8000a06:	492b      	ldr	r1, [pc, #172]	; (8000ab4 <processUartControl+0x104>)
 8000a08:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <processUartControl+0xf4>)
 8000a0a:	f007 f995 	bl	8007d38 <HAL_UART_Transmit>
        lineBuffer.len = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	64bb      	str	r3, [r7, #72]	; 0x48
      }
    } while (bufferStatus != BUFFER_DONE);
 8000a12:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d1ce      	bne.n	80009b8 <processUartControl+0x8>

      uartControlStatus = uart_parseBuffer(&lineBuffer, uartParams);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fc29 	bl	8002278 <uart_parseBuffer>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
      switch (uartControlStatus)
 8000a2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d823      	bhi.n	8000a7c <processUartControl+0xcc>
 8000a34:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <processUartControl+0x8c>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a4d 	.word	0x08000a4d
 8000a40:	08000a5d 	.word	0x08000a5d
 8000a44:	08000a6d 	.word	0x08000a6d
 8000a48:	08000a89 	.word	0x08000a89
      {
      case PARSE_COMMAND_ERR:
        HAL_UART_Transmit(&huart3, (unsigned char*)"Command parsing error", 22, HAL_MAX_DELAY);
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	2216      	movs	r2, #22
 8000a52:	4919      	ldr	r1, [pc, #100]	; (8000ab8 <processUartControl+0x108>)
 8000a54:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <processUartControl+0xf4>)
 8000a56:	f007 f96f 	bl	8007d38 <HAL_UART_Transmit>
        break;
 8000a5a:	e016      	b.n	8000a8a <processUartControl+0xda>
      case PARSE_ARG_NUM_ERR:
        HAL_UART_Transmit(&huart3, (unsigned char*)"Argument number error while parsing", 36, HAL_MAX_DELAY);
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	2224      	movs	r2, #36	; 0x24
 8000a62:	4916      	ldr	r1, [pc, #88]	; (8000abc <processUartControl+0x10c>)
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <processUartControl+0xf4>)
 8000a66:	f007 f967 	bl	8007d38 <HAL_UART_Transmit>
        break;
 8000a6a:	e00e      	b.n	8000a8a <processUartControl+0xda>
      case PARSE_ARG_VAL_ERR:
        HAL_UART_Transmit(&huart3, (unsigned char*)"Argument value error while parsing", 35, HAL_MAX_DELAY);
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	2223      	movs	r2, #35	; 0x23
 8000a72:	4913      	ldr	r1, [pc, #76]	; (8000ac0 <processUartControl+0x110>)
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <processUartControl+0xf4>)
 8000a76:	f007 f95f 	bl	8007d38 <HAL_UART_Transmit>
        break;
 8000a7a:	e006      	b.n	8000a8a <processUartControl+0xda>
      case PARSE_OK:
        break;
      default:
        assert(false);
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <processUartControl+0xf8>)
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <processUartControl+0xfc>)
 8000a80:	2151      	movs	r1, #81	; 0x51
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <processUartControl+0x100>)
 8000a84:	f00d f920 	bl	800dcc8 <__assert_func>
        break;
 8000a88:	bf00      	nop
        break;
      }

  } while (!uartParams->startMeas);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7b1b      	ldrb	r3, [r3, #12]
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d18f      	bne.n	80009b8 <processUartControl+0x8>
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3750      	adds	r7, #80	; 0x50
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2400828c 	.word	0x2400828c
 8000aa8:	0800fb54 	.word	0x0800fb54
 8000aac:	0800fdb4 	.word	0x0800fdb4
 8000ab0:	0800fb5c 	.word	0x0800fb5c
 8000ab4:	0800fb70 	.word	0x0800fb70
 8000ab8:	0800fb88 	.word	0x0800fb88
 8000abc:	0800fba0 	.word	0x0800fba0
 8000ac0:	0800fbc4 	.word	0x0800fbc4

08000ac4 <prepareMeasParams>:

/**
 * @brief Shares the measurement params with the other measurement tasks
 *  and sets up the required parameters e.g. clk frequency
*/
static void prepareMeasParams(uart_measParams params) {
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	463c      	mov	r4, r7
 8000acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // set the shared variables
  ctrl_setDataSize(params.dataSize); /* Sharing the meas parameters */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fe22 	bl	800071c <ctrl_setDataSize>
  ctrl_setDirection((params.direction == SEND) ? M7_SEND : M7_RECIEVE);
 8000ad8:	7a3b      	ldrb	r3, [r7, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bf14      	ite	ne
 8000ade:	2301      	movne	r3, #1
 8000ae0:	2300      	moveq	r3, #0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fe29 	bl	800073c <ctrl_setDirection>
  // setup what is needed e.g. clk, memory buffer selection
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
	...

08000af4 <core1MeasurementTask>:

void core1MeasurementTask( void *pvParameters ){
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b093      	sub	sp, #76	; 0x4c
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  ( void ) pvParameters;

  uart_measParams uartParams = {
 8000afc:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <core1MeasurementTask+0xbc>)
 8000afe:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    .clk_div3 = 1,
    .startMeas = false,
  };

  uint8_t uartOutputBuffer[32];
  endMeasSemaphore = xSemaphoreCreateBinary(); // todo add init function
 8000b08:	2203      	movs	r2, #3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f00a f8c3 	bl	800ac98 <xQueueGenericCreate>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <core1MeasurementTask+0xc0>)
 8000b16:	6013      	str	r3, [r2, #0]
  
  for( ;; )
  {
    processUartControl(&uartParams);
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff47 	bl	80009b0 <processUartControl>

    prepareMeasParams(uartParams); // share with the other core
 8000b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b28:	f7ff ffcc 	bl	8000ac4 <prepareMeasParams>

    for(uint32_t i = 0; i < uartParams.numMeas; ++i){
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8000b30:	e039      	b.n	8000ba6 <core1MeasurementTask+0xb2>
      /* Signaling to the other core*/
      generateInterruptIPC_startMeas(); // todo signalPartner func
 8000b32:	f000 fd49 	bl	80015c8 <generateInterruptIPC_startMeas>
      /* Waiting for message or sending message */
      switch (uartParams.direction)
 8000b36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <core1MeasurementTask+0x50>
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d005      	beq.n	8000b4e <core1MeasurementTask+0x5a>
 8000b42:	e007      	b.n	8000b54 <core1MeasurementTask+0x60>
      {
      case M7_SEND: /* M7 sends the message */
        app_measureCore1Sending(uartParams.dataSize);
 8000b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f83a 	bl	8000bc0 <app_measureCore1Sending>
        break;
 8000b4c:	e005      	b.n	8000b5a <core1MeasurementTask+0x66>
      case M7_RECIEVE:
        app_measureCore1Recieving();
 8000b4e:	f000 f879 	bl	8000c44 <app_measureCore1Recieving>
        break;
 8000b52:	e002      	b.n	8000b5a <core1MeasurementTask+0x66>
      default:
        ErrorHandler();
 8000b54:	f7ff ff08 	bl	8000968 <ErrorHandler>
        break;
 8000b58:	bf00      	nop
      }
      /* Printing measurement result */
      uint32_t localOffset = time_measureOffset();
 8000b5a:	f7ff fed1 	bl	8000900 <time_measureOffset>
 8000b5e:	6438      	str	r0, [r7, #64]	; 0x40
      // Uncomment to observe the offset on the other core
      // uint32_t m4Offset = time_getSharedOffset();
      uint32_t runTime = time_getRuntime(localOffset);
 8000b60:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000b62:	f7ff fee5 	bl	8000930 <time_getRuntime>
 8000b66:	63f8      	str	r0, [r7, #60]	; 0x3c
      memset(uartOutputBuffer, 0, sizeof(uartOutputBuffer));
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00d fa0a 	bl	800df8a <memset>
      sprintf((char*)uartOutputBuffer, "%lu\r\n", runTime);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b7c:	490e      	ldr	r1, [pc, #56]	; (8000bb8 <core1MeasurementTask+0xc4>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f00d fe08 	bl	800e794 <siprintf>
      HAL_UART_Transmit(&huart3, uartOutputBuffer, strlen((char*)uartOutputBuffer), HAL_MAX_DELAY);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fba9 	bl	80002e0 <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	f107 010c 	add.w	r1, r7, #12
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	4808      	ldr	r0, [pc, #32]	; (8000bbc <core1MeasurementTask+0xc8>)
 8000b9c:	f007 f8cc 	bl	8007d38 <HAL_UART_Transmit>
    for(uint32_t i = 0; i < uartParams.numMeas; ++i){
 8000ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d3c1      	bcc.n	8000b32 <core1MeasurementTask+0x3e>
    processUartControl(&uartParams);
 8000bae:	e7b3      	b.n	8000b18 <core1MeasurementTask+0x24>
 8000bb0:	0800fbf0 	.word	0x0800fbf0
 8000bb4:	2400015c 	.word	0x2400015c
 8000bb8:	0800fbe8 	.word	0x0800fbe8
 8000bbc:	2400828c 	.word	0x2400828c

08000bc0 <app_measureCore1Sending>:
    }
  }
}

void app_measureCore1Sending(uint32_t dataSize){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Assembling the message*/
  static char sendBuffer[MAX_DATA_SIZE];
  static uint8_t nextValue = 0;
  for(uint32_t j = 0; j < dataSize; ++j){
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	e009      	b.n	8000be2 <app_measureCore1Sending+0x22>
    sendBuffer[j] = nextValue;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <app_measureCore1Sending+0x70>)
 8000bd0:	7819      	ldrb	r1, [r3, #0]
 8000bd2:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <app_measureCore1Sending+0x74>)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	460a      	mov	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
  for(uint32_t j = 0; j < dataSize; ++j){
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3f1      	bcc.n	8000bce <app_measureCore1Sending+0xe>
  }
  sprintf((char*)sendBuffer, "%lu", dataSize);
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	4912      	ldr	r1, [pc, #72]	; (8000c38 <app_measureCore1Sending+0x78>)
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <app_measureCore1Sending+0x74>)
 8000bf0:	f00d fdd0 	bl	800e794 <siprintf>
  vTaskDelay(1/portTICK_PERIOD_MS);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f00b fc4d 	bl	800c494 <vTaskDelay>
  /* Start of measurement and sending the data */
  time_startTime();
 8000bfa:	f7ff fe5d 	bl	80008b8 <time_startTime>
  xMessageBufferSend( xDataMessageBuffers[MB1TO2_IDX], 
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <app_measureCore1Sending+0x7c>)
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	2300      	movs	r3, #0
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	490b      	ldr	r1, [pc, #44]	; (8000c34 <app_measureCore1Sending+0x74>)
 8000c08:	f00a fef0 	bl	800b9ec <xStreamBufferSend>
                      ( void * ) sendBuffer,
                      dataSize,
                      mbaDONT_BLOCK );
  
  ++nextValue;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <app_measureCore1Sending+0x70>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <app_measureCore1Sending+0x70>)
 8000c16:	701a      	strb	r2, [r3, #0]
  /* Waiting for the signal from the other core */
  xSemaphoreTake(endMeasSemaphore, portMAX_DELAY);
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <app_measureCore1Sending+0x80>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	4618      	mov	r0, r3
 8000c22:	f00a fb9d 	bl	800b360 <xQueueSemaphoreTake>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000160 	.word	0x24000160
 8000c34:	24000164 	.word	0x24000164
 8000c38:	0800fc00 	.word	0x0800fc00
 8000c3c:	38000008 	.word	0x38000008
 8000c40:	2400015c 	.word	0x2400015c

08000c44 <app_measureCore1Recieving>:

void app_measureCore1Recieving(void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  static uint8_t nextValue = 0;
  uint32_t recievedBytes, sizeFromMessage;
  static uint8_t recieveBuffer[MAX_DATA_SIZE];

  recievedBytes = xMessageBufferReceive(xDataMessageBuffers[MB2TO1_IDX],
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <app_measureCore1Recieving+0x6c>)
 8000c4c:	6858      	ldr	r0, [r3, #4]
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	f643 72f8 	movw	r2, #16376	; 0x3ff8
 8000c56:	4917      	ldr	r1, [pc, #92]	; (8000cb4 <app_measureCore1Recieving+0x70>)
 8000c58:	f00a ffab 	bl	800bbb2 <xStreamBufferReceive>
 8000c5c:	6078      	str	r0, [r7, #4]
                                        recieveBuffer,
                                        sizeof(recieveBuffer),
                                        portMAX_DELAY);
  time_endTime();
 8000c5e:	f7ff fe3d 	bl	80008dc <time_endTime>

  /* Error checking, size and last element */
  sscanf((char*)recieveBuffer, "%lu", &sizeFromMessage);
 8000c62:	463b      	mov	r3, r7
 8000c64:	461a      	mov	r2, r3
 8000c66:	4914      	ldr	r1, [pc, #80]	; (8000cb8 <app_measureCore1Recieving+0x74>)
 8000c68:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <app_measureCore1Recieving+0x70>)
 8000c6a:	f00d fdb3 	bl	800e7d4 <siscanf>
  if(recievedBytes != sizeFromMessage ||
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d10a      	bne.n	8000c8c <app_measureCore1Recieving+0x48>
      (sizeFromMessage > 2 && recieveBuffer[recievedBytes - 1] != nextValue)){
 8000c76:	683b      	ldr	r3, [r7, #0]
  if(recievedBytes != sizeFromMessage ||
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d909      	bls.n	8000c90 <app_measureCore1Recieving+0x4c>
      (sizeFromMessage > 2 && recieveBuffer[recievedBytes - 1] != nextValue)){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <app_measureCore1Recieving+0x70>)
 8000c82:	5cd2      	ldrb	r2, [r2, r3]
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <app_measureCore1Recieving+0x78>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d001      	beq.n	8000c90 <app_measureCore1Recieving+0x4c>
    ErrorHandler();
 8000c8c:	f7ff fe6c 	bl	8000968 <ErrorHandler>
    }

  memset(recieveBuffer, 0x00, recievedBytes);
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <app_measureCore1Recieving+0x70>)
 8000c96:	f00d f978 	bl	800df8a <memset>
  ++nextValue;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <app_measureCore1Recieving+0x78>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <app_measureCore1Recieving+0x78>)
 8000ca4:	701a      	strb	r2, [r3, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	38000008 	.word	0x38000008
 8000cb4:	2400415c 	.word	0x2400415c
 8000cb8:	0800fc00 	.word	0x0800fc00
 8000cbc:	24008154 	.word	0x24008154

08000cc0 <app_createTasks>:
// end of measurement task ===============================================

void app_createTasks(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af02      	add	r7, sp, #8
  // creating the tasks for the M7 core
  const uint8_t mainAMP_TASK_PRIORITY = configMAX_PRIORITIES - 2;
 8000cc6:	2336      	movs	r3, #54	; 0x36
 8000cc8:	71fb      	strb	r3, [r7, #7]
  xTaskCreate(core1MeasurementTask, "AMPCore1", configMINIMAL_STACK_SIZE, \
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <app_createTasks+0x44>)
 8000cce:	9201      	str	r2, [sp, #4]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	490c      	ldr	r1, [pc, #48]	; (8000d08 <app_createTasks+0x48>)
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <app_createTasks+0x4c>)
 8000cda:	f00b fa7f 	bl	800c1dc <xTaskCreate>
      NULL, mainAMP_TASK_PRIORITY, &core1TaskHandle);
  configASSERT( core1TaskHandle );
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <app_createTasks+0x44>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10a      	bne.n	8000cfc <app_createTasks+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cea:	f383 8811 	msr	BASEPRI, r3
 8000cee:	f3bf 8f6f 	isb	sy
 8000cf2:	f3bf 8f4f 	dsb	sy
 8000cf6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000cf8:	bf00      	nop
 8000cfa:	e7fe      	b.n	8000cfa <app_createTasks+0x3a>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24000158 	.word	0x24000158
 8000d08:	0800fc04 	.word	0x0800fc04
 8000d0c:	08000af5 	.word	0x08000af5

08000d10 <createIPCMessageBuffers>:
#include "ipc_mb.h"

void createIPCMessageBuffers(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af02      	add	r7, sp, #8
    /* MBs used for m7->m4 communication */
    /* Create control message buffer */
    xControlMessageBuffer[MB1TO2_IDX] = xMessageBufferCreateStatic(
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <createIPCMessageBuffers+0xe4>)
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <createIPCMessageBuffers+0xe8>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2018      	movs	r0, #24
 8000d22:	f00a fdaf 	bl	800b884 <xStreamBufferGenericCreateStatic>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <createIPCMessageBuffers+0xec>)
 8000d2a:	6013      	str	r3, [r2, #0]
        mbaCONTROL_MESSAGE_BUFFER_SIZE, ucStorageBuffer_ctrl[MB1TO2_IDX], 
        &xStreamBufferStruct[MB1TO2_IDX*2]);  
    /* Create data message buffer */
    xDataMessageBuffers[MB1TO2_IDX] = xMessageBufferCreateStatic(
 8000d2c:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <createIPCMessageBuffers+0xf0>)
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <createIPCMessageBuffers+0xf4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	2100      	movs	r1, #0
 8000d36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d3a:	f00a fda3 	bl	800b884 <xStreamBufferGenericCreateStatic>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <createIPCMessageBuffers+0xf8>)
 8000d42:	6013      	str	r3, [r2, #0]
        mbaTASK_MESSAGE_BUFFER_SIZE, &ucStorageBuffer[MB1TO2_IDX][0],
        &xStreamBufferStruct[MB1TO2_IDX*2 + 1]);
    configASSERT( xDataMessageBuffers[MB1TO2_IDX] );
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <createIPCMessageBuffers+0xf8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d10a      	bne.n	8000d62 <createIPCMessageBuffers+0x52>
	__asm volatile
 8000d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d50:	f383 8811 	msr	BASEPRI, r3
 8000d54:	f3bf 8f6f 	isb	sy
 8000d58:	f3bf 8f4f 	dsb	sy
 8000d5c:	60fb      	str	r3, [r7, #12]
}
 8000d5e:	bf00      	nop
 8000d60:	e7fe      	b.n	8000d60 <createIPCMessageBuffers+0x50>
    configASSERT( xControlMessageBuffer[MB1TO2_IDX] );
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <createIPCMessageBuffers+0xec>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10a      	bne.n	8000d80 <createIPCMessageBuffers+0x70>
	__asm volatile
 8000d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6e:	f383 8811 	msr	BASEPRI, r3
 8000d72:	f3bf 8f6f 	isb	sy
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	60bb      	str	r3, [r7, #8]
}
 8000d7c:	bf00      	nop
 8000d7e:	e7fe      	b.n	8000d7e <createIPCMessageBuffers+0x6e>
    
    /* MBs used for m4->m7 communication */
    xControlMessageBuffer[MB2TO1_IDX] = xMessageBufferCreateStatic(
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <createIPCMessageBuffers+0xfc>)
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <createIPCMessageBuffers+0x100>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2018      	movs	r0, #24
 8000d8c:	f00a fd7a 	bl	800b884 <xStreamBufferGenericCreateStatic>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <createIPCMessageBuffers+0xec>)
 8000d94:	6053      	str	r3, [r2, #4]
        mbaCONTROL_MESSAGE_BUFFER_SIZE, ucStorageBuffer_ctrl[MB2TO1_IDX], 
        &xStreamBufferStruct[MB2TO1_IDX*2]);  
    /* Create data message buffer */
    xDataMessageBuffers[MB2TO1_IDX] = xMessageBufferCreateStatic(
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <createIPCMessageBuffers+0x104>)
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <createIPCMessageBuffers+0x108>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000da4:	f00a fd6e 	bl	800b884 <xStreamBufferGenericCreateStatic>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <createIPCMessageBuffers+0xf8>)
 8000dac:	6053      	str	r3, [r2, #4]
        mbaTASK_MESSAGE_BUFFER_SIZE, &ucStorageBuffer[MB2TO1_IDX][0],
        &xStreamBufferStruct[MB2TO1_IDX*2 + 1]);
    configASSERT( xDataMessageBuffers[MB2TO1_IDX] );
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <createIPCMessageBuffers+0xf8>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10a      	bne.n	8000dcc <createIPCMessageBuffers+0xbc>
	__asm volatile
 8000db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dba:	f383 8811 	msr	BASEPRI, r3
 8000dbe:	f3bf 8f6f 	isb	sy
 8000dc2:	f3bf 8f4f 	dsb	sy
 8000dc6:	607b      	str	r3, [r7, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	e7fe      	b.n	8000dca <createIPCMessageBuffers+0xba>
    configASSERT( xControlMessageBuffer[MB2TO1_IDX] );
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <createIPCMessageBuffers+0xec>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10a      	bne.n	8000dea <createIPCMessageBuffers+0xda>
	__asm volatile
 8000dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd8:	f383 8811 	msr	BASEPRI, r3
 8000ddc:	f3bf 8f6f 	isb	sy
 8000de0:	f3bf 8f4f 	dsb	sy
 8000de4:	603b      	str	r3, [r7, #0]
}
 8000de6:	bf00      	nop
 8000de8:	e7fe      	b.n	8000de8 <createIPCMessageBuffers+0xd8>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	38000010 	.word	0x38000010
 8000df8:	380000a0 	.word	0x380000a0
 8000dfc:	38000000 	.word	0x38000000
 8000e00:	38000034 	.word	0x38000034
 8000e04:	380000d0 	.word	0x380000d0
 8000e08:	38000008 	.word	0x38000008
 8000e0c:	38000058 	.word	0x38000058
 8000e10:	380000b8 	.word	0x380000b8
 8000e14:	3800007c 	.word	0x3800007c
 8000e18:	380040d0 	.word	0x380040d0

08000e1c <initIPC_MessageBuffers>:

void initIPC_MessageBuffers(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    /* AIEC Common configuration: make CPU1 and CPU2 SWI line0
    sensitive to rising edge : Configured only once */
    HAL_EXTI_EdgeConfig(MB1TO2_INT_EXTI_LINE, EXTI_RISING_EDGE);
 8000e20:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000e24:	2000      	movs	r0, #0
 8000e26:	f001 fb4b 	bl	80024c0 <HAL_EXTI_EdgeConfig>
    /* SW interrupt for message buffer */
    HAL_NVIC_SetPriority(MB2TO1_INT_EXTI_IRQ, 0xFU, 1U);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	210f      	movs	r1, #15
 8000e2e:	200a      	movs	r0, #10
 8000e30:	f001 fd8a 	bl	8002948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MB2TO1_INT_EXTI_IRQ);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f001 fda1 	bl	800297c <HAL_NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e46:	f3bf 8f4f 	dsb	sy
}
 8000e4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e4c:	f3bf 8f6f 	isb	sy
}
 8000e50:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8000e52:	4b7e      	ldr	r3, [pc, #504]	; (800104c <main+0x20c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5a:	f3bf 8f4f 	dsb	sy
}
 8000e5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e60:	f3bf 8f6f 	isb	sy
}
 8000e64:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e66:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e68:	4b78      	ldr	r3, [pc, #480]	; (800104c <main+0x20c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e70:	f3bf 8f4f 	dsb	sy
}
 8000e74:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e76:	4b75      	ldr	r3, [pc, #468]	; (800104c <main+0x20c>)
 8000e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e7c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	0b5b      	lsrs	r3, r3, #13
 8000e82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e86:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e90:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	015a      	lsls	r2, r3, #5
 8000e96:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e9a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ea0:	496a      	ldr	r1, [pc, #424]	; (800104c <main+0x20c>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	1e5a      	subs	r2, r3, #1
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1ef      	bne.n	8000e92 <main+0x52>
    } while(sets-- != 0U);
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1e5a      	subs	r2, r3, #1
 8000eb6:	60ba      	str	r2, [r7, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e5      	bne.n	8000e88 <main+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebc:	f3bf 8f4f 	dsb	sy
}
 8000ec0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ec2:	f3bf 8f6f 	isb	sy
}
 8000ec6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000ec8:	bf00      	nop
  SCB_InvalidateICache();
  SCB_InvalidateDCache();
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000eca:	f000 fb0b 	bl	80014e4 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ece:	4b5f      	ldr	r3, [pc, #380]	; (800104c <main+0x20c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d11b      	bne.n	8000f12 <main+0xd2>
  __ASM volatile ("dsb 0xF":::"memory");
 8000eda:	f3bf 8f4f 	dsb	sy
}
 8000ede:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ee0:	f3bf 8f6f 	isb	sy
}
 8000ee4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ee6:	4b59      	ldr	r3, [pc, #356]	; (800104c <main+0x20c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000eee:	f3bf 8f4f 	dsb	sy
}
 8000ef2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ef4:	f3bf 8f6f 	isb	sy
}
 8000ef8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000efa:	4b54      	ldr	r3, [pc, #336]	; (800104c <main+0x20c>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a53      	ldr	r2, [pc, #332]	; (800104c <main+0x20c>)
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
}
 8000f0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0c:	f3bf 8f6f 	isb	sy
}
 8000f10:	e000      	b.n	8000f14 <main+0xd4>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f12:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f14:	4b4d      	ldr	r3, [pc, #308]	; (800104c <main+0x20c>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d138      	bne.n	8000f92 <main+0x152>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f20:	4b4a      	ldr	r3, [pc, #296]	; (800104c <main+0x20c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f28:	f3bf 8f4f 	dsb	sy
}
 8000f2c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <main+0x20c>)
 8000f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f34:	61bb      	str	r3, [r7, #24]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	0b5b      	lsrs	r3, r3, #13
 8000f3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f3e:	617b      	str	r3, [r7, #20]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f48:	613b      	str	r3, [r7, #16]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	015a      	lsls	r2, r3, #5
 8000f4e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f52:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f58:	493c      	ldr	r1, [pc, #240]	; (800104c <main+0x20c>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1e5a      	subs	r2, r3, #1
 8000f64:	613a      	str	r2, [r7, #16]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1ef      	bne.n	8000f4a <main+0x10a>
    } while(sets-- != 0U);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	617a      	str	r2, [r7, #20]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e5      	bne.n	8000f40 <main+0x100>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f74:	f3bf 8f4f 	dsb	sy
}
 8000f78:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <main+0x20c>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a33      	ldr	r2, [pc, #204]	; (800104c <main+0x20c>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f86:	f3bf 8f4f 	dsb	sy
}
 8000f8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8c:	f3bf 8f6f 	isb	sy
}
 8000f90:	e000      	b.n	8000f94 <main+0x154>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f92:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f98:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000f9a:	bf00      	nop
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <main+0x210>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <main+0x172>
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	1e5a      	subs	r2, r3, #1
 8000fac:	61fa      	str	r2, [r7, #28]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	dcf4      	bgt.n	8000f9c <main+0x15c>
  if ( timeout < 0 )
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da01      	bge.n	8000fbc <main+0x17c>
  {
  Error_Handler();
 8000fb8:	f000 fad0 	bl	800155c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f001 f9e0 	bl	8002380 <HAL_Init>

  /* USER CODE BEGIN Init */
  ctrl_initInterrupts();
 8000fc0:	f000 fad1 	bl	8001566 <ctrl_initInterrupts>
  initIPC_MessageBuffers();
 8000fc4:	f7ff ff2a 	bl	8000e1c <initIPC_MessageBuffers>
  createIPCMessageBuffers();
 8000fc8:	f7ff fea2 	bl	8000d10 <createIPCMessageBuffers>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f844 	bl	8001058 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <main+0x210>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <main+0x210>)
 8000fd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <main+0x210>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f003 f8ba 	bl	8004168 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f003 f8d0 	bl	800419c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001000:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001002:	bf00      	nop
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <main+0x210>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d104      	bne.n	800101a <main+0x1da>
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	1e5a      	subs	r2, r3, #1
 8001014:	61fa      	str	r2, [r7, #28]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dcf4      	bgt.n	8001004 <main+0x1c4>
if ( timeout < 0 )
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	2b00      	cmp	r3, #0
 800101e:	da01      	bge.n	8001024 <main+0x1e4>
{
Error_Handler();
 8001020:	f000 fa9c 	bl	800155c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f9ba 	bl	800139c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001028:	f000 f93a 	bl	80012a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800102c:	f000 f984 	bl	8001338 <MX_USB_OTG_FS_PCD_Init>
  MX_ETH_Init();
 8001030:	f000 f898 	bl	8001164 <MX_ETH_Init>
  MX_TIM5_Init();
 8001034:	f000 f8e2 	bl	80011fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001038:	f008 ffe2 	bl	800a000 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <main+0x214>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  app_createTasks();
 8001042:	f7ff fe3d 	bl	8000cc0 <app_createTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001046:	f008 ffff 	bl	800a048 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104a:	e7fe      	b.n	800104a <main+0x20a>
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	58024400 	.word	0x58024400
 8001054:	2400882c 	.word	0x2400882c

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09c      	sub	sp, #112	; 0x70
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	224c      	movs	r2, #76	; 0x4c
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f00c ff8f 	bl	800df8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2220      	movs	r2, #32
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f00c ff89 	bl	800df8a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001078:	2004      	movs	r0, #4
 800107a:	f003 f9eb 	bl	8004454 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b35      	ldr	r3, [pc, #212]	; (8001158 <SystemClock_Config+0x100>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a34      	ldr	r2, [pc, #208]	; (8001158 <SystemClock_Config+0x100>)
 8001088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <SystemClock_Config+0x100>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	4b30      	ldr	r3, [pc, #192]	; (800115c <SystemClock_Config+0x104>)
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <SystemClock_Config+0x104>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <SystemClock_Config+0x104>)
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010b0:	bf00      	nop
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <SystemClock_Config+0x100>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010be:	d1f8      	bne.n	80010b2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <SystemClock_Config+0x108>)
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	f023 0303 	bic.w	r3, r3, #3
 80010c8:	4a25      	ldr	r2, [pc, #148]	; (8001160 <SystemClock_Config+0x108>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d0:	2301      	movs	r3, #1
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	2302      	movs	r3, #2
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80010e6:	2378      	movs	r3, #120	; 0x78
 80010e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80010ee:	2308      	movs	r3, #8
 80010f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010f6:	230c      	movs	r3, #12
 80010f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fa0e 	bl	8004528 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001112:	f000 fa23 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	233f      	movs	r3, #63	; 0x3f
 8001118:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2303      	movs	r3, #3
 800111c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV4;
 800111e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001122:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001128:	2340      	movs	r3, #64	; 0x40
 800112a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800112c:	2340      	movs	r3, #64	; 0x40
 800112e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001134:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2101      	movs	r1, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fe4c 	bl	8004ddc <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800114a:	f000 fa07 	bl	800155c <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3770      	adds	r7, #112	; 0x70
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58024800 	.word	0x58024800
 800115c:	58000400 	.word	0x58000400
 8001160:	58024400 	.word	0x58024400

08001164 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_ETH_Init+0x80>)
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <MX_ETH_Init+0x84>)
 800116c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_ETH_Init+0x88>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_ETH_Init+0x88>)
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_ETH_Init+0x88>)
 800117c:	22e1      	movs	r2, #225	; 0xe1
 800117e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_ETH_Init+0x88>)
 8001182:	2200      	movs	r2, #0
 8001184:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_ETH_Init+0x88>)
 8001188:	2200      	movs	r2, #0
 800118a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_ETH_Init+0x88>)
 800118e:	2200      	movs	r2, #0
 8001190:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_ETH_Init+0x80>)
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <MX_ETH_Init+0x88>)
 8001196:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_ETH_Init+0x80>)
 800119a:	2201      	movs	r2, #1
 800119c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_ETH_Init+0x80>)
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <MX_ETH_Init+0x8c>)
 80011a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_ETH_Init+0x80>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <MX_ETH_Init+0x90>)
 80011a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_ETH_Init+0x80>)
 80011ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011b2:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_ETH_Init+0x80>)
 80011b4:	f002 f9d0 	bl	8003558 <HAL_ETH_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80011be:	f000 f9cd 	bl	800155c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011c2:	2238      	movs	r2, #56	; 0x38
 80011c4:	2100      	movs	r1, #0
 80011c6:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_ETH_Init+0x94>)
 80011c8:	f00c fedf 	bl	800df8a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_ETH_Init+0x94>)
 80011ce:	2221      	movs	r2, #33	; 0x21
 80011d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_ETH_Init+0x94>)
 80011d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_ETH_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	24008190 	.word	0x24008190
 80011e8:	40028000 	.word	0x40028000
 80011ec:	24008830 	.word	0x24008830
 80011f0:	240000dc 	.word	0x240000dc
 80011f4:	2400007c 	.word	0x2400007c
 80011f8:	24008158 	.word	0x24008158

080011fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_TIM5_Init+0x9c>)
 800121c:	4a1f      	ldr	r2, [pc, #124]	; (800129c <MX_TIM5_Init+0xa0>)
 800121e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_TIM5_Init+0x9c>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_TIM5_Init+0x9c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_TIM5_Init+0x9c>)
 800122e:	f04f 32ff 	mov.w	r2, #4294967295
 8001232:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_TIM5_Init+0x9c>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_TIM5_Init+0x9c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001240:	4815      	ldr	r0, [pc, #84]	; (8001298 <MX_TIM5_Init+0x9c>)
 8001242:	f005 ffc5 	bl	80071d0 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800124c:	f000 f986 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_TIM5_Init+0x9c>)
 800125e:	f006 fa17 	bl	8007690 <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001268:	f000 f978 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_TIM5_Init+0x9c>)
 800127a:	f006 fc61 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001284:	f000 f96a 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start(&htim5);
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_TIM5_Init+0x9c>)
 800128a:	f005 fff9 	bl	8007280 <HAL_TIM_Base_Start>
  /* USER CODE END TIM5_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	24008240 	.word	0x24008240
 800129c:	40000c00 	.word	0x40000c00

080012a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <MX_USART3_UART_Init+0x94>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012e8:	4811      	ldr	r0, [pc, #68]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ea:	f006 fcd5 	bl	8007c98 <HAL_UART_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012f4:	f000 f932 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012fc:	f008 fa68 	bl	80097d0 <HAL_UARTEx_SetTxFifoThreshold>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001306:	f000 f929 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <MX_USART3_UART_Init+0x90>)
 800130e:	f008 fa9d 	bl	800984c <HAL_UARTEx_SetRxFifoThreshold>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001318:	f000 f920 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_USART3_UART_Init+0x90>)
 800131e:	f008 fa1c 	bl	800975a <HAL_UARTEx_EnableFifoMode>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001328:	f000 f918 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2400828c 	.word	0x2400828c
 8001334:	40004800 	.word	0x40004800

08001338 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800133e:	4a16      	ldr	r2, [pc, #88]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001340:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001344:	2209      	movs	r2, #9
 8001346:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134a:	2202      	movs	r2, #2
 800134c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001356:	2202      	movs	r2, #2
 8001358:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800136e:	2201      	movs	r2, #1
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001374:	2201      	movs	r2, #1
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001380:	f002 ff20 	bl	80041c4 <HAL_PCD_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800138a:	f000 f8e7 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	24008320 	.word	0x24008320
 8001398:	40080000 	.word	0x40080000

0800139c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b8:	4a47      	ldr	r2, [pc, #284]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80013d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e0:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f4:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <MX_GPIO_Init+0x13c>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <MX_GPIO_Init+0x13c>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001412:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <MX_GPIO_Init+0x13c>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_GPIO_Init+0x13c>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_GPIO_Init+0x13c>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	4a29      	ldr	r2, [pc, #164]	; (80014d8 <MX_GPIO_Init+0x13c>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MX_GPIO_Init+0x13c>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <MX_GPIO_Init+0x13c>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <MX_GPIO_Init+0x13c>)
 8001450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_GPIO_Init+0x13c>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_GPIO_Init+0x13c>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <MX_GPIO_Init+0x13c>)
 800146e:	f043 0310 	orr.w	r3, r3, #16
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_GPIO_Init+0x13c>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2101      	movs	r1, #1
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_GPIO_Init+0x140>)
 800148a:	f002 fe39 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2102      	movs	r1, #2
 8001492:	4813      	ldr	r0, [pc, #76]	; (80014e0 <MX_GPIO_Init+0x144>)
 8001494:	f002 fe34 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <MX_GPIO_Init+0x140>)
 80014b0:	f002 fc76 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_GPIO_Init+0x144>)
 80014cc:	f002 fc68 	bl	8003da0 <HAL_GPIO_Init>

}
 80014d0:	bf00      	nop
 80014d2:	3730      	adds	r7, #48	; 0x30
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58020400 	.word	0x58020400
 80014e0:	58021000 	.word	0x58021000

080014e4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014f6:	f001 fa4f 	bl	8002998 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014fe:	2300      	movs	r3, #0
 8001500:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8001502:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001506:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001508:	230f      	movs	r3, #15
 800150a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800150c:	2300      	movs	r3, #0
 800150e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001510:	2300      	movs	r3, #0
 8001512:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001514:	2303      	movs	r3, #3
 8001516:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800151c:	2301      	movs	r3, #1
 800151e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001528:	463b      	mov	r3, r7
 800152a:	4618      	mov	r0, r3
 800152c:	f001 fa6c 	bl	8002a08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001530:	2004      	movs	r0, #4
 8001532:	f001 fa49 	bl	80029c8 <HAL_MPU_Enable>

}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800154e:	d101      	bne.n	8001554 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001550:	f000 ff52 	bl	80023f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>

08001566 <ctrl_initInterrupts>:
#include "meas_control.h"

#include "FreeRTOS.h"
#include "stm32h7xx_hal.h"

void ctrl_initInterrupts(void) {
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
    /* SW interrupt for end of measurement */
    HAL_NVIC_SetPriority(END_MEAS_INT_EXTI_IRQ, 0xFU, 0U);
 800156a:	2200      	movs	r2, #0
 800156c:	210f      	movs	r1, #15
 800156e:	2008      	movs	r0, #8
 8001570:	f001 f9ea 	bl	8002948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(END_MEAS_INT_EXTI_IRQ);
 8001574:	2008      	movs	r0, #8
 8001576:	f001 fa01 	bl	800297c <HAL_NVIC_EnableIRQ>
    /* SW interrupt for start of measurement */
    HAL_EXTI_EdgeConfig(START_MEAS_INT_EXTI_LINE, EXTI_RISING_EDGE);
 800157a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800157e:	2003      	movs	r0, #3
 8001580:	f000 ff9e 	bl	80024c0 <HAL_EXTI_EdgeConfig>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <interruptHandlerIPC_endMeas>:

void interruptHandlerIPC_endMeas( void ){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
    /* Signaling to task with notification*/
    BaseType_t xHigherPriorityTaskWoken;
    xSemaphoreGiveFromISR( endMeasSemaphore, &xHigherPriorityTaskWoken );
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <interruptHandlerIPC_endMeas+0x38>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	1d3a      	adds	r2, r7, #4
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f009 fd75 	bl	800b086 <xQueueGiveFromISR>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <interruptHandlerIPC_endMeas+0x2a>
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <interruptHandlerIPC_endMeas+0x3c>)
 80015a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f3bf 8f4f 	dsb	sy
 80015ae:	f3bf 8f6f 	isb	sy

    HAL_EXTI_D1_ClearFlag(END_MEAS_INT_EXTI_LINE);
 80015b2:	2002      	movs	r0, #2
 80015b4:	f001 f80c 	bl	80025d0 <HAL_EXTI_D1_ClearFlag>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2400015c 	.word	0x2400015c
 80015c4:	e000ed04 	.word	0xe000ed04

080015c8 <generateInterruptIPC_startMeas>:

void generateInterruptIPC_startMeas(void){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
    generateIT_IPC(START_MEAS_INT_EXTI_LINE);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f7ff f8c5 	bl	800075c <generateIT_IPC>
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_MspInit+0x38>)
 80015e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_MspInit+0x38>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_MspInit+0x38>)
 80015f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	210f      	movs	r1, #15
 8001600:	f06f 0001 	mvn.w	r0, #1
 8001604:	f001 f9a0 	bl	8002948 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	58024400 	.word	0x58024400

08001614 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a59      	ldr	r2, [pc, #356]	; (8001798 <HAL_ETH_MspInit+0x184>)
 8001632:	4293      	cmp	r3, r2
 8001634:	f040 80ab 	bne.w	800178e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001638:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_ETH_MspInit+0x188>)
 800163a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800163e:	4a57      	ldr	r2, [pc, #348]	; (800179c <HAL_ETH_MspInit+0x188>)
 8001640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001644:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001648:	4b54      	ldr	r3, [pc, #336]	; (800179c <HAL_ETH_MspInit+0x188>)
 800164a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800164e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001656:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_ETH_MspInit+0x188>)
 8001658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800165c:	4a4f      	ldr	r2, [pc, #316]	; (800179c <HAL_ETH_MspInit+0x188>)
 800165e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001662:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001666:	4b4d      	ldr	r3, [pc, #308]	; (800179c <HAL_ETH_MspInit+0x188>)
 8001668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001674:	4b49      	ldr	r3, [pc, #292]	; (800179c <HAL_ETH_MspInit+0x188>)
 8001676:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800167a:	4a48      	ldr	r2, [pc, #288]	; (800179c <HAL_ETH_MspInit+0x188>)
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001684:	4b45      	ldr	r3, [pc, #276]	; (800179c <HAL_ETH_MspInit+0x188>)
 8001686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b42      	ldr	r3, [pc, #264]	; (800179c <HAL_ETH_MspInit+0x188>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001698:	4a40      	ldr	r2, [pc, #256]	; (800179c <HAL_ETH_MspInit+0x188>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b3a      	ldr	r3, [pc, #232]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b6:	4a39      	ldr	r2, [pc, #228]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c0:	4b36      	ldr	r3, [pc, #216]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d4:	4a31      	ldr	r2, [pc, #196]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f2:	4a2a      	ldr	r2, [pc, #168]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_ETH_MspInit+0x188>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800170a:	2332      	movs	r3, #50	; 0x32
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800171a:	230b      	movs	r3, #11
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <HAL_ETH_MspInit+0x18c>)
 8001726:	f002 fb3b 	bl	8003da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800172a:	2386      	movs	r3, #134	; 0x86
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800173a:	230b      	movs	r3, #11
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_ETH_MspInit+0x190>)
 8001746:	f002 fb2b 	bl	8003da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800174a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800175c:	230b      	movs	r3, #11
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	4810      	ldr	r0, [pc, #64]	; (80017a8 <HAL_ETH_MspInit+0x194>)
 8001768:	f002 fb1a 	bl	8003da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800176c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800177e:	230b      	movs	r3, #11
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <HAL_ETH_MspInit+0x198>)
 800178a:	f002 fb09 	bl	8003da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3738      	adds	r7, #56	; 0x38
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40028000 	.word	0x40028000
 800179c:	58024400 	.word	0x58024400
 80017a0:	58020800 	.word	0x58020800
 80017a4:	58020000 	.word	0x58020000
 80017a8:	58020400 	.word	0x58020400
 80017ac:	58021800 	.word	0x58021800

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_TIM_Base_MspInit+0x3c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10e      	bne.n	80017e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c8:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40000c00 	.word	0x40000c00
 80017f0:	58024400 	.word	0x58024400

080017f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0ba      	sub	sp, #232	; 0xe8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	22c0      	movs	r2, #192	; 0xc0
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f00c fbb8 	bl	800df8a <memset>
  if(huart->Instance==USART3)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <HAL_UART_MspInit+0xd8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d14e      	bne.n	80018c2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001824:	f04f 0202 	mov.w	r2, #2
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fe9c 	bl	8005578 <HAL_RCCEx_PeriphCLKConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001846:	f7ff fe89 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_UART_MspInit+0xdc>)
 800184c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001850:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_UART_MspInit+0xdc>)
 8001852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001856:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_UART_MspInit+0xdc>)
 800185c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_UART_MspInit+0xdc>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <HAL_UART_MspInit+0xdc>)
 8001870:	f043 0308 	orr.w	r3, r3, #8
 8001874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_UART_MspInit+0xdc>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001886:	f44f 7340 	mov.w	r3, #768	; 0x300
 800188a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018a0:	2307      	movs	r3, #7
 80018a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <HAL_UART_MspInit+0xe0>)
 80018ae:	f002 fa77 	bl	8003da0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2105      	movs	r1, #5
 80018b6:	2027      	movs	r0, #39	; 0x27
 80018b8:	f001 f846 	bl	8002948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018bc:	2027      	movs	r0, #39	; 0x27
 80018be:	f001 f85d 	bl	800297c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	37e8      	adds	r7, #232	; 0xe8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40004800 	.word	0x40004800
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58020c00 	.word	0x58020c00

080018d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0ba      	sub	sp, #232	; 0xe8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	22c0      	movs	r2, #192	; 0xc0
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f00c fb46 	bl	800df8a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <HAL_PCD_MspInit+0x10c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d169      	bne.n	80019dc <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001908:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001918:	2312      	movs	r3, #18
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800191c:	2302      	movs	r3, #2
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001920:	2303      	movs	r3, #3
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001924:	2302      	movs	r3, #2
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001928:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800192c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800192e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001932:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001934:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4618      	mov	r0, r3
 8001942:	f003 fe19 	bl	8005578 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 800194c:	f7ff fe06 	bl	800155c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001950:	f002 fdda 	bl	8004508 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_PCD_MspInit+0x110>)
 8001956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <HAL_PCD_MspInit+0x110>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_PCD_MspInit+0x110>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001972:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800198c:	230a      	movs	r3, #10
 800198e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001996:	4619      	mov	r1, r3
 8001998:	4814      	ldr	r0, [pc, #80]	; (80019ec <HAL_PCD_MspInit+0x114>)
 800199a:	f002 fa01 	bl	8003da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800199e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019b6:	4619      	mov	r1, r3
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <HAL_PCD_MspInit+0x114>)
 80019ba:	f002 f9f1 	bl	8003da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_PCD_MspInit+0x110>)
 80019c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c4:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_PCD_MspInit+0x110>)
 80019c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_PCD_MspInit+0x110>)
 80019d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	37e8      	adds	r7, #232	; 0xe8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40080000 	.word	0x40080000
 80019e8:	58024400 	.word	0x58024400
 80019ec:	58020000 	.word	0x58020000

080019f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b090      	sub	sp, #64	; 0x40
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	d827      	bhi.n	8001a4e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 80019fe:	2200      	movs	r2, #0
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	201c      	movs	r0, #28
 8001a04:	f000 ffa0 	bl	8002948 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a08:	201c      	movs	r0, #28
 8001a0a:	f000 ffb7 	bl	800297c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001a0e:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <HAL_InitTick+0xc4>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_InitTick+0xc8>)
 8001a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a1a:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <HAL_InitTick+0xc8>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_InitTick+0xc8>)
 8001a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a32:	f107 0210 	add.w	r2, r7, #16
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fd59 	bl	80054f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a44:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <HAL_InitTick+0x6a>
 8001a4c:	e001      	b.n	8001a52 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e02c      	b.n	8001aac <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a52:	f003 fd23 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8001a56:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001a58:	e004      	b.n	8001a64 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a5a:	f003 fd1f 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_InitTick+0xcc>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	0c9b      	lsrs	r3, r3, #18
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_InitTick+0xd0>)
 8001a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_InitTick+0xd0>)
 8001a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a80:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a82:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <HAL_InitTick+0xd0>)
 8001a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a86:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_InitTick+0xd0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_InitTick+0xd0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001a94:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <HAL_InitTick+0xd0>)
 8001a96:	f005 fb9b 	bl	80071d0 <HAL_TIM_Base_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d104      	bne.n	8001aaa <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001aa0:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <HAL_InitTick+0xd0>)
 8001aa2:	f005 fc5d 	bl	8007360 <HAL_TIM_Base_Start_IT>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3740      	adds	r7, #64	; 0x40
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2400000c 	.word	0x2400000c
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	24008838 	.word	0x24008838

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <NMI_Handler+0x4>

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <TIM2_IRQHandler+0x10>)
 8001af6:	f005 fcab 	bl	8007450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	24008838 	.word	0x24008838

08001b04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <USART3_IRQHandler+0x10>)
 8001b0a:	f006 fa6b 	bl	8007fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2400828c 	.word	0x2400828c

08001b18 <EXTI2_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI2_IRQHandler(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(END_MEAS_GPIO_PIN);
 8001b1c:	2004      	movs	r0, #4
 8001b1e:	f002 fb08 	bl	8004132 <HAL_GPIO_EXTI_IRQHandler>
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(MB2TO1_GPIO_PIN);
 8001b2a:	2010      	movs	r0, #16
 8001b2c:	f002 fb01 	bl	8004132 <HAL_GPIO_EXTI_IRQHandler>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b4e:	f00c f8d9 	bl	800dd04 <__errno>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2216      	movs	r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
  return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_exit>:

void _exit (int status)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffe7 	bl	8001b44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b76:	e7fe      	b.n	8001b76 <_exit+0x12>

08001b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00a      	b.n	8001ba0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8a:	f3af 8000 	nop.w
 8001b8e:	4601      	mov	r1, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	60ba      	str	r2, [r7, #8]
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dbf0      	blt.n	8001b8a <_read+0x12>
  }

  return len;
 8001ba8:	687b      	ldr	r3, [r7, #4]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e009      	b.n	8001bd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf1      	blt.n	8001bc4 <_write+0x12>
  }
  return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_close>:

int _close(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c12:	605a      	str	r2, [r3, #4]
  return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_isatty>:

int _isatty(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f00c f83e 	bl	800dd04 <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	24080000 	.word	0x24080000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	24008884 	.word	0x24008884
 8001cbc:	2400d2b0 	.word	0x2400d2b0

08001cc0 <uart_addCharToBuffer>:
#include "uart_state_machine.h"

uart_BufferStatus uart_addCharToBuffer(char uartInput, uart_LineBuffer* lineBuffer) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
    assert(lineBuffer != NULL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <uart_addCharToBuffer+0x1e>
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <uart_addCharToBuffer+0x50>)
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <uart_addCharToBuffer+0x54>)
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	480f      	ldr	r0, [pc, #60]	; (8001d18 <uart_addCharToBuffer+0x58>)
 8001cda:	f00b fff5 	bl	800dcc8 <__assert_func>
    // todo could add backspace support
    if (uartInput == '\r') {
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2b0d      	cmp	r3, #13
 8001ce2:	d101      	bne.n	8001ce8 <uart_addCharToBuffer+0x28>
        return BUFFER_DONE;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e00e      	b.n	8001d06 <uart_addCharToBuffer+0x46>
    }
    if (LINE_BUFFER_LEN <= lineBuffer->len) {
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	2b3f      	cmp	r3, #63	; 0x3f
 8001cee:	d901      	bls.n	8001cf4 <uart_addCharToBuffer+0x34>
        return BUFFER_OVERFLOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e008      	b.n	8001d06 <uart_addCharToBuffer+0x46>
    }
    lineBuffer->buffer[lineBuffer->len++] = uartInput;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	1c59      	adds	r1, r3, #1
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	6411      	str	r1, [r2, #64]	; 0x40
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	79f9      	ldrb	r1, [r7, #7]
 8001d02:	54d1      	strb	r1, [r2, r3]
    return BUFFER_OK;
 8001d04:	2302      	movs	r3, #2
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	0800fc3c 	.word	0x0800fc3c
 8001d14:	0800fdc8 	.word	0x0800fdc8
 8001d18:	0800fc50 	.word	0x0800fc50

08001d1c <strntou>:

/**
 * @brief Converts a not null-terminated string containing digits to uint 
 * @returns PARSE_ARG_VAL_ERR if found not digit PARSE_OK otherwise
*/
static uart_parseStatus strntou(const char* str, size_t len, uint32_t* res) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
    // todo input greater than 2**32 e.g. assert len < 10, but return some err
    assert(len != 0 && str != NULL);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <strntou+0x18>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <strntou+0x24>
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <strntou+0x88>)
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <strntou+0x8c>)
 8001d38:	2116      	movs	r1, #22
 8001d3a:	481c      	ldr	r0, [pc, #112]	; (8001dac <strntou+0x90>)
 8001d3c:	f00b ffc4 	bl	800dcc8 <__assert_func>
    assert(res != NULL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <strntou+0x36>
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <strntou+0x94>)
 8001d48:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <strntou+0x8c>)
 8001d4a:	2117      	movs	r1, #23
 8001d4c:	4817      	ldr	r0, [pc, #92]	; (8001dac <strntou+0x90>)
 8001d4e:	f00b ffbb 	bl	800dcc8 <__assert_func>
    uint32_t n = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
    while (len--) {
 8001d56:	e018      	b.n	8001d8a <strntou+0x6e>
        if (!isdigit((unsigned char)*str)) {
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <strntou+0x98>)
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <strntou+0x54>
            return PARSE_ARG_VAL_ERR;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e015      	b.n	8001d9c <strntou+0x80>
        }
        n = 10 * n + *(str++) - '0'; 
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60fa      	str	r2, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	440b      	add	r3, r1
 8001d86:	3b30      	subs	r3, #48	; 0x30
 8001d88:	617b      	str	r3, [r7, #20]
    while (len--) {
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	60ba      	str	r2, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e1      	bne.n	8001d58 <strntou+0x3c>
    }
    *res = n;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	601a      	str	r2, [r3, #0]
    return PARSE_OK;
 8001d9a:	2303      	movs	r3, #3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	0800fc74 	.word	0x0800fc74
 8001da8:	0800fde0 	.word	0x0800fde0
 8001dac:	0800fc50 	.word	0x0800fc50
 8001db0:	0800fc8c 	.word	0x0800fc8c
 8001db4:	0800fe70 	.word	0x0800fe70

08001db8 <charInStr>:

/**
 * @brief returns if the char is in the null-terminated string
*/
static bool charInStr(char c, const char* str) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
    assert(str != NULL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <charInStr+0x1e>
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <charInStr+0x54>)
 8001dcc:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <charInStr+0x58>)
 8001dce:	2127      	movs	r1, #39	; 0x27
 8001dd0:	4810      	ldr	r0, [pc, #64]	; (8001e14 <charInStr+0x5c>)
 8001dd2:	f00b ff79 	bl	800dcc8 <__assert_func>
    for (size_t i = 0; str[i] != '\0'; ++i) {
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	e00b      	b.n	8001df4 <charInStr+0x3c>
        if (c == str[i]) return true;
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d101      	bne.n	8001dee <charInStr+0x36>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e009      	b.n	8001e02 <charInStr+0x4a>
    for (size_t i = 0; str[i] != '\0'; ++i) {
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ed      	bne.n	8001ddc <charInStr+0x24>
    }
    return false;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	0800fc98 	.word	0x0800fc98
 8001e10:	0800fde8 	.word	0x0800fde8
 8001e14:	0800fc50 	.word	0x0800fc50

08001e18 <strntok>:
 * @returns NULL if no token found, or the pointer to the first element of
 *  the token
*/
static const char* strntok(const char* str, size_t len,
                           size_t* tok_len, 
                           const char* delimiters){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
    assert(delimiters != NULL && tok_len != NULL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <strntok+0x1a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <strntok+0x26>
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <strntok+0xc0>)
 8001e34:	4a29      	ldr	r2, [pc, #164]	; (8001edc <strntok+0xc4>)
 8001e36:	213c      	movs	r1, #60	; 0x3c
 8001e38:	4829      	ldr	r0, [pc, #164]	; (8001ee0 <strntok+0xc8>)
 8001e3a:	f00b ff45 	bl	800dcc8 <__assert_func>
    assert(len == 0 || str != NULL);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <strntok+0x3e>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <strntok+0x3e>
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <strntok+0xcc>)
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <strntok+0xc4>)
 8001e4e:	213d      	movs	r1, #61	; 0x3d
 8001e50:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <strntok+0xc8>)
 8001e52:	f00b ff39 	bl	800dcc8 <__assert_func>
    size_t i = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
    // skip delimiters
    while(i < len && charInStr(str[i], delimiters)) { ++i; }
 8001e5a:	e002      	b.n	8001e62 <strntok+0x4a>
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d20a      	bcs.n	8001e80 <strntok+0x68>
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	4413      	add	r3, r2
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	6839      	ldr	r1, [r7, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff9f 	bl	8001db8 <charInStr>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ed      	bne.n	8001e5c <strntok+0x44>
    const size_t begIdx = i;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	61bb      	str	r3, [r7, #24]
    // find end of token
    while(i < len && !charInStr(str[i], delimiters)) { ++i; }
 8001e84:	e002      	b.n	8001e8c <strntok+0x74>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d20d      	bcs.n	8001eb0 <strntok+0x98>
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff8a 	bl	8001db8 <charInStr>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f083 0301 	eor.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ea      	bne.n	8001e86 <strntok+0x6e>
    const size_t endIdx = i;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	617b      	str	r3, [r7, #20]
    
    *tok_len = endIdx - begIdx;
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	1ad2      	subs	r2, r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	601a      	str	r2, [r3, #0]
    if (*tok_len == 0) {
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <strntok+0xb2>
        return NULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e002      	b.n	8001ed0 <strntok+0xb8>
    }
    else {
        return str + begIdx;
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	4413      	add	r3, r2
    }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	0800fca4 	.word	0x0800fca4
 8001edc:	0800fdf4 	.word	0x0800fdf4
 8001ee0:	0800fc50 	.word	0x0800fc50
 8001ee4:	0800fccc 	.word	0x0800fccc

08001ee8 <getArgTokens>:
 * @returns PARSE_ARG_NUM_ERR if incorrect number of tokens, PARSE_OK
 *  otherwise
*/
static uart_parseStatus getArgTokens(const char* args, size_t len, 
                                     size_t num,
                                     const char** toks, size_t* tokLens) {
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
    assert(len == 0 || args != NULL);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <getArgTokens+0x26>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <getArgTokens+0x26>
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <getArgTokens+0xe4>)
 8001f04:	4a32      	ldr	r2, [pc, #200]	; (8001fd0 <getArgTokens+0xe8>)
 8001f06:	215e      	movs	r1, #94	; 0x5e
 8001f08:	4832      	ldr	r0, [pc, #200]	; (8001fd4 <getArgTokens+0xec>)
 8001f0a:	f00b fedd 	bl	800dcc8 <__assert_func>
    assert(num == 0 || (toks != NULL && tokLens != NULL));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00b      	beq.n	8001f2c <getArgTokens+0x44>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <getArgTokens+0x38>
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <getArgTokens+0x44>
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <getArgTokens+0xf0>)
 8001f22:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <getArgTokens+0xe8>)
 8001f24:	215f      	movs	r1, #95	; 0x5f
 8001f26:	482b      	ldr	r0, [pc, #172]	; (8001fd4 <getArgTokens+0xec>)
 8001f28:	f00b fece 	bl	800dcc8 <__assert_func>
    // find args
    for (size_t i = 0; i < num; ++i) {
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	e037      	b.n	8001fa2 <getArgTokens+0xba>
        toks[i] = strntok(args, len, &tokLens[i], CMD_DELIMITERS);
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f38:	18d1      	adds	r1, r2, r3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	18d4      	adds	r4, r2, r3
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <getArgTokens+0xf4>)
 8001f44:	460a      	mov	r2, r1
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff ff65 	bl	8001e18 <strntok>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6023      	str	r3, [r4, #0]
        if (toks[i] == NULL) {
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <getArgTokens+0x7c>
            return PARSE_ARG_NUM_ERR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e02f      	b.n	8001fc4 <getArgTokens+0xdc>
        }
        size_t skippedLen = toks[i] - args;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	61bb      	str	r3, [r7, #24]
        args += skippedLen + tokLens[i];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4413      	add	r3, r2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4413      	add	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
        len -= skippedLen + tokLens[i];
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f8e:	4413      	add	r3, r2
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4413      	add	r3, r2
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	60bb      	str	r3, [r7, #8]
    for (size_t i = 0; i < num; ++i) {
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3c3      	bcc.n	8001f32 <getArgTokens+0x4a>
    }

    // check if there are tokens left
    size_t tmp;
    if (strntok(args, len, &tmp, CMD_DELIMITERS) != NULL) {
 8001faa:	f107 0214 	add.w	r2, r7, #20
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <getArgTokens+0xf4>)
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f7ff ff30 	bl	8001e18 <strntok>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <getArgTokens+0xda>
        return PARSE_ARG_NUM_ERR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <getArgTokens+0xdc>
    }

    return PARSE_OK;
 8001fc2:	2303      	movs	r3, #3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3724      	adds	r7, #36	; 0x24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	0800fce4 	.word	0x0800fce4
 8001fd0:	0800fdfc 	.word	0x0800fdfc
 8001fd4:	0800fc50 	.word	0x0800fc50
 8001fd8:	0800fd00 	.word	0x0800fd00
 8001fdc:	0800fd30 	.word	0x0800fd30

08001fe0 <uart_parseClkCmd>:

uart_parseStatus uart_parseClkCmd(const char* args, size_t len,
                                    uart_measParams* const uartParams) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b094      	sub	sp, #80	; 0x50
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
    // find args
    size_t divTokLens[3];
    const char* divToks[3];
    uart_parseStatus status = getArgTokens(args, len, 3, divToks, divTokLens);
 8001fec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ff0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7ff ff73 	bl	8001ee8 <getArgTokens>
 8002002:	4603      	mov	r3, r0
 8002004:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    if (status != PARSE_OK) {
 8002008:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800200c:	2b03      	cmp	r3, #3
 800200e:	d002      	beq.n	8002016 <uart_parseClkCmd+0x36>
        return status;
 8002010:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002014:	e04e      	b.n	80020b4 <uart_parseClkCmd+0xd4>
    }

    // convert the args
    uint32_t divs[3];
    const uint32_t limits[3] = DIV_LIMITS;
 8002016:	4a29      	ldr	r2, [pc, #164]	; (80020bc <uart_parseClkCmd+0xdc>)
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	ca07      	ldmia	r2, {r0, r1, r2}
 800201e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (size_t i = 0; i < 3; ++i) {
 8002022:	2300      	movs	r3, #0
 8002024:	647b      	str	r3, [r7, #68]	; 0x44
 8002026:	e035      	b.n	8002094 <uart_parseClkCmd+0xb4>
        if (strntou(divToks[i], divTokLens[i], &divs[i]) != PARSE_OK) {
 8002028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3348      	adds	r3, #72	; 0x48
 800202e:	443b      	add	r3, r7
 8002030:	f853 0c20 	ldr.w	r0, [r3, #-32]
 8002034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3348      	adds	r3, #72	; 0x48
 800203a:	443b      	add	r3, r7
 800203c:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8002040:	f107 021c 	add.w	r2, r7, #28
 8002044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	461a      	mov	r2, r3
 800204c:	f7ff fe66 	bl	8001d1c <strntou>
 8002050:	4603      	mov	r3, r0
 8002052:	2b03      	cmp	r3, #3
 8002054:	d001      	beq.n	800205a <uart_parseClkCmd+0x7a>
            return PARSE_ARG_VAL_ERR;
 8002056:	2302      	movs	r3, #2
 8002058:	e02c      	b.n	80020b4 <uart_parseClkCmd+0xd4>
        }
        // validating the arg values
        if (limits[i] < divs[i]) {
 800205a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3348      	adds	r3, #72	; 0x48
 8002060:	443b      	add	r3, r7
 8002062:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	3348      	adds	r3, #72	; 0x48
 800206c:	443b      	add	r3, r7
 800206e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002072:	429a      	cmp	r2, r3
 8002074:	d20b      	bcs.n	800208e <uart_parseClkCmd+0xae>
            // todo print message about saturating argument or signal it somehow
            divs[i] = limits[i];
 8002076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	3348      	adds	r3, #72	; 0x48
 800207c:	443b      	add	r3, r7
 800207e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	3348      	adds	r3, #72	; 0x48
 8002088:	443b      	add	r3, r7
 800208a:	f843 2c2c 	str.w	r2, [r3, #-44]
    for (size_t i = 0; i < 3; ++i) {
 800208e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002090:	3301      	adds	r3, #1
 8002092:	647b      	str	r3, [r7, #68]	; 0x44
 8002094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002096:	2b02      	cmp	r3, #2
 8002098:	d9c6      	bls.n	8002028 <uart_parseClkCmd+0x48>
        }
    }

    uartParams->clk_div1 = (uint8_t)divs[0];
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	725a      	strb	r2, [r3, #9]
    uartParams->clk_div2 = (uint8_t)divs[1];
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	729a      	strb	r2, [r3, #10]
    uartParams->clk_div3 = (uint8_t)divs[2];
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	72da      	strb	r2, [r3, #11]
    return PARSE_OK;
 80020b2:	2303      	movs	r3, #3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3748      	adds	r7, #72	; 0x48
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	0800fd34 	.word	0x0800fd34

080020c0 <uart_parseDirectionCmd>:

uart_parseStatus uart_parseDirectionCmd(const char* args, size_t len,
                                          uart_measParams* uartParams) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
    // find the single expected argument
    const char* dirTok;
    size_t dirTokLen;
    uart_parseStatus status = getArgTokens(args, len, 1, &dirTok, &dirTokLen);
 80020cc:	f107 0218 	add.w	r2, r7, #24
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	4613      	mov	r3, r2
 80020d8:	2201      	movs	r2, #1
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff ff03 	bl	8001ee8 <getArgTokens>
 80020e2:	4603      	mov	r3, r0
 80020e4:	77fb      	strb	r3, [r7, #31]
    if (status != PARSE_OK) {
 80020e6:	7ffb      	ldrb	r3, [r7, #31]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d001      	beq.n	80020f0 <uart_parseDirectionCmd+0x30>
        return status;
 80020ec:	7ffb      	ldrb	r3, [r7, #31]
 80020ee:	e02e      	b.n	800214e <uart_parseDirectionCmd+0x8e>
    }

    // string arg options
    if (strncmp(dirTok, "send", dirTokLen) == 0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4918      	ldr	r1, [pc, #96]	; (8002158 <uart_parseDirectionCmd+0x98>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f00c fbdd 	bl	800e8b6 <strncmp>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <uart_parseDirectionCmd+0x54>
        || strncmp(dirTok, "s", dirTokLen) == 0) {
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4915      	ldr	r1, [pc, #84]	; (800215c <uart_parseDirectionCmd+0x9c>)
 8002108:	4618      	mov	r0, r3
 800210a:	f00c fbd4 	bl	800e8b6 <strncmp>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <uart_parseDirectionCmd+0x5c>
        uartParams->direction = SEND;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	721a      	strb	r2, [r3, #8]
 800211a:	e017      	b.n	800214c <uart_parseDirectionCmd+0x8c>
    }
    else if (strncmp(dirTok, "receive", dirTokLen) == 0
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	490f      	ldr	r1, [pc, #60]	; (8002160 <uart_parseDirectionCmd+0xa0>)
 8002122:	4618      	mov	r0, r3
 8002124:	f00c fbc7 	bl	800e8b6 <strncmp>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <uart_parseDirectionCmd+0x80>
             || strncmp(dirTok, "r", dirTokLen) == 0) {
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	490c      	ldr	r1, [pc, #48]	; (8002164 <uart_parseDirectionCmd+0xa4>)
 8002134:	4618      	mov	r0, r3
 8002136:	f00c fbbe 	bl	800e8b6 <strncmp>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <uart_parseDirectionCmd+0x88>
        uartParams->direction = RECEIVE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	721a      	strb	r2, [r3, #8]
 8002146:	e001      	b.n	800214c <uart_parseDirectionCmd+0x8c>
    }
    else {
        return PARSE_ARG_VAL_ERR;
 8002148:	2302      	movs	r3, #2
 800214a:	e000      	b.n	800214e <uart_parseDirectionCmd+0x8e>
    }

    return PARSE_OK;
 800214c:	2303      	movs	r3, #3
}
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	0800fd40 	.word	0x0800fd40
 800215c:	0800fd48 	.word	0x0800fd48
 8002160:	0800fd4c 	.word	0x0800fd4c
 8002164:	0800fd54 	.word	0x0800fd54

08002168 <uart_parseStartCmd>:

uart_parseStatus uart_parseStartCmd(const char* args, size_t len,
                                      uart_measParams* uartParams) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
    // check if there are arguments, zero needed
    uart_parseStatus status = getArgTokens(args, len, 0, NULL, NULL);
 8002174:	2300      	movs	r3, #0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2300      	movs	r3, #0
 800217a:	2200      	movs	r2, #0
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff feb2 	bl	8001ee8 <getArgTokens>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]
    if (status != PARSE_OK) {
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d001      	beq.n	8002192 <uart_parseStartCmd+0x2a>
        return status;
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	e003      	b.n	800219a <uart_parseStartCmd+0x32>
    }

    // signal start of meas
    uartParams->startMeas = true;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	731a      	strb	r2, [r3, #12]
    return PARSE_OK;
 8002198:	2303      	movs	r3, #3
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <uart_parseRepeatCmd>:

uart_parseStatus uart_parseRepeatCmd(const char* args, size_t len,
                                      uart_measParams* uartParams) {
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b08a      	sub	sp, #40	; 0x28
 80021a6:	af02      	add	r7, sp, #8
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
    // find the single expected token
    const char* repeatTok;
    size_t repeatTokLen;
    uart_parseStatus status = getArgTokens(args, len, 1, &repeatTok, &repeatTokLen);
 80021ae:	f107 0218 	add.w	r2, r7, #24
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	2201      	movs	r2, #1
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff fe92 	bl	8001ee8 <getArgTokens>
 80021c4:	4603      	mov	r3, r0
 80021c6:	77fb      	strb	r3, [r7, #31]
    if (status != PARSE_OK) {
 80021c8:	7ffb      	ldrb	r3, [r7, #31]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d001      	beq.n	80021d2 <uart_parseRepeatCmd+0x30>
        return status;
 80021ce:	7ffb      	ldrb	r3, [r7, #31]
 80021d0:	e018      	b.n	8002204 <uart_parseRepeatCmd+0x62>
    }

    // arg conversion from string
    uint32_t count;
    status = strntou(repeatTok, repeatTokLen, &count);
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6979      	ldr	r1, [r7, #20]
 80021d6:	f107 0210 	add.w	r2, r7, #16
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fd9e 	bl	8001d1c <strntou>
 80021e0:	4603      	mov	r3, r0
 80021e2:	77fb      	strb	r3, [r7, #31]
    if (status != PARSE_OK) {
 80021e4:	7ffb      	ldrb	r3, [r7, #31]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d001      	beq.n	80021ee <uart_parseRepeatCmd+0x4c>
        return status;
 80021ea:	7ffb      	ldrb	r3, [r7, #31]
 80021ec:	e00a      	b.n	8002204 <uart_parseRepeatCmd+0x62>
    }

    // validating the argument
    if (REPETITION_LIMIT < count) {
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f4:	d902      	bls.n	80021fc <uart_parseRepeatCmd+0x5a>
        // todo warn about saturation
        count = REPETITION_LIMIT;
 80021f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021fa:	613b      	str	r3, [r7, #16]
    }

    uartParams->numMeas = count;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	601a      	str	r2, [r3, #0]
    return PARSE_OK;
 8002202:	2303      	movs	r3, #3
}
 8002204:	4618      	mov	r0, r3
 8002206:	3720      	adds	r7, #32
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <uart_parseDatasizeCmd>:

uart_parseStatus uart_parseDatasizeCmd(const char* args, size_t len,
                                         uart_measParams* uartParams) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
    // find the single expected arg
    const char* sizeTok;
    size_t sizeTokLen;
    uart_parseStatus status = getArgTokens(args, len, 1, &sizeTok, &sizeTokLen);
 8002218:	f107 0218 	add.w	r2, r7, #24
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	2201      	movs	r2, #1
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff fe5d 	bl	8001ee8 <getArgTokens>
 800222e:	4603      	mov	r3, r0
 8002230:	77fb      	strb	r3, [r7, #31]
    if (status != PARSE_OK) {
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d001      	beq.n	800223c <uart_parseDatasizeCmd+0x30>
        return status;
 8002238:	7ffb      	ldrb	r3, [r7, #31]
 800223a:	e019      	b.n	8002270 <uart_parseDatasizeCmd+0x64>
    }
    
    // arg conversion from string
    uint32_t datasize;
    status = strntou(sizeTok, sizeTokLen, &datasize);
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	6979      	ldr	r1, [r7, #20]
 8002240:	f107 0210 	add.w	r2, r7, #16
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fd69 	bl	8001d1c <strntou>
 800224a:	4603      	mov	r3, r0
 800224c:	77fb      	strb	r3, [r7, #31]
    if (status != PARSE_OK) {
 800224e:	7ffb      	ldrb	r3, [r7, #31]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d001      	beq.n	8002258 <uart_parseDatasizeCmd+0x4c>
        return status;
 8002254:	7ffb      	ldrb	r3, [r7, #31]
 8002256:	e00b      	b.n	8002270 <uart_parseDatasizeCmd+0x64>
    }

    if (DATASIZE_LIMIT < datasize) {
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f643 72f8 	movw	r2, #16376	; 0x3ff8
 800225e:	4293      	cmp	r3, r2
 8002260:	d902      	bls.n	8002268 <uart_parseDatasizeCmd+0x5c>
        // todo wand about saturation
        datasize = DATASIZE_LIMIT;
 8002262:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 8002266:	613b      	str	r3, [r7, #16]
    }
    uartParams->dataSize = datasize;
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	605a      	str	r2, [r3, #4]
    return PARSE_OK;
 800226e:	2303      	movs	r3, #3
}
 8002270:	4618      	mov	r0, r3
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <uart_parseBuffer>:

uart_parseStatus uart_parseBuffer(const uart_LineBuffer* lineBuffer,
                                  uart_measParams* uartParams){
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b092      	sub	sp, #72	; 0x48
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    size_t cmdlen;
    const char* const cmdtok = strntok(lineBuffer->buffer, lineBuffer->len,
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002288:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <uart_parseBuffer+0xac>)
 800228e:	f7ff fdc3 	bl	8001e18 <strntok>
 8002292:	6438      	str	r0, [r7, #64]	; 0x40
                                       &cmdlen, CMD_DELIMITERS);
    if (cmdtok == NULL) {
 8002294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <uart_parseBuffer+0x26>
        return PARSE_COMMAND_ERR;
 800229a:	2300      	movs	r3, #0
 800229c:	e03e      	b.n	800231c <uart_parseBuffer+0xa4>
    }

    // selecting the command
    const char* const argsBeg = cmdtok + cmdlen;
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022a2:	4413      	add	r3, r2
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t skippedLen = cmdtok - lineBuffer->buffer;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	63bb      	str	r3, [r7, #56]	; 0x38
    size_t argsLen = lineBuffer->len - skippedLen - cmdlen;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b4:	1ad2      	subs	r2, r2, r3
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
    const uart_Command cmds[] = COMMANDS;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <uart_parseBuffer+0xb0>)
 80022be:	f107 0408 	add.w	r4, r7, #8
 80022c2:	461d      	mov	r5, r3
 80022c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022d0:	e884 0003 	stmia.w	r4, {r0, r1}
    for (size_t i = 0; i < sizeof(cmds) / sizeof(cmds[0]); ++i) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	647b      	str	r3, [r7, #68]	; 0x44
 80022d8:	e01c      	b.n	8002314 <uart_parseBuffer+0x9c>
        // executing the matching command with the args
        if (strncmp(cmdtok, cmds[i].cmd, cmdlen) == 0) {
 80022da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	3348      	adds	r3, #72	; 0x48
 80022e0:	443b      	add	r3, r7
 80022e2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80022e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e8:	4619      	mov	r1, r3
 80022ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80022ec:	f00c fae3 	bl	800e8b6 <strncmp>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <uart_parseBuffer+0x96>
            return cmds[i].parseArgFun(argsBeg, argsLen, uartParams);
 80022f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	3348      	adds	r3, #72	; 0x48
 80022fc:	443b      	add	r3, r7
 80022fe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002308:	4798      	blx	r3
 800230a:	4603      	mov	r3, r0
 800230c:	e006      	b.n	800231c <uart_parseBuffer+0xa4>
    for (size_t i = 0; i < sizeof(cmds) / sizeof(cmds[0]); ++i) {
 800230e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002310:	3301      	adds	r3, #1
 8002312:	647b      	str	r3, [r7, #68]	; 0x44
 8002314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002316:	2b04      	cmp	r3, #4
 8002318:	d9df      	bls.n	80022da <uart_parseBuffer+0x62>
        }
    }
    // no command matches
    return PARSE_COMMAND_ERR;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3748      	adds	r7, #72	; 0x48
 8002320:	46bd      	mov	sp, r7
 8002322:	bdb0      	pop	{r4, r5, r7, pc}
 8002324:	0800fd30 	.word	0x0800fd30
 8002328:	0800fd58 	.word	0x0800fd58

0800232c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800232c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002364 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002330:	f7fe fa2c 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002336:	490d      	ldr	r1, [pc, #52]	; (800236c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800234c:	4c0a      	ldr	r4, [pc, #40]	; (8002378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235a:	f00b fde1 	bl	800df20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235e:	f7fe fd6f 	bl	8000e40 <main>
  bx  lr
 8002362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002364:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002368:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800236c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002370:	08010038 	.word	0x08010038
  ldr r2, =_sbss
 8002374:	2400013c 	.word	0x2400013c
  ldr r4, =_ebss
 8002378:	2400d2ac 	.word	0x2400d2ac

0800237c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC3_IRQHandler>
	...

08002380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002386:	2003      	movs	r0, #3
 8002388:	f000 fad3 	bl	8002932 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800238c:	f002 fedc 	bl	8005148 <HAL_RCC_GetSysClockFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_Init+0x68>)
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	4913      	ldr	r1, [pc, #76]	; (80023ec <HAL_Init+0x6c>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_Init+0x68>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_Init+0x6c>)
 80023b4:	5cd3      	ldrb	r3, [r2, r3]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
 80023c0:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <HAL_Init+0x70>)
 80023c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023c4:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <HAL_Init+0x74>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ca:	200f      	movs	r0, #15
 80023cc:	f7ff fb10 	bl	80019f0 <HAL_InitTick>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e002      	b.n	80023e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023da:	f7ff f8fd 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	58024400 	.word	0x58024400
 80023ec:	0800fda4 	.word	0x0800fda4
 80023f0:	24000004 	.word	0x24000004
 80023f4:	24000000 	.word	0x24000000

080023f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x20>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_IncTick+0x24>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	24000010 	.word	0x24000010
 800241c:	24008888 	.word	0x24008888

08002420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	24008888 	.word	0x24008888

08002438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff ffee 	bl	8002420 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d005      	beq.n	800245e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_Delay+0x44>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800245e:	bf00      	nop
 8002460:	f7ff ffde 	bl	8002420 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d8f7      	bhi.n	8002460 <HAL_Delay+0x28>
  {
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	24000010 	.word	0x24000010

08002480 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetREVID+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0c1b      	lsrs	r3, r3, #16
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	5c001000 	.word	0x5c001000

08002498 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80024a8:	4904      	ldr	r1, [pc, #16]	; (80024bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	58000400 	.word	0x58000400

080024c0 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <HAL_EXTI_EdgeConfig+0xcc>)
 80024d2:	4413      	add	r3, r2
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2201      	movs	r2, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	0158      	lsls	r0, r3, #5
 80024ea:	4b28      	ldr	r3, [pc, #160]	; (800258c <HAL_EXTI_EdgeConfig+0xcc>)
 80024ec:	4403      	add	r3, r0
 80024ee:	4618      	mov	r0, r3
 80024f0:	ea01 0302 	and.w	r3, r1, r2
 80024f4:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
 80024fe:	015b      	lsls	r3, r3, #5
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	0949      	lsrs	r1, r1, #5
 8002514:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
 8002518:	0149      	lsls	r1, r1, #5
 800251a:	4013      	ands	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d012      	beq.n	800254e <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
 8002530:	015b      	lsls	r3, r3, #5
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	0949      	lsrs	r1, r1, #5
 8002544:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
 8002548:	0149      	lsls	r1, r1, #5
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_EXTI_EdgeConfig+0xcc>)
 8002560:	4413      	add	r3, r2
 8002562:	6819      	ldr	r1, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2201      	movs	r2, #1
 800256c:	409a      	lsls	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	0158      	lsls	r0, r3, #5
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_EXTI_EdgeConfig+0xcc>)
 8002576:	4403      	add	r3, r0
 8002578:	4618      	mov	r0, r3
 800257a:	ea41 0302 	orr.w	r3, r1, r2
 800257e:	6003      	str	r3, [r0, #0]
  }
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	58000004 	.word	0x58000004

08002590 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_EXTI_GenerateSWInterrupt+0x3c>)
 80025a0:	4413      	add	r3, r2
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2201      	movs	r2, #1
 80025ac:	409a      	lsls	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	0158      	lsls	r0, r3, #5
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_EXTI_GenerateSWInterrupt+0x3c>)
 80025b6:	4403      	add	r3, r0
 80025b8:	4618      	mov	r0, r3
 80025ba:	ea41 0302 	orr.w	r3, r1, r2
 80025be:	6003      	str	r3, [r0, #0]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	58000008 	.word	0x58000008

080025d0 <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 021f 	and.w	r2, r3, #31
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	0119      	lsls	r1, r3, #4
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_EXTI_D1_ClearFlag+0x2c>)
 80025e6:	440b      	add	r3, r1
 80025e8:	4619      	mov	r1, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	4093      	lsls	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]

}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	58000088 	.word	0x58000088

08002600 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d02d      	beq.n	8002672 <HAL_EXTI_D1_EventInputConfig+0x72>
  {
     if( EXTI_LineCmd == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d116      	bne.n	800264a <HAL_EXTI_D1_EventInputConfig+0x4a>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	095a      	lsrs	r2, r3, #5
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_EXTI_D1_EventInputConfig+0xe4>)
 8002622:	4413      	add	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2201      	movs	r2, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43da      	mvns	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	0958      	lsrs	r0, r3, #5
 800263a:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <HAL_EXTI_D1_EventInputConfig+0xe4>)
 800263c:	4403      	add	r3, r0
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	4618      	mov	r0, r3
 8002642:	ea01 0302 	and.w	r3, r1, r2
 8002646:	6003      	str	r3, [r0, #0]
 8002648:	e013      	b.n	8002672 <HAL_EXTI_D1_EventInputConfig+0x72>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	095a      	lsrs	r2, r3, #5
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_EXTI_D1_EventInputConfig+0xe4>)
 8002650:	4413      	add	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2201      	movs	r2, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	0958      	lsrs	r0, r3, #5
 8002664:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_EXTI_D1_EventInputConfig+0xe4>)
 8002666:	4403      	add	r3, r0
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	4618      	mov	r0, r3
 800266c:	ea41 0302 	orr.w	r3, r1, r2
 8002670:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02d      	beq.n	80026d8 <HAL_EXTI_D1_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d116      	bne.n	80026b0 <HAL_EXTI_D1_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	011a      	lsls	r2, r3, #4
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HAL_EXTI_D1_EventInputConfig+0xe8>)
 800268a:	4413      	add	r3, r2
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2201      	movs	r2, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	0118      	lsls	r0, r3, #4
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_EXTI_D1_EventInputConfig+0xe8>)
 80026a4:	4403      	add	r3, r0
 80026a6:	4618      	mov	r0, r3
 80026a8:	ea01 0302 	and.w	r3, r1, r2
 80026ac:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 80026ae:	e013      	b.n	80026d8 <HAL_EXTI_D1_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	011a      	lsls	r2, r3, #4
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_EXTI_D1_EventInputConfig+0xe8>)
 80026b8:	4413      	add	r3, r2
 80026ba:	6819      	ldr	r1, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2201      	movs	r2, #1
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	0118      	lsls	r0, r3, #4
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_EXTI_D1_EventInputConfig+0xe8>)
 80026ce:	4403      	add	r3, r0
 80026d0:	4618      	mov	r0, r3
 80026d2:	ea41 0302 	orr.w	r3, r1, r2
 80026d6:	6003      	str	r3, [r0, #0]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	05800008 	.word	0x05800008
 80026e8:	58000084 	.word	0x58000084

080026ec <HAL_EXTI_D2_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D2_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D2_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d02d      	beq.n	800275e <HAL_EXTI_D2_EventInputConfig+0x72>
  {
    if( EXTI_LineCmd == 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d116      	bne.n	8002736 <HAL_EXTI_D2_EventInputConfig+0x4a>
    {
    /* Clear EXTI line configuration */
     CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	095a      	lsrs	r2, r3, #5
 800270c:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 800270e:	4413      	add	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	6819      	ldr	r1, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2201      	movs	r2, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43da      	mvns	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	0958      	lsrs	r0, r3, #5
 8002726:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8002728:	4403      	add	r3, r0
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4618      	mov	r0, r3
 800272e:	ea01 0302 	and.w	r3, r1, r2
 8002732:	6003      	str	r3, [r0, #0]
 8002734:	e013      	b.n	800275e <HAL_EXTI_D2_EventInputConfig+0x72>
    }
    else
    {
     SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	095a      	lsrs	r2, r3, #5
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 800273c:	4413      	add	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2201      	movs	r2, #1
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	0958      	lsrs	r0, r3, #5
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8002752:	4403      	add	r3, r0
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	4618      	mov	r0, r3
 8002758:	ea41 0302 	orr.w	r3, r1, r2
 800275c:	6003      	str	r3, [r0, #0]
    }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d02d      	beq.n	80027c4 <HAL_EXTI_D2_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d116      	bne.n	800279c <HAL_EXTI_D2_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	011a      	lsls	r2, r3, #4
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8002776:	4413      	add	r3, r2
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2201      	movs	r2, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	0118      	lsls	r0, r3, #4
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8002790:	4403      	add	r3, r0
 8002792:	4618      	mov	r0, r3
 8002794:	ea01 0302 	and.w	r3, r1, r2
 8002798:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 800279a:	e013      	b.n	80027c4 <HAL_EXTI_D2_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	011a      	lsls	r2, r3, #4
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 80027a4:	4413      	add	r3, r2
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2201      	movs	r2, #1
 80027b0:	409a      	lsls	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	0118      	lsls	r0, r3, #4
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 80027ba:	4403      	add	r3, r0
 80027bc:	4618      	mov	r0, r3
 80027be:	ea41 0302 	orr.w	r3, r1, r2
 80027c2:	6003      	str	r3, [r0, #0]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	0580000c 	.word	0x0580000c
 80027d4:	580000c4 	.word	0x580000c4

080027d8 <__NVIC_SetPriorityGrouping>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <__NVIC_SetPriorityGrouping+0x40>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f4:	4013      	ands	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	4313      	orrs	r3, r2
 8002804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002806:	4a04      	ldr	r2, [pc, #16]	; (8002818 <__NVIC_SetPriorityGrouping+0x40>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	60d3      	str	r3, [r2, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00
 800281c:	05fa0000 	.word	0x05fa0000

08002820 <__NVIC_GetPriorityGrouping>:
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <__NVIC_GetPriorityGrouping+0x18>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	f003 0307 	and.w	r3, r3, #7
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_EnableIRQ>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284a:	2b00      	cmp	r3, #0
 800284c:	db0b      	blt.n	8002866 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4907      	ldr	r1, [pc, #28]	; (8002874 <__NVIC_EnableIRQ+0x38>)
 8002856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2001      	movs	r0, #1
 800285e:	fa00 f202 	lsl.w	r2, r0, r2
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000e100 	.word	0xe000e100

08002878 <__NVIC_SetPriority>:
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	db0a      	blt.n	80028a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	490c      	ldr	r1, [pc, #48]	; (80028c4 <__NVIC_SetPriority+0x4c>)
 8002892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	440b      	add	r3, r1
 800289c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028a0:	e00a      	b.n	80028b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4908      	ldr	r1, [pc, #32]	; (80028c8 <__NVIC_SetPriority+0x50>)
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	3b04      	subs	r3, #4
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	440b      	add	r3, r1
 80028b6:	761a      	strb	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <NVIC_EncodePriority>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f1c3 0307 	rsb	r3, r3, #7
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	bf28      	it	cs
 80028ea:	2304      	movcs	r3, #4
 80028ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d902      	bls.n	80028fc <NVIC_EncodePriority+0x30>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3b03      	subs	r3, #3
 80028fa:	e000      	b.n	80028fe <NVIC_EncodePriority+0x32>
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	401a      	ands	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43d9      	mvns	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	4313      	orrs	r3, r2
}
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ff4c 	bl	80027d8 <__NVIC_SetPriorityGrouping>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002956:	f7ff ff63 	bl	8002820 <__NVIC_GetPriorityGrouping>
 800295a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	6978      	ldr	r0, [r7, #20]
 8002962:	f7ff ffb3 	bl	80028cc <NVIC_EncodePriority>
 8002966:	4602      	mov	r2, r0
 8002968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff82 	bl	8002878 <__NVIC_SetPriority>
}
 8002974:	bf00      	nop
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff56 	bl	800283c <__NVIC_EnableIRQ>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800299c:	f3bf 8f5f 	dmb	sy
}
 80029a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_MPU_Disable+0x28>)
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <HAL_MPU_Disable+0x28>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ac:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_MPU_Disable+0x2c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000ed00 	.word	0xe000ed00
 80029c4:	e000ed90 	.word	0xe000ed90

080029c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80029d0:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_MPU_Enable+0x38>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_MPU_Enable+0x3c>)
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <HAL_MPU_Enable+0x3c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80029e6:	f3bf 8f4f 	dsb	sy
}
 80029ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029ec:	f3bf 8f6f 	isb	sy
}
 80029f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000ed90 	.word	0xe000ed90
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	785a      	ldrb	r2, [r3, #1]
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_MPU_ConfigRegion+0x84>)
 8002a16:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d029      	beq.n	8002a74 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002a20:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_MPU_ConfigRegion+0x84>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7b1b      	ldrb	r3, [r3, #12]
 8002a2c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7adb      	ldrb	r3, [r3, #11]
 8002a32:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	7a9b      	ldrb	r3, [r3, #10]
 8002a3a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7b5b      	ldrb	r3, [r3, #13]
 8002a42:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7b9b      	ldrb	r3, [r3, #14]
 8002a4a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7bdb      	ldrb	r3, [r3, #15]
 8002a52:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7a5b      	ldrb	r3, [r3, #9]
 8002a5a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7a1b      	ldrb	r3, [r3, #8]
 8002a62:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a64:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a6e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a70:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002a72:	e005      	b.n	8002a80 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_MPU_ConfigRegion+0x84>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002a7a:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <HAL_MPU_ConfigRegion+0x84>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed90 	.word	0xe000ed90

08002a90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff fcc2 	bl	8002420 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e2dc      	b.n	8003062 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d008      	beq.n	8002ac6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e2cd      	b.n	8003062 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a76      	ldr	r2, [pc, #472]	; (8002ca4 <HAL_DMA_Abort+0x214>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d04a      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a74      	ldr	r2, [pc, #464]	; (8002ca8 <HAL_DMA_Abort+0x218>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d045      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a73      	ldr	r2, [pc, #460]	; (8002cac <HAL_DMA_Abort+0x21c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d040      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a71      	ldr	r2, [pc, #452]	; (8002cb0 <HAL_DMA_Abort+0x220>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d03b      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a70      	ldr	r2, [pc, #448]	; (8002cb4 <HAL_DMA_Abort+0x224>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d036      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <HAL_DMA_Abort+0x228>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d031      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a6d      	ldr	r2, [pc, #436]	; (8002cbc <HAL_DMA_Abort+0x22c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d02c      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6b      	ldr	r2, [pc, #428]	; (8002cc0 <HAL_DMA_Abort+0x230>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d027      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a6a      	ldr	r2, [pc, #424]	; (8002cc4 <HAL_DMA_Abort+0x234>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a68      	ldr	r2, [pc, #416]	; (8002cc8 <HAL_DMA_Abort+0x238>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01d      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a67      	ldr	r2, [pc, #412]	; (8002ccc <HAL_DMA_Abort+0x23c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d018      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_DMA_Abort+0x240>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a64      	ldr	r2, [pc, #400]	; (8002cd4 <HAL_DMA_Abort+0x244>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00e      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a62      	ldr	r2, [pc, #392]	; (8002cd8 <HAL_DMA_Abort+0x248>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a61      	ldr	r2, [pc, #388]	; (8002cdc <HAL_DMA_Abort+0x24c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <HAL_DMA_Abort+0xd6>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5f      	ldr	r2, [pc, #380]	; (8002ce0 <HAL_DMA_Abort+0x250>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_DMA_Abort+0xda>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_DMA_Abort+0xdc>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 021e 	bic.w	r2, r2, #30
 8002b7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	e00a      	b.n	8002bae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020e 	bic.w	r2, r2, #14
 8002ba6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a3c      	ldr	r2, [pc, #240]	; (8002ca4 <HAL_DMA_Abort+0x214>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d072      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a3a      	ldr	r2, [pc, #232]	; (8002ca8 <HAL_DMA_Abort+0x218>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d06d      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a39      	ldr	r2, [pc, #228]	; (8002cac <HAL_DMA_Abort+0x21c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d068      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a37      	ldr	r2, [pc, #220]	; (8002cb0 <HAL_DMA_Abort+0x220>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d063      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a36      	ldr	r2, [pc, #216]	; (8002cb4 <HAL_DMA_Abort+0x224>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d05e      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a34      	ldr	r2, [pc, #208]	; (8002cb8 <HAL_DMA_Abort+0x228>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d059      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a33      	ldr	r2, [pc, #204]	; (8002cbc <HAL_DMA_Abort+0x22c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d054      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a31      	ldr	r2, [pc, #196]	; (8002cc0 <HAL_DMA_Abort+0x230>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d04f      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a30      	ldr	r2, [pc, #192]	; (8002cc4 <HAL_DMA_Abort+0x234>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04a      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2e      	ldr	r2, [pc, #184]	; (8002cc8 <HAL_DMA_Abort+0x238>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d045      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2d      	ldr	r2, [pc, #180]	; (8002ccc <HAL_DMA_Abort+0x23c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d040      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <HAL_DMA_Abort+0x240>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d03b      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <HAL_DMA_Abort+0x244>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d036      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a28      	ldr	r2, [pc, #160]	; (8002cd8 <HAL_DMA_Abort+0x248>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d031      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a27      	ldr	r2, [pc, #156]	; (8002cdc <HAL_DMA_Abort+0x24c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d02c      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <HAL_DMA_Abort+0x250>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d027      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <HAL_DMA_Abort+0x254>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_DMA_Abort+0x258>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01d      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_DMA_Abort+0x25c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <HAL_DMA_Abort+0x260>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <HAL_DMA_Abort+0x264>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00e      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_DMA_Abort+0x268>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_DMA_Abort+0x26c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_DMA_Abort+0x20e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <HAL_DMA_Abort+0x270>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d132      	bne.n	8002d04 <HAL_DMA_Abort+0x274>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e031      	b.n	8002d06 <HAL_DMA_Abort+0x276>
 8002ca2:	bf00      	nop
 8002ca4:	40020010 	.word	0x40020010
 8002ca8:	40020028 	.word	0x40020028
 8002cac:	40020040 	.word	0x40020040
 8002cb0:	40020058 	.word	0x40020058
 8002cb4:	40020070 	.word	0x40020070
 8002cb8:	40020088 	.word	0x40020088
 8002cbc:	400200a0 	.word	0x400200a0
 8002cc0:	400200b8 	.word	0x400200b8
 8002cc4:	40020410 	.word	0x40020410
 8002cc8:	40020428 	.word	0x40020428
 8002ccc:	40020440 	.word	0x40020440
 8002cd0:	40020458 	.word	0x40020458
 8002cd4:	40020470 	.word	0x40020470
 8002cd8:	40020488 	.word	0x40020488
 8002cdc:	400204a0 	.word	0x400204a0
 8002ce0:	400204b8 	.word	0x400204b8
 8002ce4:	58025408 	.word	0x58025408
 8002ce8:	5802541c 	.word	0x5802541c
 8002cec:	58025430 	.word	0x58025430
 8002cf0:	58025444 	.word	0x58025444
 8002cf4:	58025458 	.word	0x58025458
 8002cf8:	5802546c 	.word	0x5802546c
 8002cfc:	58025480 	.word	0x58025480
 8002d00:	58025494 	.word	0x58025494
 8002d04:	2300      	movs	r3, #0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6d      	ldr	r2, [pc, #436]	; (8002ed4 <HAL_DMA_Abort+0x444>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d04a      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6b      	ldr	r2, [pc, #428]	; (8002ed8 <HAL_DMA_Abort+0x448>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d045      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6a      	ldr	r2, [pc, #424]	; (8002edc <HAL_DMA_Abort+0x44c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d040      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a68      	ldr	r2, [pc, #416]	; (8002ee0 <HAL_DMA_Abort+0x450>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d03b      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a67      	ldr	r2, [pc, #412]	; (8002ee4 <HAL_DMA_Abort+0x454>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d036      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_DMA_Abort+0x458>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d031      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a64      	ldr	r2, [pc, #400]	; (8002eec <HAL_DMA_Abort+0x45c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d02c      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a62      	ldr	r2, [pc, #392]	; (8002ef0 <HAL_DMA_Abort+0x460>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d027      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a61      	ldr	r2, [pc, #388]	; (8002ef4 <HAL_DMA_Abort+0x464>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d022      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5f      	ldr	r2, [pc, #380]	; (8002ef8 <HAL_DMA_Abort+0x468>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01d      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5e      	ldr	r2, [pc, #376]	; (8002efc <HAL_DMA_Abort+0x46c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d018      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5c      	ldr	r2, [pc, #368]	; (8002f00 <HAL_DMA_Abort+0x470>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5b      	ldr	r2, [pc, #364]	; (8002f04 <HAL_DMA_Abort+0x474>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00e      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a59      	ldr	r2, [pc, #356]	; (8002f08 <HAL_DMA_Abort+0x478>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d009      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_DMA_Abort+0x47c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d004      	beq.n	8002dba <HAL_DMA_Abort+0x32a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a56      	ldr	r2, [pc, #344]	; (8002f10 <HAL_DMA_Abort+0x480>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d108      	bne.n	8002dcc <HAL_DMA_Abort+0x33c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e007      	b.n	8002ddc <HAL_DMA_Abort+0x34c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ddc:	e013      	b.n	8002e06 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dde:	f7ff fb1f 	bl	8002420 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d90c      	bls.n	8002e06 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2203      	movs	r2, #3
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e12d      	b.n	8003062 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e5      	bne.n	8002dde <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2f      	ldr	r2, [pc, #188]	; (8002ed4 <HAL_DMA_Abort+0x444>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d04a      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <HAL_DMA_Abort+0x448>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d045      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <HAL_DMA_Abort+0x44c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d040      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <HAL_DMA_Abort+0x450>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d03b      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <HAL_DMA_Abort+0x454>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d036      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <HAL_DMA_Abort+0x458>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d031      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a26      	ldr	r2, [pc, #152]	; (8002eec <HAL_DMA_Abort+0x45c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d02c      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <HAL_DMA_Abort+0x460>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d027      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <HAL_DMA_Abort+0x464>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <HAL_DMA_Abort+0x468>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01d      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a20      	ldr	r2, [pc, #128]	; (8002efc <HAL_DMA_Abort+0x46c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d018      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <HAL_DMA_Abort+0x470>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <HAL_DMA_Abort+0x474>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00e      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <HAL_DMA_Abort+0x478>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d009      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1a      	ldr	r2, [pc, #104]	; (8002f0c <HAL_DMA_Abort+0x47c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_DMA_Abort+0x422>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <HAL_DMA_Abort+0x480>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_DMA_Abort+0x426>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_DMA_Abort+0x428>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d02b      	beq.n	8002f14 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	223f      	movs	r2, #63	; 0x3f
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	e02a      	b.n	8002f2a <HAL_DMA_Abort+0x49a>
 8002ed4:	40020010 	.word	0x40020010
 8002ed8:	40020028 	.word	0x40020028
 8002edc:	40020040 	.word	0x40020040
 8002ee0:	40020058 	.word	0x40020058
 8002ee4:	40020070 	.word	0x40020070
 8002ee8:	40020088 	.word	0x40020088
 8002eec:	400200a0 	.word	0x400200a0
 8002ef0:	400200b8 	.word	0x400200b8
 8002ef4:	40020410 	.word	0x40020410
 8002ef8:	40020428 	.word	0x40020428
 8002efc:	40020440 	.word	0x40020440
 8002f00:	40020458 	.word	0x40020458
 8002f04:	40020470 	.word	0x40020470
 8002f08:	40020488 	.word	0x40020488
 8002f0c:	400204a0 	.word	0x400204a0
 8002f10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2201      	movs	r2, #1
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a4f      	ldr	r2, [pc, #316]	; (800306c <HAL_DMA_Abort+0x5dc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d072      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a4d      	ldr	r2, [pc, #308]	; (8003070 <HAL_DMA_Abort+0x5e0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d06d      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a4c      	ldr	r2, [pc, #304]	; (8003074 <HAL_DMA_Abort+0x5e4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d068      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a4a      	ldr	r2, [pc, #296]	; (8003078 <HAL_DMA_Abort+0x5e8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d063      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a49      	ldr	r2, [pc, #292]	; (800307c <HAL_DMA_Abort+0x5ec>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d05e      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a47      	ldr	r2, [pc, #284]	; (8003080 <HAL_DMA_Abort+0x5f0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d059      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a46      	ldr	r2, [pc, #280]	; (8003084 <HAL_DMA_Abort+0x5f4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d054      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a44      	ldr	r2, [pc, #272]	; (8003088 <HAL_DMA_Abort+0x5f8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d04f      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a43      	ldr	r2, [pc, #268]	; (800308c <HAL_DMA_Abort+0x5fc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d04a      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a41      	ldr	r2, [pc, #260]	; (8003090 <HAL_DMA_Abort+0x600>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d045      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a40      	ldr	r2, [pc, #256]	; (8003094 <HAL_DMA_Abort+0x604>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d040      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3e      	ldr	r2, [pc, #248]	; (8003098 <HAL_DMA_Abort+0x608>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d03b      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3d      	ldr	r2, [pc, #244]	; (800309c <HAL_DMA_Abort+0x60c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d036      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_DMA_Abort+0x610>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d031      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a3a      	ldr	r2, [pc, #232]	; (80030a4 <HAL_DMA_Abort+0x614>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d02c      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a38      	ldr	r2, [pc, #224]	; (80030a8 <HAL_DMA_Abort+0x618>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d027      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a37      	ldr	r2, [pc, #220]	; (80030ac <HAL_DMA_Abort+0x61c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a35      	ldr	r2, [pc, #212]	; (80030b0 <HAL_DMA_Abort+0x620>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a34      	ldr	r2, [pc, #208]	; (80030b4 <HAL_DMA_Abort+0x624>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d018      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a32      	ldr	r2, [pc, #200]	; (80030b8 <HAL_DMA_Abort+0x628>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a31      	ldr	r2, [pc, #196]	; (80030bc <HAL_DMA_Abort+0x62c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2f      	ldr	r2, [pc, #188]	; (80030c0 <HAL_DMA_Abort+0x630>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2e      	ldr	r2, [pc, #184]	; (80030c4 <HAL_DMA_Abort+0x634>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_DMA_Abort+0x58a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <HAL_DMA_Abort+0x638>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_DMA_Abort+0x58e>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_DMA_Abort+0x590>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d015      	beq.n	8003050 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800302c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003044:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800304e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40020010 	.word	0x40020010
 8003070:	40020028 	.word	0x40020028
 8003074:	40020040 	.word	0x40020040
 8003078:	40020058 	.word	0x40020058
 800307c:	40020070 	.word	0x40020070
 8003080:	40020088 	.word	0x40020088
 8003084:	400200a0 	.word	0x400200a0
 8003088:	400200b8 	.word	0x400200b8
 800308c:	40020410 	.word	0x40020410
 8003090:	40020428 	.word	0x40020428
 8003094:	40020440 	.word	0x40020440
 8003098:	40020458 	.word	0x40020458
 800309c:	40020470 	.word	0x40020470
 80030a0:	40020488 	.word	0x40020488
 80030a4:	400204a0 	.word	0x400204a0
 80030a8:	400204b8 	.word	0x400204b8
 80030ac:	58025408 	.word	0x58025408
 80030b0:	5802541c 	.word	0x5802541c
 80030b4:	58025430 	.word	0x58025430
 80030b8:	58025444 	.word	0x58025444
 80030bc:	58025458 	.word	0x58025458
 80030c0:	5802546c 	.word	0x5802546c
 80030c4:	58025480 	.word	0x58025480
 80030c8:	58025494 	.word	0x58025494

080030cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e237      	b.n	800354e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d004      	beq.n	80030f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2280      	movs	r2, #128	; 0x80
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e22c      	b.n	800354e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a5c      	ldr	r2, [pc, #368]	; (800326c <HAL_DMA_Abort_IT+0x1a0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d04a      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a5b      	ldr	r2, [pc, #364]	; (8003270 <HAL_DMA_Abort_IT+0x1a4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d045      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a59      	ldr	r2, [pc, #356]	; (8003274 <HAL_DMA_Abort_IT+0x1a8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d040      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a58      	ldr	r2, [pc, #352]	; (8003278 <HAL_DMA_Abort_IT+0x1ac>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d03b      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a56      	ldr	r2, [pc, #344]	; (800327c <HAL_DMA_Abort_IT+0x1b0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d036      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a55      	ldr	r2, [pc, #340]	; (8003280 <HAL_DMA_Abort_IT+0x1b4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d031      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a53      	ldr	r2, [pc, #332]	; (8003284 <HAL_DMA_Abort_IT+0x1b8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02c      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a52      	ldr	r2, [pc, #328]	; (8003288 <HAL_DMA_Abort_IT+0x1bc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d027      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a50      	ldr	r2, [pc, #320]	; (800328c <HAL_DMA_Abort_IT+0x1c0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d022      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a4f      	ldr	r2, [pc, #316]	; (8003290 <HAL_DMA_Abort_IT+0x1c4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d01d      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4d      	ldr	r2, [pc, #308]	; (8003294 <HAL_DMA_Abort_IT+0x1c8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d018      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4c      	ldr	r2, [pc, #304]	; (8003298 <HAL_DMA_Abort_IT+0x1cc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a4a      	ldr	r2, [pc, #296]	; (800329c <HAL_DMA_Abort_IT+0x1d0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a49      	ldr	r2, [pc, #292]	; (80032a0 <HAL_DMA_Abort_IT+0x1d4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a47      	ldr	r2, [pc, #284]	; (80032a4 <HAL_DMA_Abort_IT+0x1d8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a46      	ldr	r2, [pc, #280]	; (80032a8 <HAL_DMA_Abort_IT+0x1dc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_DMA_Abort_IT+0xcc>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_DMA_Abort_IT+0xce>
 8003198:	2300      	movs	r3, #0
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8086 	beq.w	80032ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2204      	movs	r2, #4
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2f      	ldr	r2, [pc, #188]	; (800326c <HAL_DMA_Abort_IT+0x1a0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d04a      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2e      	ldr	r2, [pc, #184]	; (8003270 <HAL_DMA_Abort_IT+0x1a4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d045      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2c      	ldr	r2, [pc, #176]	; (8003274 <HAL_DMA_Abort_IT+0x1a8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d040      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2b      	ldr	r2, [pc, #172]	; (8003278 <HAL_DMA_Abort_IT+0x1ac>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03b      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <HAL_DMA_Abort_IT+0x1b0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d036      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a28      	ldr	r2, [pc, #160]	; (8003280 <HAL_DMA_Abort_IT+0x1b4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d031      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a26      	ldr	r2, [pc, #152]	; (8003284 <HAL_DMA_Abort_IT+0x1b8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02c      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a25      	ldr	r2, [pc, #148]	; (8003288 <HAL_DMA_Abort_IT+0x1bc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d027      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a23      	ldr	r2, [pc, #140]	; (800328c <HAL_DMA_Abort_IT+0x1c0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d022      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_DMA_Abort_IT+0x1c4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d01d      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a20      	ldr	r2, [pc, #128]	; (8003294 <HAL_DMA_Abort_IT+0x1c8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_DMA_Abort_IT+0x1cc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1d      	ldr	r2, [pc, #116]	; (800329c <HAL_DMA_Abort_IT+0x1d0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <HAL_DMA_Abort_IT+0x1d4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1a      	ldr	r2, [pc, #104]	; (80032a4 <HAL_DMA_Abort_IT+0x1d8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_Abort_IT+0x17c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_DMA_Abort_IT+0x1dc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d108      	bne.n	800325a <HAL_DMA_Abort_IT+0x18e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e178      	b.n	800354c <HAL_DMA_Abort_IT+0x480>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e16f      	b.n	800354c <HAL_DMA_Abort_IT+0x480>
 800326c:	40020010 	.word	0x40020010
 8003270:	40020028 	.word	0x40020028
 8003274:	40020040 	.word	0x40020040
 8003278:	40020058 	.word	0x40020058
 800327c:	40020070 	.word	0x40020070
 8003280:	40020088 	.word	0x40020088
 8003284:	400200a0 	.word	0x400200a0
 8003288:	400200b8 	.word	0x400200b8
 800328c:	40020410 	.word	0x40020410
 8003290:	40020428 	.word	0x40020428
 8003294:	40020440 	.word	0x40020440
 8003298:	40020458 	.word	0x40020458
 800329c:	40020470 	.word	0x40020470
 80032a0:	40020488 	.word	0x40020488
 80032a4:	400204a0 	.word	0x400204a0
 80032a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 020e 	bic.w	r2, r2, #14
 80032ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a6c      	ldr	r2, [pc, #432]	; (8003474 <HAL_DMA_Abort_IT+0x3a8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d04a      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6b      	ldr	r2, [pc, #428]	; (8003478 <HAL_DMA_Abort_IT+0x3ac>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d045      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a69      	ldr	r2, [pc, #420]	; (800347c <HAL_DMA_Abort_IT+0x3b0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d040      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a68      	ldr	r2, [pc, #416]	; (8003480 <HAL_DMA_Abort_IT+0x3b4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d03b      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a66      	ldr	r2, [pc, #408]	; (8003484 <HAL_DMA_Abort_IT+0x3b8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d036      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a65      	ldr	r2, [pc, #404]	; (8003488 <HAL_DMA_Abort_IT+0x3bc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d031      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a63      	ldr	r2, [pc, #396]	; (800348c <HAL_DMA_Abort_IT+0x3c0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d02c      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a62      	ldr	r2, [pc, #392]	; (8003490 <HAL_DMA_Abort_IT+0x3c4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d027      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a60      	ldr	r2, [pc, #384]	; (8003494 <HAL_DMA_Abort_IT+0x3c8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d022      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a5f      	ldr	r2, [pc, #380]	; (8003498 <HAL_DMA_Abort_IT+0x3cc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d01d      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5d      	ldr	r2, [pc, #372]	; (800349c <HAL_DMA_Abort_IT+0x3d0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d018      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5c      	ldr	r2, [pc, #368]	; (80034a0 <HAL_DMA_Abort_IT+0x3d4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d013      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a5a      	ldr	r2, [pc, #360]	; (80034a4 <HAL_DMA_Abort_IT+0x3d8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00e      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a59      	ldr	r2, [pc, #356]	; (80034a8 <HAL_DMA_Abort_IT+0x3dc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d009      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a57      	ldr	r2, [pc, #348]	; (80034ac <HAL_DMA_Abort_IT+0x3e0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_DMA_Abort_IT+0x290>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a56      	ldr	r2, [pc, #344]	; (80034b0 <HAL_DMA_Abort_IT+0x3e4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d108      	bne.n	800336e <HAL_DMA_Abort_IT+0x2a2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e007      	b.n	800337e <HAL_DMA_Abort_IT+0x2b2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a3c      	ldr	r2, [pc, #240]	; (8003474 <HAL_DMA_Abort_IT+0x3a8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d072      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a3a      	ldr	r2, [pc, #232]	; (8003478 <HAL_DMA_Abort_IT+0x3ac>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d06d      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a39      	ldr	r2, [pc, #228]	; (800347c <HAL_DMA_Abort_IT+0x3b0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d068      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a37      	ldr	r2, [pc, #220]	; (8003480 <HAL_DMA_Abort_IT+0x3b4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d063      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a36      	ldr	r2, [pc, #216]	; (8003484 <HAL_DMA_Abort_IT+0x3b8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d05e      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a34      	ldr	r2, [pc, #208]	; (8003488 <HAL_DMA_Abort_IT+0x3bc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d059      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a33      	ldr	r2, [pc, #204]	; (800348c <HAL_DMA_Abort_IT+0x3c0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d054      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a31      	ldr	r2, [pc, #196]	; (8003490 <HAL_DMA_Abort_IT+0x3c4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d04f      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a30      	ldr	r2, [pc, #192]	; (8003494 <HAL_DMA_Abort_IT+0x3c8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d04a      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2e      	ldr	r2, [pc, #184]	; (8003498 <HAL_DMA_Abort_IT+0x3cc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d045      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2d      	ldr	r2, [pc, #180]	; (800349c <HAL_DMA_Abort_IT+0x3d0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d040      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_DMA_Abort_IT+0x3d4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d03b      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2a      	ldr	r2, [pc, #168]	; (80034a4 <HAL_DMA_Abort_IT+0x3d8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d036      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <HAL_DMA_Abort_IT+0x3dc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d031      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a27      	ldr	r2, [pc, #156]	; (80034ac <HAL_DMA_Abort_IT+0x3e0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d02c      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_DMA_Abort_IT+0x3e4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d027      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <HAL_DMA_Abort_IT+0x3e8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d022      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <HAL_DMA_Abort_IT+0x3ec>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01d      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a21      	ldr	r2, [pc, #132]	; (80034bc <HAL_DMA_Abort_IT+0x3f0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d018      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_DMA_Abort_IT+0x3f4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <HAL_DMA_Abort_IT+0x3f8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00e      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <HAL_DMA_Abort_IT+0x3fc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_DMA_Abort_IT+0x400>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_DMA_Abort_IT+0x3a2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_DMA_Abort_IT+0x404>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d132      	bne.n	80034d4 <HAL_DMA_Abort_IT+0x408>
 800346e:	2301      	movs	r3, #1
 8003470:	e031      	b.n	80034d6 <HAL_DMA_Abort_IT+0x40a>
 8003472:	bf00      	nop
 8003474:	40020010 	.word	0x40020010
 8003478:	40020028 	.word	0x40020028
 800347c:	40020040 	.word	0x40020040
 8003480:	40020058 	.word	0x40020058
 8003484:	40020070 	.word	0x40020070
 8003488:	40020088 	.word	0x40020088
 800348c:	400200a0 	.word	0x400200a0
 8003490:	400200b8 	.word	0x400200b8
 8003494:	40020410 	.word	0x40020410
 8003498:	40020428 	.word	0x40020428
 800349c:	40020440 	.word	0x40020440
 80034a0:	40020458 	.word	0x40020458
 80034a4:	40020470 	.word	0x40020470
 80034a8:	40020488 	.word	0x40020488
 80034ac:	400204a0 	.word	0x400204a0
 80034b0:	400204b8 	.word	0x400204b8
 80034b4:	58025408 	.word	0x58025408
 80034b8:	5802541c 	.word	0x5802541c
 80034bc:	58025430 	.word	0x58025430
 80034c0:	58025444 	.word	0x58025444
 80034c4:	58025458 	.word	0x58025458
 80034c8:	5802546c 	.word	0x5802546c
 80034cc:	58025480 	.word	0x58025480
 80034d0:	58025494 	.word	0x58025494
 80034d4:	2300      	movs	r3, #0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d028      	beq.n	800352c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2201      	movs	r2, #1
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003508:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00c      	beq.n	800352c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003520:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800352a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop

08003558 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0cf      	b.n	800370a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2223      	movs	r2, #35	; 0x23
 8003578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fe f849 	bl	8001614 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003582:	4b64      	ldr	r3, [pc, #400]	; (8003714 <HAL_ETH_Init+0x1bc>)
 8003584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003588:	4a62      	ldr	r2, [pc, #392]	; (8003714 <HAL_ETH_Init+0x1bc>)
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003592:	4b60      	ldr	r3, [pc, #384]	; (8003714 <HAL_ETH_Init+0x1bc>)
 8003594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7a1b      	ldrb	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80035a8:	2000      	movs	r0, #0
 80035aa:	f7fe ff75 	bl	8002498 <HAL_SYSCFG_ETHInterfaceSelect>
 80035ae:	e003      	b.n	80035b8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80035b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80035b4:	f7fe ff70 	bl	8002498 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80035b8:	4b57      	ldr	r3, [pc, #348]	; (8003718 <HAL_ETH_Init+0x1c0>)
 80035ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035d4:	f7fe ff24 	bl	8002420 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80035da:	e011      	b.n	8003600 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80035dc:	f7fe ff20 	bl	8002420 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035ea:	d909      	bls.n	8003600 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2204      	movs	r2, #4
 80035f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	22e0      	movs	r2, #224	; 0xe0
 80035f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e084      	b.n	800370a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e4      	bne.n	80035dc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f886 	bl	8003724 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003618:	f001 ff10 	bl	800543c <HAL_RCC_GetHCLKFreq>
 800361c:	4603      	mov	r3, r0
 800361e:	4a3f      	ldr	r2, [pc, #252]	; (800371c <HAL_ETH_Init+0x1c4>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	0c9a      	lsrs	r2, r3, #18
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3a01      	subs	r2, #1
 800362c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fa71 	bl	8003b18 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003642:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800364e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003652:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	22e0      	movs	r2, #224	; 0xe0
 800366e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e049      	b.n	800370a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003682:	4b27      	ldr	r3, [pc, #156]	; (8003720 <HAL_ETH_Init+0x1c8>)
 8003684:	4013      	ands	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6952      	ldr	r2, [r2, #20]
 800368a:	0051      	lsls	r1, r2, #1
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	430b      	orrs	r3, r1
 8003692:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003696:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fad9 	bl	8003c52 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fb1f 	bl	8003ce4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	3305      	adds	r3, #5
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	021a      	lsls	r2, r3, #8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	3303      	adds	r3, #3
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	061a      	lsls	r2, r3, #24
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	3302      	adds	r3, #2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	3301      	adds	r3, #1
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80036e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80036f2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80036f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2210      	movs	r2, #16
 8003704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	58024400 	.word	0x58024400
 8003718:	58000400 	.word	0x58000400
 800371c:	431bde83 	.word	0x431bde83
 8003720:	ffff8001 	.word	0xffff8001

08003724 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003734:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800373c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800373e:	f001 fe7d 	bl	800543c <HAL_RCC_GetHCLKFreq>
 8003742:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d908      	bls.n	800375e <HAL_ETH_SetMDIOClockRange+0x3a>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d804      	bhi.n	800375e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e027      	b.n	80037ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d908      	bls.n	8003778 <HAL_ETH_SetMDIOClockRange+0x54>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d204      	bcs.n	8003778 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e01a      	b.n	80037ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4a13      	ldr	r2, [pc, #76]	; (80037c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d303      	bcc.n	8003788 <HAL_ETH_SetMDIOClockRange+0x64>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4a12      	ldr	r2, [pc, #72]	; (80037cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d911      	bls.n	80037ac <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4a10      	ldr	r2, [pc, #64]	; (80037cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d908      	bls.n	80037a2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d804      	bhi.n	80037a2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e005      	b.n	80037ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e000      	b.n	80037ae <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80037ac:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	01312cff 	.word	0x01312cff
 80037c4:	02160ebf 	.word	0x02160ebf
 80037c8:	03938700 	.word	0x03938700
 80037cc:	05f5e0ff 	.word	0x05f5e0ff
 80037d0:	08f0d17f 	.word	0x08f0d17f

080037d4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80037e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	791b      	ldrb	r3, [r3, #4]
 80037ec:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80037ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	7b1b      	ldrb	r3, [r3, #12]
 80037f4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80037f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	7b5b      	ldrb	r3, [r3, #13]
 80037fc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80037fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	7b9b      	ldrb	r3, [r3, #14]
 8003804:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003806:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	7bdb      	ldrb	r3, [r3, #15]
 800380c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800380e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	7c12      	ldrb	r2, [r2, #16]
 8003814:	2a00      	cmp	r2, #0
 8003816:	d102      	bne.n	800381e <ETH_SetMACConfig+0x4a>
 8003818:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800381c:	e000      	b.n	8003820 <ETH_SetMACConfig+0x4c>
 800381e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003820:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	7c52      	ldrb	r2, [r2, #17]
 8003826:	2a00      	cmp	r2, #0
 8003828:	d102      	bne.n	8003830 <ETH_SetMACConfig+0x5c>
 800382a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800382e:	e000      	b.n	8003832 <ETH_SetMACConfig+0x5e>
 8003830:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003832:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	7c9b      	ldrb	r3, [r3, #18]
 8003838:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800383a:	431a      	orrs	r2, r3
               macconf->Speed |
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003840:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	7f1b      	ldrb	r3, [r3, #28]
 800384c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800384e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	7f5b      	ldrb	r3, [r3, #29]
 8003854:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003856:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	7f92      	ldrb	r2, [r2, #30]
 800385c:	2a00      	cmp	r2, #0
 800385e:	d102      	bne.n	8003866 <ETH_SetMACConfig+0x92>
 8003860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003864:	e000      	b.n	8003868 <ETH_SetMACConfig+0x94>
 8003866:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003868:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	7fdb      	ldrb	r3, [r3, #31]
 800386e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003870:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003878:	2a00      	cmp	r2, #0
 800387a:	d102      	bne.n	8003882 <ETH_SetMACConfig+0xae>
 800387c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003880:	e000      	b.n	8003884 <ETH_SetMACConfig+0xb0>
 8003882:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003884:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800388a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003892:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003894:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <ETH_SetMACConfig+0x22c>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	68f9      	ldr	r1, [r7, #12]
 80038ae:	430b      	orrs	r3, r1
 80038b0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038be:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80038c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038c8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80038ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80038d2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80038d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80038dc:	2a00      	cmp	r2, #0
 80038de:	d102      	bne.n	80038e6 <ETH_SetMACConfig+0x112>
 80038e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038e4:	e000      	b.n	80038e8 <ETH_SetMACConfig+0x114>
 80038e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80038e8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	4b42      	ldr	r3, [pc, #264]	; (8003a04 <ETH_SetMACConfig+0x230>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	430b      	orrs	r3, r1
 8003904:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <ETH_SetMACConfig+0x234>)
 800391e:	4013      	ands	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	430b      	orrs	r3, r1
 8003928:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003930:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003936:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800393e:	2a00      	cmp	r2, #0
 8003940:	d101      	bne.n	8003946 <ETH_SetMACConfig+0x172>
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	e000      	b.n	8003948 <ETH_SetMACConfig+0x174>
 8003946:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003948:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800395a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800395e:	4013      	ands	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	68f9      	ldr	r1, [r7, #12]
 8003966:	430b      	orrs	r3, r1
 8003968:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003970:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003978:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	f023 0103 	bic.w	r1, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	430a      	orrs	r2, r1
 8003992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800399e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80039ba:	2a00      	cmp	r2, #0
 80039bc:	d101      	bne.n	80039c2 <ETH_SetMACConfig+0x1ee>
 80039be:	2240      	movs	r2, #64	; 0x40
 80039c0:	e000      	b.n	80039c4 <ETH_SetMACConfig+0x1f0>
 80039c2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80039c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80039cc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80039ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80039d6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80039e4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	00048083 	.word	0x00048083
 8003a04:	c0f88000 	.word	0xc0f88000
 8003a08:	fffffef0 	.word	0xfffffef0

08003a0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b38      	ldr	r3, [pc, #224]	; (8003b04 <ETH_SetDMAConfig+0xf8>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	6811      	ldr	r1, [r2, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a32:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	791b      	ldrb	r3, [r3, #4]
 8003a38:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003a3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	7b1b      	ldrb	r3, [r3, #12]
 8003a44:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <ETH_SetDMAConfig+0xfc>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	68f9      	ldr	r1, [r7, #12]
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a64:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	7b5b      	ldrb	r3, [r3, #13]
 8003a6a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <ETH_SetDMAConfig+0x100>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	68f9      	ldr	r1, [r7, #12]
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a90:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	7d1b      	ldrb	r3, [r3, #20]
 8003a9c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003a9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	7f5b      	ldrb	r3, [r3, #29]
 8003aa4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003ab6:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <ETH_SetDMAConfig+0x104>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ac6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	7f1b      	ldrb	r3, [r3, #28]
 8003ace:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <ETH_SetDMAConfig+0x108>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	68f9      	ldr	r1, [r7, #12]
 8003aee:	430b      	orrs	r3, r1
 8003af0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003af4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	ffff87fd 	.word	0xffff87fd
 8003b08:	ffff2ffe 	.word	0xffff2ffe
 8003b0c:	fffec000 	.word	0xfffec000
 8003b10:	ffc0efef 	.word	0xffc0efef
 8003b14:	7fc0ffff 	.word	0x7fc0ffff

08003b18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b0a4      	sub	sp, #144	; 0x90
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b26:	2300      	movs	r3, #0
 8003b28:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b58:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003b70:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003b74:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003b92:	2300      	movs	r3, #0
 8003b94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003bc2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bcc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fde6 	bl	80037d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003c38:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003c3e:	f107 0308 	add.w	r3, r7, #8
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fee1 	bl	8003a0c <ETH_SetDMAConfig>
}
 8003c4a:	bf00      	nop
 8003c4c:	3790      	adds	r7, #144	; 0x90
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e01d      	b.n	8003c9c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68d9      	ldr	r1, [r3, #12]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	440b      	add	r3, r1
 8003c70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2200      	movs	r2, #0
 8003c82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	3206      	adds	r2, #6
 8003c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d9de      	bls.n	8003c60 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e023      	b.n	8003d3a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6919      	ldr	r1, [r3, #16]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	440b      	add	r3, r1
 8003d02:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	3212      	adds	r2, #18
 8003d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d9d8      	bls.n	8003cf2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d66:	461a      	mov	r2, r3
 8003d68:	2303      	movs	r3, #3
 8003d6a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dae:	4b89      	ldr	r3, [pc, #548]	; (8003fd4 <HAL_GPIO_Init+0x234>)
 8003db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003db2:	e194      	b.n	80040de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2101      	movs	r1, #1
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8186 	beq.w	80040d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d005      	beq.n	8003de4 <HAL_GPIO_Init+0x44>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d130      	bne.n	8003e46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 0201 	and.w	r2, r3, #1
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d017      	beq.n	8003e82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d123      	bne.n	8003ed6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	08da      	lsrs	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3208      	adds	r2, #8
 8003e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	220f      	movs	r2, #15
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	08da      	lsrs	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3208      	adds	r2, #8
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0203 	and.w	r2, r3, #3
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80e0 	beq.w	80040d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f18:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_GPIO_Init+0x238>)
 8003f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f1e:	4a2e      	ldr	r2, [pc, #184]	; (8003fd8 <HAL_GPIO_Init+0x238>)
 8003f20:	f043 0302 	orr.w	r3, r3, #2
 8003f24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_GPIO_Init+0x238>)
 8003f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f36:	4a29      	ldr	r2, [pc, #164]	; (8003fdc <HAL_GPIO_Init+0x23c>)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a20      	ldr	r2, [pc, #128]	; (8003fe0 <HAL_GPIO_Init+0x240>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d052      	beq.n	8004008 <HAL_GPIO_Init+0x268>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <HAL_GPIO_Init+0x244>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d031      	beq.n	8003fce <HAL_GPIO_Init+0x22e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_GPIO_Init+0x248>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <HAL_GPIO_Init+0x22a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1d      	ldr	r2, [pc, #116]	; (8003fec <HAL_GPIO_Init+0x24c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d025      	beq.n	8003fc6 <HAL_GPIO_Init+0x226>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_GPIO_Init+0x250>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01f      	beq.n	8003fc2 <HAL_GPIO_Init+0x222>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1b      	ldr	r2, [pc, #108]	; (8003ff4 <HAL_GPIO_Init+0x254>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d019      	beq.n	8003fbe <HAL_GPIO_Init+0x21e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <HAL_GPIO_Init+0x258>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_GPIO_Init+0x21a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <HAL_GPIO_Init+0x25c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00d      	beq.n	8003fb6 <HAL_GPIO_Init+0x216>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <HAL_GPIO_Init+0x260>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_GPIO_Init+0x264>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_GPIO_Init+0x20e>
 8003faa:	2309      	movs	r3, #9
 8003fac:	e02d      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fae:	230a      	movs	r3, #10
 8003fb0:	e02b      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	e029      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fb6:	2307      	movs	r3, #7
 8003fb8:	e027      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fba:	2306      	movs	r3, #6
 8003fbc:	e025      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	e023      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	e021      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e01f      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e01d      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e01b      	b.n	800400a <HAL_GPIO_Init+0x26a>
 8003fd2:	bf00      	nop
 8003fd4:	58000080 	.word	0x58000080
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	58000400 	.word	0x58000400
 8003fe0:	58020000 	.word	0x58020000
 8003fe4:	58020400 	.word	0x58020400
 8003fe8:	58020800 	.word	0x58020800
 8003fec:	58020c00 	.word	0x58020c00
 8003ff0:	58021000 	.word	0x58021000
 8003ff4:	58021400 	.word	0x58021400
 8003ff8:	58021800 	.word	0x58021800
 8003ffc:	58021c00 	.word	0x58021c00
 8004000:	58022000 	.word	0x58022000
 8004004:	58022400 	.word	0x58022400
 8004008:	2300      	movs	r3, #0
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	f002 0203 	and.w	r2, r2, #3
 8004010:	0092      	lsls	r2, r2, #2
 8004012:	4093      	lsls	r3, r2
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800401a:	4938      	ldr	r1, [pc, #224]	; (80040fc <HAL_GPIO_Init+0x35c>)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	3302      	adds	r3, #2
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800404e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800407c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	3301      	adds	r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f47f ae63 	bne.w	8003db4 <HAL_GPIO_Init+0x14>
  }
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	3724      	adds	r7, #36	; 0x24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	58000400 	.word	0x58000400

08004100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
 800410c:	4613      	mov	r3, r2
 800410e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004110:	787b      	ldrb	r3, [r7, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800411c:	e003      	b.n	8004126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800411e:	887b      	ldrh	r3, [r7, #2]
 8004120:	041a      	lsls	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	619a      	str	r2, [r3, #24]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	4603      	mov	r3, r0
 800413a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800414c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	4618      	mov	r0, r3
 800415a:	f7fc fc0d 	bl	8000978 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004170:	4a08      	ldr	r2, [pc, #32]	; (8004194 <HAL_HSEM_FastTake+0x2c>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3320      	adds	r3, #32
 8004176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417a:	4a07      	ldr	r2, [pc, #28]	; (8004198 <HAL_HSEM_FastTake+0x30>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	58026400 	.word	0x58026400
 8004198:	80000300 	.word	0x80000300

0800419c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80041a6:	4906      	ldr	r1, [pc, #24]	; (80041c0 <HAL_HSEM_Release+0x24>)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	58026400 	.word	0x58026400

080041c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c6:	b08f      	sub	sp, #60	; 0x3c
 80041c8:	af0a      	add	r7, sp, #40	; 0x28
 80041ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e116      	b.n	8004404 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fd fb71 	bl	80018d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f005 fc13 	bl	8009a40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	687e      	ldr	r6, [r7, #4]
 8004222:	466d      	mov	r5, sp
 8004224:	f106 0410 	add.w	r4, r6, #16
 8004228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800422a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800422c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800422e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004230:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004234:	e885 0003 	stmia.w	r5, {r0, r1}
 8004238:	1d33      	adds	r3, r6, #4
 800423a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800423c:	6838      	ldr	r0, [r7, #0]
 800423e:	f005 fb91 	bl	8009964 <USB_CoreInit>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0d7      	b.n	8004404 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2100      	movs	r1, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f005 fc01 	bl	8009a62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	e04a      	b.n	80042fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	333d      	adds	r3, #61	; 0x3d
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800427a:	7bfa      	ldrb	r2, [r7, #15]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	333c      	adds	r3, #60	; 0x3c
 800428a:	7bfa      	ldrb	r2, [r7, #15]
 800428c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	b298      	uxth	r0, r3
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	3356      	adds	r3, #86	; 0x56
 80042a2:	4602      	mov	r2, r0
 80042a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	3340      	adds	r3, #64	; 0x40
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	3344      	adds	r3, #68	; 0x44
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	3348      	adds	r3, #72	; 0x48
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	334c      	adds	r3, #76	; 0x4c
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	3301      	adds	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d3af      	bcc.n	8004266 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e044      	b.n	8004396 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800437a:	7bfa      	ldrb	r2, [r7, #15]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	3301      	adds	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d3b5      	bcc.n	800430c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	687e      	ldr	r6, [r7, #4]
 80043a8:	466d      	mov	r5, sp
 80043aa:	f106 0410 	add.w	r4, r6, #16
 80043ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80043be:	1d33      	adds	r3, r6, #4
 80043c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043c2:	6838      	ldr	r0, [r7, #0]
 80043c4:	f005 fb9a 	bl	8009afc <USB_DevInit>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e014      	b.n	8004404 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d102      	bne.n	80043f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f80a 	bl	800440c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f005 fd58 	bl	8009eb2 <USB_DevDisconnect>

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800440c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_PCDEx_ActivateLPM+0x44>)
 800443c:	4313      	orrs	r3, r2
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	10000003 	.word	0x10000003

08004454 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800445c:	4b29      	ldr	r3, [pc, #164]	; (8004504 <HAL_PWREx_ConfigSupply+0xb0>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	2b06      	cmp	r3, #6
 8004466:	d00a      	beq.n	800447e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004468:	4b26      	ldr	r3, [pc, #152]	; (8004504 <HAL_PWREx_ConfigSupply+0xb0>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e040      	b.n	80044fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e03e      	b.n	80044fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <HAL_PWREx_ConfigSupply+0xb0>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004486:	491f      	ldr	r1, [pc, #124]	; (8004504 <HAL_PWREx_ConfigSupply+0xb0>)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4313      	orrs	r3, r2
 800448c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800448e:	f7fd ffc7 	bl	8002420 <HAL_GetTick>
 8004492:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004494:	e009      	b.n	80044aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004496:	f7fd ffc3 	bl	8002420 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a4:	d901      	bls.n	80044aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e028      	b.n	80044fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044aa:	4b16      	ldr	r3, [pc, #88]	; (8004504 <HAL_PWREx_ConfigSupply+0xb0>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b6:	d1ee      	bne.n	8004496 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b1e      	cmp	r3, #30
 80044bc:	d008      	beq.n	80044d0 <HAL_PWREx_ConfigSupply+0x7c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b2e      	cmp	r3, #46	; 0x2e
 80044c2:	d005      	beq.n	80044d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b1d      	cmp	r3, #29
 80044c8:	d002      	beq.n	80044d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b2d      	cmp	r3, #45	; 0x2d
 80044ce:	d114      	bne.n	80044fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80044d0:	f7fd ffa6 	bl	8002420 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044d6:	e009      	b.n	80044ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044d8:	f7fd ffa2 	bl	8002420 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044e6:	d901      	bls.n	80044ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_PWREx_ConfigSupply+0xb0>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f8:	d1ee      	bne.n	80044d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	58024800 	.word	0x58024800

08004508 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004516:	60d3      	str	r3, [r2, #12]
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	58024800 	.word	0x58024800

08004528 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08c      	sub	sp, #48	; 0x30
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f000 bc48 	b.w	8004dcc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8088 	beq.w	800465a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800454a:	4b99      	ldr	r3, [pc, #612]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004554:	4b96      	ldr	r3, [pc, #600]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	2b10      	cmp	r3, #16
 800455e:	d007      	beq.n	8004570 <HAL_RCC_OscConfig+0x48>
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	2b18      	cmp	r3, #24
 8004564:	d111      	bne.n	800458a <HAL_RCC_OscConfig+0x62>
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d10c      	bne.n	800458a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	4b8f      	ldr	r3, [pc, #572]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d06d      	beq.n	8004658 <HAL_RCC_OscConfig+0x130>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d169      	bne.n	8004658 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f000 bc21 	b.w	8004dcc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004592:	d106      	bne.n	80045a2 <HAL_RCC_OscConfig+0x7a>
 8004594:	4b86      	ldr	r3, [pc, #536]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a85      	ldr	r2, [pc, #532]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 800459a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	e02e      	b.n	8004600 <HAL_RCC_OscConfig+0xd8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x9c>
 80045aa:	4b81      	ldr	r3, [pc, #516]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a80      	ldr	r2, [pc, #512]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b7e      	ldr	r3, [pc, #504]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a7d      	ldr	r2, [pc, #500]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e01d      	b.n	8004600 <HAL_RCC_OscConfig+0xd8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0xc0>
 80045ce:	4b78      	ldr	r3, [pc, #480]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a77      	ldr	r2, [pc, #476]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b75      	ldr	r3, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a74      	ldr	r2, [pc, #464]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e00b      	b.n	8004600 <HAL_RCC_OscConfig+0xd8>
 80045e8:	4b71      	ldr	r3, [pc, #452]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a70      	ldr	r2, [pc, #448]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b6e      	ldr	r3, [pc, #440]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6d      	ldr	r2, [pc, #436]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80045fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd ff0a 	bl	8002420 <HAL_GetTick>
 800460c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd ff06 	bl	8002420 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e3d4      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004622:	4b63      	ldr	r3, [pc, #396]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0xe8>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fd fef6 	bl	8002420 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004638:	f7fd fef2 	bl	8002420 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e3c0      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800464a:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x110>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 80ca 	beq.w	80047fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004668:	4b51      	ldr	r3, [pc, #324]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004670:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004672:	4b4f      	ldr	r3, [pc, #316]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_RCC_OscConfig+0x166>
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	2b18      	cmp	r3, #24
 8004682:	d156      	bne.n	8004732 <HAL_RCC_OscConfig+0x20a>
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d151      	bne.n	8004732 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800468e:	4b48      	ldr	r3, [pc, #288]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_RCC_OscConfig+0x17e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e392      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046a6:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 0219 	bic.w	r2, r3, #25
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	493f      	ldr	r1, [pc, #252]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd feb2 	bl	8002420 <HAL_GetTick>
 80046bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fd feae 	bl	8002420 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e37c      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046d2:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046de:	f7fd fecf 	bl	8002480 <HAL_GetREVID>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d817      	bhi.n	800471c <HAL_RCC_OscConfig+0x1f4>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d108      	bne.n	8004706 <HAL_RCC_OscConfig+0x1de>
 80046f4:	4b2e      	ldr	r3, [pc, #184]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80046fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004702:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004704:	e07a      	b.n	80047fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004706:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	031b      	lsls	r3, r3, #12
 8004714:	4926      	ldr	r1, [pc, #152]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800471a:	e06f      	b.n	80047fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471c:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	4921      	ldr	r1, [pc, #132]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004730:	e064      	b.n	80047fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d047      	beq.n	80047ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800473a:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 0219 	bic.w	r2, r3, #25
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	491a      	ldr	r1, [pc, #104]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fd fe68 	bl	8002420 <HAL_GetTick>
 8004750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004754:	f7fd fe64 	bl	8002420 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e332      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004772:	f7fd fe85 	bl	8002480 <HAL_GetREVID>
 8004776:	4603      	mov	r3, r0
 8004778:	f241 0203 	movw	r2, #4099	; 0x1003
 800477c:	4293      	cmp	r3, r2
 800477e:	d819      	bhi.n	80047b4 <HAL_RCC_OscConfig+0x28c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d108      	bne.n	800479a <HAL_RCC_OscConfig+0x272>
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004790:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 8004792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004796:	6053      	str	r3, [r2, #4]
 8004798:	e030      	b.n	80047fc <HAL_RCC_OscConfig+0x2d4>
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	031b      	lsls	r3, r3, #12
 80047a8:	4901      	ldr	r1, [pc, #4]	; (80047b0 <HAL_RCC_OscConfig+0x288>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
 80047ae:	e025      	b.n	80047fc <HAL_RCC_OscConfig+0x2d4>
 80047b0:	58024400 	.word	0x58024400
 80047b4:	4b9a      	ldr	r3, [pc, #616]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	4997      	ldr	r1, [pc, #604]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	604b      	str	r3, [r1, #4]
 80047c8:	e018      	b.n	80047fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ca:	4b95      	ldr	r3, [pc, #596]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a94      	ldr	r2, [pc, #592]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fd fe23 	bl	8002420 <HAL_GetTick>
 80047da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047de:	f7fd fe1f 	bl	8002420 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e2ed      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047f0:	4b8b      	ldr	r3, [pc, #556]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a9 	beq.w	800495c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480a:	4b85      	ldr	r3, [pc, #532]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004812:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004814:	4b82      	ldr	r3, [pc, #520]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d007      	beq.n	8004830 <HAL_RCC_OscConfig+0x308>
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b18      	cmp	r3, #24
 8004824:	d13a      	bne.n	800489c <HAL_RCC_OscConfig+0x374>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d135      	bne.n	800489c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004830:	4b7b      	ldr	r3, [pc, #492]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCC_OscConfig+0x320>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d001      	beq.n	8004848 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e2c1      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004848:	f7fd fe1a 	bl	8002480 <HAL_GetREVID>
 800484c:	4603      	mov	r3, r0
 800484e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004852:	4293      	cmp	r3, r2
 8004854:	d817      	bhi.n	8004886 <HAL_RCC_OscConfig+0x35e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	2b20      	cmp	r3, #32
 800485c:	d108      	bne.n	8004870 <HAL_RCC_OscConfig+0x348>
 800485e:	4b70      	ldr	r3, [pc, #448]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004866:	4a6e      	ldr	r2, [pc, #440]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800486c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800486e:	e075      	b.n	800495c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004870:	4b6b      	ldr	r3, [pc, #428]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	069b      	lsls	r3, r3, #26
 800487e:	4968      	ldr	r1, [pc, #416]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004884:	e06a      	b.n	800495c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004886:	4b66      	ldr	r3, [pc, #408]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	061b      	lsls	r3, r3, #24
 8004894:	4962      	ldr	r1, [pc, #392]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800489a:	e05f      	b.n	800495c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d042      	beq.n	800492a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048a4:	4b5e      	ldr	r3, [pc, #376]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a5d      	ldr	r2, [pc, #372]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80048aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fd fdb6 	bl	8002420 <HAL_GetTick>
 80048b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048b8:	f7fd fdb2 	bl	8002420 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e280      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ca:	4b55      	ldr	r3, [pc, #340]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048d6:	f7fd fdd3 	bl	8002480 <HAL_GetREVID>
 80048da:	4603      	mov	r3, r0
 80048dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d817      	bhi.n	8004914 <HAL_RCC_OscConfig+0x3ec>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d108      	bne.n	80048fe <HAL_RCC_OscConfig+0x3d6>
 80048ec:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048f4:	4a4a      	ldr	r2, [pc, #296]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80048f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048fa:	6053      	str	r3, [r2, #4]
 80048fc:	e02e      	b.n	800495c <HAL_RCC_OscConfig+0x434>
 80048fe:	4b48      	ldr	r3, [pc, #288]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	069b      	lsls	r3, r3, #26
 800490c:	4944      	ldr	r1, [pc, #272]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
 8004912:	e023      	b.n	800495c <HAL_RCC_OscConfig+0x434>
 8004914:	4b42      	ldr	r3, [pc, #264]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	493f      	ldr	r1, [pc, #252]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004924:	4313      	orrs	r3, r2
 8004926:	60cb      	str	r3, [r1, #12]
 8004928:	e018      	b.n	800495c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800492a:	4b3d      	ldr	r3, [pc, #244]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a3c      	ldr	r2, [pc, #240]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fd fd73 	bl	8002420 <HAL_GetTick>
 800493a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800493e:	f7fd fd6f 	bl	8002420 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e23d      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004950:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f0      	bne.n	800493e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d036      	beq.n	80049d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d019      	beq.n	80049a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004974:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fd fd50 	bl	8002420 <HAL_GetTick>
 8004980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004984:	f7fd fd4c 	bl	8002420 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e21a      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004996:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x45c>
 80049a2:	e018      	b.n	80049d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a4:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80049a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a8:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fd fd36 	bl	8002420 <HAL_GetTick>
 80049b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b8:	f7fd fd32 	bl	8002420 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e200      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d039      	beq.n	8004a56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049ea:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 80049f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049f6:	f7fd fd13 	bl	8002420 <HAL_GetTick>
 80049fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049fe:	f7fd fd0f 	bl	8002420 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e1dd      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_RCC_OscConfig+0x4f8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x4d6>
 8004a1c:	e01b      	b.n	8004a56 <HAL_RCC_OscConfig+0x52e>
 8004a1e:	bf00      	nop
 8004a20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a24:	4b9b      	ldr	r3, [pc, #620]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a9a      	ldr	r2, [pc, #616]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a30:	f7fd fcf6 	bl	8002420 <HAL_GetTick>
 8004a34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a38:	f7fd fcf2 	bl	8002420 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e1c0      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a4a:	4b92      	ldr	r3, [pc, #584]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8081 	beq.w	8004b66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a64:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <HAL_RCC_OscConfig+0x770>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a8b      	ldr	r2, [pc, #556]	; (8004c98 <HAL_RCC_OscConfig+0x770>)
 8004a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a70:	f7fd fcd6 	bl	8002420 <HAL_GetTick>
 8004a74:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a78:	f7fd fcd2 	bl	8002420 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	; 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e1a0      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a8a:	4b83      	ldr	r3, [pc, #524]	; (8004c98 <HAL_RCC_OscConfig+0x770>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_OscConfig+0x584>
 8004a9e:	4b7d      	ldr	r3, [pc, #500]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a7c      	ldr	r2, [pc, #496]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aaa:	e02d      	b.n	8004b08 <HAL_RCC_OscConfig+0x5e0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10c      	bne.n	8004ace <HAL_RCC_OscConfig+0x5a6>
 8004ab4:	4b77      	ldr	r3, [pc, #476]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a76      	ldr	r2, [pc, #472]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac0:	4b74      	ldr	r3, [pc, #464]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a73      	ldr	r2, [pc, #460]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004ac6:	f023 0304 	bic.w	r3, r3, #4
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
 8004acc:	e01c      	b.n	8004b08 <HAL_RCC_OscConfig+0x5e0>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x5c8>
 8004ad6:	4b6f      	ldr	r3, [pc, #444]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a6e      	ldr	r2, [pc, #440]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004adc:	f043 0304 	orr.w	r3, r3, #4
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae2:	4b6c      	ldr	r3, [pc, #432]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a6b      	ldr	r2, [pc, #428]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70
 8004aee:	e00b      	b.n	8004b08 <HAL_RCC_OscConfig+0x5e0>
 8004af0:	4b68      	ldr	r3, [pc, #416]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	4a67      	ldr	r2, [pc, #412]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	6713      	str	r3, [r2, #112]	; 0x70
 8004afc:	4b65      	ldr	r3, [pc, #404]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a64      	ldr	r2, [pc, #400]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004b02:	f023 0304 	bic.w	r3, r3, #4
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d015      	beq.n	8004b3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fd fc86 	bl	8002420 <HAL_GetTick>
 8004b14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fd fc82 	bl	8002420 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e14e      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b2e:	4b59      	ldr	r3, [pc, #356]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ee      	beq.n	8004b18 <HAL_RCC_OscConfig+0x5f0>
 8004b3a:	e014      	b.n	8004b66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fd fc70 	bl	8002420 <HAL_GetTick>
 8004b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fd fc6c 	bl	8002420 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e138      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b5a:	4b4e      	ldr	r3, [pc, #312]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ee      	bne.n	8004b44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 812d 	beq.w	8004dca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b70:	4b48      	ldr	r3, [pc, #288]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b78:	2b18      	cmp	r3, #24
 8004b7a:	f000 80bd 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	f040 809e 	bne.w	8004cc4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b88:	4b42      	ldr	r3, [pc, #264]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a41      	ldr	r2, [pc, #260]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd fc44 	bl	8002420 <HAL_GetTick>
 8004b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fd fc40 	bl	8002420 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e10e      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bae:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bba:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <HAL_RCC_OscConfig+0x774>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bca:	0112      	lsls	r2, r2, #4
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	4931      	ldr	r1, [pc, #196]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	628b      	str	r3, [r1, #40]	; 0x28
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be2:	3b01      	subs	r3, #1
 8004be4:	025b      	lsls	r3, r3, #9
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	061b      	lsls	r3, r3, #24
 8004c00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c04:	4923      	ldr	r1, [pc, #140]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c0a:	4b22      	ldr	r3, [pc, #136]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c16:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c1a:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <HAL_RCC_OscConfig+0x778>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c22:	00d2      	lsls	r2, r2, #3
 8004c24:	491b      	ldr	r1, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c2a:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	f023 020c 	bic.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	4917      	ldr	r1, [pc, #92]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c3c:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f023 0202 	bic.w	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	4912      	ldr	r1, [pc, #72]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <HAL_RCC_OscConfig+0x76c>)
 8004c84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8a:	f7fd fbc9 	bl	8002420 <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c90:	e011      	b.n	8004cb6 <HAL_RCC_OscConfig+0x78e>
 8004c92:	bf00      	nop
 8004c94:	58024400 	.word	0x58024400
 8004c98:	58024800 	.word	0x58024800
 8004c9c:	fffffc0c 	.word	0xfffffc0c
 8004ca0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fd fbbc 	bl	8002420 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e08a      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cb6:	4b47      	ldr	r3, [pc, #284]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x77c>
 8004cc2:	e082      	b.n	8004dca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc4:	4b43      	ldr	r3, [pc, #268]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a42      	ldr	r2, [pc, #264]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fd fba6 	bl	8002420 <HAL_GetTick>
 8004cd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fd fba2 	bl	8002420 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e070      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cea:	4b3a      	ldr	r3, [pc, #232]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x7b0>
 8004cf6:	e068      	b.n	8004dca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cf8:	4b36      	ldr	r3, [pc, #216]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cfe:	4b35      	ldr	r3, [pc, #212]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d031      	beq.n	8004d70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f003 0203 	and.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d12a      	bne.n	8004d70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d122      	bne.n	8004d70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d11a      	bne.n	8004d70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	0a5b      	lsrs	r3, r3, #9
 8004d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d111      	bne.n	8004d70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	0c1b      	lsrs	r3, r3, #16
 8004d50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d108      	bne.n	8004d70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	0e1b      	lsrs	r3, r3, #24
 8004d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e02b      	b.n	8004dcc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d74:	4b17      	ldr	r3, [pc, #92]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	08db      	lsrs	r3, r3, #3
 8004d7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d01f      	beq.n	8004dca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	4a11      	ldr	r2, [pc, #68]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d96:	f7fd fb43 	bl	8002420 <HAL_GetTick>
 8004d9a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d9c:	bf00      	nop
 8004d9e:	f7fd fb3f 	bl	8002420 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d0f9      	beq.n	8004d9e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <HAL_RCC_OscConfig+0x8b0>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004db6:	00d2      	lsls	r2, r2, #3
 8004db8:	4906      	ldr	r1, [pc, #24]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	4a04      	ldr	r2, [pc, #16]	; (8004dd4 <HAL_RCC_OscConfig+0x8ac>)
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3730      	adds	r7, #48	; 0x30
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	ffff0007 	.word	0xffff0007

08004ddc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e19c      	b.n	800512a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004df0:	4b8a      	ldr	r3, [pc, #552]	; (800501c <HAL_RCC_ClockConfig+0x240>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d910      	bls.n	8004e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b87      	ldr	r3, [pc, #540]	; (800501c <HAL_RCC_ClockConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 020f 	bic.w	r2, r3, #15
 8004e06:	4985      	ldr	r1, [pc, #532]	; (800501c <HAL_RCC_ClockConfig+0x240>)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0e:	4b83      	ldr	r3, [pc, #524]	; (800501c <HAL_RCC_ClockConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e184      	b.n	800512a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d010      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	4b7b      	ldr	r3, [pc, #492]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d908      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e3c:	4b78      	ldr	r3, [pc, #480]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	4975      	ldr	r1, [pc, #468]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d010      	beq.n	8004e7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	4b70      	ldr	r3, [pc, #448]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d908      	bls.n	8004e7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e6a:	4b6d      	ldr	r3, [pc, #436]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	496a      	ldr	r1, [pc, #424]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d010      	beq.n	8004eaa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699a      	ldr	r2, [r3, #24]
 8004e8c:	4b64      	ldr	r3, [pc, #400]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d908      	bls.n	8004eaa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e98:	4b61      	ldr	r3, [pc, #388]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	495e      	ldr	r1, [pc, #376]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d010      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69da      	ldr	r2, [r3, #28]
 8004eba:	4b59      	ldr	r3, [pc, #356]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d908      	bls.n	8004ed8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ec6:	4b56      	ldr	r3, [pc, #344]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	4953      	ldr	r1, [pc, #332]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d010      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	4b4d      	ldr	r3, [pc, #308]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d908      	bls.n	8004f06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef4:	4b4a      	ldr	r3, [pc, #296]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f023 020f 	bic.w	r2, r3, #15
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4947      	ldr	r1, [pc, #284]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d055      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f12:	4b43      	ldr	r3, [pc, #268]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	4940      	ldr	r1, [pc, #256]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d107      	bne.n	8004f3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f2c:	4b3c      	ldr	r3, [pc, #240]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d121      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0f6      	b.n	800512a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d107      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f44:	4b36      	ldr	r3, [pc, #216]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d115      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0ea      	b.n	800512a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d107      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f5c:	4b30      	ldr	r3, [pc, #192]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0de      	b.n	800512a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f6c:	4b2c      	ldr	r3, [pc, #176]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0d6      	b.n	800512a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f7c:	4b28      	ldr	r3, [pc, #160]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f023 0207 	bic.w	r2, r3, #7
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4925      	ldr	r1, [pc, #148]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8e:	f7fd fa47 	bl	8002420 <HAL_GetTick>
 8004f92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f96:	f7fd fa43 	bl	8002420 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0be      	b.n	800512a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fac:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d1eb      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	4b14      	ldr	r3, [pc, #80]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d208      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fda:	4b11      	ldr	r3, [pc, #68]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f023 020f 	bic.w	r2, r3, #15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	490e      	ldr	r1, [pc, #56]	; (8005020 <HAL_RCC_ClockConfig+0x244>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_RCC_ClockConfig+0x240>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d214      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b08      	ldr	r3, [pc, #32]	; (800501c <HAL_RCC_ClockConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 020f 	bic.w	r2, r3, #15
 8005002:	4906      	ldr	r1, [pc, #24]	; (800501c <HAL_RCC_ClockConfig+0x240>)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	4b04      	ldr	r3, [pc, #16]	; (800501c <HAL_RCC_ClockConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e086      	b.n	800512a <HAL_RCC_ClockConfig+0x34e>
 800501c:	52002000 	.word	0x52002000
 8005020:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d010      	beq.n	8005052 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	4b3f      	ldr	r3, [pc, #252]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800503c:	429a      	cmp	r2, r3
 800503e:	d208      	bcs.n	8005052 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005040:	4b3c      	ldr	r3, [pc, #240]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	4939      	ldr	r1, [pc, #228]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 800504e:	4313      	orrs	r3, r2
 8005050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d010      	beq.n	8005080 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	4b34      	ldr	r3, [pc, #208]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800506a:	429a      	cmp	r2, r3
 800506c:	d208      	bcs.n	8005080 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	492e      	ldr	r1, [pc, #184]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 800507c:	4313      	orrs	r3, r2
 800507e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	d010      	beq.n	80050ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	4b28      	ldr	r3, [pc, #160]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005098:	429a      	cmp	r2, r3
 800509a:	d208      	bcs.n	80050ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800509c:	4b25      	ldr	r3, [pc, #148]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	4922      	ldr	r1, [pc, #136]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d010      	beq.n	80050dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69da      	ldr	r2, [r3, #28]
 80050be:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d208      	bcs.n	80050dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050ca:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	4917      	ldr	r1, [pc, #92]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050dc:	f000 f834 	bl	8005148 <HAL_RCC_GetSysClockFreq>
 80050e0:	4602      	mov	r2, r0
 80050e2:	4b14      	ldr	r3, [pc, #80]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	0a1b      	lsrs	r3, r3, #8
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	4912      	ldr	r1, [pc, #72]	; (8005138 <HAL_RCC_ClockConfig+0x35c>)
 80050ee:	5ccb      	ldrb	r3, [r1, r3]
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <HAL_RCC_ClockConfig+0x358>)
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <HAL_RCC_ClockConfig+0x35c>)
 8005104:	5cd3      	ldrb	r3, [r2, r3]
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <HAL_RCC_ClockConfig+0x360>)
 8005112:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005114:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <HAL_RCC_ClockConfig+0x364>)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <HAL_RCC_ClockConfig+0x368>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fc fc66 	bl	80019f0 <HAL_InitTick>
 8005124:	4603      	mov	r3, r0
 8005126:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005128:	7bfb      	ldrb	r3, [r7, #15]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	58024400 	.word	0x58024400
 8005138:	0800fda4 	.word	0x0800fda4
 800513c:	24000004 	.word	0x24000004
 8005140:	24000000 	.word	0x24000000
 8005144:	2400000c 	.word	0x2400000c

08005148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005148:	b480      	push	{r7}
 800514a:	b089      	sub	sp, #36	; 0x24
 800514c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800514e:	4bb3      	ldr	r3, [pc, #716]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005156:	2b18      	cmp	r3, #24
 8005158:	f200 8155 	bhi.w	8005406 <HAL_RCC_GetSysClockFreq+0x2be>
 800515c:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <HAL_RCC_GetSysClockFreq+0x1c>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	080051c9 	.word	0x080051c9
 8005168:	08005407 	.word	0x08005407
 800516c:	08005407 	.word	0x08005407
 8005170:	08005407 	.word	0x08005407
 8005174:	08005407 	.word	0x08005407
 8005178:	08005407 	.word	0x08005407
 800517c:	08005407 	.word	0x08005407
 8005180:	08005407 	.word	0x08005407
 8005184:	080051ef 	.word	0x080051ef
 8005188:	08005407 	.word	0x08005407
 800518c:	08005407 	.word	0x08005407
 8005190:	08005407 	.word	0x08005407
 8005194:	08005407 	.word	0x08005407
 8005198:	08005407 	.word	0x08005407
 800519c:	08005407 	.word	0x08005407
 80051a0:	08005407 	.word	0x08005407
 80051a4:	080051f5 	.word	0x080051f5
 80051a8:	08005407 	.word	0x08005407
 80051ac:	08005407 	.word	0x08005407
 80051b0:	08005407 	.word	0x08005407
 80051b4:	08005407 	.word	0x08005407
 80051b8:	08005407 	.word	0x08005407
 80051bc:	08005407 	.word	0x08005407
 80051c0:	08005407 	.word	0x08005407
 80051c4:	080051fb 	.word	0x080051fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c8:	4b94      	ldr	r3, [pc, #592]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051d4:	4b91      	ldr	r3, [pc, #580]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	08db      	lsrs	r3, r3, #3
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	4a90      	ldr	r2, [pc, #576]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051e6:	e111      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051e8:	4b8d      	ldr	r3, [pc, #564]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051ea:	61bb      	str	r3, [r7, #24]
      break;
 80051ec:	e10e      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051ee:	4b8d      	ldr	r3, [pc, #564]	; (8005424 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051f0:	61bb      	str	r3, [r7, #24]
      break;
 80051f2:	e10b      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051f4:	4b8c      	ldr	r3, [pc, #560]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051f6:	61bb      	str	r3, [r7, #24]
      break;
 80051f8:	e108      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051fa:	4b88      	ldr	r3, [pc, #544]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005204:	4b85      	ldr	r3, [pc, #532]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800520e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005210:	4b82      	ldr	r3, [pc, #520]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800521a:	4b80      	ldr	r3, [pc, #512]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521e:	08db      	lsrs	r3, r3, #3
 8005220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80e1 	beq.w	8005400 <HAL_RCC_GetSysClockFreq+0x2b8>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b02      	cmp	r3, #2
 8005242:	f000 8083 	beq.w	800534c <HAL_RCC_GetSysClockFreq+0x204>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b02      	cmp	r3, #2
 800524a:	f200 80a1 	bhi.w	8005390 <HAL_RCC_GetSysClockFreq+0x248>
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x114>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d056      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x1c0>
 800525a:	e099      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800525c:	4b6f      	ldr	r3, [pc, #444]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02d      	beq.n	80052c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005268:	4b6c      	ldr	r3, [pc, #432]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	08db      	lsrs	r3, r3, #3
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	4a6b      	ldr	r2, [pc, #428]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
 8005278:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005292:	4b62      	ldr	r3, [pc, #392]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800542c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052c2:	e087      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d6:	4b51      	ldr	r3, [pc, #324]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800542c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005306:	e065      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005434 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531a:	4b40      	ldr	r3, [pc, #256]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532a:	ed97 6a02 	vldr	s12, [r7, #8]
 800532e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800542c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800533e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800534a:	e043      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005356:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2f0>
 800535a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535e:	4b2f      	ldr	r3, [pc, #188]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005372:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800542c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800538e:	e021      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005434 <HAL_RCC_GetSysClockFreq+0x2ec>
 800539e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a2:	4b1e      	ldr	r3, [pc, #120]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800542c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	0a5b      	lsrs	r3, r3, #9
 80053da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053de:	3301      	adds	r3, #1
 80053e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80053f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f8:	ee17 3a90 	vmov	r3, s15
 80053fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053fe:	e005      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
      break;
 8005404:	e002      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005408:	61bb      	str	r3, [r7, #24]
      break;
 800540a:	bf00      	nop
  }

  return sysclockfreq;
 800540c:	69bb      	ldr	r3, [r7, #24]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3724      	adds	r7, #36	; 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	58024400 	.word	0x58024400
 8005420:	03d09000 	.word	0x03d09000
 8005424:	003d0900 	.word	0x003d0900
 8005428:	007a1200 	.word	0x007a1200
 800542c:	46000000 	.word	0x46000000
 8005430:	4c742400 	.word	0x4c742400
 8005434:	4a742400 	.word	0x4a742400
 8005438:	4af42400 	.word	0x4af42400

0800543c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005442:	f7ff fe81 	bl	8005148 <HAL_RCC_GetSysClockFreq>
 8005446:	4602      	mov	r2, r0
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <HAL_RCC_GetHCLKFreq+0x50>)
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	0a1b      	lsrs	r3, r3, #8
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	490f      	ldr	r1, [pc, #60]	; (8005490 <HAL_RCC_GetHCLKFreq+0x54>)
 8005454:	5ccb      	ldrb	r3, [r1, r3]
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	fa22 f303 	lsr.w	r3, r2, r3
 800545e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <HAL_RCC_GetHCLKFreq+0x50>)
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <HAL_RCC_GetHCLKFreq+0x54>)
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	fa22 f303 	lsr.w	r3, r2, r3
 8005476:	4a07      	ldr	r2, [pc, #28]	; (8005494 <HAL_RCC_GetHCLKFreq+0x58>)
 8005478:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800547a:	4a07      	ldr	r2, [pc, #28]	; (8005498 <HAL_RCC_GetHCLKFreq+0x5c>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <HAL_RCC_GetHCLKFreq+0x58>)
 8005482:	681b      	ldr	r3, [r3, #0]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	58024400 	.word	0x58024400
 8005490:	0800fda4 	.word	0x0800fda4
 8005494:	24000004 	.word	0x24000004
 8005498:	24000000 	.word	0x24000000

0800549c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054a0:	f7ff ffcc 	bl	800543c <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4904      	ldr	r1, [pc, #16]	; (80054c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	58024400 	.word	0x58024400
 80054c4:	0800fda4 	.word	0x0800fda4

080054c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054cc:	f7ff ffb6 	bl	800543c <HAL_RCC_GetHCLKFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	4904      	ldr	r1, [pc, #16]	; (80054f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054de:	5ccb      	ldrb	r3, [r1, r3]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	58024400 	.word	0x58024400
 80054f0:	0800fda4 	.word	0x0800fda4

080054f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	223f      	movs	r2, #63	; 0x3f
 8005502:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <HAL_RCC_GetClockConfig+0x7c>)
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0207 	and.w	r2, r3, #7
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <HAL_RCC_GetClockConfig+0x7c>)
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800551c:	4b14      	ldr	r3, [pc, #80]	; (8005570 <HAL_RCC_GetClockConfig+0x7c>)
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f003 020f 	and.w	r2, r3, #15
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005528:	4b11      	ldr	r3, [pc, #68]	; (8005570 <HAL_RCC_GetClockConfig+0x7c>)
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <HAL_RCC_GetClockConfig+0x7c>)
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005540:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <HAL_RCC_GetClockConfig+0x7c>)
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800554c:	4b08      	ldr	r3, [pc, #32]	; (8005570 <HAL_RCC_GetClockConfig+0x7c>)
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005558:	4b06      	ldr	r3, [pc, #24]	; (8005574 <HAL_RCC_GetClockConfig+0x80>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 020f 	and.w	r2, r3, #15
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	58024400 	.word	0x58024400
 8005574:	52002000 	.word	0x52002000

08005578 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800557c:	b0ca      	sub	sp, #296	; 0x128
 800557e:	af00      	add	r7, sp, #0
 8005580:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800558a:	2300      	movs	r3, #0
 800558c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800559c:	2500      	movs	r5, #0
 800559e:	ea54 0305 	orrs.w	r3, r4, r5
 80055a2:	d049      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055ae:	d02f      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055b4:	d828      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055ba:	d01a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055c0:	d822      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ca:	d007      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055cc:	e01c      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ce:	4bb8      	ldr	r3, [pc, #736]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	4ab7      	ldr	r2, [pc, #732]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055da:	e01a      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e0:	3308      	adds	r3, #8
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 fc8f 	bl	8006f08 <RCCEx_PLL2_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055f0:	e00f      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f6:	3328      	adds	r3, #40	; 0x28
 80055f8:	2102      	movs	r1, #2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 fd36 	bl	800706c <RCCEx_PLL3_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005606:	e004      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800560e:	e000      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800561a:	4ba5      	ldr	r3, [pc, #660]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800561c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005628:	4aa1      	ldr	r2, [pc, #644]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800562a:	430b      	orrs	r3, r1
 800562c:	6513      	str	r3, [r2, #80]	; 0x50
 800562e:	e003      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005634:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005644:	f04f 0900 	mov.w	r9, #0
 8005648:	ea58 0309 	orrs.w	r3, r8, r9
 800564c:	d047      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	2b04      	cmp	r3, #4
 8005656:	d82a      	bhi.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005658:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	08005675 	.word	0x08005675
 8005664:	08005683 	.word	0x08005683
 8005668:	08005699 	.word	0x08005699
 800566c:	080056b7 	.word	0x080056b7
 8005670:	080056b7 	.word	0x080056b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005674:	4b8e      	ldr	r3, [pc, #568]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	4a8d      	ldr	r2, [pc, #564]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800567a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800567e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005680:	e01a      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005686:	3308      	adds	r3, #8
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f001 fc3c 	bl	8006f08 <RCCEx_PLL2_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005696:	e00f      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569c:	3328      	adds	r3, #40	; 0x28
 800569e:	2100      	movs	r1, #0
 80056a0:	4618      	mov	r0, r3
 80056a2:	f001 fce3 	bl	800706c <RCCEx_PLL3_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056ac:	e004      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056b4:	e000      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056c0:	4b7b      	ldr	r3, [pc, #492]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c4:	f023 0107 	bic.w	r1, r3, #7
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	4a78      	ldr	r2, [pc, #480]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6513      	str	r3, [r2, #80]	; 0x50
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80056ea:	f04f 0b00 	mov.w	fp, #0
 80056ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80056f2:	d04c      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	d030      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005704:	d829      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005706:	2bc0      	cmp	r3, #192	; 0xc0
 8005708:	d02d      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800570a:	2bc0      	cmp	r3, #192	; 0xc0
 800570c:	d825      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d018      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005712:	2b80      	cmp	r3, #128	; 0x80
 8005714:	d821      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d007      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800571e:	e01c      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005720:	4b63      	ldr	r3, [pc, #396]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	4a62      	ldr	r2, [pc, #392]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800572c:	e01c      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005732:	3308      	adds	r3, #8
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f001 fbe6 	bl	8006f08 <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005742:	e011      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005748:	3328      	adds	r3, #40	; 0x28
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f001 fc8d 	bl	800706c <RCCEx_PLL3_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005770:	4b4f      	ldr	r3, [pc, #316]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005774:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577e:	4a4c      	ldr	r2, [pc, #304]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005780:	430b      	orrs	r3, r1
 8005782:	6513      	str	r3, [r2, #80]	; 0x50
 8005784:	e003      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800578a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800579a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800579e:	2300      	movs	r3, #0
 80057a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80057a8:	460b      	mov	r3, r1
 80057aa:	4313      	orrs	r3, r2
 80057ac:	d053      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057ba:	d035      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80057bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057c0:	d82e      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057c6:	d031      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80057c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057cc:	d828      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d2:	d01a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80057d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d8:	d822      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80057de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057e2:	d007      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80057e4:	e01c      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e6:	4b32      	ldr	r3, [pc, #200]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	4a31      	ldr	r2, [pc, #196]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057f2:	e01c      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f8:	3308      	adds	r3, #8
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 fb83 	bl	8006f08 <RCCEx_PLL2_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005808:	e011      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800580a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580e:	3328      	adds	r3, #40	; 0x28
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f001 fc2a 	bl	800706c <RCCEx_PLL3_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800581e:	e006      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005826:	e002      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800582c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800582e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005836:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005846:	4a1a      	ldr	r2, [pc, #104]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005848:	430b      	orrs	r3, r1
 800584a:	6593      	str	r3, [r2, #88]	; 0x58
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005862:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005866:	2300      	movs	r3, #0
 8005868:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800586c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005870:	460b      	mov	r3, r1
 8005872:	4313      	orrs	r3, r2
 8005874:	d056      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800587e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005882:	d038      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005888:	d831      	bhi.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800588a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800588e:	d034      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005890:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005894:	d82b      	bhi.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800589a:	d01d      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800589c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a0:	d825      	bhi.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d006      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80058a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80058ac:	e01f      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058ae:	bf00      	nop
 80058b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b4:	4ba2      	ldr	r3, [pc, #648]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	4aa1      	ldr	r2, [pc, #644]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058c0:	e01c      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c6:	3308      	adds	r3, #8
 80058c8:	2100      	movs	r1, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 fb1c 	bl	8006f08 <RCCEx_PLL2_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058d6:	e011      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058dc:	3328      	adds	r3, #40	; 0x28
 80058de:	2100      	movs	r1, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 fbc3 	bl	800706c <RCCEx_PLL3_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058f4:	e002      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005904:	4b8e      	ldr	r3, [pc, #568]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005910:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005914:	4a8a      	ldr	r2, [pc, #552]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005916:	430b      	orrs	r3, r1
 8005918:	6593      	str	r3, [r2, #88]	; 0x58
 800591a:	e003      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800593a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800593e:	460b      	mov	r3, r1
 8005940:	4313      	orrs	r3, r2
 8005942:	d03a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594a:	2b30      	cmp	r3, #48	; 0x30
 800594c:	d01f      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800594e:	2b30      	cmp	r3, #48	; 0x30
 8005950:	d819      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005952:	2b20      	cmp	r3, #32
 8005954:	d00c      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005956:	2b20      	cmp	r3, #32
 8005958:	d815      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d019      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800595e:	2b10      	cmp	r3, #16
 8005960:	d111      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005962:	4b77      	ldr	r3, [pc, #476]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	4a76      	ldr	r2, [pc, #472]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800596e:	e011      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005974:	3308      	adds	r3, #8
 8005976:	2102      	movs	r1, #2
 8005978:	4618      	mov	r0, r3
 800597a:	f001 fac5 	bl	8006f08 <RCCEx_PLL2_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005984:	e006      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800598c:	e002      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800598e:	bf00      	nop
 8005990:	e000      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800599c:	4b68      	ldr	r3, [pc, #416]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800599e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059aa:	4a65      	ldr	r2, [pc, #404]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ac:	430b      	orrs	r3, r1
 80059ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80059c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	d051      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059e4:	d035      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80059e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ea:	d82e      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059f0:	d031      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80059f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059f6:	d828      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fc:	d01a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80059fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a02:	d822      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0c:	d007      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a0e:	e01c      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a10:	4b4b      	ldr	r3, [pc, #300]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	4a4a      	ldr	r2, [pc, #296]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a1c:	e01c      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a22:	3308      	adds	r3, #8
 8005a24:	2100      	movs	r1, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f001 fa6e 	bl	8006f08 <RCCEx_PLL2_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a32:	e011      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a38:	3328      	adds	r3, #40	; 0x28
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 fb15 	bl	800706c <RCCEx_PLL3_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a48:	e006      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a50:	e002      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a52:	bf00      	nop
 8005a54:	e000      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a60:	4b37      	ldr	r3, [pc, #220]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a64:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6e:	4a34      	ldr	r2, [pc, #208]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6513      	str	r3, [r2, #80]	; 0x50
 8005a74:	e003      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	d056      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa8:	d033      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aae:	d82c      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ab0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ab4:	d02f      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005ab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aba:	d826      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005abc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ac0:	d02b      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005ac2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ac6:	d820      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005acc:	d012      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005ace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ad2:	d81a      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d022      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d115      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 fa0e 	bl	8006f08 <RCCEx_PLL2_Config>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005af2:	e015      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af8:	3328      	adds	r3, #40	; 0x28
 8005afa:	2101      	movs	r1, #1
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fab5 	bl	800706c <RCCEx_PLL3_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b08:	e00a      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b10:	e006      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b12:	bf00      	nop
 8005b14:	e004      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b16:	bf00      	nop
 8005b18:	e002      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10d      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b36:	4a02      	ldr	r2, [pc, #8]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6513      	str	r3, [r2, #80]	; 0x50
 8005b3c:	e006      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b3e:	bf00      	nop
 8005b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	d055      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b78:	d033      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b7e:	d82c      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b84:	d02f      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8a:	d826      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b90:	d02b      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005b92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b96:	d820      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b9c:	d012      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ba2:	d81a      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d022      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ba8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bac:	d115      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 f9a6 	bl	8006f08 <RCCEx_PLL2_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bc2:	e015      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc8:	3328      	adds	r3, #40	; 0x28
 8005bca:	2101      	movs	r1, #1
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fa4d 	bl	800706c <RCCEx_PLL3_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bd8:	e00a      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005be2:	bf00      	nop
 8005be4:	e004      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005be6:	bf00      	nop
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005bf8:	4ba3      	ldr	r3, [pc, #652]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c08:	4a9f      	ldr	r2, [pc, #636]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c32:	460b      	mov	r3, r1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	d037      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c42:	d00e      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c48:	d816      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d018      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c52:	d111      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c54:	4b8c      	ldr	r3, [pc, #560]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	4a8b      	ldr	r2, [pc, #556]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c60:	e00f      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c66:	3308      	adds	r3, #8
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 f94c 	bl	8006f08 <RCCEx_PLL2_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c76:	e004      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c7e:	e000      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c8a:	4b7f      	ldr	r3, [pc, #508]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c98:	4a7b      	ldr	r2, [pc, #492]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	6513      	str	r3, [r2, #80]	; 0x50
 8005c9e:	e003      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	d039      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d81c      	bhi.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005d15 	.word	0x08005d15
 8005cdc:	08005ce9 	.word	0x08005ce9
 8005ce0:	08005cf7 	.word	0x08005cf7
 8005ce4:	08005d15 	.word	0x08005d15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce8:	4b67      	ldr	r3, [pc, #412]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	4a66      	ldr	r2, [pc, #408]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cf4:	e00f      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	2102      	movs	r1, #2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 f902 	bl	8006f08 <RCCEx_PLL2_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d0a:	e004      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d12:	e000      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d1e:	4b5a      	ldr	r3, [pc, #360]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d22:	f023 0103 	bic.w	r1, r3, #3
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2c:	4a56      	ldr	r2, [pc, #344]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d32:	e003      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005d56:	460b      	mov	r3, r1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f000 809f 	beq.w	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d5e:	4b4b      	ldr	r3, [pc, #300]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a4a      	ldr	r2, [pc, #296]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d6a:	f7fc fb59 	bl	8002420 <HAL_GetTick>
 8005d6e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d72:	e00b      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d74:	f7fc fb54 	bl	8002420 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b64      	cmp	r3, #100	; 0x64
 8005d82:	d903      	bls.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d8a:	e005      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d8c:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0ed      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d179      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005da0:	4b39      	ldr	r3, [pc, #228]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dac:	4053      	eors	r3, r2
 8005dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d015      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db6:	4b34      	ldr	r3, [pc, #208]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dc2:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc6:	4a30      	ldr	r2, [pc, #192]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dcc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dce:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005dda:	4a2b      	ldr	r2, [pc, #172]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005de0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dee:	d118      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fc fb16 	bl	8002420 <HAL_GetTick>
 8005df4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005df8:	e00d      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfa:	f7fc fb11 	bl	8002420 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e04:	1ad2      	subs	r2, r2, r3
 8005e06:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d903      	bls.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005e14:	e005      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e16:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0eb      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d129      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e3a:	d10e      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005e3c:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e4c:	091a      	lsrs	r2, r3, #4
 8005e4e:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	4a0d      	ldr	r2, [pc, #52]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e54:	430b      	orrs	r3, r1
 8005e56:	6113      	str	r3, [r2, #16]
 8005e58:	e005      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e64:	6113      	str	r3, [r2, #16]
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e68:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e76:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7c:	e00e      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005e86:	e009      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	58024800 	.word	0x58024800
 8005e90:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f002 0301 	and.w	r3, r2, #1
 8005ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eb2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f000 8089 	beq.w	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec4:	2b28      	cmp	r3, #40	; 0x28
 8005ec6:	d86b      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005fa9 	.word	0x08005fa9
 8005ed4:	08005fa1 	.word	0x08005fa1
 8005ed8:	08005fa1 	.word	0x08005fa1
 8005edc:	08005fa1 	.word	0x08005fa1
 8005ee0:	08005fa1 	.word	0x08005fa1
 8005ee4:	08005fa1 	.word	0x08005fa1
 8005ee8:	08005fa1 	.word	0x08005fa1
 8005eec:	08005fa1 	.word	0x08005fa1
 8005ef0:	08005f75 	.word	0x08005f75
 8005ef4:	08005fa1 	.word	0x08005fa1
 8005ef8:	08005fa1 	.word	0x08005fa1
 8005efc:	08005fa1 	.word	0x08005fa1
 8005f00:	08005fa1 	.word	0x08005fa1
 8005f04:	08005fa1 	.word	0x08005fa1
 8005f08:	08005fa1 	.word	0x08005fa1
 8005f0c:	08005fa1 	.word	0x08005fa1
 8005f10:	08005f8b 	.word	0x08005f8b
 8005f14:	08005fa1 	.word	0x08005fa1
 8005f18:	08005fa1 	.word	0x08005fa1
 8005f1c:	08005fa1 	.word	0x08005fa1
 8005f20:	08005fa1 	.word	0x08005fa1
 8005f24:	08005fa1 	.word	0x08005fa1
 8005f28:	08005fa1 	.word	0x08005fa1
 8005f2c:	08005fa1 	.word	0x08005fa1
 8005f30:	08005fa9 	.word	0x08005fa9
 8005f34:	08005fa1 	.word	0x08005fa1
 8005f38:	08005fa1 	.word	0x08005fa1
 8005f3c:	08005fa1 	.word	0x08005fa1
 8005f40:	08005fa1 	.word	0x08005fa1
 8005f44:	08005fa1 	.word	0x08005fa1
 8005f48:	08005fa1 	.word	0x08005fa1
 8005f4c:	08005fa1 	.word	0x08005fa1
 8005f50:	08005fa9 	.word	0x08005fa9
 8005f54:	08005fa1 	.word	0x08005fa1
 8005f58:	08005fa1 	.word	0x08005fa1
 8005f5c:	08005fa1 	.word	0x08005fa1
 8005f60:	08005fa1 	.word	0x08005fa1
 8005f64:	08005fa1 	.word	0x08005fa1
 8005f68:	08005fa1 	.word	0x08005fa1
 8005f6c:	08005fa1 	.word	0x08005fa1
 8005f70:	08005fa9 	.word	0x08005fa9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f78:	3308      	adds	r3, #8
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 ffc3 	bl	8006f08 <RCCEx_PLL2_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f88:	e00f      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8e:	3328      	adds	r3, #40	; 0x28
 8005f90:	2101      	movs	r1, #1
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 f86a 	bl	800706c <RCCEx_PLL3_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f9e:	e004      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fa6:	e000      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fb2:	4bbf      	ldr	r3, [pc, #764]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc0:	4abb      	ldr	r2, [pc, #748]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	6553      	str	r3, [r2, #84]	; 0x54
 8005fc6:	e003      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f002 0302 	and.w	r3, r2, #2
 8005fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fe6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005fea:	460b      	mov	r3, r1
 8005fec:	4313      	orrs	r3, r2
 8005fee:	d041      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d824      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	0800604d 	.word	0x0800604d
 8006004:	08006019 	.word	0x08006019
 8006008:	0800602f 	.word	0x0800602f
 800600c:	0800604d 	.word	0x0800604d
 8006010:	0800604d 	.word	0x0800604d
 8006014:	0800604d 	.word	0x0800604d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601c:	3308      	adds	r3, #8
 800601e:	2101      	movs	r1, #1
 8006020:	4618      	mov	r0, r3
 8006022:	f000 ff71 	bl	8006f08 <RCCEx_PLL2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800602c:	e00f      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006032:	3328      	adds	r3, #40	; 0x28
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f001 f818 	bl	800706c <RCCEx_PLL3_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006042:	e004      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800604a:	e000      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800604c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006056:	4b96      	ldr	r3, [pc, #600]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	f023 0107 	bic.w	r1, r3, #7
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006064:	4a92      	ldr	r2, [pc, #584]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006066:	430b      	orrs	r3, r1
 8006068:	6553      	str	r3, [r2, #84]	; 0x54
 800606a:	e003      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006070:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f002 0304 	and.w	r3, r2, #4
 8006080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006084:	2300      	movs	r3, #0
 8006086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800608a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800608e:	460b      	mov	r3, r1
 8006090:	4313      	orrs	r3, r2
 8006092:	d044      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800609c:	2b05      	cmp	r3, #5
 800609e:	d825      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080060f5 	.word	0x080060f5
 80060ac:	080060c1 	.word	0x080060c1
 80060b0:	080060d7 	.word	0x080060d7
 80060b4:	080060f5 	.word	0x080060f5
 80060b8:	080060f5 	.word	0x080060f5
 80060bc:	080060f5 	.word	0x080060f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c4:	3308      	adds	r3, #8
 80060c6:	2101      	movs	r1, #1
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 ff1d 	bl	8006f08 <RCCEx_PLL2_Config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060d4:	e00f      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060da:	3328      	adds	r3, #40	; 0x28
 80060dc:	2101      	movs	r1, #1
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 ffc4 	bl	800706c <RCCEx_PLL3_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060fe:	4b6c      	ldr	r3, [pc, #432]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006102:	f023 0107 	bic.w	r1, r3, #7
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800610e:	4a68      	ldr	r2, [pc, #416]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006110:	430b      	orrs	r3, r1
 8006112:	6593      	str	r3, [r2, #88]	; 0x58
 8006114:	e003      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800611a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f002 0320 	and.w	r3, r2, #32
 800612a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006138:	460b      	mov	r3, r1
 800613a:	4313      	orrs	r3, r2
 800613c:	d055      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800614a:	d033      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800614c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006150:	d82c      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006156:	d02f      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615c:	d826      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800615e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006162:	d02b      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006164:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006168:	d820      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800616a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800616e:	d012      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006174:	d81a      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d022      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800617a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800617e:	d115      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006184:	3308      	adds	r3, #8
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f000 febd 	bl	8006f08 <RCCEx_PLL2_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006194:	e015      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619a:	3328      	adds	r3, #40	; 0x28
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 ff64 	bl	800706c <RCCEx_PLL3_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061aa:	e00a      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061b2:	e006      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061b4:	bf00      	nop
 80061b6:	e004      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061b8:	bf00      	nop
 80061ba:	e002      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061bc:	bf00      	nop
 80061be:	e000      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061ca:	4b39      	ldr	r3, [pc, #228]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	4a35      	ldr	r2, [pc, #212]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061dc:	430b      	orrs	r3, r1
 80061de:	6553      	str	r3, [r2, #84]	; 0x54
 80061e0:	e003      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80061f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061fa:	2300      	movs	r3, #0
 80061fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006200:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006204:	460b      	mov	r3, r1
 8006206:	4313      	orrs	r3, r2
 8006208:	d058      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800620e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006212:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006216:	d033      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006218:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800621c:	d82c      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	d02f      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006228:	d826      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800622a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800622e:	d02b      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006234:	d820      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623a:	d012      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800623c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006240:	d81a      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d022      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624a:	d115      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006250:	3308      	adds	r3, #8
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fe57 	bl	8006f08 <RCCEx_PLL2_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006260:	e015      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006266:	3328      	adds	r3, #40	; 0x28
 8006268:	2102      	movs	r1, #2
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fefe 	bl	800706c <RCCEx_PLL3_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006276:	e00a      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800627e:	e006      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006280:	bf00      	nop
 8006282:	e004      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006284:	bf00      	nop
 8006286:	e002      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006288:	bf00      	nop
 800628a:	e000      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800628c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10e      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062a6:	4a02      	ldr	r2, [pc, #8]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6593      	str	r3, [r2, #88]	; 0x58
 80062ac:	e006      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80062ae:	bf00      	nop
 80062b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80062c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d055      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062e8:	d033      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80062ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062ee:	d82c      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f4:	d02f      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80062f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062fa:	d826      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006300:	d02b      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006302:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006306:	d820      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800630c:	d012      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800630e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006312:	d81a      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d022      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631c:	d115      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006322:	3308      	adds	r3, #8
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fdee 	bl	8006f08 <RCCEx_PLL2_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006332:	e015      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006338:	3328      	adds	r3, #40	; 0x28
 800633a:	2102      	movs	r1, #2
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fe95 	bl	800706c <RCCEx_PLL3_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006348:	e00a      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006352:	bf00      	nop
 8006354:	e004      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006356:	bf00      	nop
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800635e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006368:	4ba1      	ldr	r3, [pc, #644]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006374:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006378:	4a9d      	ldr	r2, [pc, #628]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800637a:	430b      	orrs	r3, r1
 800637c:	6593      	str	r3, [r2, #88]	; 0x58
 800637e:	e003      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f002 0308 	and.w	r3, r2, #8
 8006394:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006398:	2300      	movs	r3, #0
 800639a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800639e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80063a2:	460b      	mov	r3, r1
 80063a4:	4313      	orrs	r3, r2
 80063a6:	d01e      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80063a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	3328      	adds	r3, #40	; 0x28
 80063bc:	2102      	movs	r1, #2
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fe54 	bl	800706c <RCCEx_PLL3_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80063d0:	4b87      	ldr	r3, [pc, #540]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e0:	4a83      	ldr	r2, [pc, #524]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063e2:	430b      	orrs	r3, r1
 80063e4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f002 0310 	and.w	r3, r2, #16
 80063f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063f6:	2300      	movs	r3, #0
 80063f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006400:	460b      	mov	r3, r1
 8006402:	4313      	orrs	r3, r2
 8006404:	d01e      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800640e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006412:	d10c      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006418:	3328      	adds	r3, #40	; 0x28
 800641a:	2102      	movs	r1, #2
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fe25 	bl	800706c <RCCEx_PLL3_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800642e:	4b70      	ldr	r3, [pc, #448]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800643a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800643e:	4a6c      	ldr	r2, [pc, #432]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006440:	430b      	orrs	r3, r1
 8006442:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800645a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800645e:	460b      	mov	r3, r1
 8006460:	4313      	orrs	r3, r2
 8006462:	d03e      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800646c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006470:	d022      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006476:	d81b      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800647c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006480:	d00b      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006482:	e015      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006488:	3308      	adds	r3, #8
 800648a:	2100      	movs	r1, #0
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fd3b 	bl	8006f08 <RCCEx_PLL2_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006498:	e00f      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649e:	3328      	adds	r3, #40	; 0x28
 80064a0:	2102      	movs	r1, #2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fde2 	bl	800706c <RCCEx_PLL3_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064ae:	e004      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80064b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10b      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064c2:	4b4b      	ldr	r3, [pc, #300]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064d2:	4a47      	ldr	r2, [pc, #284]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	6593      	str	r3, [r2, #88]	; 0x58
 80064d8:	e003      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80064ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80064f0:	2300      	movs	r3, #0
 80064f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80064f8:	460b      	mov	r3, r1
 80064fa:	4313      	orrs	r3, r2
 80064fc:	d03b      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006506:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800650a:	d01f      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800650c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006510:	d818      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006516:	d003      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800651c:	d007      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800651e:	e011      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006520:	4b33      	ldr	r3, [pc, #204]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a32      	ldr	r2, [pc, #200]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800652c:	e00f      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006532:	3328      	adds	r3, #40	; 0x28
 8006534:	2101      	movs	r1, #1
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fd98 	bl	800706c <RCCEx_PLL3_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006542:	e004      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800654a:	e000      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800654c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006556:	4b26      	ldr	r3, [pc, #152]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006566:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006568:	430b      	orrs	r3, r1
 800656a:	6553      	str	r3, [r2, #84]	; 0x54
 800656c:	e003      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006572:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006582:	673b      	str	r3, [r7, #112]	; 0x70
 8006584:	2300      	movs	r3, #0
 8006586:	677b      	str	r3, [r7, #116]	; 0x74
 8006588:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800658c:	460b      	mov	r3, r1
 800658e:	4313      	orrs	r3, r2
 8006590:	d034      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a0:	d007      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80065a2:	e011      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a4:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	4a11      	ldr	r2, [pc, #68]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065b0:	e00e      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b6:	3308      	adds	r3, #8
 80065b8:	2102      	movs	r1, #2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fca4 	bl	8006f08 <RCCEx_PLL2_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065c6:	e003      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10d      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80065d8:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	4a02      	ldr	r2, [pc, #8]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e8:	430b      	orrs	r3, r1
 80065ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065ec:	e006      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80065ee:	bf00      	nop
 80065f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006608:	66bb      	str	r3, [r7, #104]	; 0x68
 800660a:	2300      	movs	r3, #0
 800660c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800660e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d00c      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800661c:	3328      	adds	r3, #40	; 0x28
 800661e:	2102      	movs	r1, #2
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fd23 	bl	800706c <RCCEx_PLL3_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800663e:	663b      	str	r3, [r7, #96]	; 0x60
 8006640:	2300      	movs	r3, #0
 8006642:	667b      	str	r3, [r7, #100]	; 0x64
 8006644:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006648:	460b      	mov	r3, r1
 800664a:	4313      	orrs	r3, r2
 800664c:	d038      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800665a:	d018      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800665c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006660:	d811      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006666:	d014      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800666c:	d80b      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d011      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006676:	d106      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4bc3      	ldr	r3, [pc, #780]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4ac2      	ldr	r2, [pc, #776]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006684:	e008      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800668c:	e004      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800668e:	bf00      	nop
 8006690:	e002      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006692:	bf00      	nop
 8006694:	e000      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10b      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066a0:	4bb9      	ldr	r3, [pc, #740]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b0:	4ab5      	ldr	r2, [pc, #724]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066b2:	430b      	orrs	r3, r1
 80066b4:	6553      	str	r3, [r2, #84]	; 0x54
 80066b6:	e003      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80066cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80066ce:	2300      	movs	r3, #0
 80066d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80066d6:	460b      	mov	r3, r1
 80066d8:	4313      	orrs	r3, r2
 80066da:	d009      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066dc:	4baa      	ldr	r3, [pc, #680]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ea:	4aa7      	ldr	r2, [pc, #668]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ec:	430b      	orrs	r3, r1
 80066ee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80066fc:	653b      	str	r3, [r7, #80]	; 0x50
 80066fe:	2300      	movs	r3, #0
 8006700:	657b      	str	r3, [r7, #84]	; 0x54
 8006702:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006706:	460b      	mov	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800670c:	4b9e      	ldr	r3, [pc, #632]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006718:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800671c:	4a9a      	ldr	r2, [pc, #616]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800671e:	430b      	orrs	r3, r1
 8006720:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800672e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006730:	2300      	movs	r3, #0
 8006732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006734:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d009      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800673e:	4b92      	ldr	r3, [pc, #584]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006742:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800674a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674c:	4a8e      	ldr	r2, [pc, #568]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800674e:	430b      	orrs	r3, r1
 8006750:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800675e:	643b      	str	r3, [r7, #64]	; 0x40
 8006760:	2300      	movs	r3, #0
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
 8006764:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006768:	460b      	mov	r3, r1
 800676a:	4313      	orrs	r3, r2
 800676c:	d00e      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800676e:	4b86      	ldr	r3, [pc, #536]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	4a85      	ldr	r2, [pc, #532]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006778:	6113      	str	r3, [r2, #16]
 800677a:	4b83      	ldr	r3, [pc, #524]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800677c:	6919      	ldr	r1, [r3, #16]
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006782:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006786:	4a80      	ldr	r2, [pc, #512]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006788:	430b      	orrs	r3, r1
 800678a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800678c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006798:	63bb      	str	r3, [r7, #56]	; 0x38
 800679a:	2300      	movs	r3, #0
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800679e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80067a2:	460b      	mov	r3, r1
 80067a4:	4313      	orrs	r3, r2
 80067a6:	d009      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067a8:	4b77      	ldr	r3, [pc, #476]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	4a74      	ldr	r2, [pc, #464]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067b8:	430b      	orrs	r3, r1
 80067ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80067c8:	633b      	str	r3, [r7, #48]	; 0x30
 80067ca:	2300      	movs	r3, #0
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
 80067ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80067d2:	460b      	mov	r3, r1
 80067d4:	4313      	orrs	r3, r2
 80067d6:	d00a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067d8:	4b6b      	ldr	r3, [pc, #428]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e8:	4a67      	ldr	r2, [pc, #412]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ea:	430b      	orrs	r3, r1
 80067ec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80067ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	2100      	movs	r1, #0
 80067f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006800:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006804:	460b      	mov	r3, r1
 8006806:	4313      	orrs	r3, r2
 8006808:	d011      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800680a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680e:	3308      	adds	r3, #8
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fb78 	bl	8006f08 <RCCEx_PLL2_Config>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800681e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800682a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	2100      	movs	r1, #0
 8006838:	6239      	str	r1, [r7, #32]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
 8006840:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006844:	460b      	mov	r3, r1
 8006846:	4313      	orrs	r3, r2
 8006848:	d011      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800684e:	3308      	adds	r3, #8
 8006850:	2101      	movs	r1, #1
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fb58 	bl	8006f08 <RCCEx_PLL2_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800685e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800686a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800686e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	2100      	movs	r1, #0
 8006878:	61b9      	str	r1, [r7, #24]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006884:	460b      	mov	r3, r1
 8006886:	4313      	orrs	r3, r2
 8006888:	d011      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688e:	3308      	adds	r3, #8
 8006890:	2102      	movs	r1, #2
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fb38 	bl	8006f08 <RCCEx_PLL2_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800689e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	2100      	movs	r1, #0
 80068b8:	6139      	str	r1, [r7, #16]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d011      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ce:	3328      	adds	r3, #40	; 0x28
 80068d0:	2100      	movs	r1, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fbca 	bl	800706c <RCCEx_PLL3_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80068de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80068ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	2100      	movs	r1, #0
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006904:	460b      	mov	r3, r1
 8006906:	4313      	orrs	r3, r2
 8006908:	d011      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690e:	3328      	adds	r3, #40	; 0x28
 8006910:	2101      	movs	r1, #1
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fbaa 	bl	800706c <RCCEx_PLL3_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800692a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	2100      	movs	r1, #0
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006944:	460b      	mov	r3, r1
 8006946:	4313      	orrs	r3, r2
 8006948:	d011      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800694a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800694e:	3328      	adds	r3, #40	; 0x28
 8006950:	2102      	movs	r1, #2
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fb8a 	bl	800706c <RCCEx_PLL3_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800695e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800696a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800696e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
}
 800697c:	4618      	mov	r0, r3
 800697e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006982:	46bd      	mov	sp, r7
 8006984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006988:	58024400 	.word	0x58024400

0800698c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006990:	f7fe fd54 	bl	800543c <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	091b      	lsrs	r3, r3, #4
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4904      	ldr	r1, [pc, #16]	; (80069b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	58024400 	.word	0x58024400
 80069b4:	0800fda4 	.word	0x0800fda4

080069b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b089      	sub	sp, #36	; 0x24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069c0:	4ba1      	ldr	r3, [pc, #644]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	f003 0303 	and.w	r3, r3, #3
 80069c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80069ca:	4b9f      	ldr	r3, [pc, #636]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	0b1b      	lsrs	r3, r3, #12
 80069d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069d6:	4b9c      	ldr	r3, [pc, #624]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	091b      	lsrs	r3, r3, #4
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80069e2:	4b99      	ldr	r3, [pc, #612]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e6:	08db      	lsrs	r3, r3, #3
 80069e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8111 	beq.w	8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	f000 8083 	beq.w	8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	f200 80a1 	bhi.w	8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d056      	beq.n	8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a22:	e099      	b.n	8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a24:	4b88      	ldr	r3, [pc, #544]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d02d      	beq.n	8006a8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a30:	4b85      	ldr	r3, [pc, #532]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	08db      	lsrs	r3, r3, #3
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	4a84      	ldr	r2, [pc, #528]	; (8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5a:	4b7b      	ldr	r3, [pc, #492]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a8a:	e087      	b.n	8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9e:	4b6a      	ldr	r3, [pc, #424]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ab2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ace:	e065      	b.n	8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ada:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae2:	4b59      	ldr	r3, [pc, #356]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006af6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b12:	e043      	b.n	8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b26:	4b48      	ldr	r3, [pc, #288]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b56:	e021      	b.n	8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	4b37      	ldr	r3, [pc, #220]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006b9c:	4b2a      	ldr	r3, [pc, #168]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	0a5b      	lsrs	r3, r3, #9
 8006ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bc2:	ee17 2a90 	vmov	r2, s15
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006bca:	4b1f      	ldr	r3, [pc, #124]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	0c1b      	lsrs	r3, r3, #16
 8006bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006be0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf0:	ee17 2a90 	vmov	r2, s15
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006bf8:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	0e1b      	lsrs	r3, r3, #24
 8006bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1e:	ee17 2a90 	vmov	r2, s15
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c26:	e008      	b.n	8006c3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	609a      	str	r2, [r3, #8]
}
 8006c3a:	bf00      	nop
 8006c3c:	3724      	adds	r7, #36	; 0x24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	58024400 	.word	0x58024400
 8006c4c:	03d09000 	.word	0x03d09000
 8006c50:	46000000 	.word	0x46000000
 8006c54:	4c742400 	.word	0x4c742400
 8006c58:	4a742400 	.word	0x4a742400
 8006c5c:	4af42400 	.word	0x4af42400

08006c60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	; 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c68:	4ba1      	ldr	r3, [pc, #644]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c72:	4b9f      	ldr	r3, [pc, #636]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	0d1b      	lsrs	r3, r3, #20
 8006c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c7e:	4b9c      	ldr	r3, [pc, #624]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	0a1b      	lsrs	r3, r3, #8
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c8a:	4b99      	ldr	r3, [pc, #612]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8e:	08db      	lsrs	r3, r3, #3
 8006c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	fb02 f303 	mul.w	r3, r2, r3
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 8111 	beq.w	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	f000 8083 	beq.w	8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	f200 80a1 	bhi.w	8006e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d056      	beq.n	8006d78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cca:	e099      	b.n	8006e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ccc:	4b88      	ldr	r3, [pc, #544]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d02d      	beq.n	8006d34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cd8:	4b85      	ldr	r3, [pc, #532]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	08db      	lsrs	r3, r3, #3
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	4a84      	ldr	r2, [pc, #528]	; (8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d02:	4b7b      	ldr	r3, [pc, #492]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d32:	e087      	b.n	8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006efc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d46:	4b6a      	ldr	r3, [pc, #424]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d76:	e065      	b.n	8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d8a:	4b59      	ldr	r3, [pc, #356]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dba:	e043      	b.n	8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dce:	4b48      	ldr	r3, [pc, #288]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006de2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dfe:	e021      	b.n	8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e12:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e44:	4b2a      	ldr	r3, [pc, #168]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	0a5b      	lsrs	r3, r3, #9
 8006e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e6a:	ee17 2a90 	vmov	r2, s15
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e72:	4b1f      	ldr	r3, [pc, #124]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	0c1b      	lsrs	r3, r3, #16
 8006e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e98:	ee17 2a90 	vmov	r2, s15
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ea0:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	0e1b      	lsrs	r3, r3, #24
 8006ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec6:	ee17 2a90 	vmov	r2, s15
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006ece:	e008      	b.n	8006ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	609a      	str	r2, [r3, #8]
}
 8006ee2:	bf00      	nop
 8006ee4:	3724      	adds	r7, #36	; 0x24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	58024400 	.word	0x58024400
 8006ef4:	03d09000 	.word	0x03d09000
 8006ef8:	46000000 	.word	0x46000000
 8006efc:	4c742400 	.word	0x4c742400
 8006f00:	4a742400 	.word	0x4a742400
 8006f04:	4af42400 	.word	0x4af42400

08006f08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f16:	4b53      	ldr	r3, [pc, #332]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d101      	bne.n	8006f26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e099      	b.n	800705a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f26:	4b4f      	ldr	r3, [pc, #316]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a4e      	ldr	r2, [pc, #312]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f32:	f7fb fa75 	bl	8002420 <HAL_GetTick>
 8006f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f38:	e008      	b.n	8006f4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f3a:	f7fb fa71 	bl	8002420 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e086      	b.n	800705a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f4c:	4b45      	ldr	r3, [pc, #276]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1f0      	bne.n	8006f3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f58:	4b42      	ldr	r3, [pc, #264]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	031b      	lsls	r3, r3, #12
 8006f66:	493f      	ldr	r1, [pc, #252]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	628b      	str	r3, [r1, #40]	; 0x28
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	025b      	lsls	r3, r3, #9
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	041b      	lsls	r3, r3, #16
 8006f8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	061b      	lsls	r3, r3, #24
 8006f98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f9c:	4931      	ldr	r1, [pc, #196]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fa2:	4b30      	ldr	r3, [pc, #192]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	492d      	ldr	r1, [pc, #180]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fb4:	4b2b      	ldr	r3, [pc, #172]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	f023 0220 	bic.w	r2, r3, #32
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	4928      	ldr	r1, [pc, #160]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fc6:	4b27      	ldr	r3, [pc, #156]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	4a26      	ldr	r2, [pc, #152]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	f023 0310 	bic.w	r3, r3, #16
 8006fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fd2:	4b24      	ldr	r3, [pc, #144]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fd6:	4b24      	ldr	r3, [pc, #144]	; (8007068 <RCCEx_PLL2_Config+0x160>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	69d2      	ldr	r2, [r2, #28]
 8006fde:	00d2      	lsls	r2, r2, #3
 8006fe0:	4920      	ldr	r1, [pc, #128]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006fe6:	4b1f      	ldr	r3, [pc, #124]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fea:	4a1e      	ldr	r2, [pc, #120]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fec:	f043 0310 	orr.w	r3, r3, #16
 8006ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ff8:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	4a19      	ldr	r2, [pc, #100]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007004:	e00f      	b.n	8007026 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d106      	bne.n	800701a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800700c:	4b15      	ldr	r3, [pc, #84]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	4a14      	ldr	r2, [pc, #80]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8007012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007018:	e005      	b.n	8007026 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800701a:	4b12      	ldr	r3, [pc, #72]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	4a11      	ldr	r2, [pc, #68]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8007020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007024:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007026:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a0e      	ldr	r2, [pc, #56]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 800702c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007032:	f7fb f9f5 	bl	8002420 <HAL_GetTick>
 8007036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007038:	e008      	b.n	800704c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800703a:	f7fb f9f1 	bl	8002420 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b02      	cmp	r3, #2
 8007046:	d901      	bls.n	800704c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e006      	b.n	800705a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <RCCEx_PLL2_Config+0x15c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0f0      	beq.n	800703a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	58024400 	.word	0x58024400
 8007068:	ffff0007 	.word	0xffff0007

0800706c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800707a:	4b53      	ldr	r3, [pc, #332]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d101      	bne.n	800708a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e099      	b.n	80071be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800708a:	4b4f      	ldr	r3, [pc, #316]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a4e      	ldr	r2, [pc, #312]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007096:	f7fb f9c3 	bl	8002420 <HAL_GetTick>
 800709a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800709c:	e008      	b.n	80070b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800709e:	f7fb f9bf 	bl	8002420 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d901      	bls.n	80070b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e086      	b.n	80071be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070b0:	4b45      	ldr	r3, [pc, #276]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1f0      	bne.n	800709e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070bc:	4b42      	ldr	r3, [pc, #264]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	051b      	lsls	r3, r3, #20
 80070ca:	493f      	ldr	r1, [pc, #252]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	628b      	str	r3, [r1, #40]	; 0x28
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	3b01      	subs	r3, #1
 80070e0:	025b      	lsls	r3, r3, #9
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	041b      	lsls	r3, r3, #16
 80070ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	061b      	lsls	r3, r3, #24
 80070fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007100:	4931      	ldr	r1, [pc, #196]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007102:	4313      	orrs	r3, r2
 8007104:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007106:	4b30      	ldr	r3, [pc, #192]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	492d      	ldr	r1, [pc, #180]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007114:	4313      	orrs	r3, r2
 8007116:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007118:	4b2b      	ldr	r3, [pc, #172]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	4928      	ldr	r1, [pc, #160]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007126:	4313      	orrs	r3, r2
 8007128:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800712a:	4b27      	ldr	r3, [pc, #156]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	4a26      	ldr	r2, [pc, #152]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007134:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007136:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800713a:	4b24      	ldr	r3, [pc, #144]	; (80071cc <RCCEx_PLL3_Config+0x160>)
 800713c:	4013      	ands	r3, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	69d2      	ldr	r2, [r2, #28]
 8007142:	00d2      	lsls	r2, r2, #3
 8007144:	4920      	ldr	r1, [pc, #128]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007146:	4313      	orrs	r3, r2
 8007148:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800714a:	4b1f      	ldr	r3, [pc, #124]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	4a1e      	ldr	r2, [pc, #120]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800715c:	4b1a      	ldr	r3, [pc, #104]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	4a19      	ldr	r2, [pc, #100]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007162:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007166:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007168:	e00f      	b.n	800718a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d106      	bne.n	800717e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007170:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	4a14      	ldr	r2, [pc, #80]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007176:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800717a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800717c:	e005      	b.n	800718a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	4a11      	ldr	r2, [pc, #68]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007188:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800718a:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a0e      	ldr	r2, [pc, #56]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007196:	f7fb f943 	bl	8002420 <HAL_GetTick>
 800719a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800719c:	e008      	b.n	80071b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800719e:	f7fb f93f 	bl	8002420 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e006      	b.n	80071be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <RCCEx_PLL3_Config+0x15c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0f0      	beq.n	800719e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
 80071cc:	ffff0007 	.word	0xffff0007

080071d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e049      	b.n	8007276 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fa fada 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f000 fb5e 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b01      	cmp	r3, #1
 8007292:	d001      	beq.n	8007298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e04c      	b.n	8007332 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a26      	ldr	r2, [pc, #152]	; (8007340 <HAL_TIM_Base_Start+0xc0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d022      	beq.n	80072f0 <HAL_TIM_Base_Start+0x70>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b2:	d01d      	beq.n	80072f0 <HAL_TIM_Base_Start+0x70>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a22      	ldr	r2, [pc, #136]	; (8007344 <HAL_TIM_Base_Start+0xc4>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d018      	beq.n	80072f0 <HAL_TIM_Base_Start+0x70>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a21      	ldr	r2, [pc, #132]	; (8007348 <HAL_TIM_Base_Start+0xc8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d013      	beq.n	80072f0 <HAL_TIM_Base_Start+0x70>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a1f      	ldr	r2, [pc, #124]	; (800734c <HAL_TIM_Base_Start+0xcc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00e      	beq.n	80072f0 <HAL_TIM_Base_Start+0x70>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1e      	ldr	r2, [pc, #120]	; (8007350 <HAL_TIM_Base_Start+0xd0>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d009      	beq.n	80072f0 <HAL_TIM_Base_Start+0x70>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1c      	ldr	r2, [pc, #112]	; (8007354 <HAL_TIM_Base_Start+0xd4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d004      	beq.n	80072f0 <HAL_TIM_Base_Start+0x70>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a1b      	ldr	r2, [pc, #108]	; (8007358 <HAL_TIM_Base_Start+0xd8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d115      	bne.n	800731c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	4b19      	ldr	r3, [pc, #100]	; (800735c <HAL_TIM_Base_Start+0xdc>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b06      	cmp	r3, #6
 8007300:	d015      	beq.n	800732e <HAL_TIM_Base_Start+0xae>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007308:	d011      	beq.n	800732e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f042 0201 	orr.w	r2, r2, #1
 8007318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731a:	e008      	b.n	800732e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	e000      	b.n	8007330 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800732e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40010000 	.word	0x40010000
 8007344:	40000400 	.word	0x40000400
 8007348:	40000800 	.word	0x40000800
 800734c:	40000c00 	.word	0x40000c00
 8007350:	40010400 	.word	0x40010400
 8007354:	40001800 	.word	0x40001800
 8007358:	40014000 	.word	0x40014000
 800735c:	00010007 	.word	0x00010007

08007360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d001      	beq.n	8007378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e054      	b.n	8007422 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a26      	ldr	r2, [pc, #152]	; (8007430 <HAL_TIM_Base_Start_IT+0xd0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d022      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x80>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a2:	d01d      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x80>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a22      	ldr	r2, [pc, #136]	; (8007434 <HAL_TIM_Base_Start_IT+0xd4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d018      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x80>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a21      	ldr	r2, [pc, #132]	; (8007438 <HAL_TIM_Base_Start_IT+0xd8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d013      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x80>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1f      	ldr	r2, [pc, #124]	; (800743c <HAL_TIM_Base_Start_IT+0xdc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00e      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x80>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1e      	ldr	r2, [pc, #120]	; (8007440 <HAL_TIM_Base_Start_IT+0xe0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d009      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x80>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1c      	ldr	r2, [pc, #112]	; (8007444 <HAL_TIM_Base_Start_IT+0xe4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x80>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1b      	ldr	r2, [pc, #108]	; (8007448 <HAL_TIM_Base_Start_IT+0xe8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d115      	bne.n	800740c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	4b19      	ldr	r3, [pc, #100]	; (800744c <HAL_TIM_Base_Start_IT+0xec>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b06      	cmp	r3, #6
 80073f0:	d015      	beq.n	800741e <HAL_TIM_Base_Start_IT+0xbe>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f8:	d011      	beq.n	800741e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0201 	orr.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740a:	e008      	b.n	800741e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	e000      	b.n	8007420 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40010000 	.word	0x40010000
 8007434:	40000400 	.word	0x40000400
 8007438:	40000800 	.word	0x40000800
 800743c:	40000c00 	.word	0x40000c00
 8007440:	40010400 	.word	0x40010400
 8007444:	40001800 	.word	0x40001800
 8007448:	40014000 	.word	0x40014000
 800744c:	00010007 	.word	0x00010007

08007450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b02      	cmp	r3, #2
 8007464:	d122      	bne.n	80074ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b02      	cmp	r3, #2
 8007472:	d11b      	bne.n	80074ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f06f 0202 	mvn.w	r2, #2
 800747c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9fe 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007498:	e005      	b.n	80074a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f9f0 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fa01 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d122      	bne.n	8007500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d11b      	bne.n	8007500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0204 	mvn.w	r2, #4
 80074d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2202      	movs	r2, #2
 80074d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9d4 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 80074ec:	e005      	b.n	80074fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f9c6 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f9d7 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	2b08      	cmp	r3, #8
 800750c:	d122      	bne.n	8007554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b08      	cmp	r3, #8
 800751a:	d11b      	bne.n	8007554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f06f 0208 	mvn.w	r2, #8
 8007524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2204      	movs	r2, #4
 800752a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f9aa 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007540:	e005      	b.n	800754e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f99c 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9ad 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b10      	cmp	r3, #16
 8007560:	d122      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b10      	cmp	r3, #16
 800756e:	d11b      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f06f 0210 	mvn.w	r2, #16
 8007578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2208      	movs	r2, #8
 800757e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f980 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007594:	e005      	b.n	80075a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f972 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f983 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d10e      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d107      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0201 	mvn.w	r2, #1
 80075cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7f9 ffb5 	bl	800153e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075de:	2b80      	cmp	r3, #128	; 0x80
 80075e0:	d10e      	bne.n	8007600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d107      	bne.n	8007600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fb38 	bl	8007c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800760e:	d10e      	bne.n	800762e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b80      	cmp	r3, #128	; 0x80
 800761c:	d107      	bne.n	800762e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fb2b 	bl	8007c84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007638:	2b40      	cmp	r3, #64	; 0x40
 800763a:	d10e      	bne.n	800765a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d107      	bne.n	800765a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f931 	bl	80078bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b20      	cmp	r3, #32
 8007666:	d10e      	bne.n	8007686 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b20      	cmp	r3, #32
 8007674:	d107      	bne.n	8007686 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f06f 0220 	mvn.w	r2, #32
 800767e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 faeb 	bl	8007c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_TIM_ConfigClockSource+0x1c>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e0dc      	b.n	8007866 <HAL_TIM_ConfigClockSource+0x1d6>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	4b6a      	ldr	r3, [pc, #424]	; (8007870 <HAL_TIM_ConfigClockSource+0x1e0>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a64      	ldr	r2, [pc, #400]	; (8007874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	f000 80a9 	beq.w	800783a <HAL_TIM_ConfigClockSource+0x1aa>
 80076e8:	4a62      	ldr	r2, [pc, #392]	; (8007874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	f200 80ae 	bhi.w	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 80076f0:	4a61      	ldr	r2, [pc, #388]	; (8007878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	f000 80a1 	beq.w	800783a <HAL_TIM_ConfigClockSource+0x1aa>
 80076f8:	4a5f      	ldr	r2, [pc, #380]	; (8007878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	f200 80a6 	bhi.w	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 8007700:	4a5e      	ldr	r2, [pc, #376]	; (800787c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007702:	4293      	cmp	r3, r2
 8007704:	f000 8099 	beq.w	800783a <HAL_TIM_ConfigClockSource+0x1aa>
 8007708:	4a5c      	ldr	r2, [pc, #368]	; (800787c <HAL_TIM_ConfigClockSource+0x1ec>)
 800770a:	4293      	cmp	r3, r2
 800770c:	f200 809e 	bhi.w	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 8007710:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007714:	f000 8091 	beq.w	800783a <HAL_TIM_ConfigClockSource+0x1aa>
 8007718:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800771c:	f200 8096 	bhi.w	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 8007720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007724:	f000 8089 	beq.w	800783a <HAL_TIM_ConfigClockSource+0x1aa>
 8007728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800772c:	f200 808e 	bhi.w	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 8007730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007734:	d03e      	beq.n	80077b4 <HAL_TIM_ConfigClockSource+0x124>
 8007736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773a:	f200 8087 	bhi.w	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 800773e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007742:	f000 8086 	beq.w	8007852 <HAL_TIM_ConfigClockSource+0x1c2>
 8007746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774a:	d87f      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 800774c:	2b70      	cmp	r3, #112	; 0x70
 800774e:	d01a      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0xf6>
 8007750:	2b70      	cmp	r3, #112	; 0x70
 8007752:	d87b      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 8007754:	2b60      	cmp	r3, #96	; 0x60
 8007756:	d050      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x16a>
 8007758:	2b60      	cmp	r3, #96	; 0x60
 800775a:	d877      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 800775c:	2b50      	cmp	r3, #80	; 0x50
 800775e:	d03c      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x14a>
 8007760:	2b50      	cmp	r3, #80	; 0x50
 8007762:	d873      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 8007764:	2b40      	cmp	r3, #64	; 0x40
 8007766:	d058      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x18a>
 8007768:	2b40      	cmp	r3, #64	; 0x40
 800776a:	d86f      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 800776c:	2b30      	cmp	r3, #48	; 0x30
 800776e:	d064      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x1aa>
 8007770:	2b30      	cmp	r3, #48	; 0x30
 8007772:	d86b      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 8007774:	2b20      	cmp	r3, #32
 8007776:	d060      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x1aa>
 8007778:	2b20      	cmp	r3, #32
 800777a:	d867      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x1bc>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d05c      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x1aa>
 8007780:	2b10      	cmp	r3, #16
 8007782:	d05a      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x1aa>
 8007784:	e062      	b.n	800784c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6899      	ldr	r1, [r3, #8]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f000 f9b3 	bl	8007b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	609a      	str	r2, [r3, #8]
      break;
 80077b2:	e04f      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	6899      	ldr	r1, [r3, #8]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f000 f99c 	bl	8007b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077d6:	609a      	str	r2, [r3, #8]
      break;
 80077d8:	e03c      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	6859      	ldr	r1, [r3, #4]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f000 f90c 	bl	8007a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2150      	movs	r1, #80	; 0x50
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f966 	bl	8007ac4 <TIM_ITRx_SetConfig>
      break;
 80077f8:	e02c      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6859      	ldr	r1, [r3, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	461a      	mov	r2, r3
 8007808:	f000 f92b 	bl	8007a62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2160      	movs	r1, #96	; 0x60
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f956 	bl	8007ac4 <TIM_ITRx_SetConfig>
      break;
 8007818:	e01c      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6859      	ldr	r1, [r3, #4]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	461a      	mov	r2, r3
 8007828:	f000 f8ec 	bl	8007a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2140      	movs	r1, #64	; 0x40
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f946 	bl	8007ac4 <TIM_ITRx_SetConfig>
      break;
 8007838:	e00c      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4619      	mov	r1, r3
 8007844:	4610      	mov	r0, r2
 8007846:	f000 f93d 	bl	8007ac4 <TIM_ITRx_SetConfig>
      break;
 800784a:	e003      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
      break;
 8007850:	e000      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	ffceff88 	.word	0xffceff88
 8007874:	00100040 	.word	0x00100040
 8007878:	00100030 	.word	0x00100030
 800787c:	00100020 	.word	0x00100020

08007880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a40      	ldr	r2, [pc, #256]	; (80079e4 <TIM_Base_SetConfig+0x114>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ee:	d00f      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a3d      	ldr	r2, [pc, #244]	; (80079e8 <TIM_Base_SetConfig+0x118>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00b      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a3c      	ldr	r2, [pc, #240]	; (80079ec <TIM_Base_SetConfig+0x11c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d007      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a3b      	ldr	r2, [pc, #236]	; (80079f0 <TIM_Base_SetConfig+0x120>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a3a      	ldr	r2, [pc, #232]	; (80079f4 <TIM_Base_SetConfig+0x124>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d108      	bne.n	8007922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a2f      	ldr	r2, [pc, #188]	; (80079e4 <TIM_Base_SetConfig+0x114>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d01f      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007930:	d01b      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a2c      	ldr	r2, [pc, #176]	; (80079e8 <TIM_Base_SetConfig+0x118>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d017      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a2b      	ldr	r2, [pc, #172]	; (80079ec <TIM_Base_SetConfig+0x11c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d013      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <TIM_Base_SetConfig+0x120>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00f      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a29      	ldr	r2, [pc, #164]	; (80079f4 <TIM_Base_SetConfig+0x124>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00b      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a28      	ldr	r2, [pc, #160]	; (80079f8 <TIM_Base_SetConfig+0x128>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d007      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a27      	ldr	r2, [pc, #156]	; (80079fc <TIM_Base_SetConfig+0x12c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d003      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a26      	ldr	r2, [pc, #152]	; (8007a00 <TIM_Base_SetConfig+0x130>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d108      	bne.n	800797c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a10      	ldr	r2, [pc, #64]	; (80079e4 <TIM_Base_SetConfig+0x114>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00f      	beq.n	80079c8 <TIM_Base_SetConfig+0xf8>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a12      	ldr	r2, [pc, #72]	; (80079f4 <TIM_Base_SetConfig+0x124>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00b      	beq.n	80079c8 <TIM_Base_SetConfig+0xf8>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a11      	ldr	r2, [pc, #68]	; (80079f8 <TIM_Base_SetConfig+0x128>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d007      	beq.n	80079c8 <TIM_Base_SetConfig+0xf8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a10      	ldr	r2, [pc, #64]	; (80079fc <TIM_Base_SetConfig+0x12c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d003      	beq.n	80079c8 <TIM_Base_SetConfig+0xf8>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a0f      	ldr	r2, [pc, #60]	; (8007a00 <TIM_Base_SetConfig+0x130>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d103      	bne.n	80079d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	615a      	str	r2, [r3, #20]
}
 80079d6:	bf00      	nop
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40010000 	.word	0x40010000
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40000800 	.word	0x40000800
 80079f0:	40000c00 	.word	0x40000c00
 80079f4:	40010400 	.word	0x40010400
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40014400 	.word	0x40014400
 8007a00:	40014800 	.word	0x40014800

08007a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f023 0201 	bic.w	r2, r3, #1
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f023 030a 	bic.w	r3, r3, #10
 8007a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b087      	sub	sp, #28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	f023 0210 	bic.w	r2, r3, #16
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	031b      	lsls	r3, r3, #12
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	621a      	str	r2, [r3, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
	...

08007ac4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4b09      	ldr	r3, [pc, #36]	; (8007afc <TIM_ITRx_SetConfig+0x38>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f043 0307 	orr.w	r3, r3, #7
 8007ae6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	609a      	str	r2, [r3, #8]
}
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	ffcfff8f 	.word	0xffcfff8f

08007b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	021a      	lsls	r2, r3, #8
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	431a      	orrs	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	609a      	str	r2, [r3, #8]
}
 8007b34:	bf00      	nop
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e06d      	b.n	8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a30      	ldr	r2, [pc, #192]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d004      	beq.n	8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a2f      	ldr	r2, [pc, #188]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d108      	bne.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a20      	ldr	r2, [pc, #128]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d022      	beq.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bca:	d01d      	beq.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1d      	ldr	r2, [pc, #116]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d018      	beq.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d013      	beq.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a1a      	ldr	r2, [pc, #104]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00e      	beq.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a15      	ldr	r2, [pc, #84]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d009      	beq.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a16      	ldr	r2, [pc, #88]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d004      	beq.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d10c      	bne.n	8007c22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	40010000 	.word	0x40010000
 8007c44:	40010400 	.word	0x40010400
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	40001800 	.word	0x40001800
 8007c58:	40014000 	.word	0x40014000

08007c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e042      	b.n	8007d30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7f9 fd99 	bl	80017f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2224      	movs	r2, #36	; 0x24
 8007cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fd5c 	bl	8008798 <UART_SetConfig>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e022      	b.n	8007d30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 fab8 	bl	8009268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0201 	orr.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 fb3f 	bl	80093ac <UART_CheckIdleState>
 8007d2e:	4603      	mov	r3, r0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d17b      	bne.n	8007e4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <HAL_UART_Transmit+0x26>
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e074      	b.n	8007e4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2221      	movs	r2, #33	; 0x21
 8007d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d72:	f7fa fb55 	bl	8002420 <HAL_GetTick>
 8007d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d90:	d108      	bne.n	8007da4 <HAL_UART_Transmit+0x6c>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	61bb      	str	r3, [r7, #24]
 8007da2:	e003      	b.n	8007dac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dac:	e030      	b.n	8007e10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2200      	movs	r2, #0
 8007db6:	2180      	movs	r1, #128	; 0x80
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f001 fba1 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e03d      	b.n	8007e4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10b      	bne.n	8007dee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007de4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	3302      	adds	r3, #2
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e007      	b.n	8007dfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1c8      	bne.n	8007dae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	2200      	movs	r2, #0
 8007e24:	2140      	movs	r1, #64	; 0x40
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f001 fb6a 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e006      	b.n	8007e4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e000      	b.n	8007e4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007e4a:	2302      	movs	r3, #2
  }
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3720      	adds	r7, #32
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08a      	sub	sp, #40	; 0x28
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	f040 80b5 	bne.w	8007fda <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <HAL_UART_Receive+0x28>
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e0ad      	b.n	8007fdc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2222      	movs	r2, #34	; 0x22
 8007e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e96:	f7fa fac3 	bl	8002420 <HAL_GetTick>
 8007e9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	88fa      	ldrh	r2, [r7, #6]
 8007ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	88fa      	ldrh	r2, [r7, #6]
 8007ea8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb4:	d10e      	bne.n	8007ed4 <HAL_UART_Receive+0x80>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <HAL_UART_Receive+0x76>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ec8:	e02d      	b.n	8007f26 <HAL_UART_Receive+0xd2>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	22ff      	movs	r2, #255	; 0xff
 8007ece:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ed2:	e028      	b.n	8007f26 <HAL_UART_Receive+0xd2>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10d      	bne.n	8007ef8 <HAL_UART_Receive+0xa4>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <HAL_UART_Receive+0x9a>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	22ff      	movs	r2, #255	; 0xff
 8007ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007eec:	e01b      	b.n	8007f26 <HAL_UART_Receive+0xd2>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	227f      	movs	r2, #127	; 0x7f
 8007ef2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ef6:	e016      	b.n	8007f26 <HAL_UART_Receive+0xd2>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f00:	d10d      	bne.n	8007f1e <HAL_UART_Receive+0xca>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d104      	bne.n	8007f14 <HAL_UART_Receive+0xc0>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	227f      	movs	r2, #127	; 0x7f
 8007f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f12:	e008      	b.n	8007f26 <HAL_UART_Receive+0xd2>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	223f      	movs	r2, #63	; 0x3f
 8007f18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f1c:	e003      	b.n	8007f26 <HAL_UART_Receive+0xd2>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f2c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f36:	d108      	bne.n	8007f4a <HAL_UART_Receive+0xf6>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	61bb      	str	r3, [r7, #24]
 8007f48:	e003      	b.n	8007f52 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007f52:	e036      	b.n	8007fc2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2120      	movs	r1, #32
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f001 face 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e032      	b.n	8007fdc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10c      	bne.n	8007f96 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	8a7b      	ldrh	r3, [r7, #18]
 8007f86:	4013      	ands	r3, r2
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	3302      	adds	r3, #2
 8007f92:	61bb      	str	r3, [r7, #24]
 8007f94:	e00c      	b.n	8007fb0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	8a7b      	ldrh	r3, [r7, #18]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	3301      	adds	r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1c2      	bne.n	8007f54 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e000      	b.n	8007fdc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007fda:	2302      	movs	r3, #2
  }
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3720      	adds	r7, #32
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b0ba      	sub	sp, #232	; 0xe8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800800a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800800e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008012:	4013      	ands	r3, r2
 8008014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11b      	bne.n	8008058 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d015      	beq.n	8008058 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d009      	beq.n	8008058 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8377 	beq.w	800873c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
      }
      return;
 8008056:	e371      	b.n	800873c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008058:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8123 	beq.w	80082a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008062:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008066:	4b8d      	ldr	r3, [pc, #564]	; (800829c <HAL_UART_IRQHandler+0x2b8>)
 8008068:	4013      	ands	r3, r2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800806e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008072:	4b8b      	ldr	r3, [pc, #556]	; (80082a0 <HAL_UART_IRQHandler+0x2bc>)
 8008074:	4013      	ands	r3, r2
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 8116 	beq.w	80082a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b00      	cmp	r3, #0
 8008086:	d011      	beq.n	80080ac <HAL_UART_IRQHandler+0xc8>
 8008088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800808c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00b      	beq.n	80080ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2201      	movs	r2, #1
 800809a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a2:	f043 0201 	orr.w	r2, r3, #1
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d011      	beq.n	80080dc <HAL_UART_IRQHandler+0xf8>
 80080b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00b      	beq.n	80080dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2202      	movs	r2, #2
 80080ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d2:	f043 0204 	orr.w	r2, r3, #4
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d011      	beq.n	800810c <HAL_UART_IRQHandler+0x128>
 80080e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2204      	movs	r2, #4
 80080fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008102:	f043 0202 	orr.w	r2, r3, #2
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800810c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008110:	f003 0308 	and.w	r3, r3, #8
 8008114:	2b00      	cmp	r3, #0
 8008116:	d017      	beq.n	8008148 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d105      	bne.n	8008130 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008124:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008128:	4b5c      	ldr	r3, [pc, #368]	; (800829c <HAL_UART_IRQHandler+0x2b8>)
 800812a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2208      	movs	r2, #8
 8008136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813e:	f043 0208 	orr.w	r2, r3, #8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008150:	2b00      	cmp	r3, #0
 8008152:	d012      	beq.n	800817a <HAL_UART_IRQHandler+0x196>
 8008154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00c      	beq.n	800817a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008168:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008170:	f043 0220 	orr.w	r2, r3, #32
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 82dd 	beq.w	8008740 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b00      	cmp	r3, #0
 8008190:	d013      	beq.n	80081ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d105      	bne.n	80081aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800819e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ce:	2b40      	cmp	r3, #64	; 0x40
 80081d0:	d005      	beq.n	80081de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d054      	beq.n	8008288 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 f9f6 	bl	80095d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d146      	bne.n	8008280 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3308      	adds	r3, #8
 80081f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800820c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3308      	adds	r3, #8
 800821a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800821e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800822a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1d9      	bne.n	80081f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008244:	2b00      	cmp	r3, #0
 8008246:	d017      	beq.n	8008278 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800824e:	4a15      	ldr	r2, [pc, #84]	; (80082a4 <HAL_UART_IRQHandler+0x2c0>)
 8008250:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008258:	4618      	mov	r0, r3
 800825a:	f7fa ff37 	bl	80030cc <HAL_DMA_Abort_IT>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d019      	beq.n	8008298 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800826a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008272:	4610      	mov	r0, r2
 8008274:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008276:	e00f      	b.n	8008298 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fa77 	bl	800876c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827e:	e00b      	b.n	8008298 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fa73 	bl	800876c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008286:	e007      	b.n	8008298 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fa6f 	bl	800876c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008296:	e253      	b.n	8008740 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008298:	bf00      	nop
    return;
 800829a:	e251      	b.n	8008740 <HAL_UART_IRQHandler+0x75c>
 800829c:	10000001 	.word	0x10000001
 80082a0:	04000120 	.word	0x04000120
 80082a4:	0800969d 	.word	0x0800969d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	f040 81e7 	bne.w	8008680 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b6:	f003 0310 	and.w	r3, r3, #16
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 81e0 	beq.w	8008680 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082c4:	f003 0310 	and.w	r3, r3, #16
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 81d9 	beq.w	8008680 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2210      	movs	r2, #16
 80082d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e0:	2b40      	cmp	r3, #64	; 0x40
 80082e2:	f040 8151 	bne.w	8008588 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a96      	ldr	r2, [pc, #600]	; (8008548 <HAL_UART_IRQHandler+0x564>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d068      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a93      	ldr	r2, [pc, #588]	; (800854c <HAL_UART_IRQHandler+0x568>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d061      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a91      	ldr	r2, [pc, #580]	; (8008550 <HAL_UART_IRQHandler+0x56c>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d05a      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a8e      	ldr	r2, [pc, #568]	; (8008554 <HAL_UART_IRQHandler+0x570>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d053      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a8c      	ldr	r2, [pc, #560]	; (8008558 <HAL_UART_IRQHandler+0x574>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d04c      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a89      	ldr	r2, [pc, #548]	; (800855c <HAL_UART_IRQHandler+0x578>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d045      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a87      	ldr	r2, [pc, #540]	; (8008560 <HAL_UART_IRQHandler+0x57c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d03e      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a84      	ldr	r2, [pc, #528]	; (8008564 <HAL_UART_IRQHandler+0x580>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d037      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a82      	ldr	r2, [pc, #520]	; (8008568 <HAL_UART_IRQHandler+0x584>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d030      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a7f      	ldr	r2, [pc, #508]	; (800856c <HAL_UART_IRQHandler+0x588>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d029      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a7d      	ldr	r2, [pc, #500]	; (8008570 <HAL_UART_IRQHandler+0x58c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d022      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a7a      	ldr	r2, [pc, #488]	; (8008574 <HAL_UART_IRQHandler+0x590>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d01b      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a78      	ldr	r2, [pc, #480]	; (8008578 <HAL_UART_IRQHandler+0x594>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d014      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a75      	ldr	r2, [pc, #468]	; (800857c <HAL_UART_IRQHandler+0x598>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00d      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a73      	ldr	r2, [pc, #460]	; (8008580 <HAL_UART_IRQHandler+0x59c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d006      	beq.n	80083c6 <HAL_UART_IRQHandler+0x3e2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a70      	ldr	r2, [pc, #448]	; (8008584 <HAL_UART_IRQHandler+0x5a0>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d106      	bne.n	80083d4 <HAL_UART_IRQHandler+0x3f0>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	e005      	b.n	80083e0 <HAL_UART_IRQHandler+0x3fc>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 81ab 	beq.w	8008744 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083f8:	429a      	cmp	r2, r3
 80083fa:	f080 81a3 	bcs.w	8008744 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008404:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008414:	f000 8087 	beq.w	8008526 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800842c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008446:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800844e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800845a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1da      	bne.n	8008418 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008486:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800848a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800848e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e1      	bne.n	8008462 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3308      	adds	r3, #8
 80084a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3308      	adds	r3, #8
 80084be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e3      	bne.n	800849e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2220      	movs	r2, #32
 80084da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f4:	f023 0310 	bic.w	r3, r3, #16
 80084f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008506:	65bb      	str	r3, [r7, #88]	; 0x58
 8008508:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800850c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e4      	bne.n	80084e4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008520:	4618      	mov	r0, r3
 8008522:	f7fa fab5 	bl	8002a90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2202      	movs	r2, #2
 800852a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008538:	b29b      	uxth	r3, r3
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	b29b      	uxth	r3, r3
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f91d 	bl	8008780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008546:	e0fd      	b.n	8008744 <HAL_UART_IRQHandler+0x760>
 8008548:	40020010 	.word	0x40020010
 800854c:	40020028 	.word	0x40020028
 8008550:	40020040 	.word	0x40020040
 8008554:	40020058 	.word	0x40020058
 8008558:	40020070 	.word	0x40020070
 800855c:	40020088 	.word	0x40020088
 8008560:	400200a0 	.word	0x400200a0
 8008564:	400200b8 	.word	0x400200b8
 8008568:	40020410 	.word	0x40020410
 800856c:	40020428 	.word	0x40020428
 8008570:	40020440 	.word	0x40020440
 8008574:	40020458 	.word	0x40020458
 8008578:	40020470 	.word	0x40020470
 800857c:	40020488 	.word	0x40020488
 8008580:	400204a0 	.word	0x400204a0
 8008584:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008594:	b29b      	uxth	r3, r3
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 80cf 	beq.w	8008748 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80085aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 80ca 	beq.w	8008748 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085d6:	647b      	str	r3, [r7, #68]	; 0x44
 80085d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085de:	e841 2300 	strex	r3, r2, [r1]
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1e4      	bne.n	80085b4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	623b      	str	r3, [r7, #32]
   return(result);
 80085fa:	6a3a      	ldr	r2, [r7, #32]
 80085fc:	4b55      	ldr	r3, [pc, #340]	; (8008754 <HAL_UART_IRQHandler+0x770>)
 80085fe:	4013      	ands	r3, r2
 8008600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3308      	adds	r3, #8
 800860a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800860e:	633a      	str	r2, [r7, #48]	; 0x30
 8008610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e3      	bne.n	80085ea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	60fb      	str	r3, [r7, #12]
   return(result);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 0310 	bic.w	r3, r3, #16
 800864a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008658:	61fb      	str	r3, [r7, #28]
 800865a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865c:	69b9      	ldr	r1, [r7, #24]
 800865e:	69fa      	ldr	r2, [r7, #28]
 8008660:	e841 2300 	strex	r3, r2, [r1]
 8008664:	617b      	str	r3, [r7, #20]
   return(result);
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e4      	bne.n	8008636 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f881 	bl	8008780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800867e:	e063      	b.n	8008748 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00e      	beq.n	80086aa <HAL_UART_IRQHandler+0x6c6>
 800868c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d008      	beq.n	80086aa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f001 f83b 	bl	800971e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086a8:	e051      	b.n	800874e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d014      	beq.n	80086e0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d008      	beq.n	80086e0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d03a      	beq.n	800874c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4798      	blx	r3
    }
    return;
 80086de:	e035      	b.n	800874c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d009      	beq.n	8008700 <HAL_UART_IRQHandler+0x71c>
 80086ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 ffe5 	bl	80096c8 <UART_EndTransmit_IT>
    return;
 80086fe:	e026      	b.n	800874e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d009      	beq.n	8008720 <HAL_UART_IRQHandler+0x73c>
 800870c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008710:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d003      	beq.n	8008720 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f001 f814 	bl	8009746 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800871e:	e016      	b.n	800874e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d010      	beq.n	800874e <HAL_UART_IRQHandler+0x76a>
 800872c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008730:	2b00      	cmp	r3, #0
 8008732:	da0c      	bge.n	800874e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fffc 	bl	8009732 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800873a:	e008      	b.n	800874e <HAL_UART_IRQHandler+0x76a>
      return;
 800873c:	bf00      	nop
 800873e:	e006      	b.n	800874e <HAL_UART_IRQHandler+0x76a>
    return;
 8008740:	bf00      	nop
 8008742:	e004      	b.n	800874e <HAL_UART_IRQHandler+0x76a>
      return;
 8008744:	bf00      	nop
 8008746:	e002      	b.n	800874e <HAL_UART_IRQHandler+0x76a>
      return;
 8008748:	bf00      	nop
 800874a:	e000      	b.n	800874e <HAL_UART_IRQHandler+0x76a>
    return;
 800874c:	bf00      	nop
  }
}
 800874e:	37e8      	adds	r7, #232	; 0xe8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	effffffe 	.word	0xeffffffe

08008758 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800879c:	b092      	sub	sp, #72	; 0x48
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	431a      	orrs	r2, r3
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	4313      	orrs	r3, r2
 80087be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	4bbe      	ldr	r3, [pc, #760]	; (8008ac0 <UART_SetConfig+0x328>)
 80087c8:	4013      	ands	r3, r2
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	6812      	ldr	r2, [r2, #0]
 80087ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087d0:	430b      	orrs	r3, r1
 80087d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4ab3      	ldr	r2, [pc, #716]	; (8008ac4 <UART_SetConfig+0x32c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d004      	beq.n	8008804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008800:	4313      	orrs	r3, r2
 8008802:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	4baf      	ldr	r3, [pc, #700]	; (8008ac8 <UART_SetConfig+0x330>)
 800880c:	4013      	ands	r3, r2
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008814:	430b      	orrs	r3, r1
 8008816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	f023 010f 	bic.w	r1, r3, #15
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4aa6      	ldr	r2, [pc, #664]	; (8008acc <UART_SetConfig+0x334>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d177      	bne.n	8008928 <UART_SetConfig+0x190>
 8008838:	4ba5      	ldr	r3, [pc, #660]	; (8008ad0 <UART_SetConfig+0x338>)
 800883a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008840:	2b28      	cmp	r3, #40	; 0x28
 8008842:	d86d      	bhi.n	8008920 <UART_SetConfig+0x188>
 8008844:	a201      	add	r2, pc, #4	; (adr r2, 800884c <UART_SetConfig+0xb4>)
 8008846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884a:	bf00      	nop
 800884c:	080088f1 	.word	0x080088f1
 8008850:	08008921 	.word	0x08008921
 8008854:	08008921 	.word	0x08008921
 8008858:	08008921 	.word	0x08008921
 800885c:	08008921 	.word	0x08008921
 8008860:	08008921 	.word	0x08008921
 8008864:	08008921 	.word	0x08008921
 8008868:	08008921 	.word	0x08008921
 800886c:	080088f9 	.word	0x080088f9
 8008870:	08008921 	.word	0x08008921
 8008874:	08008921 	.word	0x08008921
 8008878:	08008921 	.word	0x08008921
 800887c:	08008921 	.word	0x08008921
 8008880:	08008921 	.word	0x08008921
 8008884:	08008921 	.word	0x08008921
 8008888:	08008921 	.word	0x08008921
 800888c:	08008901 	.word	0x08008901
 8008890:	08008921 	.word	0x08008921
 8008894:	08008921 	.word	0x08008921
 8008898:	08008921 	.word	0x08008921
 800889c:	08008921 	.word	0x08008921
 80088a0:	08008921 	.word	0x08008921
 80088a4:	08008921 	.word	0x08008921
 80088a8:	08008921 	.word	0x08008921
 80088ac:	08008909 	.word	0x08008909
 80088b0:	08008921 	.word	0x08008921
 80088b4:	08008921 	.word	0x08008921
 80088b8:	08008921 	.word	0x08008921
 80088bc:	08008921 	.word	0x08008921
 80088c0:	08008921 	.word	0x08008921
 80088c4:	08008921 	.word	0x08008921
 80088c8:	08008921 	.word	0x08008921
 80088cc:	08008911 	.word	0x08008911
 80088d0:	08008921 	.word	0x08008921
 80088d4:	08008921 	.word	0x08008921
 80088d8:	08008921 	.word	0x08008921
 80088dc:	08008921 	.word	0x08008921
 80088e0:	08008921 	.word	0x08008921
 80088e4:	08008921 	.word	0x08008921
 80088e8:	08008921 	.word	0x08008921
 80088ec:	08008919 	.word	0x08008919
 80088f0:	2301      	movs	r3, #1
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f6:	e222      	b.n	8008d3e <UART_SetConfig+0x5a6>
 80088f8:	2304      	movs	r3, #4
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fe:	e21e      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008900:	2308      	movs	r3, #8
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008906:	e21a      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008908:	2310      	movs	r3, #16
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e216      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008910:	2320      	movs	r3, #32
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e212      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008918:	2340      	movs	r3, #64	; 0x40
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891e:	e20e      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008920:	2380      	movs	r3, #128	; 0x80
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008926:	e20a      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a69      	ldr	r2, [pc, #420]	; (8008ad4 <UART_SetConfig+0x33c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d130      	bne.n	8008994 <UART_SetConfig+0x1fc>
 8008932:	4b67      	ldr	r3, [pc, #412]	; (8008ad0 <UART_SetConfig+0x338>)
 8008934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	2b05      	cmp	r3, #5
 800893c:	d826      	bhi.n	800898c <UART_SetConfig+0x1f4>
 800893e:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <UART_SetConfig+0x1ac>)
 8008940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008944:	0800895d 	.word	0x0800895d
 8008948:	08008965 	.word	0x08008965
 800894c:	0800896d 	.word	0x0800896d
 8008950:	08008975 	.word	0x08008975
 8008954:	0800897d 	.word	0x0800897d
 8008958:	08008985 	.word	0x08008985
 800895c:	2300      	movs	r3, #0
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008962:	e1ec      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008964:	2304      	movs	r3, #4
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896a:	e1e8      	b.n	8008d3e <UART_SetConfig+0x5a6>
 800896c:	2308      	movs	r3, #8
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e1e4      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008974:	2310      	movs	r3, #16
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e1e0      	b.n	8008d3e <UART_SetConfig+0x5a6>
 800897c:	2320      	movs	r3, #32
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008982:	e1dc      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008984:	2340      	movs	r3, #64	; 0x40
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898a:	e1d8      	b.n	8008d3e <UART_SetConfig+0x5a6>
 800898c:	2380      	movs	r3, #128	; 0x80
 800898e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008992:	e1d4      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a4f      	ldr	r2, [pc, #316]	; (8008ad8 <UART_SetConfig+0x340>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d130      	bne.n	8008a00 <UART_SetConfig+0x268>
 800899e:	4b4c      	ldr	r3, [pc, #304]	; (8008ad0 <UART_SetConfig+0x338>)
 80089a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a2:	f003 0307 	and.w	r3, r3, #7
 80089a6:	2b05      	cmp	r3, #5
 80089a8:	d826      	bhi.n	80089f8 <UART_SetConfig+0x260>
 80089aa:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <UART_SetConfig+0x218>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	080089c9 	.word	0x080089c9
 80089b4:	080089d1 	.word	0x080089d1
 80089b8:	080089d9 	.word	0x080089d9
 80089bc:	080089e1 	.word	0x080089e1
 80089c0:	080089e9 	.word	0x080089e9
 80089c4:	080089f1 	.word	0x080089f1
 80089c8:	2300      	movs	r3, #0
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e1b6      	b.n	8008d3e <UART_SetConfig+0x5a6>
 80089d0:	2304      	movs	r3, #4
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d6:	e1b2      	b.n	8008d3e <UART_SetConfig+0x5a6>
 80089d8:	2308      	movs	r3, #8
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e1ae      	b.n	8008d3e <UART_SetConfig+0x5a6>
 80089e0:	2310      	movs	r3, #16
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e6:	e1aa      	b.n	8008d3e <UART_SetConfig+0x5a6>
 80089e8:	2320      	movs	r3, #32
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ee:	e1a6      	b.n	8008d3e <UART_SetConfig+0x5a6>
 80089f0:	2340      	movs	r3, #64	; 0x40
 80089f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f6:	e1a2      	b.n	8008d3e <UART_SetConfig+0x5a6>
 80089f8:	2380      	movs	r3, #128	; 0x80
 80089fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fe:	e19e      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a35      	ldr	r2, [pc, #212]	; (8008adc <UART_SetConfig+0x344>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d130      	bne.n	8008a6c <UART_SetConfig+0x2d4>
 8008a0a:	4b31      	ldr	r3, [pc, #196]	; (8008ad0 <UART_SetConfig+0x338>)
 8008a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0e:	f003 0307 	and.w	r3, r3, #7
 8008a12:	2b05      	cmp	r3, #5
 8008a14:	d826      	bhi.n	8008a64 <UART_SetConfig+0x2cc>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <UART_SetConfig+0x284>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a35 	.word	0x08008a35
 8008a20:	08008a3d 	.word	0x08008a3d
 8008a24:	08008a45 	.word	0x08008a45
 8008a28:	08008a4d 	.word	0x08008a4d
 8008a2c:	08008a55 	.word	0x08008a55
 8008a30:	08008a5d 	.word	0x08008a5d
 8008a34:	2300      	movs	r3, #0
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3a:	e180      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008a3c:	2304      	movs	r3, #4
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a42:	e17c      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008a44:	2308      	movs	r3, #8
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4a:	e178      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a52:	e174      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008a54:	2320      	movs	r3, #32
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e170      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a62:	e16c      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008a64:	2380      	movs	r3, #128	; 0x80
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6a:	e168      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <UART_SetConfig+0x348>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d142      	bne.n	8008afc <UART_SetConfig+0x364>
 8008a76:	4b16      	ldr	r3, [pc, #88]	; (8008ad0 <UART_SetConfig+0x338>)
 8008a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7a:	f003 0307 	and.w	r3, r3, #7
 8008a7e:	2b05      	cmp	r3, #5
 8008a80:	d838      	bhi.n	8008af4 <UART_SetConfig+0x35c>
 8008a82:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <UART_SetConfig+0x2f0>)
 8008a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a88:	08008aa1 	.word	0x08008aa1
 8008a8c:	08008aa9 	.word	0x08008aa9
 8008a90:	08008ab1 	.word	0x08008ab1
 8008a94:	08008ab9 	.word	0x08008ab9
 8008a98:	08008ae5 	.word	0x08008ae5
 8008a9c:	08008aed 	.word	0x08008aed
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e14a      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008aa8:	2304      	movs	r3, #4
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e146      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008ab0:	2308      	movs	r3, #8
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e142      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008ab8:	2310      	movs	r3, #16
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e13e      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008ac0:	cfff69f3 	.word	0xcfff69f3
 8008ac4:	58000c00 	.word	0x58000c00
 8008ac8:	11fff4ff 	.word	0x11fff4ff
 8008acc:	40011000 	.word	0x40011000
 8008ad0:	58024400 	.word	0x58024400
 8008ad4:	40004400 	.word	0x40004400
 8008ad8:	40004800 	.word	0x40004800
 8008adc:	40004c00 	.word	0x40004c00
 8008ae0:	40005000 	.word	0x40005000
 8008ae4:	2320      	movs	r3, #32
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e128      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008aec:	2340      	movs	r3, #64	; 0x40
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e124      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008af4:	2380      	movs	r3, #128	; 0x80
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e120      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4acb      	ldr	r2, [pc, #812]	; (8008e30 <UART_SetConfig+0x698>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d176      	bne.n	8008bf4 <UART_SetConfig+0x45c>
 8008b06:	4bcb      	ldr	r3, [pc, #812]	; (8008e34 <UART_SetConfig+0x69c>)
 8008b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b0e:	2b28      	cmp	r3, #40	; 0x28
 8008b10:	d86c      	bhi.n	8008bec <UART_SetConfig+0x454>
 8008b12:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <UART_SetConfig+0x380>)
 8008b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b18:	08008bbd 	.word	0x08008bbd
 8008b1c:	08008bed 	.word	0x08008bed
 8008b20:	08008bed 	.word	0x08008bed
 8008b24:	08008bed 	.word	0x08008bed
 8008b28:	08008bed 	.word	0x08008bed
 8008b2c:	08008bed 	.word	0x08008bed
 8008b30:	08008bed 	.word	0x08008bed
 8008b34:	08008bed 	.word	0x08008bed
 8008b38:	08008bc5 	.word	0x08008bc5
 8008b3c:	08008bed 	.word	0x08008bed
 8008b40:	08008bed 	.word	0x08008bed
 8008b44:	08008bed 	.word	0x08008bed
 8008b48:	08008bed 	.word	0x08008bed
 8008b4c:	08008bed 	.word	0x08008bed
 8008b50:	08008bed 	.word	0x08008bed
 8008b54:	08008bed 	.word	0x08008bed
 8008b58:	08008bcd 	.word	0x08008bcd
 8008b5c:	08008bed 	.word	0x08008bed
 8008b60:	08008bed 	.word	0x08008bed
 8008b64:	08008bed 	.word	0x08008bed
 8008b68:	08008bed 	.word	0x08008bed
 8008b6c:	08008bed 	.word	0x08008bed
 8008b70:	08008bed 	.word	0x08008bed
 8008b74:	08008bed 	.word	0x08008bed
 8008b78:	08008bd5 	.word	0x08008bd5
 8008b7c:	08008bed 	.word	0x08008bed
 8008b80:	08008bed 	.word	0x08008bed
 8008b84:	08008bed 	.word	0x08008bed
 8008b88:	08008bed 	.word	0x08008bed
 8008b8c:	08008bed 	.word	0x08008bed
 8008b90:	08008bed 	.word	0x08008bed
 8008b94:	08008bed 	.word	0x08008bed
 8008b98:	08008bdd 	.word	0x08008bdd
 8008b9c:	08008bed 	.word	0x08008bed
 8008ba0:	08008bed 	.word	0x08008bed
 8008ba4:	08008bed 	.word	0x08008bed
 8008ba8:	08008bed 	.word	0x08008bed
 8008bac:	08008bed 	.word	0x08008bed
 8008bb0:	08008bed 	.word	0x08008bed
 8008bb4:	08008bed 	.word	0x08008bed
 8008bb8:	08008be5 	.word	0x08008be5
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e0bc      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e0b8      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008bcc:	2308      	movs	r3, #8
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e0b4      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e0b0      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008bdc:	2320      	movs	r3, #32
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e0ac      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008be4:	2340      	movs	r3, #64	; 0x40
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e0a8      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008bec:	2380      	movs	r3, #128	; 0x80
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e0a4      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a8f      	ldr	r2, [pc, #572]	; (8008e38 <UART_SetConfig+0x6a0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d130      	bne.n	8008c60 <UART_SetConfig+0x4c8>
 8008bfe:	4b8d      	ldr	r3, [pc, #564]	; (8008e34 <UART_SetConfig+0x69c>)
 8008c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	2b05      	cmp	r3, #5
 8008c08:	d826      	bhi.n	8008c58 <UART_SetConfig+0x4c0>
 8008c0a:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <UART_SetConfig+0x478>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c29 	.word	0x08008c29
 8008c14:	08008c31 	.word	0x08008c31
 8008c18:	08008c39 	.word	0x08008c39
 8008c1c:	08008c41 	.word	0x08008c41
 8008c20:	08008c49 	.word	0x08008c49
 8008c24:	08008c51 	.word	0x08008c51
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e086      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008c30:	2304      	movs	r3, #4
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e082      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008c38:	2308      	movs	r3, #8
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e07e      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008c40:	2310      	movs	r3, #16
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c46:	e07a      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008c48:	2320      	movs	r3, #32
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4e:	e076      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008c50:	2340      	movs	r3, #64	; 0x40
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c56:	e072      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008c58:	2380      	movs	r3, #128	; 0x80
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5e:	e06e      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a75      	ldr	r2, [pc, #468]	; (8008e3c <UART_SetConfig+0x6a4>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d130      	bne.n	8008ccc <UART_SetConfig+0x534>
 8008c6a:	4b72      	ldr	r3, [pc, #456]	; (8008e34 <UART_SetConfig+0x69c>)
 8008c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	2b05      	cmp	r3, #5
 8008c74:	d826      	bhi.n	8008cc4 <UART_SetConfig+0x52c>
 8008c76:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <UART_SetConfig+0x4e4>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008c95 	.word	0x08008c95
 8008c80:	08008c9d 	.word	0x08008c9d
 8008c84:	08008ca5 	.word	0x08008ca5
 8008c88:	08008cad 	.word	0x08008cad
 8008c8c:	08008cb5 	.word	0x08008cb5
 8008c90:	08008cbd 	.word	0x08008cbd
 8008c94:	2300      	movs	r3, #0
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e050      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008c9c:	2304      	movs	r3, #4
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e04c      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e048      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008cac:	2310      	movs	r3, #16
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb2:	e044      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008cb4:	2320      	movs	r3, #32
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cba:	e040      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008cbc:	2340      	movs	r3, #64	; 0x40
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc2:	e03c      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008cc4:	2380      	movs	r3, #128	; 0x80
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cca:	e038      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a5b      	ldr	r2, [pc, #364]	; (8008e40 <UART_SetConfig+0x6a8>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d130      	bne.n	8008d38 <UART_SetConfig+0x5a0>
 8008cd6:	4b57      	ldr	r3, [pc, #348]	; (8008e34 <UART_SetConfig+0x69c>)
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	2b05      	cmp	r3, #5
 8008ce0:	d826      	bhi.n	8008d30 <UART_SetConfig+0x598>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <UART_SetConfig+0x550>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	08008d11 	.word	0x08008d11
 8008cf4:	08008d19 	.word	0x08008d19
 8008cf8:	08008d21 	.word	0x08008d21
 8008cfc:	08008d29 	.word	0x08008d29
 8008d00:	2302      	movs	r3, #2
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d06:	e01a      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008d08:	2304      	movs	r3, #4
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d0e:	e016      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008d10:	2308      	movs	r3, #8
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d16:	e012      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008d18:	2310      	movs	r3, #16
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d1e:	e00e      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008d20:	2320      	movs	r3, #32
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d26:	e00a      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008d28:	2340      	movs	r3, #64	; 0x40
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d2e:	e006      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008d30:	2380      	movs	r3, #128	; 0x80
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d36:	e002      	b.n	8008d3e <UART_SetConfig+0x5a6>
 8008d38:	2380      	movs	r3, #128	; 0x80
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a3f      	ldr	r2, [pc, #252]	; (8008e40 <UART_SetConfig+0x6a8>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	f040 80f8 	bne.w	8008f3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	dc46      	bgt.n	8008de0 <UART_SetConfig+0x648>
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	f2c0 8082 	blt.w	8008e5c <UART_SetConfig+0x6c4>
 8008d58:	3b02      	subs	r3, #2
 8008d5a:	2b1e      	cmp	r3, #30
 8008d5c:	d87e      	bhi.n	8008e5c <UART_SetConfig+0x6c4>
 8008d5e:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <UART_SetConfig+0x5cc>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008de7 	.word	0x08008de7
 8008d68:	08008e5d 	.word	0x08008e5d
 8008d6c:	08008def 	.word	0x08008def
 8008d70:	08008e5d 	.word	0x08008e5d
 8008d74:	08008e5d 	.word	0x08008e5d
 8008d78:	08008e5d 	.word	0x08008e5d
 8008d7c:	08008dff 	.word	0x08008dff
 8008d80:	08008e5d 	.word	0x08008e5d
 8008d84:	08008e5d 	.word	0x08008e5d
 8008d88:	08008e5d 	.word	0x08008e5d
 8008d8c:	08008e5d 	.word	0x08008e5d
 8008d90:	08008e5d 	.word	0x08008e5d
 8008d94:	08008e5d 	.word	0x08008e5d
 8008d98:	08008e5d 	.word	0x08008e5d
 8008d9c:	08008e0f 	.word	0x08008e0f
 8008da0:	08008e5d 	.word	0x08008e5d
 8008da4:	08008e5d 	.word	0x08008e5d
 8008da8:	08008e5d 	.word	0x08008e5d
 8008dac:	08008e5d 	.word	0x08008e5d
 8008db0:	08008e5d 	.word	0x08008e5d
 8008db4:	08008e5d 	.word	0x08008e5d
 8008db8:	08008e5d 	.word	0x08008e5d
 8008dbc:	08008e5d 	.word	0x08008e5d
 8008dc0:	08008e5d 	.word	0x08008e5d
 8008dc4:	08008e5d 	.word	0x08008e5d
 8008dc8:	08008e5d 	.word	0x08008e5d
 8008dcc:	08008e5d 	.word	0x08008e5d
 8008dd0:	08008e5d 	.word	0x08008e5d
 8008dd4:	08008e5d 	.word	0x08008e5d
 8008dd8:	08008e5d 	.word	0x08008e5d
 8008ddc:	08008e4f 	.word	0x08008e4f
 8008de0:	2b40      	cmp	r3, #64	; 0x40
 8008de2:	d037      	beq.n	8008e54 <UART_SetConfig+0x6bc>
 8008de4:	e03a      	b.n	8008e5c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008de6:	f7fd fdd1 	bl	800698c <HAL_RCCEx_GetD3PCLK1Freq>
 8008dea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dec:	e03c      	b.n	8008e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fd fde0 	bl	80069b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dfc:	e034      	b.n	8008e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dfe:	f107 0318 	add.w	r3, r7, #24
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fd ff2c 	bl	8006c60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e0c:	e02c      	b.n	8008e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e0e:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <UART_SetConfig+0x69c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0320 	and.w	r3, r3, #32
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d016      	beq.n	8008e48 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e1a:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <UART_SetConfig+0x69c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	08db      	lsrs	r3, r3, #3
 8008e20:	f003 0303 	and.w	r3, r3, #3
 8008e24:	4a07      	ldr	r2, [pc, #28]	; (8008e44 <UART_SetConfig+0x6ac>)
 8008e26:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e2c:	e01c      	b.n	8008e68 <UART_SetConfig+0x6d0>
 8008e2e:	bf00      	nop
 8008e30:	40011400 	.word	0x40011400
 8008e34:	58024400 	.word	0x58024400
 8008e38:	40007800 	.word	0x40007800
 8008e3c:	40007c00 	.word	0x40007c00
 8008e40:	58000c00 	.word	0x58000c00
 8008e44:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008e48:	4b9d      	ldr	r3, [pc, #628]	; (80090c0 <UART_SetConfig+0x928>)
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e4c:	e00c      	b.n	8008e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e4e:	4b9d      	ldr	r3, [pc, #628]	; (80090c4 <UART_SetConfig+0x92c>)
 8008e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e52:	e009      	b.n	8008e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e5a:	e005      	b.n	8008e68 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 81de 	beq.w	800922c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	4a94      	ldr	r2, [pc, #592]	; (80090c8 <UART_SetConfig+0x930>)
 8008e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e82:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	4413      	add	r3, r2
 8008e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d305      	bcc.n	8008ea0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d903      	bls.n	8008ea8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ea6:	e1c1      	b.n	800922c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eaa:	2200      	movs	r2, #0
 8008eac:	60bb      	str	r3, [r7, #8]
 8008eae:	60fa      	str	r2, [r7, #12]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	4a84      	ldr	r2, [pc, #528]	; (80090c8 <UART_SetConfig+0x930>)
 8008eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	603b      	str	r3, [r7, #0]
 8008ec0:	607a      	str	r2, [r7, #4]
 8008ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008eca:	f7f7 fa61 	bl	8000390 <__aeabi_uldivmod>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	020b      	lsls	r3, r1, #8
 8008ee0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ee4:	0202      	lsls	r2, r0, #8
 8008ee6:	6979      	ldr	r1, [r7, #20]
 8008ee8:	6849      	ldr	r1, [r1, #4]
 8008eea:	0849      	lsrs	r1, r1, #1
 8008eec:	2000      	movs	r0, #0
 8008eee:	460c      	mov	r4, r1
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	eb12 0804 	adds.w	r8, r2, r4
 8008ef6:	eb43 0905 	adc.w	r9, r3, r5
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	469a      	mov	sl, r3
 8008f02:	4693      	mov	fp, r2
 8008f04:	4652      	mov	r2, sl
 8008f06:	465b      	mov	r3, fp
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f7f7 fa40 	bl	8000390 <__aeabi_uldivmod>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4613      	mov	r3, r2
 8008f16:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f1e:	d308      	bcc.n	8008f32 <UART_SetConfig+0x79a>
 8008f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f26:	d204      	bcs.n	8008f32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f2e:	60da      	str	r2, [r3, #12]
 8008f30:	e17c      	b.n	800922c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f38:	e178      	b.n	800922c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f42:	f040 80c5 	bne.w	80090d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008f46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f4a:	2b20      	cmp	r3, #32
 8008f4c:	dc48      	bgt.n	8008fe0 <UART_SetConfig+0x848>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	db7b      	blt.n	800904a <UART_SetConfig+0x8b2>
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d879      	bhi.n	800904a <UART_SetConfig+0x8b2>
 8008f56:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <UART_SetConfig+0x7c4>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008fe7 	.word	0x08008fe7
 8008f60:	08008fef 	.word	0x08008fef
 8008f64:	0800904b 	.word	0x0800904b
 8008f68:	0800904b 	.word	0x0800904b
 8008f6c:	08008ff7 	.word	0x08008ff7
 8008f70:	0800904b 	.word	0x0800904b
 8008f74:	0800904b 	.word	0x0800904b
 8008f78:	0800904b 	.word	0x0800904b
 8008f7c:	08009007 	.word	0x08009007
 8008f80:	0800904b 	.word	0x0800904b
 8008f84:	0800904b 	.word	0x0800904b
 8008f88:	0800904b 	.word	0x0800904b
 8008f8c:	0800904b 	.word	0x0800904b
 8008f90:	0800904b 	.word	0x0800904b
 8008f94:	0800904b 	.word	0x0800904b
 8008f98:	0800904b 	.word	0x0800904b
 8008f9c:	08009017 	.word	0x08009017
 8008fa0:	0800904b 	.word	0x0800904b
 8008fa4:	0800904b 	.word	0x0800904b
 8008fa8:	0800904b 	.word	0x0800904b
 8008fac:	0800904b 	.word	0x0800904b
 8008fb0:	0800904b 	.word	0x0800904b
 8008fb4:	0800904b 	.word	0x0800904b
 8008fb8:	0800904b 	.word	0x0800904b
 8008fbc:	0800904b 	.word	0x0800904b
 8008fc0:	0800904b 	.word	0x0800904b
 8008fc4:	0800904b 	.word	0x0800904b
 8008fc8:	0800904b 	.word	0x0800904b
 8008fcc:	0800904b 	.word	0x0800904b
 8008fd0:	0800904b 	.word	0x0800904b
 8008fd4:	0800904b 	.word	0x0800904b
 8008fd8:	0800904b 	.word	0x0800904b
 8008fdc:	0800903d 	.word	0x0800903d
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	d02e      	beq.n	8009042 <UART_SetConfig+0x8aa>
 8008fe4:	e031      	b.n	800904a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fe6:	f7fc fa59 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8008fea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fec:	e033      	b.n	8009056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fee:	f7fc fa6b 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 8008ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ff4:	e02f      	b.n	8009056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fd fcdc 	bl	80069b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009004:	e027      	b.n	8009056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009006:	f107 0318 	add.w	r3, r7, #24
 800900a:	4618      	mov	r0, r3
 800900c:	f7fd fe28 	bl	8006c60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009014:	e01f      	b.n	8009056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009016:	4b2d      	ldr	r3, [pc, #180]	; (80090cc <UART_SetConfig+0x934>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b00      	cmp	r3, #0
 8009020:	d009      	beq.n	8009036 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009022:	4b2a      	ldr	r3, [pc, #168]	; (80090cc <UART_SetConfig+0x934>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	08db      	lsrs	r3, r3, #3
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	4a24      	ldr	r2, [pc, #144]	; (80090c0 <UART_SetConfig+0x928>)
 800902e:	fa22 f303 	lsr.w	r3, r2, r3
 8009032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009034:	e00f      	b.n	8009056 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009036:	4b22      	ldr	r3, [pc, #136]	; (80090c0 <UART_SetConfig+0x928>)
 8009038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800903a:	e00c      	b.n	8009056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800903c:	4b21      	ldr	r3, [pc, #132]	; (80090c4 <UART_SetConfig+0x92c>)
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009040:	e009      	b.n	8009056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009048:	e005      	b.n	8009056 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800904a:	2300      	movs	r3, #0
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80e7 	beq.w	800922c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	4a19      	ldr	r2, [pc, #100]	; (80090c8 <UART_SetConfig+0x930>)
 8009064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009068:	461a      	mov	r2, r3
 800906a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009070:	005a      	lsls	r2, r3, #1
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	085b      	lsrs	r3, r3, #1
 8009078:	441a      	add	r2, r3
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009082:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	2b0f      	cmp	r3, #15
 8009088:	d916      	bls.n	80090b8 <UART_SetConfig+0x920>
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009090:	d212      	bcs.n	80090b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	b29b      	uxth	r3, r3
 8009096:	f023 030f 	bic.w	r3, r3, #15
 800909a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	085b      	lsrs	r3, r3, #1
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090aa:	4313      	orrs	r3, r2
 80090ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80090b4:	60da      	str	r2, [r3, #12]
 80090b6:	e0b9      	b.n	800922c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80090be:	e0b5      	b.n	800922c <UART_SetConfig+0xa94>
 80090c0:	03d09000 	.word	0x03d09000
 80090c4:	003d0900 	.word	0x003d0900
 80090c8:	0800fe0c 	.word	0x0800fe0c
 80090cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80090d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	dc49      	bgt.n	800916c <UART_SetConfig+0x9d4>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	db7c      	blt.n	80091d6 <UART_SetConfig+0xa3e>
 80090dc:	2b20      	cmp	r3, #32
 80090de:	d87a      	bhi.n	80091d6 <UART_SetConfig+0xa3e>
 80090e0:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <UART_SetConfig+0x950>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	08009173 	.word	0x08009173
 80090ec:	0800917b 	.word	0x0800917b
 80090f0:	080091d7 	.word	0x080091d7
 80090f4:	080091d7 	.word	0x080091d7
 80090f8:	08009183 	.word	0x08009183
 80090fc:	080091d7 	.word	0x080091d7
 8009100:	080091d7 	.word	0x080091d7
 8009104:	080091d7 	.word	0x080091d7
 8009108:	08009193 	.word	0x08009193
 800910c:	080091d7 	.word	0x080091d7
 8009110:	080091d7 	.word	0x080091d7
 8009114:	080091d7 	.word	0x080091d7
 8009118:	080091d7 	.word	0x080091d7
 800911c:	080091d7 	.word	0x080091d7
 8009120:	080091d7 	.word	0x080091d7
 8009124:	080091d7 	.word	0x080091d7
 8009128:	080091a3 	.word	0x080091a3
 800912c:	080091d7 	.word	0x080091d7
 8009130:	080091d7 	.word	0x080091d7
 8009134:	080091d7 	.word	0x080091d7
 8009138:	080091d7 	.word	0x080091d7
 800913c:	080091d7 	.word	0x080091d7
 8009140:	080091d7 	.word	0x080091d7
 8009144:	080091d7 	.word	0x080091d7
 8009148:	080091d7 	.word	0x080091d7
 800914c:	080091d7 	.word	0x080091d7
 8009150:	080091d7 	.word	0x080091d7
 8009154:	080091d7 	.word	0x080091d7
 8009158:	080091d7 	.word	0x080091d7
 800915c:	080091d7 	.word	0x080091d7
 8009160:	080091d7 	.word	0x080091d7
 8009164:	080091d7 	.word	0x080091d7
 8009168:	080091c9 	.word	0x080091c9
 800916c:	2b40      	cmp	r3, #64	; 0x40
 800916e:	d02e      	beq.n	80091ce <UART_SetConfig+0xa36>
 8009170:	e031      	b.n	80091d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009172:	f7fc f993 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8009176:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009178:	e033      	b.n	80091e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800917a:	f7fc f9a5 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 800917e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009180:	e02f      	b.n	80091e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009186:	4618      	mov	r0, r3
 8009188:	f7fd fc16 	bl	80069b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009190:	e027      	b.n	80091e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009192:	f107 0318 	add.w	r3, r7, #24
 8009196:	4618      	mov	r0, r3
 8009198:	f7fd fd62 	bl	8006c60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091a0:	e01f      	b.n	80091e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091a2:	4b2d      	ldr	r3, [pc, #180]	; (8009258 <UART_SetConfig+0xac0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d009      	beq.n	80091c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091ae:	4b2a      	ldr	r3, [pc, #168]	; (8009258 <UART_SetConfig+0xac0>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	08db      	lsrs	r3, r3, #3
 80091b4:	f003 0303 	and.w	r3, r3, #3
 80091b8:	4a28      	ldr	r2, [pc, #160]	; (800925c <UART_SetConfig+0xac4>)
 80091ba:	fa22 f303 	lsr.w	r3, r2, r3
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091c0:	e00f      	b.n	80091e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80091c2:	4b26      	ldr	r3, [pc, #152]	; (800925c <UART_SetConfig+0xac4>)
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c6:	e00c      	b.n	80091e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091c8:	4b25      	ldr	r3, [pc, #148]	; (8009260 <UART_SetConfig+0xac8>)
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091cc:	e009      	b.n	80091e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091d4:	e005      	b.n	80091e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80091e0:	bf00      	nop
    }

    if (pclk != 0U)
 80091e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d021      	beq.n	800922c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	4a1d      	ldr	r2, [pc, #116]	; (8009264 <UART_SetConfig+0xacc>)
 80091ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091f2:	461a      	mov	r2, r3
 80091f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	085b      	lsrs	r3, r3, #1
 8009200:	441a      	add	r2, r3
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	fbb2 f3f3 	udiv	r3, r2, r3
 800920a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	2b0f      	cmp	r3, #15
 8009210:	d909      	bls.n	8009226 <UART_SetConfig+0xa8e>
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009218:	d205      	bcs.n	8009226 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	b29a      	uxth	r2, r3
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	60da      	str	r2, [r3, #12]
 8009224:	e002      	b.n	800922c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2201      	movs	r2, #1
 8009230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	2201      	movs	r2, #1
 8009238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2200      	movs	r2, #0
 8009240:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2200      	movs	r2, #0
 8009246:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009248:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800924c:	4618      	mov	r0, r3
 800924e:	3748      	adds	r7, #72	; 0x48
 8009250:	46bd      	mov	sp, r7
 8009252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009256:	bf00      	nop
 8009258:	58024400 	.word	0x58024400
 800925c:	03d09000 	.word	0x03d09000
 8009260:	003d0900 	.word	0x003d0900
 8009264:	0800fe0c 	.word	0x0800fe0c

08009268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	f003 0308 	and.w	r3, r3, #8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01a      	beq.n	800937e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009366:	d10a      	bne.n	800937e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	605a      	str	r2, [r3, #4]
  }
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b098      	sub	sp, #96	; 0x60
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093bc:	f7f9 f830 	bl	8002420 <HAL_GetTick>
 80093c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d12f      	bne.n	8009430 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d8:	2200      	movs	r2, #0
 80093da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f88e 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d022      	beq.n	8009430 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	e853 3f00 	ldrex	r3, [r3]
 80093f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093fe:	653b      	str	r3, [r7, #80]	; 0x50
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009408:	647b      	str	r3, [r7, #68]	; 0x44
 800940a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800940e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e6      	bne.n	80093ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2220      	movs	r2, #32
 8009420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e063      	b.n	80094f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	2b04      	cmp	r3, #4
 800943c:	d149      	bne.n	80094d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800943e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009446:	2200      	movs	r2, #0
 8009448:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f857 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d03c      	beq.n	80094d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	623b      	str	r3, [r7, #32]
   return(result);
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800946c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009476:	633b      	str	r3, [r7, #48]	; 0x30
 8009478:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800947c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e6      	bne.n	8009458 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3308      	adds	r3, #8
 8009490:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	60fb      	str	r3, [r7, #12]
   return(result);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f023 0301 	bic.w	r3, r3, #1
 80094a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3308      	adds	r3, #8
 80094a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094aa:	61fa      	str	r2, [r7, #28]
 80094ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	69b9      	ldr	r1, [r7, #24]
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	617b      	str	r3, [r7, #20]
   return(result);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e5      	bne.n	800948a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e012      	b.n	80094f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2220      	movs	r2, #32
 80094de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3758      	adds	r7, #88	; 0x58
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	4613      	mov	r3, r2
 800950e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009510:	e049      	b.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009518:	d045      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951a:	f7f8 ff81 	bl	8002420 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	429a      	cmp	r2, r3
 8009528:	d302      	bcc.n	8009530 <UART_WaitOnFlagUntilTimeout+0x30>
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e048      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	d031      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b08      	cmp	r3, #8
 800954e:	d110      	bne.n	8009572 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2208      	movs	r2, #8
 8009556:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 f839 	bl	80095d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2208      	movs	r2, #8
 8009562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e029      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800957c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009580:	d111      	bne.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800958a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f81f 	bl	80095d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2220      	movs	r2, #32
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e00f      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69da      	ldr	r2, [r3, #28]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	4013      	ands	r3, r2
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	bf0c      	ite	eq
 80095b6:	2301      	moveq	r3, #1
 80095b8:	2300      	movne	r3, #0
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d0a6      	beq.n	8009512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b095      	sub	sp, #84	; 0x54
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f6:	643b      	str	r3, [r7, #64]	; 0x40
 80095f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e6      	bne.n	80095d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	61fb      	str	r3, [r7, #28]
   return(result);
 800961a:	69fa      	ldr	r2, [r7, #28]
 800961c:	4b1e      	ldr	r3, [pc, #120]	; (8009698 <UART_EndRxTransfer+0xc8>)
 800961e:	4013      	ands	r3, r2
 8009620:	64bb      	str	r3, [r7, #72]	; 0x48
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3308      	adds	r3, #8
 8009628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800962a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800962c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e5      	bne.n	800960a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009642:	2b01      	cmp	r3, #1
 8009644:	d118      	bne.n	8009678 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	e853 3f00 	ldrex	r3, [r3]
 8009652:	60bb      	str	r3, [r7, #8]
   return(result);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f023 0310 	bic.w	r3, r3, #16
 800965a:	647b      	str	r3, [r7, #68]	; 0x44
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009664:	61bb      	str	r3, [r7, #24]
 8009666:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6979      	ldr	r1, [r7, #20]
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	613b      	str	r3, [r7, #16]
   return(result);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e6      	bne.n	8009646 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800968c:	bf00      	nop
 800968e:	3754      	adds	r7, #84	; 0x54
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	effffffe 	.word	0xeffffffe

0800969c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f7ff f856 	bl	800876c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096c0:	bf00      	nop
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e4:	61fb      	str	r3, [r7, #28]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	61bb      	str	r3, [r7, #24]
 80096f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6979      	ldr	r1, [r7, #20]
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	613b      	str	r3, [r7, #16]
   return(result);
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e6      	bne.n	80096d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2220      	movs	r2, #32
 8009706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff f821 	bl	8008758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009716:	bf00      	nop
 8009718:	3720      	adds	r7, #32
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009746:	b480      	push	{r7}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009768:	2b01      	cmp	r3, #1
 800976a:	d101      	bne.n	8009770 <HAL_UARTEx_EnableFifoMode+0x16>
 800976c:	2302      	movs	r3, #2
 800976e:	e02b      	b.n	80097c8 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2224      	movs	r2, #36	; 0x24
 800977c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0201 	bic.w	r2, r2, #1
 8009796:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800979e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80097a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f889 	bl	80098c8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d101      	bne.n	80097e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e02d      	b.n	8009844 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2224      	movs	r2, #36	; 0x24
 80097f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0201 	bic.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f84f 	bl	80098c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2220      	movs	r2, #32
 8009836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800985c:	2b01      	cmp	r3, #1
 800985e:	d101      	bne.n	8009864 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009860:	2302      	movs	r3, #2
 8009862:	e02d      	b.n	80098c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2224      	movs	r2, #36	; 0x24
 8009870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0201 	bic.w	r2, r2, #1
 800988a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	430a      	orrs	r2, r1
 800989e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f811 	bl	80098c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d108      	bne.n	80098ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098e8:	e031      	b.n	800994e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098ea:	2310      	movs	r3, #16
 80098ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098ee:	2310      	movs	r3, #16
 80098f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	0e5b      	lsrs	r3, r3, #25
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0307 	and.w	r3, r3, #7
 8009900:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	0f5b      	lsrs	r3, r3, #29
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0307 	and.w	r3, r3, #7
 8009910:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	7b3a      	ldrb	r2, [r7, #12]
 8009916:	4911      	ldr	r1, [pc, #68]	; (800995c <UARTEx_SetNbDataToProcess+0x94>)
 8009918:	5c8a      	ldrb	r2, [r1, r2]
 800991a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800991e:	7b3a      	ldrb	r2, [r7, #12]
 8009920:	490f      	ldr	r1, [pc, #60]	; (8009960 <UARTEx_SetNbDataToProcess+0x98>)
 8009922:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009924:	fb93 f3f2 	sdiv	r3, r3, r2
 8009928:	b29a      	uxth	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	7b7a      	ldrb	r2, [r7, #13]
 8009934:	4909      	ldr	r1, [pc, #36]	; (800995c <UARTEx_SetNbDataToProcess+0x94>)
 8009936:	5c8a      	ldrb	r2, [r1, r2]
 8009938:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800993c:	7b7a      	ldrb	r2, [r7, #13]
 800993e:	4908      	ldr	r1, [pc, #32]	; (8009960 <UARTEx_SetNbDataToProcess+0x98>)
 8009940:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009942:	fb93 f3f2 	sdiv	r3, r3, r2
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800994e:	bf00      	nop
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	0800fe24 	.word	0x0800fe24
 8009960:	0800fe2c 	.word	0x0800fe2c

08009964 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009964:	b084      	sub	sp, #16
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	f107 001c 	add.w	r0, r7, #28
 8009972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	2b01      	cmp	r3, #1
 800997a:	d120      	bne.n	80099be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68da      	ldr	r2, [r3, #12]
 800998c:	4b2a      	ldr	r3, [pc, #168]	; (8009a38 <USB_CoreInit+0xd4>)
 800998e:	4013      	ands	r3, r2
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80099a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d105      	bne.n	80099b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 faac 	bl	8009f10 <USB_CoreReset>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]
 80099bc:	e01a      	b.n	80099f4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 faa0 	bl	8009f10 <USB_CoreReset>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d106      	bne.n	80099e8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38
 80099e6:	e005      	b.n	80099f4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d116      	bne.n	8009a28 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a08:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <USB_CoreInit+0xd8>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f043 0206 	orr.w	r2, r3, #6
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f043 0220 	orr.w	r2, r3, #32
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a34:	b004      	add	sp, #16
 8009a36:	4770      	bx	lr
 8009a38:	ffbdffbf 	.word	0xffbdffbf
 8009a3c:	03ee0000 	.word	0x03ee0000

08009a40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f023 0201 	bic.w	r2, r3, #1
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a7e:	78fb      	ldrb	r3, [r7, #3]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d115      	bne.n	8009ab0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a90:	2001      	movs	r0, #1
 8009a92:	f7f8 fcd1 	bl	8002438 <HAL_Delay>
      ms++;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fa29 	bl	8009ef4 <USB_GetMode>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d01e      	beq.n	8009ae6 <USB_SetCurrentMode+0x84>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b31      	cmp	r3, #49	; 0x31
 8009aac:	d9f0      	bls.n	8009a90 <USB_SetCurrentMode+0x2e>
 8009aae:	e01a      	b.n	8009ae6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d115      	bne.n	8009ae2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	f7f8 fcb8 	bl	8002438 <HAL_Delay>
      ms++;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3301      	adds	r3, #1
 8009acc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fa10 	bl	8009ef4 <USB_GetMode>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d005      	beq.n	8009ae6 <USB_SetCurrentMode+0x84>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b31      	cmp	r3, #49	; 0x31
 8009ade:	d9f0      	bls.n	8009ac2 <USB_SetCurrentMode+0x60>
 8009ae0:	e001      	b.n	8009ae6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e005      	b.n	8009af2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b32      	cmp	r3, #50	; 0x32
 8009aea:	d101      	bne.n	8009af0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e000      	b.n	8009af2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009afc:	b084      	sub	sp, #16
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b086      	sub	sp, #24
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	613b      	str	r3, [r7, #16]
 8009b1a:	e009      	b.n	8009b30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	3340      	adds	r3, #64	; 0x40
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	613b      	str	r3, [r7, #16]
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	2b0e      	cmp	r3, #14
 8009b34:	d9f2      	bls.n	8009b1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d11c      	bne.n	8009b76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b4a:	f043 0302 	orr.w	r3, r3, #2
 8009b4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	e005      	b.n	8009b82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b88:	461a      	mov	r2, r3
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b94:	4619      	mov	r1, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	680b      	ldr	r3, [r1, #0]
 8009ba0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d10c      	bne.n	8009bc2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d104      	bne.n	8009bb8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009bae:	2100      	movs	r1, #0
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f965 	bl	8009e80 <USB_SetDevSpeed>
 8009bb6:	e008      	b.n	8009bca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009bb8:	2101      	movs	r1, #1
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f960 	bl	8009e80 <USB_SetDevSpeed>
 8009bc0:	e003      	b.n	8009bca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009bc2:	2103      	movs	r1, #3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f95b 	bl	8009e80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bca:	2110      	movs	r1, #16
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f8f3 	bl	8009db8 <USB_FlushTxFifo>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f91f 	bl	8009e20 <USB_FlushRxFifo>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfe:	461a      	mov	r2, r3
 8009c00:	2300      	movs	r3, #0
 8009c02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c10:	2300      	movs	r3, #0
 8009c12:	613b      	str	r3, [r7, #16]
 8009c14:	e043      	b.n	8009c9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c2c:	d118      	bne.n	8009c60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10a      	bne.n	8009c4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c40:	461a      	mov	r2, r3
 8009c42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	e013      	b.n	8009c72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c56:	461a      	mov	r2, r3
 8009c58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	e008      	b.n	8009c72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c7e:	461a      	mov	r2, r3
 8009c80:	2300      	movs	r3, #0
 8009c82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c90:	461a      	mov	r2, r3
 8009c92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	613b      	str	r3, [r7, #16]
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d3b7      	bcc.n	8009c16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	613b      	str	r3, [r7, #16]
 8009caa:	e043      	b.n	8009d34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cc2:	d118      	bne.n	8009cf6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10a      	bne.n	8009ce0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	e013      	b.n	8009d08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cec:	461a      	mov	r2, r3
 8009cee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	e008      	b.n	8009d08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d02:	461a      	mov	r2, r3
 8009d04:	2300      	movs	r3, #0
 8009d06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d14:	461a      	mov	r2, r3
 8009d16:	2300      	movs	r3, #0
 8009d18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d26:	461a      	mov	r2, r3
 8009d28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	3301      	adds	r3, #1
 8009d32:	613b      	str	r3, [r7, #16]
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d3b7      	bcc.n	8009cac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009d5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d105      	bne.n	8009d70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	f043 0210 	orr.w	r2, r3, #16
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699a      	ldr	r2, [r3, #24]
 8009d74:	4b0e      	ldr	r3, [pc, #56]	; (8009db0 <USB_DevInit+0x2b4>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	f043 0208 	orr.w	r2, r3, #8
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d105      	bne.n	8009da0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	699a      	ldr	r2, [r3, #24]
 8009d98:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <USB_DevInit+0x2b8>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dac:	b004      	add	sp, #16
 8009dae:	4770      	bx	lr
 8009db0:	803c3800 	.word	0x803c3800
 8009db4:	40000004 	.word	0x40000004

08009db8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4a13      	ldr	r2, [pc, #76]	; (8009e1c <USB_FlushTxFifo+0x64>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d901      	bls.n	8009dd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e01b      	b.n	8009e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	daf2      	bge.n	8009dc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	019b      	lsls	r3, r3, #6
 8009de8:	f043 0220 	orr.w	r2, r3, #32
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3301      	adds	r3, #1
 8009df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4a08      	ldr	r2, [pc, #32]	; (8009e1c <USB_FlushTxFifo+0x64>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d901      	bls.n	8009e02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e006      	b.n	8009e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d0f0      	beq.n	8009df0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	00030d40 	.word	0x00030d40

08009e20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4a11      	ldr	r2, [pc, #68]	; (8009e7c <USB_FlushRxFifo+0x5c>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d901      	bls.n	8009e3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e018      	b.n	8009e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	daf2      	bge.n	8009e2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2210      	movs	r2, #16
 8009e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3301      	adds	r3, #1
 8009e54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	4a08      	ldr	r2, [pc, #32]	; (8009e7c <USB_FlushRxFifo+0x5c>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d901      	bls.n	8009e62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e006      	b.n	8009e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f003 0310 	and.w	r3, r3, #16
 8009e6a:	2b10      	cmp	r3, #16
 8009e6c:	d0f0      	beq.n	8009e50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	00030d40 	.word	0x00030d40

08009e80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	68f9      	ldr	r1, [r7, #12]
 8009e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ecc:	f023 0303 	bic.w	r3, r3, #3
 8009ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ee0:	f043 0302 	orr.w	r3, r3, #2
 8009ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	f003 0301 	and.w	r3, r3, #1
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4a13      	ldr	r2, [pc, #76]	; (8009f74 <USB_CoreReset+0x64>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d901      	bls.n	8009f2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e01b      	b.n	8009f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	daf2      	bge.n	8009f1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	f043 0201 	orr.w	r2, r3, #1
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4a09      	ldr	r2, [pc, #36]	; (8009f74 <USB_CoreReset+0x64>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d901      	bls.n	8009f58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e006      	b.n	8009f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d0f0      	beq.n	8009f46 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	00030d40 	.word	0x00030d40

08009f78 <__NVIC_SetPriority>:
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	6039      	str	r1, [r7, #0]
 8009f82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	db0a      	blt.n	8009fa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	490c      	ldr	r1, [pc, #48]	; (8009fc4 <__NVIC_SetPriority+0x4c>)
 8009f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f96:	0112      	lsls	r2, r2, #4
 8009f98:	b2d2      	uxtb	r2, r2
 8009f9a:	440b      	add	r3, r1
 8009f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009fa0:	e00a      	b.n	8009fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	4908      	ldr	r1, [pc, #32]	; (8009fc8 <__NVIC_SetPriority+0x50>)
 8009fa8:	88fb      	ldrh	r3, [r7, #6]
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	3b04      	subs	r3, #4
 8009fb0:	0112      	lsls	r2, r2, #4
 8009fb2:	b2d2      	uxtb	r2, r2
 8009fb4:	440b      	add	r3, r1
 8009fb6:	761a      	strb	r2, [r3, #24]
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	e000e100 	.word	0xe000e100
 8009fc8:	e000ed00 	.word	0xe000ed00

08009fcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009fd0:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <SysTick_Handler+0x1c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009fd4:	f002 ff24 	bl	800ce20 <xTaskGetSchedulerState>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d001      	beq.n	8009fe2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009fde:	f000 fceb 	bl	800a9b8 <xPortSysTickHandler>
  }
}
 8009fe2:	bf00      	nop
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	e000e010 	.word	0xe000e010

08009fec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	f06f 0004 	mvn.w	r0, #4
 8009ff6:	f7ff ffbf 	bl	8009f78 <__NVIC_SetPriority>
#endif
}
 8009ffa:	bf00      	nop
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a006:	f3ef 8305 	mrs	r3, IPSR
 800a00a:	603b      	str	r3, [r7, #0]
  return(result);
 800a00c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a012:	f06f 0305 	mvn.w	r3, #5
 800a016:	607b      	str	r3, [r7, #4]
 800a018:	e00c      	b.n	800a034 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a01a:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <osKernelInitialize+0x44>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d105      	bne.n	800a02e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a022:	4b08      	ldr	r3, [pc, #32]	; (800a044 <osKernelInitialize+0x44>)
 800a024:	2201      	movs	r2, #1
 800a026:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a028:	2300      	movs	r3, #0
 800a02a:	607b      	str	r3, [r7, #4]
 800a02c:	e002      	b.n	800a034 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a02e:	f04f 33ff 	mov.w	r3, #4294967295
 800a032:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a034:	687b      	ldr	r3, [r7, #4]
}
 800a036:	4618      	mov	r0, r3
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	2400888c 	.word	0x2400888c

0800a048 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a04e:	f3ef 8305 	mrs	r3, IPSR
 800a052:	603b      	str	r3, [r7, #0]
  return(result);
 800a054:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a05a:	f06f 0305 	mvn.w	r3, #5
 800a05e:	607b      	str	r3, [r7, #4]
 800a060:	e010      	b.n	800a084 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a062:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <osKernelStart+0x48>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d109      	bne.n	800a07e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a06a:	f7ff ffbf 	bl	8009fec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a06e:	4b08      	ldr	r3, [pc, #32]	; (800a090 <osKernelStart+0x48>)
 800a070:	2202      	movs	r2, #2
 800a072:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a074:	f002 fa42 	bl	800c4fc <vTaskStartScheduler>
      stat = osOK;
 800a078:	2300      	movs	r3, #0
 800a07a:	607b      	str	r3, [r7, #4]
 800a07c:	e002      	b.n	800a084 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a07e:	f04f 33ff 	mov.w	r3, #4294967295
 800a082:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a084:	687b      	ldr	r3, [r7, #4]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	2400888c 	.word	0x2400888c

0800a094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4a07      	ldr	r2, [pc, #28]	; (800a0c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a0a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	4a06      	ldr	r2, [pc, #24]	; (800a0c4 <vApplicationGetIdleTaskMemory+0x30>)
 800a0aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2280      	movs	r2, #128	; 0x80
 800a0b0:	601a      	str	r2, [r3, #0]
}
 800a0b2:	bf00      	nop
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	24008890 	.word	0x24008890
 800a0c4:	2400894c 	.word	0x2400894c

0800a0c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4a07      	ldr	r2, [pc, #28]	; (800a0f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a0d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	4a06      	ldr	r2, [pc, #24]	; (800a0f8 <vApplicationGetTimerTaskMemory+0x30>)
 800a0de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0e6:	601a      	str	r2, [r3, #0]
}
 800a0e8:	bf00      	nop
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	24008b4c 	.word	0x24008b4c
 800a0f8:	24008c08 	.word	0x24008c08

0800a0fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08a      	sub	sp, #40	; 0x28
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a104:	2300      	movs	r3, #0
 800a106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a108:	f002 fa68 	bl	800c5dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a10c:	4b5b      	ldr	r3, [pc, #364]	; (800a27c <pvPortMalloc+0x180>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a114:	f000 f920 	bl	800a358 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a118:	4b59      	ldr	r3, [pc, #356]	; (800a280 <pvPortMalloc+0x184>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4013      	ands	r3, r2
 800a120:	2b00      	cmp	r3, #0
 800a122:	f040 8093 	bne.w	800a24c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01d      	beq.n	800a168 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a12c:	2208      	movs	r2, #8
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4413      	add	r3, r2
 800a132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d014      	beq.n	800a168 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f023 0307 	bic.w	r3, r3, #7
 800a144:	3308      	adds	r3, #8
 800a146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f003 0307 	and.w	r3, r3, #7
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <pvPortMalloc+0x6c>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	617b      	str	r3, [r7, #20]
}
 800a164:	bf00      	nop
 800a166:	e7fe      	b.n	800a166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d06e      	beq.n	800a24c <pvPortMalloc+0x150>
 800a16e:	4b45      	ldr	r3, [pc, #276]	; (800a284 <pvPortMalloc+0x188>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d869      	bhi.n	800a24c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a178:	4b43      	ldr	r3, [pc, #268]	; (800a288 <pvPortMalloc+0x18c>)
 800a17a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a17c:	4b42      	ldr	r3, [pc, #264]	; (800a288 <pvPortMalloc+0x18c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a182:	e004      	b.n	800a18e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	429a      	cmp	r2, r3
 800a196:	d903      	bls.n	800a1a0 <pvPortMalloc+0xa4>
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1f1      	bne.n	800a184 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1a0:	4b36      	ldr	r3, [pc, #216]	; (800a27c <pvPortMalloc+0x180>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d050      	beq.n	800a24c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	4413      	add	r3, r2
 800a1b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	1ad2      	subs	r2, r2, r3
 800a1c4:	2308      	movs	r3, #8
 800a1c6:	005b      	lsls	r3, r3, #1
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d91f      	bls.n	800a20c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <pvPortMalloc+0xf8>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	613b      	str	r3, [r7, #16]
}
 800a1f0:	bf00      	nop
 800a1f2:	e7fe      	b.n	800a1f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	1ad2      	subs	r2, r2, r3
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a206:	69b8      	ldr	r0, [r7, #24]
 800a208:	f000 f908 	bl	800a41c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a20c:	4b1d      	ldr	r3, [pc, #116]	; (800a284 <pvPortMalloc+0x188>)
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	4a1b      	ldr	r2, [pc, #108]	; (800a284 <pvPortMalloc+0x188>)
 800a218:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a21a:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <pvPortMalloc+0x188>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	4b1b      	ldr	r3, [pc, #108]	; (800a28c <pvPortMalloc+0x190>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d203      	bcs.n	800a22e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a226:	4b17      	ldr	r3, [pc, #92]	; (800a284 <pvPortMalloc+0x188>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a18      	ldr	r2, [pc, #96]	; (800a28c <pvPortMalloc+0x190>)
 800a22c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	4b13      	ldr	r3, [pc, #76]	; (800a280 <pvPortMalloc+0x184>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	431a      	orrs	r2, r3
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	2200      	movs	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a242:	4b13      	ldr	r3, [pc, #76]	; (800a290 <pvPortMalloc+0x194>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3301      	adds	r3, #1
 800a248:	4a11      	ldr	r2, [pc, #68]	; (800a290 <pvPortMalloc+0x194>)
 800a24a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a24c:	f002 f9d4 	bl	800c5f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <pvPortMalloc+0x174>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	60fb      	str	r3, [r7, #12]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <pvPortMalloc+0x172>
	return pvReturn;
 800a270:	69fb      	ldr	r3, [r7, #28]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3728      	adds	r7, #40	; 0x28
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	2400cc10 	.word	0x2400cc10
 800a280:	2400cc24 	.word	0x2400cc24
 800a284:	2400cc14 	.word	0x2400cc14
 800a288:	2400cc08 	.word	0x2400cc08
 800a28c:	2400cc18 	.word	0x2400cc18
 800a290:	2400cc1c 	.word	0x2400cc1c

0800a294 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d04d      	beq.n	800a342 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2a6:	2308      	movs	r3, #8
 800a2a8:	425b      	negs	r3, r3
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	4b24      	ldr	r3, [pc, #144]	; (800a34c <vPortFree+0xb8>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4013      	ands	r3, r2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <vPortFree+0x44>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	60fb      	str	r3, [r7, #12]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00a      	beq.n	800a2f6 <vPortFree+0x62>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	60bb      	str	r3, [r7, #8]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	4b14      	ldr	r3, [pc, #80]	; (800a34c <vPortFree+0xb8>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4013      	ands	r3, r2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d01e      	beq.n	800a342 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d11a      	bne.n	800a342 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	4b0e      	ldr	r3, [pc, #56]	; (800a34c <vPortFree+0xb8>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	43db      	mvns	r3, r3
 800a316:	401a      	ands	r2, r3
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a31c:	f002 f95e 	bl	800c5dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	4b0a      	ldr	r3, [pc, #40]	; (800a350 <vPortFree+0xbc>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4413      	add	r3, r2
 800a32a:	4a09      	ldr	r2, [pc, #36]	; (800a350 <vPortFree+0xbc>)
 800a32c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a32e:	6938      	ldr	r0, [r7, #16]
 800a330:	f000 f874 	bl	800a41c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a334:	4b07      	ldr	r3, [pc, #28]	; (800a354 <vPortFree+0xc0>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3301      	adds	r3, #1
 800a33a:	4a06      	ldr	r2, [pc, #24]	; (800a354 <vPortFree+0xc0>)
 800a33c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a33e:	f002 f95b 	bl	800c5f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a342:	bf00      	nop
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	2400cc24 	.word	0x2400cc24
 800a350:	2400cc14 	.word	0x2400cc14
 800a354:	2400cc20 	.word	0x2400cc20

0800a358 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a35e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a362:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a364:	4b27      	ldr	r3, [pc, #156]	; (800a404 <prvHeapInit+0xac>)
 800a366:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f003 0307 	and.w	r3, r3, #7
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00c      	beq.n	800a38c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3307      	adds	r3, #7
 800a376:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0307 	bic.w	r3, r3, #7
 800a37e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	4a1f      	ldr	r2, [pc, #124]	; (800a404 <prvHeapInit+0xac>)
 800a388:	4413      	add	r3, r2
 800a38a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a390:	4a1d      	ldr	r2, [pc, #116]	; (800a408 <prvHeapInit+0xb0>)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a396:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <prvHeapInit+0xb0>)
 800a398:	2200      	movs	r2, #0
 800a39a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3a4:	2208      	movs	r2, #8
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f023 0307 	bic.w	r3, r3, #7
 800a3b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	4a15      	ldr	r2, [pc, #84]	; (800a40c <prvHeapInit+0xb4>)
 800a3b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3ba:	4b14      	ldr	r3, [pc, #80]	; (800a40c <prvHeapInit+0xb4>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3c2:	4b12      	ldr	r3, [pc, #72]	; (800a40c <prvHeapInit+0xb4>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	1ad2      	subs	r2, r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3d8:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <prvHeapInit+0xb4>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	4a0a      	ldr	r2, [pc, #40]	; (800a410 <prvHeapInit+0xb8>)
 800a3e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	4a09      	ldr	r2, [pc, #36]	; (800a414 <prvHeapInit+0xbc>)
 800a3ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3f0:	4b09      	ldr	r3, [pc, #36]	; (800a418 <prvHeapInit+0xc0>)
 800a3f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3f6:	601a      	str	r2, [r3, #0]
}
 800a3f8:	bf00      	nop
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	24009008 	.word	0x24009008
 800a408:	2400cc08 	.word	0x2400cc08
 800a40c:	2400cc10 	.word	0x2400cc10
 800a410:	2400cc18 	.word	0x2400cc18
 800a414:	2400cc14 	.word	0x2400cc14
 800a418:	2400cc24 	.word	0x2400cc24

0800a41c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a424:	4b28      	ldr	r3, [pc, #160]	; (800a4c8 <prvInsertBlockIntoFreeList+0xac>)
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	e002      	b.n	800a430 <prvInsertBlockIntoFreeList+0x14>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	429a      	cmp	r2, r3
 800a438:	d8f7      	bhi.n	800a42a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	4413      	add	r3, r2
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d108      	bne.n	800a45e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	441a      	add	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	441a      	add	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d118      	bne.n	800a4a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <prvInsertBlockIntoFreeList+0xb0>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d00d      	beq.n	800a49a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	441a      	add	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	e008      	b.n	800a4ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a49a:	4b0c      	ldr	r3, [pc, #48]	; (800a4cc <prvInsertBlockIntoFreeList+0xb0>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	e003      	b.n	800a4ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d002      	beq.n	800a4ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ba:	bf00      	nop
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	2400cc08 	.word	0x2400cc08
 800a4cc:	2400cc10 	.word	0x2400cc10

0800a4d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f103 0208 	add.w	r2, r3, #8
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f103 0208 	add.w	r2, r3, #8
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f103 0208 	add.w	r2, r3, #8
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a52a:	b480      	push	{r7}
 800a52c:	b085      	sub	sp, #20
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	601a      	str	r2, [r3, #0]
}
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a572:	b480      	push	{r7}
 800a574:	b085      	sub	sp, #20
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a588:	d103      	bne.n	800a592 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e00c      	b.n	800a5ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3308      	adds	r3, #8
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	e002      	b.n	800a5a0 <vListInsert+0x2e>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d2f6      	bcs.n	800a59a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	601a      	str	r2, [r3, #0]
}
 800a5d8:	bf00      	nop
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	6892      	ldr	r2, [r2, #8]
 800a5fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	6852      	ldr	r2, [r2, #4]
 800a604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d103      	bne.n	800a618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	1e5a      	subs	r2, r3, #1
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3b04      	subs	r3, #4
 800a648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3b04      	subs	r3, #4
 800a656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f023 0201 	bic.w	r2, r3, #1
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3b04      	subs	r3, #4
 800a666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a668:	4a0c      	ldr	r2, [pc, #48]	; (800a69c <pxPortInitialiseStack+0x64>)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3b14      	subs	r3, #20
 800a672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3b04      	subs	r3, #4
 800a67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f06f 0202 	mvn.w	r2, #2
 800a686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3b20      	subs	r3, #32
 800a68c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a68e:	68fb      	ldr	r3, [r7, #12]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	0800a6a1 	.word	0x0800a6a1

0800a6a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6aa:	4b12      	ldr	r3, [pc, #72]	; (800a6f4 <prvTaskExitError+0x54>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b2:	d00a      	beq.n	800a6ca <prvTaskExitError+0x2a>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	60fb      	str	r3, [r7, #12]
}
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <prvTaskExitError+0x28>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	60bb      	str	r3, [r7, #8]
}
 800a6dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6de:	bf00      	nop
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0fc      	beq.n	800a6e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6e6:	bf00      	nop
 800a6e8:	bf00      	nop
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	24000014 	.word	0x24000014
	...

0800a700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a700:	4b07      	ldr	r3, [pc, #28]	; (800a720 <pxCurrentTCBConst2>)
 800a702:	6819      	ldr	r1, [r3, #0]
 800a704:	6808      	ldr	r0, [r1, #0]
 800a706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70a:	f380 8809 	msr	PSP, r0
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f04f 0000 	mov.w	r0, #0
 800a716:	f380 8811 	msr	BASEPRI, r0
 800a71a:	4770      	bx	lr
 800a71c:	f3af 8000 	nop.w

0800a720 <pxCurrentTCBConst2>:
 800a720:	2400cc70 	.word	0x2400cc70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a724:	bf00      	nop
 800a726:	bf00      	nop

0800a728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a728:	4808      	ldr	r0, [pc, #32]	; (800a74c <prvPortStartFirstTask+0x24>)
 800a72a:	6800      	ldr	r0, [r0, #0]
 800a72c:	6800      	ldr	r0, [r0, #0]
 800a72e:	f380 8808 	msr	MSP, r0
 800a732:	f04f 0000 	mov.w	r0, #0
 800a736:	f380 8814 	msr	CONTROL, r0
 800a73a:	b662      	cpsie	i
 800a73c:	b661      	cpsie	f
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	df00      	svc	0
 800a748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a74a:	bf00      	nop
 800a74c:	e000ed08 	.word	0xe000ed08

0800a750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a756:	4b46      	ldr	r3, [pc, #280]	; (800a870 <xPortStartScheduler+0x120>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a46      	ldr	r2, [pc, #280]	; (800a874 <xPortStartScheduler+0x124>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d10a      	bne.n	800a776 <xPortStartScheduler+0x26>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	613b      	str	r3, [r7, #16]
}
 800a772:	bf00      	nop
 800a774:	e7fe      	b.n	800a774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a776:	4b3e      	ldr	r3, [pc, #248]	; (800a870 <xPortStartScheduler+0x120>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a3f      	ldr	r2, [pc, #252]	; (800a878 <xPortStartScheduler+0x128>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d10a      	bne.n	800a796 <xPortStartScheduler+0x46>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	60fb      	str	r3, [r7, #12]
}
 800a792:	bf00      	nop
 800a794:	e7fe      	b.n	800a794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a796:	4b39      	ldr	r3, [pc, #228]	; (800a87c <xPortStartScheduler+0x12c>)
 800a798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	22ff      	movs	r2, #255	; 0xff
 800a7a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	4b31      	ldr	r3, [pc, #196]	; (800a880 <xPortStartScheduler+0x130>)
 800a7bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7be:	4b31      	ldr	r3, [pc, #196]	; (800a884 <xPortStartScheduler+0x134>)
 800a7c0:	2207      	movs	r2, #7
 800a7c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7c4:	e009      	b.n	800a7da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a7c6:	4b2f      	ldr	r3, [pc, #188]	; (800a884 <xPortStartScheduler+0x134>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	4a2d      	ldr	r2, [pc, #180]	; (800a884 <xPortStartScheduler+0x134>)
 800a7ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e2:	2b80      	cmp	r3, #128	; 0x80
 800a7e4:	d0ef      	beq.n	800a7c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7e6:	4b27      	ldr	r3, [pc, #156]	; (800a884 <xPortStartScheduler+0x134>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f1c3 0307 	rsb	r3, r3, #7
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d00a      	beq.n	800a808 <xPortStartScheduler+0xb8>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	60bb      	str	r3, [r7, #8]
}
 800a804:	bf00      	nop
 800a806:	e7fe      	b.n	800a806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a808:	4b1e      	ldr	r3, [pc, #120]	; (800a884 <xPortStartScheduler+0x134>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	021b      	lsls	r3, r3, #8
 800a80e:	4a1d      	ldr	r2, [pc, #116]	; (800a884 <xPortStartScheduler+0x134>)
 800a810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a812:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <xPortStartScheduler+0x134>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a81a:	4a1a      	ldr	r2, [pc, #104]	; (800a884 <xPortStartScheduler+0x134>)
 800a81c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	b2da      	uxtb	r2, r3
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a826:	4b18      	ldr	r3, [pc, #96]	; (800a888 <xPortStartScheduler+0x138>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a17      	ldr	r2, [pc, #92]	; (800a888 <xPortStartScheduler+0x138>)
 800a82c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a832:	4b15      	ldr	r3, [pc, #84]	; (800a888 <xPortStartScheduler+0x138>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a14      	ldr	r2, [pc, #80]	; (800a888 <xPortStartScheduler+0x138>)
 800a838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a83c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a83e:	f000 f8dd 	bl	800a9fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a842:	4b12      	ldr	r3, [pc, #72]	; (800a88c <xPortStartScheduler+0x13c>)
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a848:	f000 f8fc 	bl	800aa44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a84c:	4b10      	ldr	r3, [pc, #64]	; (800a890 <xPortStartScheduler+0x140>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a0f      	ldr	r2, [pc, #60]	; (800a890 <xPortStartScheduler+0x140>)
 800a852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a858:	f7ff ff66 	bl	800a728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a85c:	f002 f834 	bl	800c8c8 <vTaskSwitchContext>
	prvTaskExitError();
 800a860:	f7ff ff1e 	bl	800a6a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	e000ed00 	.word	0xe000ed00
 800a874:	410fc271 	.word	0x410fc271
 800a878:	410fc270 	.word	0x410fc270
 800a87c:	e000e400 	.word	0xe000e400
 800a880:	2400cc28 	.word	0x2400cc28
 800a884:	2400cc2c 	.word	0x2400cc2c
 800a888:	e000ed20 	.word	0xe000ed20
 800a88c:	24000014 	.word	0x24000014
 800a890:	e000ef34 	.word	0xe000ef34

0800a894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	607b      	str	r3, [r7, #4]
}
 800a8ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8ae:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <vPortEnterCritical+0x58>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	4a0d      	ldr	r2, [pc, #52]	; (800a8ec <vPortEnterCritical+0x58>)
 800a8b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <vPortEnterCritical+0x58>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d10f      	bne.n	800a8e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <vPortEnterCritical+0x5c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00a      	beq.n	800a8e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	603b      	str	r3, [r7, #0]
}
 800a8dc:	bf00      	nop
 800a8de:	e7fe      	b.n	800a8de <vPortEnterCritical+0x4a>
	}
}
 800a8e0:	bf00      	nop
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	24000014 	.word	0x24000014
 800a8f0:	e000ed04 	.word	0xe000ed04

0800a8f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8fa:	4b12      	ldr	r3, [pc, #72]	; (800a944 <vPortExitCritical+0x50>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10a      	bne.n	800a918 <vPortExitCritical+0x24>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	607b      	str	r3, [r7, #4]
}
 800a914:	bf00      	nop
 800a916:	e7fe      	b.n	800a916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a918:	4b0a      	ldr	r3, [pc, #40]	; (800a944 <vPortExitCritical+0x50>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3b01      	subs	r3, #1
 800a91e:	4a09      	ldr	r2, [pc, #36]	; (800a944 <vPortExitCritical+0x50>)
 800a920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a922:	4b08      	ldr	r3, [pc, #32]	; (800a944 <vPortExitCritical+0x50>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d105      	bne.n	800a936 <vPortExitCritical+0x42>
 800a92a:	2300      	movs	r3, #0
 800a92c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a936:	bf00      	nop
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	24000014 	.word	0x24000014
	...

0800a950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a950:	f3ef 8009 	mrs	r0, PSP
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	4b15      	ldr	r3, [pc, #84]	; (800a9b0 <pxCurrentTCBConst>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	f01e 0f10 	tst.w	lr, #16
 800a960:	bf08      	it	eq
 800a962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96a:	6010      	str	r0, [r2, #0]
 800a96c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a970:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a974:	f380 8811 	msr	BASEPRI, r0
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f001 ffa2 	bl	800c8c8 <vTaskSwitchContext>
 800a984:	f04f 0000 	mov.w	r0, #0
 800a988:	f380 8811 	msr	BASEPRI, r0
 800a98c:	bc09      	pop	{r0, r3}
 800a98e:	6819      	ldr	r1, [r3, #0]
 800a990:	6808      	ldr	r0, [r1, #0]
 800a992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a996:	f01e 0f10 	tst.w	lr, #16
 800a99a:	bf08      	it	eq
 800a99c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9a0:	f380 8809 	msr	PSP, r0
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	f3af 8000 	nop.w

0800a9b0 <pxCurrentTCBConst>:
 800a9b0:	2400cc70 	.word	0x2400cc70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop

0800a9b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	607b      	str	r3, [r7, #4]
}
 800a9d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9d2:	f001 febf 	bl	800c754 <xTaskIncrementTick>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9dc:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <xPortSysTickHandler+0x40>)
 800a9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	f383 8811 	msr	BASEPRI, r3
}
 800a9ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	e000ed04 	.word	0xe000ed04

0800a9fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa00:	4b0b      	ldr	r3, [pc, #44]	; (800aa30 <vPortSetupTimerInterrupt+0x34>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa06:	4b0b      	ldr	r3, [pc, #44]	; (800aa34 <vPortSetupTimerInterrupt+0x38>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa0c:	4b0a      	ldr	r3, [pc, #40]	; (800aa38 <vPortSetupTimerInterrupt+0x3c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a0a      	ldr	r2, [pc, #40]	; (800aa3c <vPortSetupTimerInterrupt+0x40>)
 800aa12:	fba2 2303 	umull	r2, r3, r2, r3
 800aa16:	099b      	lsrs	r3, r3, #6
 800aa18:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <vPortSetupTimerInterrupt+0x44>)
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa1e:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <vPortSetupTimerInterrupt+0x34>)
 800aa20:	2207      	movs	r2, #7
 800aa22:	601a      	str	r2, [r3, #0]
}
 800aa24:	bf00      	nop
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	e000e010 	.word	0xe000e010
 800aa34:	e000e018 	.word	0xe000e018
 800aa38:	24000000 	.word	0x24000000
 800aa3c:	10624dd3 	.word	0x10624dd3
 800aa40:	e000e014 	.word	0xe000e014

0800aa44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa54 <vPortEnableVFP+0x10>
 800aa48:	6801      	ldr	r1, [r0, #0]
 800aa4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa4e:	6001      	str	r1, [r0, #0]
 800aa50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa52:	bf00      	nop
 800aa54:	e000ed88 	.word	0xe000ed88

0800aa58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa5e:	f3ef 8305 	mrs	r3, IPSR
 800aa62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2b0f      	cmp	r3, #15
 800aa68:	d914      	bls.n	800aa94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa6a:	4a17      	ldr	r2, [pc, #92]	; (800aac8 <vPortValidateInterruptPriority+0x70>)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa74:	4b15      	ldr	r3, [pc, #84]	; (800aacc <vPortValidateInterruptPriority+0x74>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	7afa      	ldrb	r2, [r7, #11]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d20a      	bcs.n	800aa94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	607b      	str	r3, [r7, #4]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa94:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <vPortValidateInterruptPriority+0x78>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa9c:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <vPortValidateInterruptPriority+0x7c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d90a      	bls.n	800aaba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	603b      	str	r3, [r7, #0]
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <vPortValidateInterruptPriority+0x60>
	}
 800aaba:	bf00      	nop
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	e000e3f0 	.word	0xe000e3f0
 800aacc:	2400cc28 	.word	0x2400cc28
 800aad0:	e000ed0c 	.word	0xe000ed0c
 800aad4:	2400cc2c 	.word	0x2400cc2c

0800aad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <xQueueGenericReset+0x2a>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	60bb      	str	r3, [r7, #8]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab02:	f7ff fec7 	bl	800a894 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	441a      	add	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab32:	3b01      	subs	r3, #1
 800ab34:	68f9      	ldr	r1, [r7, #12]
 800ab36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab38:	fb01 f303 	mul.w	r3, r1, r3
 800ab3c:	441a      	add	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	22ff      	movs	r2, #255	; 0xff
 800ab46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	22ff      	movs	r2, #255	; 0xff
 800ab4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d114      	bne.n	800ab82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d01a      	beq.n	800ab96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3310      	adds	r3, #16
 800ab64:	4618      	mov	r0, r3
 800ab66:	f001 ff63 	bl	800ca30 <xTaskRemoveFromEventList>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d012      	beq.n	800ab96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab70:	4b0c      	ldr	r3, [pc, #48]	; (800aba4 <xQueueGenericReset+0xcc>)
 800ab72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	e009      	b.n	800ab96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3310      	adds	r3, #16
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7ff fca2 	bl	800a4d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	3324      	adds	r3, #36	; 0x24
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff fc9d 	bl	800a4d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab96:	f7ff fead 	bl	800a8f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab9a:	2301      	movs	r3, #1
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08e      	sub	sp, #56	; 0x38
 800abac:	af02      	add	r7, sp, #8
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <xQueueGenericCreateStatic+0x52>
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <xQueueGenericCreateStatic+0x56>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e000      	b.n	800ac00 <xQueueGenericCreateStatic+0x58>
 800abfe:	2300      	movs	r3, #0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	623b      	str	r3, [r7, #32]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d102      	bne.n	800ac26 <xQueueGenericCreateStatic+0x7e>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <xQueueGenericCreateStatic+0x82>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e000      	b.n	800ac2c <xQueueGenericCreateStatic+0x84>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	61fb      	str	r3, [r7, #28]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac46:	2350      	movs	r3, #80	; 0x50
 800ac48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b50      	cmp	r3, #80	; 0x50
 800ac4e:	d00a      	beq.n	800ac66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	61bb      	str	r3, [r7, #24]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00d      	beq.n	800ac8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4613      	mov	r3, r2
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	68b9      	ldr	r1, [r7, #8]
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f83f 	bl	800ad0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3730      	adds	r7, #48	; 0x30
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08a      	sub	sp, #40	; 0x28
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	4613      	mov	r3, r2
 800aca4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	613b      	str	r3, [r7, #16]
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	fb02 f303 	mul.w	r3, r2, r3
 800acca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	3350      	adds	r3, #80	; 0x50
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff fa13 	bl	800a0fc <pvPortMalloc>
 800acd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d011      	beq.n	800ad02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	3350      	adds	r3, #80	; 0x50
 800ace6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acf0:	79fa      	ldrb	r2, [r7, #7]
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4613      	mov	r3, r2
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 f805 	bl	800ad0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad02:	69bb      	ldr	r3, [r7, #24]
	}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3720      	adds	r7, #32
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d103      	bne.n	800ad28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	e002      	b.n	800ad2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	69b8      	ldr	r0, [r7, #24]
 800ad3e:	f7ff fecb 	bl	800aad8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	78fa      	ldrb	r2, [r7, #3]
 800ad46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08e      	sub	sp, #56	; 0x38
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad62:	2300      	movs	r3, #0
 800ad64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <xQueueGenericSend+0x32>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <xQueueGenericSend+0x40>
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <xQueueGenericSend+0x44>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e000      	b.n	800ad9a <xQueueGenericSend+0x46>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <xQueueGenericSend+0x60>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d103      	bne.n	800adc2 <xQueueGenericSend+0x6e>
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d101      	bne.n	800adc6 <xQueueGenericSend+0x72>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <xQueueGenericSend+0x74>
 800adc6:	2300      	movs	r3, #0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xQueueGenericSend+0x8e>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	623b      	str	r3, [r7, #32]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ade2:	f002 f81d 	bl	800ce20 <xTaskGetSchedulerState>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <xQueueGenericSend+0x9e>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <xQueueGenericSend+0xa2>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e000      	b.n	800adf8 <xQueueGenericSend+0xa4>
 800adf6:	2300      	movs	r3, #0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <xQueueGenericSend+0xbe>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	61fb      	str	r3, [r7, #28]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae12:	f7ff fd3f 	bl	800a894 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d302      	bcc.n	800ae28 <xQueueGenericSend+0xd4>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d129      	bne.n	800ae7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae2e:	f000 fbbb 	bl	800b5a8 <prvCopyDataToQueue>
 800ae32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d010      	beq.n	800ae5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	3324      	adds	r3, #36	; 0x24
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 fdf5 	bl	800ca30 <xTaskRemoveFromEventList>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d013      	beq.n	800ae74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae4c:	4b3f      	ldr	r3, [pc, #252]	; (800af4c <xQueueGenericSend+0x1f8>)
 800ae4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	e00a      	b.n	800ae74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae64:	4b39      	ldr	r3, [pc, #228]	; (800af4c <xQueueGenericSend+0x1f8>)
 800ae66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae74:	f7ff fd3e 	bl	800a8f4 <vPortExitCritical>
				return pdPASS;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e063      	b.n	800af44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d103      	bne.n	800ae8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae82:	f7ff fd37 	bl	800a8f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	e05c      	b.n	800af44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d106      	bne.n	800ae9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae90:	f107 0314 	add.w	r3, r7, #20
 800ae94:	4618      	mov	r0, r3
 800ae96:	f001 fe55 	bl	800cb44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae9e:	f7ff fd29 	bl	800a8f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aea2:	f001 fb9b 	bl	800c5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aea6:	f7ff fcf5 	bl	800a894 <vPortEnterCritical>
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb6:	d103      	bne.n	800aec0 <xQueueGenericSend+0x16c>
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aec6:	b25b      	sxtb	r3, r3
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aecc:	d103      	bne.n	800aed6 <xQueueGenericSend+0x182>
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aed6:	f7ff fd0d 	bl	800a8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeda:	1d3a      	adds	r2, r7, #4
 800aedc:	f107 0314 	add.w	r3, r7, #20
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 fe44 	bl	800cb70 <xTaskCheckForTimeOut>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d124      	bne.n	800af38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aeee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef0:	f000 fc52 	bl	800b798 <prvIsQueueFull>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	3310      	adds	r3, #16
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	4611      	mov	r1, r2
 800af02:	4618      	mov	r0, r3
 800af04:	f001 fd44 	bl	800c990 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0a:	f000 fbdd 	bl	800b6c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af0e:	f001 fb73 	bl	800c5f8 <xTaskResumeAll>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	f47f af7c 	bne.w	800ae12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af1a:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <xQueueGenericSend+0x1f8>)
 800af1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	e772      	b.n	800ae12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af2e:	f000 fbcb 	bl	800b6c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af32:	f001 fb61 	bl	800c5f8 <xTaskResumeAll>
 800af36:	e76c      	b.n	800ae12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3a:	f000 fbc5 	bl	800b6c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af3e:	f001 fb5b 	bl	800c5f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af44:	4618      	mov	r0, r3
 800af46:	3738      	adds	r7, #56	; 0x38
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	e000ed04 	.word	0xe000ed04

0800af50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b090      	sub	sp, #64	; 0x40
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10a      	bne.n	800af7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d103      	bne.n	800af8c <xQueueGenericSendFromISR+0x3c>
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <xQueueGenericSendFromISR+0x40>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e000      	b.n	800af92 <xQueueGenericSendFromISR+0x42>
 800af90:	2300      	movs	r3, #0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10a      	bne.n	800afac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afa8:	bf00      	nop
 800afaa:	e7fe      	b.n	800afaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d103      	bne.n	800afba <xQueueGenericSendFromISR+0x6a>
 800afb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d101      	bne.n	800afbe <xQueueGenericSendFromISR+0x6e>
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <xQueueGenericSendFromISR+0x70>
 800afbe:	2300      	movs	r3, #0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	623b      	str	r3, [r7, #32]
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afda:	f7ff fd3d 	bl	800aa58 <vPortValidateInterruptPriority>
	__asm volatile
 800afde:	f3ef 8211 	mrs	r2, BASEPRI
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	61fa      	str	r2, [r7, #28]
 800aff4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800aff6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aff8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b002:	429a      	cmp	r2, r3
 800b004:	d302      	bcc.n	800b00c <xQueueGenericSendFromISR+0xbc>
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d12f      	bne.n	800b06c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b022:	f000 fac1 	bl	800b5a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b026:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b02e:	d112      	bne.n	800b056 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	d016      	beq.n	800b066 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	3324      	adds	r3, #36	; 0x24
 800b03c:	4618      	mov	r0, r3
 800b03e:	f001 fcf7 	bl	800ca30 <xTaskRemoveFromEventList>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00e      	beq.n	800b066 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	e007      	b.n	800b066 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b05a:	3301      	adds	r3, #1
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	b25a      	sxtb	r2, r3
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b066:	2301      	movs	r3, #1
 800b068:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b06a:	e001      	b.n	800b070 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b06c:	2300      	movs	r3, #0
 800b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b072:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f383 8811 	msr	BASEPRI, r3
}
 800b07a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3740      	adds	r7, #64	; 0x40
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b08e      	sub	sp, #56	; 0x38
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10a      	bne.n	800b0b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	623b      	str	r3, [r7, #32]
}
 800b0ac:	bf00      	nop
 800b0ae:	e7fe      	b.n	800b0ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00a      	beq.n	800b0ce <xQueueGiveFromISR+0x48>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	61fb      	str	r3, [r7, #28]
}
 800b0ca:	bf00      	nop
 800b0cc:	e7fe      	b.n	800b0cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d103      	bne.n	800b0de <xQueueGiveFromISR+0x58>
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <xQueueGiveFromISR+0x5c>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e000      	b.n	800b0e4 <xQueueGiveFromISR+0x5e>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10a      	bne.n	800b0fe <xQueueGiveFromISR+0x78>
	__asm volatile
 800b0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ec:	f383 8811 	msr	BASEPRI, r3
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	61bb      	str	r3, [r7, #24]
}
 800b0fa:	bf00      	nop
 800b0fc:	e7fe      	b.n	800b0fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0fe:	f7ff fcab 	bl	800aa58 <vPortValidateInterruptPriority>
	__asm volatile
 800b102:	f3ef 8211 	mrs	r2, BASEPRI
 800b106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	617a      	str	r2, [r7, #20]
 800b118:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b11a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b11c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b122:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d22b      	bcs.n	800b186 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b140:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b148:	d112      	bne.n	800b170 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d016      	beq.n	800b180 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	3324      	adds	r3, #36	; 0x24
 800b156:	4618      	mov	r0, r3
 800b158:	f001 fc6a 	bl	800ca30 <xTaskRemoveFromEventList>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00e      	beq.n	800b180 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00b      	beq.n	800b180 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	2201      	movs	r2, #1
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	e007      	b.n	800b180 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b174:	3301      	adds	r3, #1
 800b176:	b2db      	uxtb	r3, r3
 800b178:	b25a      	sxtb	r2, r3
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b180:	2301      	movs	r3, #1
 800b182:	637b      	str	r3, [r7, #52]	; 0x34
 800b184:	e001      	b.n	800b18a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b186:	2300      	movs	r3, #0
 800b188:	637b      	str	r3, [r7, #52]	; 0x34
 800b18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f383 8811 	msr	BASEPRI, r3
}
 800b194:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3738      	adds	r7, #56	; 0x38
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08c      	sub	sp, #48	; 0x30
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <xQueueReceive+0x30>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	623b      	str	r3, [r7, #32]
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d103      	bne.n	800b1de <xQueueReceive+0x3e>
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <xQueueReceive+0x42>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e000      	b.n	800b1e4 <xQueueReceive+0x44>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10a      	bne.n	800b1fe <xQueueReceive+0x5e>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	61fb      	str	r3, [r7, #28]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1fe:	f001 fe0f 	bl	800ce20 <xTaskGetSchedulerState>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d102      	bne.n	800b20e <xQueueReceive+0x6e>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <xQueueReceive+0x72>
 800b20e:	2301      	movs	r3, #1
 800b210:	e000      	b.n	800b214 <xQueueReceive+0x74>
 800b212:	2300      	movs	r3, #0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d10a      	bne.n	800b22e <xQueueReceive+0x8e>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	61bb      	str	r3, [r7, #24]
}
 800b22a:	bf00      	nop
 800b22c:	e7fe      	b.n	800b22c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b22e:	f7ff fb31 	bl	800a894 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b236:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01f      	beq.n	800b27e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b242:	f000 fa1b 	bl	800b67c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	1e5a      	subs	r2, r3, #1
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00f      	beq.n	800b276 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	3310      	adds	r3, #16
 800b25a:	4618      	mov	r0, r3
 800b25c:	f001 fbe8 	bl	800ca30 <xTaskRemoveFromEventList>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d007      	beq.n	800b276 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b266:	4b3d      	ldr	r3, [pc, #244]	; (800b35c <xQueueReceive+0x1bc>)
 800b268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b276:	f7ff fb3d 	bl	800a8f4 <vPortExitCritical>
				return pdPASS;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e069      	b.n	800b352 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d103      	bne.n	800b28c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b284:	f7ff fb36 	bl	800a8f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b288:	2300      	movs	r3, #0
 800b28a:	e062      	b.n	800b352 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d106      	bne.n	800b2a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b292:	f107 0310 	add.w	r3, r7, #16
 800b296:	4618      	mov	r0, r3
 800b298:	f001 fc54 	bl	800cb44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b29c:	2301      	movs	r3, #1
 800b29e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2a0:	f7ff fb28 	bl	800a8f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2a4:	f001 f99a 	bl	800c5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2a8:	f7ff faf4 	bl	800a894 <vPortEnterCritical>
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2b2:	b25b      	sxtb	r3, r3
 800b2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b8:	d103      	bne.n	800b2c2 <xQueueReceive+0x122>
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2c8:	b25b      	sxtb	r3, r3
 800b2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ce:	d103      	bne.n	800b2d8 <xQueueReceive+0x138>
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2d8:	f7ff fb0c 	bl	800a8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2dc:	1d3a      	adds	r2, r7, #4
 800b2de:	f107 0310 	add.w	r3, r7, #16
 800b2e2:	4611      	mov	r1, r2
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f001 fc43 	bl	800cb70 <xTaskCheckForTimeOut>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d123      	bne.n	800b338 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f2:	f000 fa3b 	bl	800b76c <prvIsQueueEmpty>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d017      	beq.n	800b32c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fe:	3324      	adds	r3, #36	; 0x24
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	4611      	mov	r1, r2
 800b304:	4618      	mov	r0, r3
 800b306:	f001 fb43 	bl	800c990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b30a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b30c:	f000 f9dc 	bl	800b6c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b310:	f001 f972 	bl	800c5f8 <xTaskResumeAll>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d189      	bne.n	800b22e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b31a:	4b10      	ldr	r3, [pc, #64]	; (800b35c <xQueueReceive+0x1bc>)
 800b31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	e780      	b.n	800b22e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b32c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b32e:	f000 f9cb 	bl	800b6c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b332:	f001 f961 	bl	800c5f8 <xTaskResumeAll>
 800b336:	e77a      	b.n	800b22e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b33a:	f000 f9c5 	bl	800b6c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b33e:	f001 f95b 	bl	800c5f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b344:	f000 fa12 	bl	800b76c <prvIsQueueEmpty>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f43f af6f 	beq.w	800b22e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b350:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b352:	4618      	mov	r0, r3
 800b354:	3730      	adds	r7, #48	; 0x30
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	e000ed04 	.word	0xe000ed04

0800b360 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08e      	sub	sp, #56	; 0x38
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b36a:	2300      	movs	r3, #0
 800b36c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b372:	2300      	movs	r3, #0
 800b374:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10a      	bne.n	800b392 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	623b      	str	r3, [r7, #32]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	61fb      	str	r3, [r7, #28]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3b0:	f001 fd36 	bl	800ce20 <xTaskGetSchedulerState>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d102      	bne.n	800b3c0 <xQueueSemaphoreTake+0x60>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <xQueueSemaphoreTake+0x64>
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e000      	b.n	800b3c6 <xQueueSemaphoreTake+0x66>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10a      	bne.n	800b3e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	61bb      	str	r3, [r7, #24]
}
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3e0:	f7ff fa58 	bl	800a894 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d024      	beq.n	800b43a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	1e5a      	subs	r2, r3, #1
 800b3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d104      	bne.n	800b40a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b400:	f001 fe84 	bl	800d10c <pvTaskIncrementMutexHeldCount>
 800b404:	4602      	mov	r2, r0
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00f      	beq.n	800b432 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	3310      	adds	r3, #16
 800b416:	4618      	mov	r0, r3
 800b418:	f001 fb0a 	bl	800ca30 <xTaskRemoveFromEventList>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d007      	beq.n	800b432 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b422:	4b54      	ldr	r3, [pc, #336]	; (800b574 <xQueueSemaphoreTake+0x214>)
 800b424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b432:	f7ff fa5f 	bl	800a8f4 <vPortExitCritical>
				return pdPASS;
 800b436:	2301      	movs	r3, #1
 800b438:	e097      	b.n	800b56a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d111      	bne.n	800b464 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00a      	beq.n	800b45c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44a:	f383 8811 	msr	BASEPRI, r3
 800b44e:	f3bf 8f6f 	isb	sy
 800b452:	f3bf 8f4f 	dsb	sy
 800b456:	617b      	str	r3, [r7, #20]
}
 800b458:	bf00      	nop
 800b45a:	e7fe      	b.n	800b45a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b45c:	f7ff fa4a 	bl	800a8f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b460:	2300      	movs	r3, #0
 800b462:	e082      	b.n	800b56a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b46a:	f107 030c 	add.w	r3, r7, #12
 800b46e:	4618      	mov	r0, r3
 800b470:	f001 fb68 	bl	800cb44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b474:	2301      	movs	r3, #1
 800b476:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b478:	f7ff fa3c 	bl	800a8f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b47c:	f001 f8ae 	bl	800c5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b480:	f7ff fa08 	bl	800a894 <vPortEnterCritical>
 800b484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b48a:	b25b      	sxtb	r3, r3
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b490:	d103      	bne.n	800b49a <xQueueSemaphoreTake+0x13a>
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	2200      	movs	r2, #0
 800b496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4a0:	b25b      	sxtb	r3, r3
 800b4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a6:	d103      	bne.n	800b4b0 <xQueueSemaphoreTake+0x150>
 800b4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4b0:	f7ff fa20 	bl	800a8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4b4:	463a      	mov	r2, r7
 800b4b6:	f107 030c 	add.w	r3, r7, #12
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f001 fb57 	bl	800cb70 <xTaskCheckForTimeOut>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d132      	bne.n	800b52e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4ca:	f000 f94f 	bl	800b76c <prvIsQueueEmpty>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d026      	beq.n	800b522 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d109      	bne.n	800b4f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b4dc:	f7ff f9da 	bl	800a894 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f001 fcb9 	bl	800ce5c <xTaskPriorityInherit>
 800b4ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b4ec:	f7ff fa02 	bl	800a8f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f2:	3324      	adds	r3, #36	; 0x24
 800b4f4:	683a      	ldr	r2, [r7, #0]
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f001 fa49 	bl	800c990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b4fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b500:	f000 f8e2 	bl	800b6c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b504:	f001 f878 	bl	800c5f8 <xTaskResumeAll>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f47f af68 	bne.w	800b3e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b510:	4b18      	ldr	r3, [pc, #96]	; (800b574 <xQueueSemaphoreTake+0x214>)
 800b512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	e75e      	b.n	800b3e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b524:	f000 f8d0 	bl	800b6c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b528:	f001 f866 	bl	800c5f8 <xTaskResumeAll>
 800b52c:	e758      	b.n	800b3e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b52e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b530:	f000 f8ca 	bl	800b6c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b534:	f001 f860 	bl	800c5f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b53a:	f000 f917 	bl	800b76c <prvIsQueueEmpty>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	f43f af4d 	beq.w	800b3e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00d      	beq.n	800b568 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b54c:	f7ff f9a2 	bl	800a894 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b552:	f000 f811 	bl	800b578 <prvGetDisinheritPriorityAfterTimeout>
 800b556:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b55e:	4618      	mov	r0, r3
 800b560:	f001 fd52 	bl	800d008 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b564:	f7ff f9c6 	bl	800a8f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b568:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3738      	adds	r7, #56	; 0x38
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	e000ed04 	.word	0xe000ed04

0800b578 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	2b00      	cmp	r3, #0
 800b586:	d006      	beq.n	800b596 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e001      	b.n	800b59a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b596:	2300      	movs	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b59a:	68fb      	ldr	r3, [r7, #12]
	}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10d      	bne.n	800b5e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d14d      	bne.n	800b66a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f001 fcaa 	bl	800cf2c <xTaskPriorityDisinherit>
 800b5d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	609a      	str	r2, [r3, #8]
 800b5e0:	e043      	b.n	800b66a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d119      	bne.n	800b61c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6858      	ldr	r0, [r3, #4]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	68b9      	ldr	r1, [r7, #8]
 800b5f4:	f002 fcbb 	bl	800df6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b600:	441a      	add	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d32b      	bcc.n	800b66a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	605a      	str	r2, [r3, #4]
 800b61a:	e026      	b.n	800b66a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	68d8      	ldr	r0, [r3, #12]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b624:	461a      	mov	r2, r3
 800b626:	68b9      	ldr	r1, [r7, #8]
 800b628:	f002 fca1 	bl	800df6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	68da      	ldr	r2, [r3, #12]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b634:	425b      	negs	r3, r3
 800b636:	441a      	add	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	429a      	cmp	r2, r3
 800b646:	d207      	bcs.n	800b658 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	689a      	ldr	r2, [r3, #8]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b650:	425b      	negs	r3, r3
 800b652:	441a      	add	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d105      	bne.n	800b66a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	3b01      	subs	r3, #1
 800b668:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	1c5a      	adds	r2, r3, #1
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b672:	697b      	ldr	r3, [r7, #20]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3718      	adds	r7, #24
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d018      	beq.n	800b6c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68da      	ldr	r2, [r3, #12]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b696:	441a      	add	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68da      	ldr	r2, [r3, #12]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d303      	bcc.n	800b6b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	68d9      	ldr	r1, [r3, #12]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	6838      	ldr	r0, [r7, #0]
 800b6bc:	f002 fc57 	bl	800df6e <memcpy>
	}
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6d0:	f7ff f8e0 	bl	800a894 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6dc:	e011      	b.n	800b702 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d012      	beq.n	800b70c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3324      	adds	r3, #36	; 0x24
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f001 f9a0 	bl	800ca30 <xTaskRemoveFromEventList>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6f6:	f001 fa9d 	bl	800cc34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b706:	2b00      	cmp	r3, #0
 800b708:	dce9      	bgt.n	800b6de <prvUnlockQueue+0x16>
 800b70a:	e000      	b.n	800b70e <prvUnlockQueue+0x46>
					break;
 800b70c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	22ff      	movs	r2, #255	; 0xff
 800b712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b716:	f7ff f8ed 	bl	800a8f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b71a:	f7ff f8bb 	bl	800a894 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b724:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b726:	e011      	b.n	800b74c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d012      	beq.n	800b756 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3310      	adds	r3, #16
 800b734:	4618      	mov	r0, r3
 800b736:	f001 f97b 	bl	800ca30 <xTaskRemoveFromEventList>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b740:	f001 fa78 	bl	800cc34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	3b01      	subs	r3, #1
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b74c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b750:	2b00      	cmp	r3, #0
 800b752:	dce9      	bgt.n	800b728 <prvUnlockQueue+0x60>
 800b754:	e000      	b.n	800b758 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b756:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	22ff      	movs	r2, #255	; 0xff
 800b75c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b760:	f7ff f8c8 	bl	800a8f4 <vPortExitCritical>
}
 800b764:	bf00      	nop
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b774:	f7ff f88e 	bl	800a894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d102      	bne.n	800b786 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b780:	2301      	movs	r3, #1
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e001      	b.n	800b78a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b78a:	f7ff f8b3 	bl	800a8f4 <vPortExitCritical>

	return xReturn;
 800b78e:	68fb      	ldr	r3, [r7, #12]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7a0:	f7ff f878 	bl	800a894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d102      	bne.n	800b7b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	e001      	b.n	800b7ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7ba:	f7ff f89b 	bl	800a8f4 <vPortExitCritical>

	return xReturn;
 800b7be:	68fb      	ldr	r3, [r7, #12]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	e014      	b.n	800b802 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b7d8:	4a0f      	ldr	r2, [pc, #60]	; (800b818 <vQueueAddToRegistry+0x50>)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10b      	bne.n	800b7fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b7e4:	490c      	ldr	r1, [pc, #48]	; (800b818 <vQueueAddToRegistry+0x50>)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	683a      	ldr	r2, [r7, #0]
 800b7ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b7ee:	4a0a      	ldr	r2, [pc, #40]	; (800b818 <vQueueAddToRegistry+0x50>)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	4413      	add	r3, r2
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b7fa:	e006      	b.n	800b80a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2b07      	cmp	r3, #7
 800b806:	d9e7      	bls.n	800b7d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b808:	bf00      	nop
 800b80a:	bf00      	nop
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	2400cc30 	.word	0x2400cc30

0800b81c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b82c:	f7ff f832 	bl	800a894 <vPortEnterCritical>
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b836:	b25b      	sxtb	r3, r3
 800b838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83c:	d103      	bne.n	800b846 <vQueueWaitForMessageRestricted+0x2a>
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b84c:	b25b      	sxtb	r3, r3
 800b84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b852:	d103      	bne.n	800b85c <vQueueWaitForMessageRestricted+0x40>
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b85c:	f7ff f84a 	bl	800a8f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b864:	2b00      	cmp	r3, #0
 800b866:	d106      	bne.n	800b876 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	3324      	adds	r3, #36	; 0x24
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	68b9      	ldr	r1, [r7, #8]
 800b870:	4618      	mov	r0, r3
 800b872:	f001 f8b1 	bl	800c9d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b876:	6978      	ldr	r0, [r7, #20]
 800b878:	f7ff ff26 	bl	800b6c8 <prvUnlockQueue>
	}
 800b87c:	bf00      	nop
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 800b884:	b580      	push	{r7, lr}
 800b886:	b090      	sub	sp, #64	; 0x40
 800b888:	af02      	add	r7, sp, #8
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
 800b890:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 800b892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b894:	62fb      	str	r3, [r7, #44]	; 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10a      	bne.n	800b8b2 <xStreamBufferGenericCreateStatic+0x2e>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8ae:	bf00      	nop
 800b8b0:	e7fe      	b.n	800b8b0 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 800b8b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10a      	bne.n	800b8ce <xStreamBufferGenericCreateStatic+0x4a>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <xStreamBufferGenericCreateStatic+0x48>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d90a      	bls.n	800b8ec <xStreamBufferGenericCreateStatic+0x68>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	623b      	str	r3, [r7, #32]
}
 800b8e8:	bf00      	nop
 800b8ea:	e7fe      	b.n	800b8ea <xStreamBufferGenericCreateStatic+0x66>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <xStreamBufferGenericCreateStatic+0x72>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <xStreamBufferGenericCreateStatic+0x80>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b902:	e002      	b.n	800b90a <xStreamBufferGenericCreateStatic+0x86>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 800b904:	2302      	movs	r3, #2
 800b906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b04      	cmp	r3, #4
 800b90e:	d80a      	bhi.n	800b926 <xStreamBufferGenericCreateStatic+0xa2>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	61fb      	str	r3, [r7, #28]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xStreamBufferGenericCreateStatic+0xa0>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 800b926:	2324      	movs	r3, #36	; 0x24
 800b928:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b24      	cmp	r3, #36	; 0x24
 800b92e:	d00a      	beq.n	800b946 <xStreamBufferGenericCreateStatic+0xc2>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	61bb      	str	r3, [r7, #24]
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <xStreamBufferGenericCreateStatic+0xc0>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d015      	beq.n	800b978 <xStreamBufferGenericCreateStatic+0xf4>
 800b94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d012      	beq.n	800b978 <xStreamBufferGenericCreateStatic+0xf4>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 800b952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b960:	f000 fbac 	bl	800c0bc <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	7f1b      	ldrb	r3, [r3, #28]
 800b968:	f043 0302 	orr.w	r3, r3, #2
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b970:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 800b972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b974:	637b      	str	r3, [r7, #52]	; 0x34
 800b976:	e001      	b.n	800b97c <xStreamBufferGenericCreateStatic+0xf8>
		}
		else
		{
			xReturn = NULL;
 800b978:	2300      	movs	r3, #0
 800b97a:	637b      	str	r3, [r7, #52]	; 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 800b97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b97e:	4618      	mov	r0, r3
 800b980:	3738      	adds	r7, #56	; 0x38
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800b986:	b480      	push	{r7}
 800b988:	b087      	sub	sp, #28
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10a      	bne.n	800b9ae <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	60fb      	str	r3, [r7, #12]
}
 800b9aa:	bf00      	nop
 800b9ac:	e7fe      	b.n	800b9ac <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	689a      	ldr	r2, [r3, #8]
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d304      	bcc.n	800b9de <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800b9de:	697b      	ldr	r3, [r7, #20]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	371c      	adds	r7, #28
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b090      	sub	sp, #64	; 0x40
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
 800b9f8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10a      	bne.n	800ba22 <xStreamBufferSend+0x36>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba1e:	bf00      	nop
 800ba20:	e7fe      	b.n	800ba20 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10a      	bne.n	800ba3e <xStreamBufferSend+0x52>
	__asm volatile
 800ba28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2c:	f383 8811 	msr	BASEPRI, r3
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	623b      	str	r3, [r7, #32]
}
 800ba3a:	bf00      	nop
 800ba3c:	e7fe      	b.n	800ba3c <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba40:	7f1b      	ldrb	r3, [r3, #28]
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d011      	beq.n	800ba6e <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800ba50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d80a      	bhi.n	800ba6e <xStreamBufferSend+0x82>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	61fb      	str	r3, [r7, #28]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d03e      	beq.n	800baf2 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800ba74:	f107 0310 	add.w	r3, r7, #16
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 f83d 	bl	800caf8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800ba7e:	f7fe ff09 	bl	800a894 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800ba82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba84:	f7ff ff7f 	bl	800b986 <xStreamBufferSpacesAvailable>
 800ba88:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800ba8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d217      	bcs.n	800bac2 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800ba92:	2000      	movs	r0, #0
 800ba94:	f001 fd50 	bl	800d538 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00a      	beq.n	800bab6 <xStreamBufferSend+0xca>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	61bb      	str	r3, [r7, #24]
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800bab6:	f001 f9a3 	bl	800ce00 <xTaskGetCurrentTaskHandle>
 800baba:	4602      	mov	r2, r0
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	615a      	str	r2, [r3, #20]
 800bac0:	e002      	b.n	800bac8 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800bac2:	f7fe ff17 	bl	800a8f4 <vPortExitCritical>
					break;
 800bac6:	e014      	b.n	800baf2 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800bac8:	f7fe ff14 	bl	800a8f4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	2200      	movs	r2, #0
 800bad0:	2100      	movs	r1, #0
 800bad2:	2000      	movs	r0, #0
 800bad4:	f001 fb2e 	bl	800d134 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800bad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bada:	2200      	movs	r2, #0
 800badc:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800bade:	463a      	mov	r2, r7
 800bae0:	f107 0310 	add.w	r3, r7, #16
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 f842 	bl	800cb70 <xTaskCheckForTimeOut>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0c5      	beq.n	800ba7e <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800baf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d103      	bne.n	800bb00 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800baf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bafa:	f7ff ff44 	bl	800b986 <xStreamBufferSpacesAvailable>
 800bafe:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	68b9      	ldr	r1, [r7, #8]
 800bb0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb0c:	f000 f814 	bl	800bb38 <prvWriteMessageToBuffer>
 800bb10:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00a      	beq.n	800bb2e <xStreamBufferSend+0x142>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800bb18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb1a:	f000 faaf 	bl	800c07c <prvBytesInBuffer>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d302      	bcc.n	800bb2e <xStreamBufferSend+0x142>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800bb28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb2a:	f7f4 fdb3 	bl	8000694 <generateInterruptIPC_messageBuffer>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3738      	adds	r7, #56	; 0x38
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d102      	bne.n	800bb52 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	617b      	str	r3, [r7, #20]
 800bb50:	e01d      	b.n	800bb8e <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	7f1b      	ldrb	r3, [r3, #28]
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d108      	bne.n	800bb70 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	4293      	cmp	r3, r2
 800bb68:	bf28      	it	cs
 800bb6a:	4613      	movcs	r3, r2
 800bb6c:	607b      	str	r3, [r7, #4]
 800bb6e:	e00e      	b.n	800bb8e <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800bb70:	683a      	ldr	r2, [r7, #0]
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d308      	bcc.n	800bb8a <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800bb7c:	1d3b      	adds	r3, r7, #4
 800bb7e:	2204      	movs	r2, #4
 800bb80:	4619      	mov	r1, r3
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f000 f98e 	bl	800bea4 <prvWriteBytesToBuffer>
 800bb88:	e001      	b.n	800bb8e <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d007      	beq.n	800bba4 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	461a      	mov	r2, r3
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 f982 	bl	800bea4 <prvWriteBytesToBuffer>
 800bba0:	6138      	str	r0, [r7, #16]
 800bba2:	e001      	b.n	800bba8 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800bba8:	693b      	ldr	r3, [r7, #16]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3718      	adds	r7, #24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b08e      	sub	sp, #56	; 0x38
 800bbb6:	af02      	add	r7, sp, #8
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	60b9      	str	r1, [r7, #8]
 800bbbc:	607a      	str	r2, [r7, #4]
 800bbbe:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10a      	bne.n	800bbe4 <xStreamBufferReceive+0x32>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	61fb      	str	r3, [r7, #28]
}
 800bbe0:	bf00      	nop
 800bbe2:	e7fe      	b.n	800bbe2 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10a      	bne.n	800bc00 <xStreamBufferReceive+0x4e>
	__asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	61bb      	str	r3, [r7, #24]
}
 800bbfc:	bf00      	nop
 800bbfe:	e7fe      	b.n	800bbfe <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	7f1b      	ldrb	r3, [r3, #28]
 800bc04:	f003 0301 	and.w	r3, r3, #1
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc10:	e001      	b.n	800bc16 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800bc12:	2300      	movs	r3, #0
 800bc14:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d034      	beq.n	800bc86 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800bc1c:	f7fe fe3a 	bl	800a894 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800bc20:	6a38      	ldr	r0, [r7, #32]
 800bc22:	f000 fa2b 	bl	800c07c <prvBytesInBuffer>
 800bc26:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800bc28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d816      	bhi.n	800bc5e <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800bc30:	2000      	movs	r0, #0
 800bc32:	f001 fc81 	bl	800d538 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00a      	beq.n	800bc54 <xStreamBufferReceive+0xa2>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	617b      	str	r3, [r7, #20]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800bc54:	f001 f8d4 	bl	800ce00 <xTaskGetCurrentTaskHandle>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bc5e:	f7fe fe49 	bl	800a8f4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800bc62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d811      	bhi.n	800bc8e <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2100      	movs	r1, #0
 800bc70:	2000      	movs	r0, #0
 800bc72:	f001 fa5f 	bl	800d134 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800bc7c:	6a38      	ldr	r0, [r7, #32]
 800bc7e:	f000 f9fd 	bl	800c07c <prvBytesInBuffer>
 800bc82:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc84:	e003      	b.n	800bc8e <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800bc86:	6a38      	ldr	r0, [r7, #32]
 800bc88:	f000 f9f8 	bl	800c07c <prvBytesInBuffer>
 800bc8c:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800bc8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d91d      	bls.n	800bcd2 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	68b9      	ldr	r1, [r7, #8]
 800bca0:	6a38      	ldr	r0, [r7, #32]
 800bca2:	f000 f88a 	bl	800bdba <prvReadMessageFromBuffer>
 800bca6:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d011      	beq.n	800bcd2 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800bcae:	f000 fc95 	bl	800c5dc <vTaskSuspendAll>
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	695b      	ldr	r3, [r3, #20]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d009      	beq.n	800bcce <xStreamBufferReceive+0x11c>
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	6958      	ldr	r0, [r3, #20]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	f001 fa96 	bl	800d1f4 <xTaskGenericNotify>
 800bcc8:	6a3b      	ldr	r3, [r7, #32]
 800bcca:	2200      	movs	r2, #0
 800bccc:	615a      	str	r2, [r3, #20]
 800bcce:	f000 fc93 	bl	800c5f8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800bcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3730      	adds	r7, #48	; 0x30
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b090      	sub	sp, #64	; 0x40
 800bce0:	af02      	add	r7, sp, #8
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvRxData );
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10a      	bne.n	800bd0e <xStreamBufferReceiveFromISR+0x32>
	__asm volatile
 800bcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	623b      	str	r3, [r7, #32]
}
 800bd0a:	bf00      	nop
 800bd0c:	e7fe      	b.n	800bd0c <xStreamBufferReceiveFromISR+0x30>
	configASSERT( pxStreamBuffer );
 800bd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10a      	bne.n	800bd2a <xStreamBufferReceiveFromISR+0x4e>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	61fb      	str	r3, [r7, #28]
}
 800bd26:	bf00      	nop
 800bd28:	e7fe      	b.n	800bd28 <xStreamBufferReceiveFromISR+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	7f1b      	ldrb	r3, [r3, #28]
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d002      	beq.n	800bd3c <xStreamBufferReceiveFromISR+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800bd36:	2304      	movs	r3, #4
 800bd38:	633b      	str	r3, [r7, #48]	; 0x30
 800bd3a:	e001      	b.n	800bd40 <xStreamBufferReceiveFromISR+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	633b      	str	r3, [r7, #48]	; 0x30
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800bd40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd42:	f000 f99b 	bl	800c07c <prvBytesInBuffer>
 800bd46:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800bd48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d92f      	bls.n	800bdb0 <xStreamBufferReceiveFromISR+0xd4>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800bd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	68b9      	ldr	r1, [r7, #8]
 800bd5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd5c:	f000 f82d 	bl	800bdba <prvReadMessageFromBuffer>
 800bd60:	6378      	str	r0, [r7, #52]	; 0x34

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800bd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d023      	beq.n	800bdb0 <xStreamBufferReceiveFromISR+0xd4>
	__asm volatile
 800bd68:	f3ef 8211 	mrs	r2, BASEPRI
 800bd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	61ba      	str	r2, [r7, #24]
 800bd7e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd80:	69bb      	ldr	r3, [r7, #24]
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00b      	beq.n	800bda4 <xStreamBufferReceiveFromISR+0xc8>
 800bd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8e:	6958      	ldr	r0, [r3, #20]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	2300      	movs	r3, #0
 800bd96:	2200      	movs	r2, #0
 800bd98:	2100      	movs	r1, #0
 800bd9a:	f001 fae9 	bl	800d370 <xTaskGenericNotifyFromISR>
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda0:	2200      	movs	r2, #0
 800bda2:	615a      	str	r2, [r3, #20]
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f383 8811 	msr	BASEPRI, r3
}
 800bdae:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3738      	adds	r7, #56	; 0x38
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b088      	sub	sp, #32
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	607a      	str	r2, [r7, #4]
 800bdc6:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800bdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d019      	beq.n	800be02 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800bdd4:	f107 0110 	add.w	r1, r7, #16
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 f8d3 	bl	800bf88 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d907      	bls.n	800be06 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	69ba      	ldr	r2, [r7, #24]
 800bdfa:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	e001      	b.n	800be06 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	69fa      	ldr	r2, [r7, #28]
 800be0a:	68b9      	ldr	r1, [r7, #8]
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f000 f8bb 	bl	800bf88 <prvReadBytesFromBuffer>
 800be12:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800be14:	697b      	ldr	r3, [r7, #20]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3720      	adds	r7, #32
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b08c      	sub	sp, #48	; 0x30
 800be22:	af02      	add	r7, sp, #8
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10a      	bne.n	800be48 <xStreamBufferSendCompletedFromISR+0x2a>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	61bb      	str	r3, [r7, #24]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 800be48:	f3ef 8211 	mrs	r2, BASEPRI
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	617a      	str	r2, [r7, #20]
 800be5e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800be60:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 800be62:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 800be64:	6a3b      	ldr	r3, [r7, #32]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00e      	beq.n	800be8a <xStreamBufferSendCompletedFromISR+0x6c>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	6918      	ldr	r0, [r3, #16]
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	2300      	movs	r3, #0
 800be76:	2200      	movs	r2, #0
 800be78:	2100      	movs	r1, #0
 800be7a:	f001 fa79 	bl	800d370 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 800be7e:	6a3b      	ldr	r3, [r7, #32]
 800be80:	2200      	movs	r2, #0
 800be82:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 800be84:	2301      	movs	r3, #1
 800be86:	627b      	str	r3, [r7, #36]	; 0x24
 800be88:	e001      	b.n	800be8e <xStreamBufferSendCompletedFromISR+0x70>
		}
		else
		{
			xReturn = pdFALSE;
 800be8a:	2300      	movs	r3, #0
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f383 8811 	msr	BASEPRI, r3
}
 800be98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3728      	adds	r7, #40	; 0x28
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b08a      	sub	sp, #40	; 0x28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10a      	bne.n	800becc <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	61fb      	str	r3, [r7, #28]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	689a      	ldr	r2, [r3, #8]
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	4293      	cmp	r3, r2
 800bede:	bf28      	it	cs
 800bee0:	4613      	movcs	r3, r2
 800bee2:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800bee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	441a      	add	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d90a      	bls.n	800bf08 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	61bb      	str	r3, [r7, #24]
}
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	699a      	ldr	r2, [r3, #24]
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	4413      	add	r3, r2
 800bf10:	6a3a      	ldr	r2, [r7, #32]
 800bf12:	68b9      	ldr	r1, [r7, #8]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f002 f82a 	bl	800df6e <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d91c      	bls.n	800bf5c <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	1ad2      	subs	r2, r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d90a      	bls.n	800bf46 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800bf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	617b      	str	r3, [r7, #20]
}
 800bf42:	bf00      	nop
 800bf44:	e7fe      	b.n	800bf44 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6998      	ldr	r0, [r3, #24]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	6a3b      	ldr	r3, [r7, #32]
 800bf4e:	18d1      	adds	r1, r2, r3
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	6a3b      	ldr	r3, [r7, #32]
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	461a      	mov	r2, r3
 800bf58:	f002 f809 	bl	800df6e <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800bf5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4413      	add	r3, r2
 800bf62:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d304      	bcc.n	800bf78 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf7c:	605a      	str	r2, [r3, #4]

	return xCount;
 800bf7e:	687b      	ldr	r3, [r7, #4]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3728      	adds	r7, #40	; 0x28
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b08a      	sub	sp, #40	; 0x28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
 800bf94:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	bf28      	it	cs
 800bf9e:	4613      	movcs	r3, r2
 800bfa0:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d064      	beq.n	800c072 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	689a      	ldr	r2, [r3, #8]
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	6a3a      	ldr	r2, [r7, #32]
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	bf28      	it	cs
 800bfbc:	4613      	movcs	r3, r2
 800bfbe:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d90a      	bls.n	800bfde <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800bfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfcc:	f383 8811 	msr	BASEPRI, r3
 800bfd0:	f3bf 8f6f 	isb	sy
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	61bb      	str	r3, [r7, #24]
}
 800bfda:	bf00      	nop
 800bfdc:	e7fe      	b.n	800bfdc <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800bfde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	441a      	add	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d90a      	bls.n	800c002 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	617b      	str	r3, [r7, #20]
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	699a      	ldr	r2, [r3, #24]
 800c006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c008:	4413      	add	r3, r2
 800c00a:	69fa      	ldr	r2, [r7, #28]
 800c00c:	4619      	mov	r1, r3
 800c00e:	68b8      	ldr	r0, [r7, #8]
 800c010:	f001 ffad 	bl	800df6e <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800c014:	6a3a      	ldr	r2, [r7, #32]
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d919      	bls.n	800c050 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800c01c:	6a3a      	ldr	r2, [r7, #32]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	429a      	cmp	r2, r3
 800c022:	d90a      	bls.n	800c03a <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800c024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c028:	f383 8811 	msr	BASEPRI, r3
 800c02c:	f3bf 8f6f 	isb	sy
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	613b      	str	r3, [r7, #16]
}
 800c036:	bf00      	nop
 800c038:	e7fe      	b.n	800c038 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	18d0      	adds	r0, r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6999      	ldr	r1, [r3, #24]
 800c044:	6a3a      	ldr	r2, [r7, #32]
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	461a      	mov	r2, r3
 800c04c:	f001 ff8f 	bl	800df6e <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800c050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	4413      	add	r3, r2
 800c056:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c05e:	429a      	cmp	r2, r3
 800c060:	d304      	bcc.n	800c06c <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c070:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800c072:	6a3b      	ldr	r3, [r7, #32]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3728      	adds	r7, #40	; 0x28
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	689a      	ldr	r2, [r3, #8]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	4413      	add	r3, r2
 800c08e:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d304      	bcc.n	800c0ae <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800c0ca:	2355      	movs	r3, #85	; 0x55
 800c0cc:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	6979      	ldr	r1, [r7, #20]
 800c0d2:	68b8      	ldr	r0, [r7, #8]
 800c0d4:	f001 ff59 	bl	800df8a <memset>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d00a      	beq.n	800c0f6 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	613b      	str	r3, [r7, #16]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800c0f6:	2224      	movs	r2, #36	; 0x24
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f001 ff45 	bl	800df8a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c118:	771a      	strb	r2, [r3, #28]
}
 800c11a:	bf00      	nop
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c122:	b580      	push	{r7, lr}
 800c124:	b08e      	sub	sp, #56	; 0x38
 800c126:	af04      	add	r7, sp, #16
 800c128:	60f8      	str	r0, [r7, #12]
 800c12a:	60b9      	str	r1, [r7, #8]
 800c12c:	607a      	str	r2, [r7, #4]
 800c12e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10a      	bne.n	800c14c <xTaskCreateStatic+0x2a>
	__asm volatile
 800c136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	623b      	str	r3, [r7, #32]
}
 800c148:	bf00      	nop
 800c14a:	e7fe      	b.n	800c14a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10a      	bne.n	800c168 <xTaskCreateStatic+0x46>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	61fb      	str	r3, [r7, #28]
}
 800c164:	bf00      	nop
 800c166:	e7fe      	b.n	800c166 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c168:	23bc      	movs	r3, #188	; 0xbc
 800c16a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	2bbc      	cmp	r3, #188	; 0xbc
 800c170:	d00a      	beq.n	800c188 <xTaskCreateStatic+0x66>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	61bb      	str	r3, [r7, #24]
}
 800c184:	bf00      	nop
 800c186:	e7fe      	b.n	800c186 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c188:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d01e      	beq.n	800c1ce <xTaskCreateStatic+0xac>
 800c190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c192:	2b00      	cmp	r3, #0
 800c194:	d01b      	beq.n	800c1ce <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c19e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9303      	str	r3, [sp, #12]
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	9302      	str	r3, [sp, #8]
 800c1b0:	f107 0314 	add.w	r3, r7, #20
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f000 f851 	bl	800c268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1c8:	f000 f8f4 	bl	800c3b4 <prvAddNewTaskToReadyList>
 800c1cc:	e001      	b.n	800c1d2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1d2:	697b      	ldr	r3, [r7, #20]
	}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3728      	adds	r7, #40	; 0x28
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b08c      	sub	sp, #48	; 0x30
 800c1e0:	af04      	add	r7, sp, #16
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	603b      	str	r3, [r7, #0]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1ec:	88fb      	ldrh	r3, [r7, #6]
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fd ff83 	bl	800a0fc <pvPortMalloc>
 800c1f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00e      	beq.n	800c21c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c1fe:	20bc      	movs	r0, #188	; 0xbc
 800c200:	f7fd ff7c 	bl	800a0fc <pvPortMalloc>
 800c204:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	631a      	str	r2, [r3, #48]	; 0x30
 800c212:	e005      	b.n	800c220 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c214:	6978      	ldr	r0, [r7, #20]
 800c216:	f7fe f83d 	bl	800a294 <vPortFree>
 800c21a:	e001      	b.n	800c220 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c21c:	2300      	movs	r3, #0
 800c21e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d017      	beq.n	800c256 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	2200      	movs	r2, #0
 800c22a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c22e:	88fa      	ldrh	r2, [r7, #6]
 800c230:	2300      	movs	r3, #0
 800c232:	9303      	str	r3, [sp, #12]
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	9302      	str	r3, [sp, #8]
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	9301      	str	r3, [sp, #4]
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 f80f 	bl	800c268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c24a:	69f8      	ldr	r0, [r7, #28]
 800c24c:	f000 f8b2 	bl	800c3b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c250:	2301      	movs	r3, #1
 800c252:	61bb      	str	r3, [r7, #24]
 800c254:	e002      	b.n	800c25c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c256:	f04f 33ff 	mov.w	r3, #4294967295
 800c25a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c25c:	69bb      	ldr	r3, [r7, #24]
	}
 800c25e:	4618      	mov	r0, r3
 800c260:	3720      	adds	r7, #32
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b088      	sub	sp, #32
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	461a      	mov	r2, r3
 800c280:	21a5      	movs	r1, #165	; 0xa5
 800c282:	f001 fe82 	bl	800df8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c290:	440b      	add	r3, r1
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	f023 0307 	bic.w	r3, r3, #7
 800c29e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	f003 0307 	and.w	r3, r3, #7
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00a      	beq.n	800c2c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	617b      	str	r3, [r7, #20]
}
 800c2bc:	bf00      	nop
 800c2be:	e7fe      	b.n	800c2be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d01f      	beq.n	800c306 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	61fb      	str	r3, [r7, #28]
 800c2ca:	e012      	b.n	800c2f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	7819      	ldrb	r1, [r3, #0]
 800c2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	4413      	add	r3, r2
 800c2da:	3334      	adds	r3, #52	; 0x34
 800c2dc:	460a      	mov	r2, r1
 800c2de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d006      	beq.n	800c2fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	61fb      	str	r3, [r7, #28]
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	2b0f      	cmp	r3, #15
 800c2f6:	d9e9      	bls.n	800c2cc <prvInitialiseNewTask+0x64>
 800c2f8:	e000      	b.n	800c2fc <prvInitialiseNewTask+0x94>
			{
				break;
 800c2fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c304:	e003      	b.n	800c30e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c310:	2b37      	cmp	r3, #55	; 0x37
 800c312:	d901      	bls.n	800c318 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c314:	2337      	movs	r3, #55	; 0x37
 800c316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c31c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c322:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c326:	2200      	movs	r2, #0
 800c328:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32c:	3304      	adds	r3, #4
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fe f8ee 	bl	800a510 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	3318      	adds	r3, #24
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fe f8e9 	bl	800a510 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c356:	2200      	movs	r2, #0
 800c358:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c366:	3354      	adds	r3, #84	; 0x54
 800c368:	2260      	movs	r2, #96	; 0x60
 800c36a:	2100      	movs	r1, #0
 800c36c:	4618      	mov	r0, r3
 800c36e:	f001 fe0c 	bl	800df8a <memset>
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	4a0c      	ldr	r2, [pc, #48]	; (800c3a8 <prvInitialiseNewTask+0x140>)
 800c376:	659a      	str	r2, [r3, #88]	; 0x58
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	4a0c      	ldr	r2, [pc, #48]	; (800c3ac <prvInitialiseNewTask+0x144>)
 800c37c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	4a0b      	ldr	r2, [pc, #44]	; (800c3b0 <prvInitialiseNewTask+0x148>)
 800c382:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	68f9      	ldr	r1, [r7, #12]
 800c388:	69b8      	ldr	r0, [r7, #24]
 800c38a:	f7fe f955 	bl	800a638 <pxPortInitialiseStack>
 800c38e:	4602      	mov	r2, r0
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c39e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3a0:	bf00      	nop
 800c3a2:	3720      	adds	r7, #32
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	0800ff94 	.word	0x0800ff94
 800c3ac:	0800ffb4 	.word	0x0800ffb4
 800c3b0:	0800ff74 	.word	0x0800ff74

0800c3b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3bc:	f7fe fa6a 	bl	800a894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c3c0:	4b2d      	ldr	r3, [pc, #180]	; (800c478 <prvAddNewTaskToReadyList+0xc4>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	4a2c      	ldr	r2, [pc, #176]	; (800c478 <prvAddNewTaskToReadyList+0xc4>)
 800c3c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3ca:	4b2c      	ldr	r3, [pc, #176]	; (800c47c <prvAddNewTaskToReadyList+0xc8>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d109      	bne.n	800c3e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3d2:	4a2a      	ldr	r2, [pc, #168]	; (800c47c <prvAddNewTaskToReadyList+0xc8>)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3d8:	4b27      	ldr	r3, [pc, #156]	; (800c478 <prvAddNewTaskToReadyList+0xc4>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d110      	bne.n	800c402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3e0:	f000 fc4c 	bl	800cc7c <prvInitialiseTaskLists>
 800c3e4:	e00d      	b.n	800c402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3e6:	4b26      	ldr	r3, [pc, #152]	; (800c480 <prvAddNewTaskToReadyList+0xcc>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d109      	bne.n	800c402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3ee:	4b23      	ldr	r3, [pc, #140]	; (800c47c <prvAddNewTaskToReadyList+0xc8>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d802      	bhi.n	800c402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3fc:	4a1f      	ldr	r2, [pc, #124]	; (800c47c <prvAddNewTaskToReadyList+0xc8>)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c402:	4b20      	ldr	r3, [pc, #128]	; (800c484 <prvAddNewTaskToReadyList+0xd0>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3301      	adds	r3, #1
 800c408:	4a1e      	ldr	r2, [pc, #120]	; (800c484 <prvAddNewTaskToReadyList+0xd0>)
 800c40a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c40c:	4b1d      	ldr	r3, [pc, #116]	; (800c484 <prvAddNewTaskToReadyList+0xd0>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c418:	4b1b      	ldr	r3, [pc, #108]	; (800c488 <prvAddNewTaskToReadyList+0xd4>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d903      	bls.n	800c428 <prvAddNewTaskToReadyList+0x74>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c424:	4a18      	ldr	r2, [pc, #96]	; (800c488 <prvAddNewTaskToReadyList+0xd4>)
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42c:	4613      	mov	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	4a15      	ldr	r2, [pc, #84]	; (800c48c <prvAddNewTaskToReadyList+0xd8>)
 800c436:	441a      	add	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	3304      	adds	r3, #4
 800c43c:	4619      	mov	r1, r3
 800c43e:	4610      	mov	r0, r2
 800c440:	f7fe f873 	bl	800a52a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c444:	f7fe fa56 	bl	800a8f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c448:	4b0d      	ldr	r3, [pc, #52]	; (800c480 <prvAddNewTaskToReadyList+0xcc>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00e      	beq.n	800c46e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c450:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <prvAddNewTaskToReadyList+0xc8>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d207      	bcs.n	800c46e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c45e:	4b0c      	ldr	r3, [pc, #48]	; (800c490 <prvAddNewTaskToReadyList+0xdc>)
 800c460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c46e:	bf00      	nop
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	2400d144 	.word	0x2400d144
 800c47c:	2400cc70 	.word	0x2400cc70
 800c480:	2400d150 	.word	0x2400d150
 800c484:	2400d160 	.word	0x2400d160
 800c488:	2400d14c 	.word	0x2400d14c
 800c48c:	2400cc74 	.word	0x2400cc74
 800c490:	e000ed04 	.word	0xe000ed04

0800c494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c49c:	2300      	movs	r3, #0
 800c49e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d017      	beq.n	800c4d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c4a6:	4b13      	ldr	r3, [pc, #76]	; (800c4f4 <vTaskDelay+0x60>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00a      	beq.n	800c4c4 <vTaskDelay+0x30>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	60bb      	str	r3, [r7, #8]
}
 800c4c0:	bf00      	nop
 800c4c2:	e7fe      	b.n	800c4c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c4c4:	f000 f88a 	bl	800c5dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f001 f85a 	bl	800d584 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c4d0:	f000 f892 	bl	800c5f8 <xTaskResumeAll>
 800c4d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d107      	bne.n	800c4ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c4dc:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <vTaskDelay+0x64>)
 800c4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4ec:	bf00      	nop
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	2400d16c 	.word	0x2400d16c
 800c4f8:	e000ed04 	.word	0xe000ed04

0800c4fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08a      	sub	sp, #40	; 0x28
 800c500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c502:	2300      	movs	r3, #0
 800c504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c506:	2300      	movs	r3, #0
 800c508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c50a:	463a      	mov	r2, r7
 800c50c:	1d39      	adds	r1, r7, #4
 800c50e:	f107 0308 	add.w	r3, r7, #8
 800c512:	4618      	mov	r0, r3
 800c514:	f7fd fdbe 	bl	800a094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	9202      	str	r2, [sp, #8]
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	2300      	movs	r3, #0
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	2300      	movs	r3, #0
 800c528:	460a      	mov	r2, r1
 800c52a:	4924      	ldr	r1, [pc, #144]	; (800c5bc <vTaskStartScheduler+0xc0>)
 800c52c:	4824      	ldr	r0, [pc, #144]	; (800c5c0 <vTaskStartScheduler+0xc4>)
 800c52e:	f7ff fdf8 	bl	800c122 <xTaskCreateStatic>
 800c532:	4603      	mov	r3, r0
 800c534:	4a23      	ldr	r2, [pc, #140]	; (800c5c4 <vTaskStartScheduler+0xc8>)
 800c536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c538:	4b22      	ldr	r3, [pc, #136]	; (800c5c4 <vTaskStartScheduler+0xc8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c540:	2301      	movs	r3, #1
 800c542:	617b      	str	r3, [r7, #20]
 800c544:	e001      	b.n	800c54a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c546:	2300      	movs	r3, #0
 800c548:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d102      	bne.n	800c556 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c550:	f001 f86c 	bl	800d62c <xTimerCreateTimerTask>
 800c554:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d11b      	bne.n	800c594 <vTaskStartScheduler+0x98>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	613b      	str	r3, [r7, #16]
}
 800c56e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c570:	4b15      	ldr	r3, [pc, #84]	; (800c5c8 <vTaskStartScheduler+0xcc>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	3354      	adds	r3, #84	; 0x54
 800c576:	4a15      	ldr	r2, [pc, #84]	; (800c5cc <vTaskStartScheduler+0xd0>)
 800c578:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c57a:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <vTaskStartScheduler+0xd4>)
 800c57c:	f04f 32ff 	mov.w	r2, #4294967295
 800c580:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c582:	4b14      	ldr	r3, [pc, #80]	; (800c5d4 <vTaskStartScheduler+0xd8>)
 800c584:	2201      	movs	r2, #1
 800c586:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c588:	4b13      	ldr	r3, [pc, #76]	; (800c5d8 <vTaskStartScheduler+0xdc>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c58e:	f7fe f8df 	bl	800a750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c592:	e00e      	b.n	800c5b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59a:	d10a      	bne.n	800c5b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	60fb      	str	r3, [r7, #12]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <vTaskStartScheduler+0xb4>
}
 800c5b2:	bf00      	nop
 800c5b4:	3718      	adds	r7, #24
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	0800fd80 	.word	0x0800fd80
 800c5c0:	0800cc4d 	.word	0x0800cc4d
 800c5c4:	2400d168 	.word	0x2400d168
 800c5c8:	2400cc70 	.word	0x2400cc70
 800c5cc:	24000018 	.word	0x24000018
 800c5d0:	2400d164 	.word	0x2400d164
 800c5d4:	2400d150 	.word	0x2400d150
 800c5d8:	2400d148 	.word	0x2400d148

0800c5dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c5e0:	4b04      	ldr	r3, [pc, #16]	; (800c5f4 <vTaskSuspendAll+0x18>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	4a03      	ldr	r2, [pc, #12]	; (800c5f4 <vTaskSuspendAll+0x18>)
 800c5e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c5ea:	bf00      	nop
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	2400d16c 	.word	0x2400d16c

0800c5f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c602:	2300      	movs	r3, #0
 800c604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c606:	4b42      	ldr	r3, [pc, #264]	; (800c710 <xTaskResumeAll+0x118>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <xTaskResumeAll+0x2c>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	603b      	str	r3, [r7, #0]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c624:	f7fe f936 	bl	800a894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c628:	4b39      	ldr	r3, [pc, #228]	; (800c710 <xTaskResumeAll+0x118>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3b01      	subs	r3, #1
 800c62e:	4a38      	ldr	r2, [pc, #224]	; (800c710 <xTaskResumeAll+0x118>)
 800c630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c632:	4b37      	ldr	r3, [pc, #220]	; (800c710 <xTaskResumeAll+0x118>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d162      	bne.n	800c700 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c63a:	4b36      	ldr	r3, [pc, #216]	; (800c714 <xTaskResumeAll+0x11c>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d05e      	beq.n	800c700 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c642:	e02f      	b.n	800c6a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c644:	4b34      	ldr	r3, [pc, #208]	; (800c718 <xTaskResumeAll+0x120>)
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	3318      	adds	r3, #24
 800c650:	4618      	mov	r0, r3
 800c652:	f7fd ffc7 	bl	800a5e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	3304      	adds	r3, #4
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7fd ffc2 	bl	800a5e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c664:	4b2d      	ldr	r3, [pc, #180]	; (800c71c <xTaskResumeAll+0x124>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d903      	bls.n	800c674 <xTaskResumeAll+0x7c>
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	4a2a      	ldr	r2, [pc, #168]	; (800c71c <xTaskResumeAll+0x124>)
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c678:	4613      	mov	r3, r2
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	4a27      	ldr	r2, [pc, #156]	; (800c720 <xTaskResumeAll+0x128>)
 800c682:	441a      	add	r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	3304      	adds	r3, #4
 800c688:	4619      	mov	r1, r3
 800c68a:	4610      	mov	r0, r2
 800c68c:	f7fd ff4d 	bl	800a52a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c694:	4b23      	ldr	r3, [pc, #140]	; (800c724 <xTaskResumeAll+0x12c>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d302      	bcc.n	800c6a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c69e:	4b22      	ldr	r3, [pc, #136]	; (800c728 <xTaskResumeAll+0x130>)
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6a4:	4b1c      	ldr	r3, [pc, #112]	; (800c718 <xTaskResumeAll+0x120>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1cb      	bne.n	800c644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c6b2:	f000 fb85 	bl	800cdc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c6b6:	4b1d      	ldr	r3, [pc, #116]	; (800c72c <xTaskResumeAll+0x134>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d010      	beq.n	800c6e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c6c2:	f000 f847 	bl	800c754 <xTaskIncrementTick>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c6cc:	4b16      	ldr	r3, [pc, #88]	; (800c728 <xTaskResumeAll+0x130>)
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1f1      	bne.n	800c6c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c6de:	4b13      	ldr	r3, [pc, #76]	; (800c72c <xTaskResumeAll+0x134>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6e4:	4b10      	ldr	r3, [pc, #64]	; (800c728 <xTaskResumeAll+0x130>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d009      	beq.n	800c700 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6f0:	4b0f      	ldr	r3, [pc, #60]	; (800c730 <xTaskResumeAll+0x138>)
 800c6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c700:	f7fe f8f8 	bl	800a8f4 <vPortExitCritical>

	return xAlreadyYielded;
 800c704:	68bb      	ldr	r3, [r7, #8]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	2400d16c 	.word	0x2400d16c
 800c714:	2400d144 	.word	0x2400d144
 800c718:	2400d104 	.word	0x2400d104
 800c71c:	2400d14c 	.word	0x2400d14c
 800c720:	2400cc74 	.word	0x2400cc74
 800c724:	2400cc70 	.word	0x2400cc70
 800c728:	2400d158 	.word	0x2400d158
 800c72c:	2400d154 	.word	0x2400d154
 800c730:	e000ed04 	.word	0xe000ed04

0800c734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c73a:	4b05      	ldr	r3, [pc, #20]	; (800c750 <xTaskGetTickCount+0x1c>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c740:	687b      	ldr	r3, [r7, #4]
}
 800c742:	4618      	mov	r0, r3
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	2400d148 	.word	0x2400d148

0800c754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c75a:	2300      	movs	r3, #0
 800c75c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c75e:	4b4f      	ldr	r3, [pc, #316]	; (800c89c <xTaskIncrementTick+0x148>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	f040 808f 	bne.w	800c886 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c768:	4b4d      	ldr	r3, [pc, #308]	; (800c8a0 <xTaskIncrementTick+0x14c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3301      	adds	r3, #1
 800c76e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c770:	4a4b      	ldr	r2, [pc, #300]	; (800c8a0 <xTaskIncrementTick+0x14c>)
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d120      	bne.n	800c7be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c77c:	4b49      	ldr	r3, [pc, #292]	; (800c8a4 <xTaskIncrementTick+0x150>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00a      	beq.n	800c79c <xTaskIncrementTick+0x48>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	603b      	str	r3, [r7, #0]
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <xTaskIncrementTick+0x46>
 800c79c:	4b41      	ldr	r3, [pc, #260]	; (800c8a4 <xTaskIncrementTick+0x150>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	60fb      	str	r3, [r7, #12]
 800c7a2:	4b41      	ldr	r3, [pc, #260]	; (800c8a8 <xTaskIncrementTick+0x154>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a3f      	ldr	r2, [pc, #252]	; (800c8a4 <xTaskIncrementTick+0x150>)
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	4a3f      	ldr	r2, [pc, #252]	; (800c8a8 <xTaskIncrementTick+0x154>)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6013      	str	r3, [r2, #0]
 800c7b0:	4b3e      	ldr	r3, [pc, #248]	; (800c8ac <xTaskIncrementTick+0x158>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	4a3d      	ldr	r2, [pc, #244]	; (800c8ac <xTaskIncrementTick+0x158>)
 800c7b8:	6013      	str	r3, [r2, #0]
 800c7ba:	f000 fb01 	bl	800cdc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c7be:	4b3c      	ldr	r3, [pc, #240]	; (800c8b0 <xTaskIncrementTick+0x15c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	693a      	ldr	r2, [r7, #16]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d349      	bcc.n	800c85c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7c8:	4b36      	ldr	r3, [pc, #216]	; (800c8a4 <xTaskIncrementTick+0x150>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d104      	bne.n	800c7dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7d2:	4b37      	ldr	r3, [pc, #220]	; (800c8b0 <xTaskIncrementTick+0x15c>)
 800c7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d8:	601a      	str	r2, [r3, #0]
					break;
 800c7da:	e03f      	b.n	800c85c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7dc:	4b31      	ldr	r3, [pc, #196]	; (800c8a4 <xTaskIncrementTick+0x150>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d203      	bcs.n	800c7fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c7f4:	4a2e      	ldr	r2, [pc, #184]	; (800c8b0 <xTaskIncrementTick+0x15c>)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7fa:	e02f      	b.n	800c85c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	3304      	adds	r3, #4
 800c800:	4618      	mov	r0, r3
 800c802:	f7fd feef 	bl	800a5e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d004      	beq.n	800c818 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	3318      	adds	r3, #24
 800c812:	4618      	mov	r0, r3
 800c814:	f7fd fee6 	bl	800a5e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81c:	4b25      	ldr	r3, [pc, #148]	; (800c8b4 <xTaskIncrementTick+0x160>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	429a      	cmp	r2, r3
 800c822:	d903      	bls.n	800c82c <xTaskIncrementTick+0xd8>
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c828:	4a22      	ldr	r2, [pc, #136]	; (800c8b4 <xTaskIncrementTick+0x160>)
 800c82a:	6013      	str	r3, [r2, #0]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c830:	4613      	mov	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4a1f      	ldr	r2, [pc, #124]	; (800c8b8 <xTaskIncrementTick+0x164>)
 800c83a:	441a      	add	r2, r3
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	3304      	adds	r3, #4
 800c840:	4619      	mov	r1, r3
 800c842:	4610      	mov	r0, r2
 800c844:	f7fd fe71 	bl	800a52a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84c:	4b1b      	ldr	r3, [pc, #108]	; (800c8bc <xTaskIncrementTick+0x168>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c852:	429a      	cmp	r2, r3
 800c854:	d3b8      	bcc.n	800c7c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c856:	2301      	movs	r3, #1
 800c858:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c85a:	e7b5      	b.n	800c7c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c85c:	4b17      	ldr	r3, [pc, #92]	; (800c8bc <xTaskIncrementTick+0x168>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c862:	4915      	ldr	r1, [pc, #84]	; (800c8b8 <xTaskIncrementTick+0x164>)
 800c864:	4613      	mov	r3, r2
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	4413      	add	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	440b      	add	r3, r1
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d901      	bls.n	800c878 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c874:	2301      	movs	r3, #1
 800c876:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c878:	4b11      	ldr	r3, [pc, #68]	; (800c8c0 <xTaskIncrementTick+0x16c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d007      	beq.n	800c890 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c880:	2301      	movs	r3, #1
 800c882:	617b      	str	r3, [r7, #20]
 800c884:	e004      	b.n	800c890 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c886:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <xTaskIncrementTick+0x170>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3301      	adds	r3, #1
 800c88c:	4a0d      	ldr	r2, [pc, #52]	; (800c8c4 <xTaskIncrementTick+0x170>)
 800c88e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c890:	697b      	ldr	r3, [r7, #20]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3718      	adds	r7, #24
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	2400d16c 	.word	0x2400d16c
 800c8a0:	2400d148 	.word	0x2400d148
 800c8a4:	2400d0fc 	.word	0x2400d0fc
 800c8a8:	2400d100 	.word	0x2400d100
 800c8ac:	2400d15c 	.word	0x2400d15c
 800c8b0:	2400d164 	.word	0x2400d164
 800c8b4:	2400d14c 	.word	0x2400d14c
 800c8b8:	2400cc74 	.word	0x2400cc74
 800c8bc:	2400cc70 	.word	0x2400cc70
 800c8c0:	2400d158 	.word	0x2400d158
 800c8c4:	2400d154 	.word	0x2400d154

0800c8c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c8ce:	4b2a      	ldr	r3, [pc, #168]	; (800c978 <vTaskSwitchContext+0xb0>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d003      	beq.n	800c8de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c8d6:	4b29      	ldr	r3, [pc, #164]	; (800c97c <vTaskSwitchContext+0xb4>)
 800c8d8:	2201      	movs	r2, #1
 800c8da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c8dc:	e046      	b.n	800c96c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c8de:	4b27      	ldr	r3, [pc, #156]	; (800c97c <vTaskSwitchContext+0xb4>)
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8e4:	4b26      	ldr	r3, [pc, #152]	; (800c980 <vTaskSwitchContext+0xb8>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	60fb      	str	r3, [r7, #12]
 800c8ea:	e010      	b.n	800c90e <vTaskSwitchContext+0x46>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10a      	bne.n	800c908 <vTaskSwitchContext+0x40>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	607b      	str	r3, [r7, #4]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <vTaskSwitchContext+0x3e>
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	3b01      	subs	r3, #1
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	491d      	ldr	r1, [pc, #116]	; (800c984 <vTaskSwitchContext+0xbc>)
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	4613      	mov	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4413      	add	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	440b      	add	r3, r1
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d0e4      	beq.n	800c8ec <vTaskSwitchContext+0x24>
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	4613      	mov	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	4413      	add	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4a15      	ldr	r2, [pc, #84]	; (800c984 <vTaskSwitchContext+0xbc>)
 800c92e:	4413      	add	r3, r2
 800c930:	60bb      	str	r3, [r7, #8]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	685a      	ldr	r2, [r3, #4]
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	605a      	str	r2, [r3, #4]
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	3308      	adds	r3, #8
 800c944:	429a      	cmp	r2, r3
 800c946:	d104      	bne.n	800c952 <vTaskSwitchContext+0x8a>
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	605a      	str	r2, [r3, #4]
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	4a0b      	ldr	r2, [pc, #44]	; (800c988 <vTaskSwitchContext+0xc0>)
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	4a08      	ldr	r2, [pc, #32]	; (800c980 <vTaskSwitchContext+0xb8>)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c962:	4b09      	ldr	r3, [pc, #36]	; (800c988 <vTaskSwitchContext+0xc0>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	3354      	adds	r3, #84	; 0x54
 800c968:	4a08      	ldr	r2, [pc, #32]	; (800c98c <vTaskSwitchContext+0xc4>)
 800c96a:	6013      	str	r3, [r2, #0]
}
 800c96c:	bf00      	nop
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr
 800c978:	2400d16c 	.word	0x2400d16c
 800c97c:	2400d158 	.word	0x2400d158
 800c980:	2400d14c 	.word	0x2400d14c
 800c984:	2400cc74 	.word	0x2400cc74
 800c988:	2400cc70 	.word	0x2400cc70
 800c98c:	24000018 	.word	0x24000018

0800c990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10a      	bne.n	800c9b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	60fb      	str	r3, [r7, #12]
}
 800c9b2:	bf00      	nop
 800c9b4:	e7fe      	b.n	800c9b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9b6:	4b07      	ldr	r3, [pc, #28]	; (800c9d4 <vTaskPlaceOnEventList+0x44>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	3318      	adds	r3, #24
 800c9bc:	4619      	mov	r1, r3
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7fd fdd7 	bl	800a572 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	6838      	ldr	r0, [r7, #0]
 800c9c8:	f000 fddc 	bl	800d584 <prvAddCurrentTaskToDelayedList>
}
 800c9cc:	bf00      	nop
 800c9ce:	3710      	adds	r7, #16
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	2400cc70 	.word	0x2400cc70

0800c9d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d10a      	bne.n	800ca00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	617b      	str	r3, [r7, #20]
}
 800c9fc:	bf00      	nop
 800c9fe:	e7fe      	b.n	800c9fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca00:	4b0a      	ldr	r3, [pc, #40]	; (800ca2c <vTaskPlaceOnEventListRestricted+0x54>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3318      	adds	r3, #24
 800ca06:	4619      	mov	r1, r3
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f7fd fd8e 	bl	800a52a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ca14:	f04f 33ff 	mov.w	r3, #4294967295
 800ca18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ca1a:	6879      	ldr	r1, [r7, #4]
 800ca1c:	68b8      	ldr	r0, [r7, #8]
 800ca1e:	f000 fdb1 	bl	800d584 <prvAddCurrentTaskToDelayedList>
	}
 800ca22:	bf00      	nop
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	2400cc70 	.word	0x2400cc70

0800ca30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10a      	bne.n	800ca5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	60fb      	str	r3, [r7, #12]
}
 800ca58:	bf00      	nop
 800ca5a:	e7fe      	b.n	800ca5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	3318      	adds	r3, #24
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fd fdbf 	bl	800a5e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca66:	4b1e      	ldr	r3, [pc, #120]	; (800cae0 <xTaskRemoveFromEventList+0xb0>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d11d      	bne.n	800caaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	3304      	adds	r3, #4
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fd fdb6 	bl	800a5e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca7c:	4b19      	ldr	r3, [pc, #100]	; (800cae4 <xTaskRemoveFromEventList+0xb4>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d903      	bls.n	800ca8c <xTaskRemoveFromEventList+0x5c>
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca88:	4a16      	ldr	r2, [pc, #88]	; (800cae4 <xTaskRemoveFromEventList+0xb4>)
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca90:	4613      	mov	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	4413      	add	r3, r2
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	4a13      	ldr	r2, [pc, #76]	; (800cae8 <xTaskRemoveFromEventList+0xb8>)
 800ca9a:	441a      	add	r2, r3
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	3304      	adds	r3, #4
 800caa0:	4619      	mov	r1, r3
 800caa2:	4610      	mov	r0, r2
 800caa4:	f7fd fd41 	bl	800a52a <vListInsertEnd>
 800caa8:	e005      	b.n	800cab6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	3318      	adds	r3, #24
 800caae:	4619      	mov	r1, r3
 800cab0:	480e      	ldr	r0, [pc, #56]	; (800caec <xTaskRemoveFromEventList+0xbc>)
 800cab2:	f7fd fd3a 	bl	800a52a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caba:	4b0d      	ldr	r3, [pc, #52]	; (800caf0 <xTaskRemoveFromEventList+0xc0>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d905      	bls.n	800cad0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cac4:	2301      	movs	r3, #1
 800cac6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cac8:	4b0a      	ldr	r3, [pc, #40]	; (800caf4 <xTaskRemoveFromEventList+0xc4>)
 800caca:	2201      	movs	r2, #1
 800cacc:	601a      	str	r2, [r3, #0]
 800cace:	e001      	b.n	800cad4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cad0:	2300      	movs	r3, #0
 800cad2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cad4:	697b      	ldr	r3, [r7, #20]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3718      	adds	r7, #24
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	2400d16c 	.word	0x2400d16c
 800cae4:	2400d14c 	.word	0x2400d14c
 800cae8:	2400cc74 	.word	0x2400cc74
 800caec:	2400d104 	.word	0x2400d104
 800caf0:	2400cc70 	.word	0x2400cc70
 800caf4:	2400d158 	.word	0x2400d158

0800caf8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d10a      	bne.n	800cb1c <vTaskSetTimeOutState+0x24>
	__asm volatile
 800cb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0a:	f383 8811 	msr	BASEPRI, r3
 800cb0e:	f3bf 8f6f 	isb	sy
 800cb12:	f3bf 8f4f 	dsb	sy
 800cb16:	60fb      	str	r3, [r7, #12]
}
 800cb18:	bf00      	nop
 800cb1a:	e7fe      	b.n	800cb1a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800cb1c:	f7fd feba 	bl	800a894 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb20:	4b06      	ldr	r3, [pc, #24]	; (800cb3c <vTaskSetTimeOutState+0x44>)
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800cb28:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <vTaskSetTimeOutState+0x48>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800cb30:	f7fd fee0 	bl	800a8f4 <vPortExitCritical>
}
 800cb34:	bf00      	nop
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	2400d15c 	.word	0x2400d15c
 800cb40:	2400d148 	.word	0x2400d148

0800cb44 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb4c:	4b06      	ldr	r3, [pc, #24]	; (800cb68 <vTaskInternalSetTimeOutState+0x24>)
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb54:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <vTaskInternalSetTimeOutState+0x28>)
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	605a      	str	r2, [r3, #4]
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	2400d15c 	.word	0x2400d15c
 800cb6c:	2400d148 	.word	0x2400d148

0800cb70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b088      	sub	sp, #32
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10a      	bne.n	800cb96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	613b      	str	r3, [r7, #16]
}
 800cb92:	bf00      	nop
 800cb94:	e7fe      	b.n	800cb94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	60fb      	str	r3, [r7, #12]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cbb2:	f7fd fe6f 	bl	800a894 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cbb6:	4b1d      	ldr	r3, [pc, #116]	; (800cc2c <xTaskCheckForTimeOut+0xbc>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbce:	d102      	bne.n	800cbd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61fb      	str	r3, [r7, #28]
 800cbd4:	e023      	b.n	800cc1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b15      	ldr	r3, [pc, #84]	; (800cc30 <xTaskCheckForTimeOut+0xc0>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d007      	beq.n	800cbf2 <xTaskCheckForTimeOut+0x82>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	69ba      	ldr	r2, [r7, #24]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d302      	bcc.n	800cbf2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	e015      	b.n	800cc1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d20b      	bcs.n	800cc14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	1ad2      	subs	r2, r2, r3
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ff9b 	bl	800cb44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	61fb      	str	r3, [r7, #28]
 800cc12:	e004      	b.n	800cc1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc1e:	f7fd fe69 	bl	800a8f4 <vPortExitCritical>

	return xReturn;
 800cc22:	69fb      	ldr	r3, [r7, #28]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3720      	adds	r7, #32
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	2400d148 	.word	0x2400d148
 800cc30:	2400d15c 	.word	0x2400d15c

0800cc34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc34:	b480      	push	{r7}
 800cc36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc38:	4b03      	ldr	r3, [pc, #12]	; (800cc48 <vTaskMissedYield+0x14>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	601a      	str	r2, [r3, #0]
}
 800cc3e:	bf00      	nop
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	2400d158 	.word	0x2400d158

0800cc4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc54:	f000 f852 	bl	800ccfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc58:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <prvIdleTask+0x28>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d9f9      	bls.n	800cc54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc60:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <prvIdleTask+0x2c>)
 800cc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc66:	601a      	str	r2, [r3, #0]
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cc70:	e7f0      	b.n	800cc54 <prvIdleTask+0x8>
 800cc72:	bf00      	nop
 800cc74:	2400cc74 	.word	0x2400cc74
 800cc78:	e000ed04 	.word	0xe000ed04

0800cc7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc82:	2300      	movs	r3, #0
 800cc84:	607b      	str	r3, [r7, #4]
 800cc86:	e00c      	b.n	800cca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4a12      	ldr	r2, [pc, #72]	; (800ccdc <prvInitialiseTaskLists+0x60>)
 800cc94:	4413      	add	r3, r2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd fc1a 	bl	800a4d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	607b      	str	r3, [r7, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b37      	cmp	r3, #55	; 0x37
 800cca6:	d9ef      	bls.n	800cc88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cca8:	480d      	ldr	r0, [pc, #52]	; (800cce0 <prvInitialiseTaskLists+0x64>)
 800ccaa:	f7fd fc11 	bl	800a4d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ccae:	480d      	ldr	r0, [pc, #52]	; (800cce4 <prvInitialiseTaskLists+0x68>)
 800ccb0:	f7fd fc0e 	bl	800a4d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ccb4:	480c      	ldr	r0, [pc, #48]	; (800cce8 <prvInitialiseTaskLists+0x6c>)
 800ccb6:	f7fd fc0b 	bl	800a4d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ccba:	480c      	ldr	r0, [pc, #48]	; (800ccec <prvInitialiseTaskLists+0x70>)
 800ccbc:	f7fd fc08 	bl	800a4d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ccc0:	480b      	ldr	r0, [pc, #44]	; (800ccf0 <prvInitialiseTaskLists+0x74>)
 800ccc2:	f7fd fc05 	bl	800a4d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ccc6:	4b0b      	ldr	r3, [pc, #44]	; (800ccf4 <prvInitialiseTaskLists+0x78>)
 800ccc8:	4a05      	ldr	r2, [pc, #20]	; (800cce0 <prvInitialiseTaskLists+0x64>)
 800ccca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cccc:	4b0a      	ldr	r3, [pc, #40]	; (800ccf8 <prvInitialiseTaskLists+0x7c>)
 800ccce:	4a05      	ldr	r2, [pc, #20]	; (800cce4 <prvInitialiseTaskLists+0x68>)
 800ccd0:	601a      	str	r2, [r3, #0]
}
 800ccd2:	bf00      	nop
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	2400cc74 	.word	0x2400cc74
 800cce0:	2400d0d4 	.word	0x2400d0d4
 800cce4:	2400d0e8 	.word	0x2400d0e8
 800cce8:	2400d104 	.word	0x2400d104
 800ccec:	2400d118 	.word	0x2400d118
 800ccf0:	2400d130 	.word	0x2400d130
 800ccf4:	2400d0fc 	.word	0x2400d0fc
 800ccf8:	2400d100 	.word	0x2400d100

0800ccfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd02:	e019      	b.n	800cd38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd04:	f7fd fdc6 	bl	800a894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd08:	4b10      	ldr	r3, [pc, #64]	; (800cd4c <prvCheckTasksWaitingTermination+0x50>)
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fd fc65 	bl	800a5e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd1a:	4b0d      	ldr	r3, [pc, #52]	; (800cd50 <prvCheckTasksWaitingTermination+0x54>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	4a0b      	ldr	r2, [pc, #44]	; (800cd50 <prvCheckTasksWaitingTermination+0x54>)
 800cd22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd24:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	4a0a      	ldr	r2, [pc, #40]	; (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd2e:	f7fd fde1 	bl	800a8f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f810 	bl	800cd58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd38:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1e1      	bne.n	800cd04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	2400d118 	.word	0x2400d118
 800cd50:	2400d144 	.word	0x2400d144
 800cd54:	2400d12c 	.word	0x2400d12c

0800cd58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	3354      	adds	r3, #84	; 0x54
 800cd64:	4618      	mov	r0, r3
 800cd66:	f001 fca9 	bl	800e6bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d108      	bne.n	800cd86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fd fa8b 	bl	800a294 <vPortFree>
				vPortFree( pxTCB );
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7fd fa88 	bl	800a294 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd84:	e018      	b.n	800cdb8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d103      	bne.n	800cd98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7fd fa7f 	bl	800a294 <vPortFree>
	}
 800cd96:	e00f      	b.n	800cdb8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d00a      	beq.n	800cdb8 <prvDeleteTCB+0x60>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	60fb      	str	r3, [r7, #12]
}
 800cdb4:	bf00      	nop
 800cdb6:	e7fe      	b.n	800cdb6 <prvDeleteTCB+0x5e>
	}
 800cdb8:	bf00      	nop
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdc6:	4b0c      	ldr	r3, [pc, #48]	; (800cdf8 <prvResetNextTaskUnblockTime+0x38>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d104      	bne.n	800cdda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	; (800cdfc <prvResetNextTaskUnblockTime+0x3c>)
 800cdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cdd8:	e008      	b.n	800cdec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdda:	4b07      	ldr	r3, [pc, #28]	; (800cdf8 <prvResetNextTaskUnblockTime+0x38>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	4a04      	ldr	r2, [pc, #16]	; (800cdfc <prvResetNextTaskUnblockTime+0x3c>)
 800cdea:	6013      	str	r3, [r2, #0]
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr
 800cdf8:	2400d0fc 	.word	0x2400d0fc
 800cdfc:	2400d164 	.word	0x2400d164

0800ce00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ce06:	4b05      	ldr	r3, [pc, #20]	; (800ce1c <xTaskGetCurrentTaskHandle+0x1c>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ce0c:	687b      	ldr	r3, [r7, #4]
	}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	2400cc70 	.word	0x2400cc70

0800ce20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce26:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <xTaskGetSchedulerState+0x34>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d102      	bne.n	800ce34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	607b      	str	r3, [r7, #4]
 800ce32:	e008      	b.n	800ce46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce34:	4b08      	ldr	r3, [pc, #32]	; (800ce58 <xTaskGetSchedulerState+0x38>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d102      	bne.n	800ce42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	607b      	str	r3, [r7, #4]
 800ce40:	e001      	b.n	800ce46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce42:	2300      	movs	r3, #0
 800ce44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce46:	687b      	ldr	r3, [r7, #4]
	}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	2400d150 	.word	0x2400d150
 800ce58:	2400d16c 	.word	0x2400d16c

0800ce5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d051      	beq.n	800cf16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce76:	4b2a      	ldr	r3, [pc, #168]	; (800cf20 <xTaskPriorityInherit+0xc4>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d241      	bcs.n	800cf04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	699b      	ldr	r3, [r3, #24]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	db06      	blt.n	800ce96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce88:	4b25      	ldr	r3, [pc, #148]	; (800cf20 <xTaskPriorityInherit+0xc4>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	6959      	ldr	r1, [r3, #20]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9e:	4613      	mov	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4a1f      	ldr	r2, [pc, #124]	; (800cf24 <xTaskPriorityInherit+0xc8>)
 800cea8:	4413      	add	r3, r2
 800ceaa:	4299      	cmp	r1, r3
 800ceac:	d122      	bne.n	800cef4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fd fb96 	bl	800a5e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ceb8:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <xTaskPriorityInherit+0xc4>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec6:	4b18      	ldr	r3, [pc, #96]	; (800cf28 <xTaskPriorityInherit+0xcc>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d903      	bls.n	800ced6 <xTaskPriorityInherit+0x7a>
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced2:	4a15      	ldr	r2, [pc, #84]	; (800cf28 <xTaskPriorityInherit+0xcc>)
 800ced4:	6013      	str	r3, [r2, #0]
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceda:	4613      	mov	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4a10      	ldr	r2, [pc, #64]	; (800cf24 <xTaskPriorityInherit+0xc8>)
 800cee4:	441a      	add	r2, r3
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	3304      	adds	r3, #4
 800ceea:	4619      	mov	r1, r3
 800ceec:	4610      	mov	r0, r2
 800ceee:	f7fd fb1c 	bl	800a52a <vListInsertEnd>
 800cef2:	e004      	b.n	800cefe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cef4:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <xTaskPriorityInherit+0xc4>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cefe:	2301      	movs	r3, #1
 800cf00:	60fb      	str	r3, [r7, #12]
 800cf02:	e008      	b.n	800cf16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf08:	4b05      	ldr	r3, [pc, #20]	; (800cf20 <xTaskPriorityInherit+0xc4>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d201      	bcs.n	800cf16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cf12:	2301      	movs	r3, #1
 800cf14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf16:	68fb      	ldr	r3, [r7, #12]
	}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	2400cc70 	.word	0x2400cc70
 800cf24:	2400cc74 	.word	0x2400cc74
 800cf28:	2400d14c 	.word	0x2400d14c

0800cf2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d056      	beq.n	800cff0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf42:	4b2e      	ldr	r3, [pc, #184]	; (800cffc <xTaskPriorityDisinherit+0xd0>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	693a      	ldr	r2, [r7, #16]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d00a      	beq.n	800cf62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	60fb      	str	r3, [r7, #12]
}
 800cf5e:	bf00      	nop
 800cf60:	e7fe      	b.n	800cf60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10a      	bne.n	800cf80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	60bb      	str	r3, [r7, #8]
}
 800cf7c:	bf00      	nop
 800cf7e:	e7fe      	b.n	800cf7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf84:	1e5a      	subs	r2, r3, #1
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d02c      	beq.n	800cff0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d128      	bne.n	800cff0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fd fb1e 	bl	800a5e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <xTaskPriorityDisinherit+0xd4>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d903      	bls.n	800cfd0 <xTaskPriorityDisinherit+0xa4>
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfcc:	4a0c      	ldr	r2, [pc, #48]	; (800d000 <xTaskPriorityDisinherit+0xd4>)
 800cfce:	6013      	str	r3, [r2, #0]
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4413      	add	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4a09      	ldr	r2, [pc, #36]	; (800d004 <xTaskPriorityDisinherit+0xd8>)
 800cfde:	441a      	add	r2, r3
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	3304      	adds	r3, #4
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	f7fd fa9f 	bl	800a52a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfec:	2301      	movs	r3, #1
 800cfee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cff0:	697b      	ldr	r3, [r7, #20]
	}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	2400cc70 	.word	0x2400cc70
 800d000:	2400d14c 	.word	0x2400d14c
 800d004:	2400cc74 	.word	0x2400cc74

0800d008 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d016:	2301      	movs	r3, #1
 800d018:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d06a      	beq.n	800d0f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10a      	bne.n	800d03e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	60fb      	str	r3, [r7, #12]
}
 800d03a:	bf00      	nop
 800d03c:	e7fe      	b.n	800d03c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d042:	683a      	ldr	r2, [r7, #0]
 800d044:	429a      	cmp	r2, r3
 800d046:	d902      	bls.n	800d04e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	61fb      	str	r3, [r7, #28]
 800d04c:	e002      	b.n	800d054 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d052:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d058:	69fa      	ldr	r2, [r7, #28]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d04b      	beq.n	800d0f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	429a      	cmp	r2, r3
 800d066:	d146      	bne.n	800d0f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d068:	4b25      	ldr	r3, [pc, #148]	; (800d100 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d10a      	bne.n	800d088 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	60bb      	str	r3, [r7, #8]
}
 800d084:	bf00      	nop
 800d086:	e7fe      	b.n	800d086 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	69fa      	ldr	r2, [r7, #28]
 800d092:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	db04      	blt.n	800d0a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	6959      	ldr	r1, [r3, #20]
 800d0aa:	693a      	ldr	r2, [r7, #16]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	4413      	add	r3, r2
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4a13      	ldr	r2, [pc, #76]	; (800d104 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d0b6:	4413      	add	r3, r2
 800d0b8:	4299      	cmp	r1, r3
 800d0ba:	d11c      	bne.n	800d0f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	3304      	adds	r3, #4
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fd fa8f 	bl	800a5e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ca:	4b0f      	ldr	r3, [pc, #60]	; (800d108 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d903      	bls.n	800d0da <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d6:	4a0c      	ldr	r2, [pc, #48]	; (800d108 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0de:	4613      	mov	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4a07      	ldr	r2, [pc, #28]	; (800d104 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d0e8:	441a      	add	r2, r3
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	f7fd fa1a 	bl	800a52a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0f6:	bf00      	nop
 800d0f8:	3720      	adds	r7, #32
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	2400cc70 	.word	0x2400cc70
 800d104:	2400cc74 	.word	0x2400cc74
 800d108:	2400d14c 	.word	0x2400d14c

0800d10c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d10c:	b480      	push	{r7}
 800d10e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d110:	4b07      	ldr	r3, [pc, #28]	; (800d130 <pvTaskIncrementMutexHeldCount+0x24>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d004      	beq.n	800d122 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d118:	4b05      	ldr	r3, [pc, #20]	; (800d130 <pvTaskIncrementMutexHeldCount+0x24>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d11e:	3201      	adds	r2, #1
 800d120:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d122:	4b03      	ldr	r3, [pc, #12]	; (800d130 <pvTaskIncrementMutexHeldCount+0x24>)
 800d124:	681b      	ldr	r3, [r3, #0]
	}
 800d126:	4618      	mov	r0, r3
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	2400cc70 	.word	0x2400cc70

0800d134 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d142:	f7fd fba7 	bl	800a894 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d146:	4b29      	ldr	r3, [pc, #164]	; (800d1ec <xTaskNotifyWait+0xb8>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b02      	cmp	r3, #2
 800d152:	d01c      	beq.n	800d18e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d154:	4b25      	ldr	r3, [pc, #148]	; (800d1ec <xTaskNotifyWait+0xb8>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	43d2      	mvns	r2, r2
 800d160:	400a      	ands	r2, r1
 800d162:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d166:	4b21      	ldr	r3, [pc, #132]	; (800d1ec <xTaskNotifyWait+0xb8>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00b      	beq.n	800d18e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d176:	2101      	movs	r1, #1
 800d178:	6838      	ldr	r0, [r7, #0]
 800d17a:	f000 fa03 	bl	800d584 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d17e:	4b1c      	ldr	r3, [pc, #112]	; (800d1f0 <xTaskNotifyWait+0xbc>)
 800d180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d184:	601a      	str	r2, [r3, #0]
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d18e:	f7fd fbb1 	bl	800a8f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d192:	f7fd fb7f 	bl	800a894 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d005      	beq.n	800d1a8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d19c:	4b13      	ldr	r3, [pc, #76]	; (800d1ec <xTaskNotifyWait+0xb8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d1a8:	4b10      	ldr	r3, [pc, #64]	; (800d1ec <xTaskNotifyWait+0xb8>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d002      	beq.n	800d1bc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	617b      	str	r3, [r7, #20]
 800d1ba:	e00a      	b.n	800d1d2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d1bc:	4b0b      	ldr	r3, [pc, #44]	; (800d1ec <xTaskNotifyWait+0xb8>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	43d2      	mvns	r2, r2
 800d1c8:	400a      	ands	r2, r1
 800d1ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d1d2:	4b06      	ldr	r3, [pc, #24]	; (800d1ec <xTaskNotifyWait+0xb8>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800d1dc:	f7fd fb8a 	bl	800a8f4 <vPortExitCritical>

		return xReturn;
 800d1e0:	697b      	ldr	r3, [r7, #20]
	}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3718      	adds	r7, #24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	2400cc70 	.word	0x2400cc70
 800d1f0:	e000ed04 	.word	0xe000ed04

0800d1f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08a      	sub	sp, #40	; 0x28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	603b      	str	r3, [r7, #0]
 800d200:	4613      	mov	r3, r2
 800d202:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d204:	2301      	movs	r3, #1
 800d206:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10a      	bne.n	800d224 <xTaskGenericNotify+0x30>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	61bb      	str	r3, [r7, #24]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d228:	f7fd fb34 	bl	800a894 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d004      	beq.n	800d23c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d232:	6a3b      	ldr	r3, [r7, #32]
 800d234:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d242:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d244:	6a3b      	ldr	r3, [r7, #32]
 800d246:	2202      	movs	r2, #2
 800d248:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800d24c:	79fb      	ldrb	r3, [r7, #7]
 800d24e:	2b04      	cmp	r3, #4
 800d250:	d82d      	bhi.n	800d2ae <xTaskGenericNotify+0xba>
 800d252:	a201      	add	r2, pc, #4	; (adr r2, 800d258 <xTaskGenericNotify+0x64>)
 800d254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d258:	0800d2d1 	.word	0x0800d2d1
 800d25c:	0800d26d 	.word	0x0800d26d
 800d260:	0800d27f 	.word	0x0800d27f
 800d264:	0800d28f 	.word	0x0800d28f
 800d268:	0800d299 	.word	0x0800d299
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	431a      	orrs	r2, r3
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d27c:	e02b      	b.n	800d2d6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d284:	1c5a      	adds	r2, r3, #1
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d28c:	e023      	b.n	800d2d6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d28e:	6a3b      	ldr	r3, [r7, #32]
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d296:	e01e      	b.n	800d2d6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d298:	7ffb      	ldrb	r3, [r7, #31]
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	d004      	beq.n	800d2a8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d2a6:	e016      	b.n	800d2d6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d2ac:	e013      	b.n	800d2d6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b8:	d00c      	beq.n	800d2d4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	617b      	str	r3, [r7, #20]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <xTaskGenericNotify+0xda>
					break;
 800d2d0:	bf00      	nop
 800d2d2:	e000      	b.n	800d2d6 <xTaskGenericNotify+0xe2>

					break;
 800d2d4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d2d6:	7ffb      	ldrb	r3, [r7, #31]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d13a      	bne.n	800d352 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2dc:	6a3b      	ldr	r3, [r7, #32]
 800d2de:	3304      	adds	r3, #4
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fd f97f 	bl	800a5e4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ea:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <xTaskGenericNotify+0x16c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d903      	bls.n	800d2fa <xTaskGenericNotify+0x106>
 800d2f2:	6a3b      	ldr	r3, [r7, #32]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f6:	4a1a      	ldr	r2, [pc, #104]	; (800d360 <xTaskGenericNotify+0x16c>)
 800d2f8:	6013      	str	r3, [r2, #0]
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fe:	4613      	mov	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4a17      	ldr	r2, [pc, #92]	; (800d364 <xTaskGenericNotify+0x170>)
 800d308:	441a      	add	r2, r3
 800d30a:	6a3b      	ldr	r3, [r7, #32]
 800d30c:	3304      	adds	r3, #4
 800d30e:	4619      	mov	r1, r3
 800d310:	4610      	mov	r0, r2
 800d312:	f7fd f90a 	bl	800a52a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d316:	6a3b      	ldr	r3, [r7, #32]
 800d318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00a      	beq.n	800d334 <xTaskGenericNotify+0x140>
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	613b      	str	r3, [r7, #16]
}
 800d330:	bf00      	nop
 800d332:	e7fe      	b.n	800d332 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d334:	6a3b      	ldr	r3, [r7, #32]
 800d336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d338:	4b0b      	ldr	r3, [pc, #44]	; (800d368 <xTaskGenericNotify+0x174>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33e:	429a      	cmp	r2, r3
 800d340:	d907      	bls.n	800d352 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d342:	4b0a      	ldr	r3, [pc, #40]	; (800d36c <xTaskGenericNotify+0x178>)
 800d344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d352:	f7fd facf 	bl	800a8f4 <vPortExitCritical>

		return xReturn;
 800d356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d358:	4618      	mov	r0, r3
 800d35a:	3728      	adds	r7, #40	; 0x28
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	2400d14c 	.word	0x2400d14c
 800d364:	2400cc74 	.word	0x2400cc74
 800d368:	2400cc70 	.word	0x2400cc70
 800d36c:	e000ed04 	.word	0xe000ed04

0800d370 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d370:	b580      	push	{r7, lr}
 800d372:	b08e      	sub	sp, #56	; 0x38
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	603b      	str	r3, [r7, #0]
 800d37c:	4613      	mov	r3, r2
 800d37e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d380:	2301      	movs	r3, #1
 800d382:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10a      	bne.n	800d3a0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38e:	f383 8811 	msr	BASEPRI, r3
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d39c:	bf00      	nop
 800d39e:	e7fe      	b.n	800d39e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3a0:	f7fd fb5a 	bl	800aa58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d3a8:	f3ef 8211 	mrs	r2, BASEPRI
 800d3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	623a      	str	r2, [r7, #32]
 800d3be:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d3c0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d004      	beq.n	800d3d4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d3da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e0:	2202      	movs	r2, #2
 800d3e2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800d3e6:	79fb      	ldrb	r3, [r7, #7]
 800d3e8:	2b04      	cmp	r3, #4
 800d3ea:	d82f      	bhi.n	800d44c <xTaskGenericNotifyFromISR+0xdc>
 800d3ec:	a201      	add	r2, pc, #4	; (adr r2, 800d3f4 <xTaskGenericNotifyFromISR+0x84>)
 800d3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f2:	bf00      	nop
 800d3f4:	0800d46f 	.word	0x0800d46f
 800d3f8:	0800d409 	.word	0x0800d409
 800d3fc:	0800d41b 	.word	0x0800d41b
 800d400:	0800d42b 	.word	0x0800d42b
 800d404:	0800d435 	.word	0x0800d435
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	431a      	orrs	r2, r3
 800d412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d414:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d418:	e02c      	b.n	800d474 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d420:	1c5a      	adds	r2, r3, #1
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d428:	e024      	b.n	800d474 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d432:	e01f      	b.n	800d474 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d434:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d438:	2b02      	cmp	r3, #2
 800d43a:	d004      	beq.n	800d446 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43e:	68ba      	ldr	r2, [r7, #8]
 800d440:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d444:	e016      	b.n	800d474 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800d446:	2300      	movs	r3, #0
 800d448:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d44a:	e013      	b.n	800d474 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d456:	d00c      	beq.n	800d472 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	61bb      	str	r3, [r7, #24]
}
 800d46a:	bf00      	nop
 800d46c:	e7fe      	b.n	800d46c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d46e:	bf00      	nop
 800d470:	e000      	b.n	800d474 <xTaskGenericNotifyFromISR+0x104>
					break;
 800d472:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d474:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d146      	bne.n	800d50a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d480:	2b00      	cmp	r3, #0
 800d482:	d00a      	beq.n	800d49a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	617b      	str	r3, [r7, #20]
}
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d49a:	4b21      	ldr	r3, [pc, #132]	; (800d520 <xTaskGenericNotifyFromISR+0x1b0>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d11d      	bne.n	800d4de <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fd f89c 	bl	800a5e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b0:	4b1c      	ldr	r3, [pc, #112]	; (800d524 <xTaskGenericNotifyFromISR+0x1b4>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d903      	bls.n	800d4c0 <xTaskGenericNotifyFromISR+0x150>
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4bc:	4a19      	ldr	r2, [pc, #100]	; (800d524 <xTaskGenericNotifyFromISR+0x1b4>)
 800d4be:	6013      	str	r3, [r2, #0]
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	4413      	add	r3, r2
 800d4ca:	009b      	lsls	r3, r3, #2
 800d4cc:	4a16      	ldr	r2, [pc, #88]	; (800d528 <xTaskGenericNotifyFromISR+0x1b8>)
 800d4ce:	441a      	add	r2, r3
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d2:	3304      	adds	r3, #4
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	4610      	mov	r0, r2
 800d4d8:	f7fd f827 	bl	800a52a <vListInsertEnd>
 800d4dc:	e005      	b.n	800d4ea <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	3318      	adds	r3, #24
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	4811      	ldr	r0, [pc, #68]	; (800d52c <xTaskGenericNotifyFromISR+0x1bc>)
 800d4e6:	f7fd f820 	bl	800a52a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ee:	4b10      	ldr	r3, [pc, #64]	; (800d530 <xTaskGenericNotifyFromISR+0x1c0>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d908      	bls.n	800d50a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d002      	beq.n	800d504 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d500:	2201      	movs	r2, #1
 800d502:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d504:	4b0b      	ldr	r3, [pc, #44]	; (800d534 <xTaskGenericNotifyFromISR+0x1c4>)
 800d506:	2201      	movs	r2, #1
 800d508:	601a      	str	r2, [r3, #0]
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	f383 8811 	msr	BASEPRI, r3
}
 800d514:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d518:	4618      	mov	r0, r3
 800d51a:	3738      	adds	r7, #56	; 0x38
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	2400d16c 	.word	0x2400d16c
 800d524:	2400d14c 	.word	0x2400d14c
 800d528:	2400cc74 	.word	0x2400cc74
 800d52c:	2400d104 	.word	0x2400d104
 800d530:	2400cc70 	.word	0x2400cc70
 800d534:	2400d158 	.word	0x2400d158

0800d538 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d102      	bne.n	800d54c <xTaskNotifyStateClear+0x14>
 800d546:	4b0e      	ldr	r3, [pc, #56]	; (800d580 <xTaskNotifyStateClear+0x48>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	e000      	b.n	800d54e <xTaskNotifyStateClear+0x16>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800d550:	f7fd f9a0 	bl	800a894 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	2b02      	cmp	r3, #2
 800d55e:	d106      	bne.n	800d56e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2200      	movs	r2, #0
 800d564:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800d568:	2301      	movs	r3, #1
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	e001      	b.n	800d572 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800d56e:	2300      	movs	r3, #0
 800d570:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800d572:	f7fd f9bf 	bl	800a8f4 <vPortExitCritical>

		return xReturn;
 800d576:	68fb      	ldr	r3, [r7, #12]
	}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	2400cc70 	.word	0x2400cc70

0800d584 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d58e:	4b21      	ldr	r3, [pc, #132]	; (800d614 <prvAddCurrentTaskToDelayedList+0x90>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d594:	4b20      	ldr	r3, [pc, #128]	; (800d618 <prvAddCurrentTaskToDelayedList+0x94>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	3304      	adds	r3, #4
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fd f822 	bl	800a5e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a6:	d10a      	bne.n	800d5be <prvAddCurrentTaskToDelayedList+0x3a>
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d007      	beq.n	800d5be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5ae:	4b1a      	ldr	r3, [pc, #104]	; (800d618 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4819      	ldr	r0, [pc, #100]	; (800d61c <prvAddCurrentTaskToDelayedList+0x98>)
 800d5b8:	f7fc ffb7 	bl	800a52a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5bc:	e026      	b.n	800d60c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5c6:	4b14      	ldr	r3, [pc, #80]	; (800d618 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d209      	bcs.n	800d5ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5d6:	4b12      	ldr	r3, [pc, #72]	; (800d620 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	3304      	adds	r3, #4
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	f7fc ffc5 	bl	800a572 <vListInsert>
}
 800d5e8:	e010      	b.n	800d60c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5ea:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	3304      	adds	r3, #4
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	f7fc ffbb 	bl	800a572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5fc:	4b0a      	ldr	r3, [pc, #40]	; (800d628 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	429a      	cmp	r2, r3
 800d604:	d202      	bcs.n	800d60c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d606:	4a08      	ldr	r2, [pc, #32]	; (800d628 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	6013      	str	r3, [r2, #0]
}
 800d60c:	bf00      	nop
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	2400d148 	.word	0x2400d148
 800d618:	2400cc70 	.word	0x2400cc70
 800d61c:	2400d130 	.word	0x2400d130
 800d620:	2400d100 	.word	0x2400d100
 800d624:	2400d0fc 	.word	0x2400d0fc
 800d628:	2400d164 	.word	0x2400d164

0800d62c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08a      	sub	sp, #40	; 0x28
 800d630:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d632:	2300      	movs	r3, #0
 800d634:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d636:	f000 fb07 	bl	800dc48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d63a:	4b1c      	ldr	r3, [pc, #112]	; (800d6ac <xTimerCreateTimerTask+0x80>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d021      	beq.n	800d686 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d646:	2300      	movs	r3, #0
 800d648:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d64a:	1d3a      	adds	r2, r7, #4
 800d64c:	f107 0108 	add.w	r1, r7, #8
 800d650:	f107 030c 	add.w	r3, r7, #12
 800d654:	4618      	mov	r0, r3
 800d656:	f7fc fd37 	bl	800a0c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d65a:	6879      	ldr	r1, [r7, #4]
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	9202      	str	r2, [sp, #8]
 800d662:	9301      	str	r3, [sp, #4]
 800d664:	2302      	movs	r3, #2
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	2300      	movs	r3, #0
 800d66a:	460a      	mov	r2, r1
 800d66c:	4910      	ldr	r1, [pc, #64]	; (800d6b0 <xTimerCreateTimerTask+0x84>)
 800d66e:	4811      	ldr	r0, [pc, #68]	; (800d6b4 <xTimerCreateTimerTask+0x88>)
 800d670:	f7fe fd57 	bl	800c122 <xTaskCreateStatic>
 800d674:	4603      	mov	r3, r0
 800d676:	4a10      	ldr	r2, [pc, #64]	; (800d6b8 <xTimerCreateTimerTask+0x8c>)
 800d678:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d67a:	4b0f      	ldr	r3, [pc, #60]	; (800d6b8 <xTimerCreateTimerTask+0x8c>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d001      	beq.n	800d686 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d682:	2301      	movs	r3, #1
 800d684:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10a      	bne.n	800d6a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d690:	f383 8811 	msr	BASEPRI, r3
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	613b      	str	r3, [r7, #16]
}
 800d69e:	bf00      	nop
 800d6a0:	e7fe      	b.n	800d6a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d6a2:	697b      	ldr	r3, [r7, #20]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3718      	adds	r7, #24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	2400d1a0 	.word	0x2400d1a0
 800d6b0:	0800fd88 	.word	0x0800fd88
 800d6b4:	0800d7f1 	.word	0x0800d7f1
 800d6b8:	2400d1a4 	.word	0x2400d1a4

0800d6bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08a      	sub	sp, #40	; 0x28
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
 800d6c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10a      	bne.n	800d6ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	623b      	str	r3, [r7, #32]
}
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6ea:	4b1a      	ldr	r3, [pc, #104]	; (800d754 <xTimerGenericCommand+0x98>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d02a      	beq.n	800d748 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2b05      	cmp	r3, #5
 800d702:	dc18      	bgt.n	800d736 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d704:	f7ff fb8c 	bl	800ce20 <xTaskGetSchedulerState>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d109      	bne.n	800d722 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d70e:	4b11      	ldr	r3, [pc, #68]	; (800d754 <xTimerGenericCommand+0x98>)
 800d710:	6818      	ldr	r0, [r3, #0]
 800d712:	f107 0110 	add.w	r1, r7, #16
 800d716:	2300      	movs	r3, #0
 800d718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d71a:	f7fd fb1b 	bl	800ad54 <xQueueGenericSend>
 800d71e:	6278      	str	r0, [r7, #36]	; 0x24
 800d720:	e012      	b.n	800d748 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d722:	4b0c      	ldr	r3, [pc, #48]	; (800d754 <xTimerGenericCommand+0x98>)
 800d724:	6818      	ldr	r0, [r3, #0]
 800d726:	f107 0110 	add.w	r1, r7, #16
 800d72a:	2300      	movs	r3, #0
 800d72c:	2200      	movs	r2, #0
 800d72e:	f7fd fb11 	bl	800ad54 <xQueueGenericSend>
 800d732:	6278      	str	r0, [r7, #36]	; 0x24
 800d734:	e008      	b.n	800d748 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d736:	4b07      	ldr	r3, [pc, #28]	; (800d754 <xTimerGenericCommand+0x98>)
 800d738:	6818      	ldr	r0, [r3, #0]
 800d73a:	f107 0110 	add.w	r1, r7, #16
 800d73e:	2300      	movs	r3, #0
 800d740:	683a      	ldr	r2, [r7, #0]
 800d742:	f7fd fc05 	bl	800af50 <xQueueGenericSendFromISR>
 800d746:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3728      	adds	r7, #40	; 0x28
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	2400d1a0 	.word	0x2400d1a0

0800d758 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b088      	sub	sp, #32
 800d75c:	af02      	add	r7, sp, #8
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d762:	4b22      	ldr	r3, [pc, #136]	; (800d7ec <prvProcessExpiredTimer+0x94>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	3304      	adds	r3, #4
 800d770:	4618      	mov	r0, r3
 800d772:	f7fc ff37 	bl	800a5e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d77c:	f003 0304 	and.w	r3, r3, #4
 800d780:	2b00      	cmp	r3, #0
 800d782:	d022      	beq.n	800d7ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	699a      	ldr	r2, [r3, #24]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	18d1      	adds	r1, r2, r3
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	6978      	ldr	r0, [r7, #20]
 800d792:	f000 f8d1 	bl	800d938 <prvInsertTimerInActiveList>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d01f      	beq.n	800d7dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d79c:	2300      	movs	r3, #0
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	6978      	ldr	r0, [r7, #20]
 800d7a8:	f7ff ff88 	bl	800d6bc <xTimerGenericCommand>
 800d7ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d113      	bne.n	800d7dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	60fb      	str	r3, [r7, #12]
}
 800d7c6:	bf00      	nop
 800d7c8:	e7fe      	b.n	800d7c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7d0:	f023 0301 	bic.w	r3, r3, #1
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	6a1b      	ldr	r3, [r3, #32]
 800d7e0:	6978      	ldr	r0, [r7, #20]
 800d7e2:	4798      	blx	r3
}
 800d7e4:	bf00      	nop
 800d7e6:	3718      	adds	r7, #24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	2400d198 	.word	0x2400d198

0800d7f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7f8:	f107 0308 	add.w	r3, r7, #8
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 f857 	bl	800d8b0 <prvGetNextExpireTime>
 800d802:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	4619      	mov	r1, r3
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f000 f803 	bl	800d814 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d80e:	f000 f8d5 	bl	800d9bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d812:	e7f1      	b.n	800d7f8 <prvTimerTask+0x8>

0800d814 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d81e:	f7fe fedd 	bl	800c5dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d822:	f107 0308 	add.w	r3, r7, #8
 800d826:	4618      	mov	r0, r3
 800d828:	f000 f866 	bl	800d8f8 <prvSampleTimeNow>
 800d82c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d130      	bne.n	800d896 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10a      	bne.n	800d850 <prvProcessTimerOrBlockTask+0x3c>
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d806      	bhi.n	800d850 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d842:	f7fe fed9 	bl	800c5f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d846:	68f9      	ldr	r1, [r7, #12]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7ff ff85 	bl	800d758 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d84e:	e024      	b.n	800d89a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d008      	beq.n	800d868 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d856:	4b13      	ldr	r3, [pc, #76]	; (800d8a4 <prvProcessTimerOrBlockTask+0x90>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d101      	bne.n	800d864 <prvProcessTimerOrBlockTask+0x50>
 800d860:	2301      	movs	r3, #1
 800d862:	e000      	b.n	800d866 <prvProcessTimerOrBlockTask+0x52>
 800d864:	2300      	movs	r3, #0
 800d866:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d868:	4b0f      	ldr	r3, [pc, #60]	; (800d8a8 <prvProcessTimerOrBlockTask+0x94>)
 800d86a:	6818      	ldr	r0, [r3, #0]
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	4619      	mov	r1, r3
 800d876:	f7fd ffd1 	bl	800b81c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d87a:	f7fe febd 	bl	800c5f8 <xTaskResumeAll>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10a      	bne.n	800d89a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d884:	4b09      	ldr	r3, [pc, #36]	; (800d8ac <prvProcessTimerOrBlockTask+0x98>)
 800d886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d88a:	601a      	str	r2, [r3, #0]
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	f3bf 8f6f 	isb	sy
}
 800d894:	e001      	b.n	800d89a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d896:	f7fe feaf 	bl	800c5f8 <xTaskResumeAll>
}
 800d89a:	bf00      	nop
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	2400d19c 	.word	0x2400d19c
 800d8a8:	2400d1a0 	.word	0x2400d1a0
 800d8ac:	e000ed04 	.word	0xe000ed04

0800d8b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d8b8:	4b0e      	ldr	r3, [pc, #56]	; (800d8f4 <prvGetNextExpireTime+0x44>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d101      	bne.n	800d8c6 <prvGetNextExpireTime+0x16>
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	e000      	b.n	800d8c8 <prvGetNextExpireTime+0x18>
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d105      	bne.n	800d8e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8d4:	4b07      	ldr	r3, [pc, #28]	; (800d8f4 <prvGetNextExpireTime+0x44>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	60fb      	str	r3, [r7, #12]
 800d8de:	e001      	b.n	800d8e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	2400d198 	.word	0x2400d198

0800d8f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d900:	f7fe ff18 	bl	800c734 <xTaskGetTickCount>
 800d904:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d906:	4b0b      	ldr	r3, [pc, #44]	; (800d934 <prvSampleTimeNow+0x3c>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d205      	bcs.n	800d91c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d910:	f000 f936 	bl	800db80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	e002      	b.n	800d922 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d922:	4a04      	ldr	r2, [pc, #16]	; (800d934 <prvSampleTimeNow+0x3c>)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d928:	68fb      	ldr	r3, [r7, #12]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	2400d1a8 	.word	0x2400d1a8

0800d938 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
 800d944:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d946:	2300      	movs	r3, #0
 800d948:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d812      	bhi.n	800d984 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	1ad2      	subs	r2, r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d302      	bcc.n	800d972 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d96c:	2301      	movs	r3, #1
 800d96e:	617b      	str	r3, [r7, #20]
 800d970:	e01b      	b.n	800d9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d972:	4b10      	ldr	r3, [pc, #64]	; (800d9b4 <prvInsertTimerInActiveList+0x7c>)
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	3304      	adds	r3, #4
 800d97a:	4619      	mov	r1, r3
 800d97c:	4610      	mov	r0, r2
 800d97e:	f7fc fdf8 	bl	800a572 <vListInsert>
 800d982:	e012      	b.n	800d9aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d206      	bcs.n	800d99a <prvInsertTimerInActiveList+0x62>
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	429a      	cmp	r2, r3
 800d992:	d302      	bcc.n	800d99a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d994:	2301      	movs	r3, #1
 800d996:	617b      	str	r3, [r7, #20]
 800d998:	e007      	b.n	800d9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d99a:	4b07      	ldr	r3, [pc, #28]	; (800d9b8 <prvInsertTimerInActiveList+0x80>)
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	3304      	adds	r3, #4
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	f7fc fde4 	bl	800a572 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d9aa:	697b      	ldr	r3, [r7, #20]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	2400d19c 	.word	0x2400d19c
 800d9b8:	2400d198 	.word	0x2400d198

0800d9bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b08e      	sub	sp, #56	; 0x38
 800d9c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9c2:	e0ca      	b.n	800db5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	da18      	bge.n	800d9fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d9ca:	1d3b      	adds	r3, r7, #4
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d10a      	bne.n	800d9ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9da:	f383 8811 	msr	BASEPRI, r3
 800d9de:	f3bf 8f6f 	isb	sy
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	61fb      	str	r3, [r7, #28]
}
 800d9e8:	bf00      	nop
 800d9ea:	e7fe      	b.n	800d9ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9f2:	6850      	ldr	r0, [r2, #4]
 800d9f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9f6:	6892      	ldr	r2, [r2, #8]
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f2c0 80aa 	blt.w	800db58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d004      	beq.n	800da1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da12:	3304      	adds	r3, #4
 800da14:	4618      	mov	r0, r3
 800da16:	f7fc fde5 	bl	800a5e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da1a:	463b      	mov	r3, r7
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7ff ff6b 	bl	800d8f8 <prvSampleTimeNow>
 800da22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b09      	cmp	r3, #9
 800da28:	f200 8097 	bhi.w	800db5a <prvProcessReceivedCommands+0x19e>
 800da2c:	a201      	add	r2, pc, #4	; (adr r2, 800da34 <prvProcessReceivedCommands+0x78>)
 800da2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da32:	bf00      	nop
 800da34:	0800da5d 	.word	0x0800da5d
 800da38:	0800da5d 	.word	0x0800da5d
 800da3c:	0800da5d 	.word	0x0800da5d
 800da40:	0800dad1 	.word	0x0800dad1
 800da44:	0800dae5 	.word	0x0800dae5
 800da48:	0800db2f 	.word	0x0800db2f
 800da4c:	0800da5d 	.word	0x0800da5d
 800da50:	0800da5d 	.word	0x0800da5d
 800da54:	0800dad1 	.word	0x0800dad1
 800da58:	0800dae5 	.word	0x0800dae5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da62:	f043 0301 	orr.w	r3, r3, #1
 800da66:	b2da      	uxtb	r2, r3
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	18d1      	adds	r1, r2, r3
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da7c:	f7ff ff5c 	bl	800d938 <prvInsertTimerInActiveList>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d069      	beq.n	800db5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da88:	6a1b      	ldr	r3, [r3, #32]
 800da8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da94:	f003 0304 	and.w	r3, r3, #4
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d05e      	beq.n	800db5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	441a      	add	r2, r3
 800daa4:	2300      	movs	r3, #0
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	2300      	movs	r3, #0
 800daaa:	2100      	movs	r1, #0
 800daac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daae:	f7ff fe05 	bl	800d6bc <xTimerGenericCommand>
 800dab2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dab4:	6a3b      	ldr	r3, [r7, #32]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d14f      	bne.n	800db5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800daba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabe:	f383 8811 	msr	BASEPRI, r3
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	f3bf 8f4f 	dsb	sy
 800daca:	61bb      	str	r3, [r7, #24]
}
 800dacc:	bf00      	nop
 800dace:	e7fe      	b.n	800dace <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dad6:	f023 0301 	bic.w	r3, r3, #1
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dae2:	e03a      	b.n	800db5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daea:	f043 0301 	orr.w	r3, r3, #1
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800daf6:	68ba      	ldr	r2, [r7, #8]
 800daf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10a      	bne.n	800db1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	617b      	str	r3, [r7, #20]
}
 800db16:	bf00      	nop
 800db18:	e7fe      	b.n	800db18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1c:	699a      	ldr	r2, [r3, #24]
 800db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db20:	18d1      	adds	r1, r2, r3
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db28:	f7ff ff06 	bl	800d938 <prvInsertTimerInActiveList>
					break;
 800db2c:	e015      	b.n	800db5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db34:	f003 0302 	and.w	r3, r3, #2
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d103      	bne.n	800db44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800db3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db3e:	f7fc fba9 	bl	800a294 <vPortFree>
 800db42:	e00a      	b.n	800db5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db4a:	f023 0301 	bic.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db56:	e000      	b.n	800db5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800db58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db5a:	4b08      	ldr	r3, [pc, #32]	; (800db7c <prvProcessReceivedCommands+0x1c0>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	1d39      	adds	r1, r7, #4
 800db60:	2200      	movs	r2, #0
 800db62:	4618      	mov	r0, r3
 800db64:	f7fd fb1c 	bl	800b1a0 <xQueueReceive>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f47f af2a 	bne.w	800d9c4 <prvProcessReceivedCommands+0x8>
	}
}
 800db70:	bf00      	nop
 800db72:	bf00      	nop
 800db74:	3730      	adds	r7, #48	; 0x30
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	2400d1a0 	.word	0x2400d1a0

0800db80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b088      	sub	sp, #32
 800db84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db86:	e048      	b.n	800dc1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db88:	4b2d      	ldr	r3, [pc, #180]	; (800dc40 <prvSwitchTimerLists+0xc0>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db92:	4b2b      	ldr	r3, [pc, #172]	; (800dc40 <prvSwitchTimerLists+0xc0>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	3304      	adds	r3, #4
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fc fd1f 	bl	800a5e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6a1b      	ldr	r3, [r3, #32]
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbb4:	f003 0304 	and.w	r3, r3, #4
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d02e      	beq.n	800dc1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	699b      	ldr	r3, [r3, #24]
 800dbc0:	693a      	ldr	r2, [r7, #16]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d90e      	bls.n	800dbec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	68ba      	ldr	r2, [r7, #8]
 800dbd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbda:	4b19      	ldr	r3, [pc, #100]	; (800dc40 <prvSwitchTimerLists+0xc0>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	f7fc fcc4 	bl	800a572 <vListInsert>
 800dbea:	e016      	b.n	800dc1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbec:	2300      	movs	r3, #0
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	693a      	ldr	r2, [r7, #16]
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	f7ff fd60 	bl	800d6bc <xTimerGenericCommand>
 800dbfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10a      	bne.n	800dc1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc08:	f383 8811 	msr	BASEPRI, r3
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	603b      	str	r3, [r7, #0]
}
 800dc16:	bf00      	nop
 800dc18:	e7fe      	b.n	800dc18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc1a:	4b09      	ldr	r3, [pc, #36]	; (800dc40 <prvSwitchTimerLists+0xc0>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1b1      	bne.n	800db88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc24:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <prvSwitchTimerLists+0xc0>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc2a:	4b06      	ldr	r3, [pc, #24]	; (800dc44 <prvSwitchTimerLists+0xc4>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a04      	ldr	r2, [pc, #16]	; (800dc40 <prvSwitchTimerLists+0xc0>)
 800dc30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc32:	4a04      	ldr	r2, [pc, #16]	; (800dc44 <prvSwitchTimerLists+0xc4>)
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	6013      	str	r3, [r2, #0]
}
 800dc38:	bf00      	nop
 800dc3a:	3718      	adds	r7, #24
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	2400d198 	.word	0x2400d198
 800dc44:	2400d19c 	.word	0x2400d19c

0800dc48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc4e:	f7fc fe21 	bl	800a894 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc52:	4b15      	ldr	r3, [pc, #84]	; (800dca8 <prvCheckForValidListAndQueue+0x60>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d120      	bne.n	800dc9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc5a:	4814      	ldr	r0, [pc, #80]	; (800dcac <prvCheckForValidListAndQueue+0x64>)
 800dc5c:	f7fc fc38 	bl	800a4d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc60:	4813      	ldr	r0, [pc, #76]	; (800dcb0 <prvCheckForValidListAndQueue+0x68>)
 800dc62:	f7fc fc35 	bl	800a4d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc66:	4b13      	ldr	r3, [pc, #76]	; (800dcb4 <prvCheckForValidListAndQueue+0x6c>)
 800dc68:	4a10      	ldr	r2, [pc, #64]	; (800dcac <prvCheckForValidListAndQueue+0x64>)
 800dc6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc6c:	4b12      	ldr	r3, [pc, #72]	; (800dcb8 <prvCheckForValidListAndQueue+0x70>)
 800dc6e:	4a10      	ldr	r2, [pc, #64]	; (800dcb0 <prvCheckForValidListAndQueue+0x68>)
 800dc70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc72:	2300      	movs	r3, #0
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	4b11      	ldr	r3, [pc, #68]	; (800dcbc <prvCheckForValidListAndQueue+0x74>)
 800dc78:	4a11      	ldr	r2, [pc, #68]	; (800dcc0 <prvCheckForValidListAndQueue+0x78>)
 800dc7a:	2110      	movs	r1, #16
 800dc7c:	200a      	movs	r0, #10
 800dc7e:	f7fc ff93 	bl	800aba8 <xQueueGenericCreateStatic>
 800dc82:	4603      	mov	r3, r0
 800dc84:	4a08      	ldr	r2, [pc, #32]	; (800dca8 <prvCheckForValidListAndQueue+0x60>)
 800dc86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc88:	4b07      	ldr	r3, [pc, #28]	; (800dca8 <prvCheckForValidListAndQueue+0x60>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d005      	beq.n	800dc9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc90:	4b05      	ldr	r3, [pc, #20]	; (800dca8 <prvCheckForValidListAndQueue+0x60>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	490b      	ldr	r1, [pc, #44]	; (800dcc4 <prvCheckForValidListAndQueue+0x7c>)
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fd fd96 	bl	800b7c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc9c:	f7fc fe2a 	bl	800a8f4 <vPortExitCritical>
}
 800dca0:	bf00      	nop
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	2400d1a0 	.word	0x2400d1a0
 800dcac:	2400d170 	.word	0x2400d170
 800dcb0:	2400d184 	.word	0x2400d184
 800dcb4:	2400d198 	.word	0x2400d198
 800dcb8:	2400d19c 	.word	0x2400d19c
 800dcbc:	2400d24c 	.word	0x2400d24c
 800dcc0:	2400d1ac 	.word	0x2400d1ac
 800dcc4:	0800fd90 	.word	0x0800fd90

0800dcc8 <__assert_func>:
 800dcc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcca:	4614      	mov	r4, r2
 800dccc:	461a      	mov	r2, r3
 800dcce:	4b09      	ldr	r3, [pc, #36]	; (800dcf4 <__assert_func+0x2c>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	68d8      	ldr	r0, [r3, #12]
 800dcd6:	b14c      	cbz	r4, 800dcec <__assert_func+0x24>
 800dcd8:	4b07      	ldr	r3, [pc, #28]	; (800dcf8 <__assert_func+0x30>)
 800dcda:	9100      	str	r1, [sp, #0]
 800dcdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dce0:	4906      	ldr	r1, [pc, #24]	; (800dcfc <__assert_func+0x34>)
 800dce2:	462b      	mov	r3, r5
 800dce4:	f000 f8ea 	bl	800debc <fiprintf>
 800dce8:	f000 fecc 	bl	800ea84 <abort>
 800dcec:	4b04      	ldr	r3, [pc, #16]	; (800dd00 <__assert_func+0x38>)
 800dcee:	461c      	mov	r4, r3
 800dcf0:	e7f3      	b.n	800dcda <__assert_func+0x12>
 800dcf2:	bf00      	nop
 800dcf4:	24000018 	.word	0x24000018
 800dcf8:	0800fe34 	.word	0x0800fe34
 800dcfc:	0800fe41 	.word	0x0800fe41
 800dd00:	0800fe6f 	.word	0x0800fe6f

0800dd04 <__errno>:
 800dd04:	4b01      	ldr	r3, [pc, #4]	; (800dd0c <__errno+0x8>)
 800dd06:	6818      	ldr	r0, [r3, #0]
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop
 800dd0c:	24000018 	.word	0x24000018

0800dd10 <std>:
 800dd10:	2300      	movs	r3, #0
 800dd12:	b510      	push	{r4, lr}
 800dd14:	4604      	mov	r4, r0
 800dd16:	e9c0 3300 	strd	r3, r3, [r0]
 800dd1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd1e:	6083      	str	r3, [r0, #8]
 800dd20:	8181      	strh	r1, [r0, #12]
 800dd22:	6643      	str	r3, [r0, #100]	; 0x64
 800dd24:	81c2      	strh	r2, [r0, #14]
 800dd26:	6183      	str	r3, [r0, #24]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	2208      	movs	r2, #8
 800dd2c:	305c      	adds	r0, #92	; 0x5c
 800dd2e:	f000 f92c 	bl	800df8a <memset>
 800dd32:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <std+0x38>)
 800dd34:	6263      	str	r3, [r4, #36]	; 0x24
 800dd36:	4b05      	ldr	r3, [pc, #20]	; (800dd4c <std+0x3c>)
 800dd38:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd3a:	4b05      	ldr	r3, [pc, #20]	; (800dd50 <std+0x40>)
 800dd3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd3e:	4b05      	ldr	r3, [pc, #20]	; (800dd54 <std+0x44>)
 800dd40:	6224      	str	r4, [r4, #32]
 800dd42:	6323      	str	r3, [r4, #48]	; 0x30
 800dd44:	bd10      	pop	{r4, pc}
 800dd46:	bf00      	nop
 800dd48:	0800e82d 	.word	0x0800e82d
 800dd4c:	0800e853 	.word	0x0800e853
 800dd50:	0800e88b 	.word	0x0800e88b
 800dd54:	0800e8af 	.word	0x0800e8af

0800dd58 <_cleanup_r>:
 800dd58:	4901      	ldr	r1, [pc, #4]	; (800dd60 <_cleanup_r+0x8>)
 800dd5a:	f000 b8c1 	b.w	800dee0 <_fwalk_reent>
 800dd5e:	bf00      	nop
 800dd60:	0800ebc1 	.word	0x0800ebc1

0800dd64 <__sfmoreglue>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	2268      	movs	r2, #104	; 0x68
 800dd68:	1e4d      	subs	r5, r1, #1
 800dd6a:	4355      	muls	r5, r2
 800dd6c:	460e      	mov	r6, r1
 800dd6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd72:	f000 f933 	bl	800dfdc <_malloc_r>
 800dd76:	4604      	mov	r4, r0
 800dd78:	b140      	cbz	r0, 800dd8c <__sfmoreglue+0x28>
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	e9c0 1600 	strd	r1, r6, [r0]
 800dd80:	300c      	adds	r0, #12
 800dd82:	60a0      	str	r0, [r4, #8]
 800dd84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd88:	f000 f8ff 	bl	800df8a <memset>
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}

0800dd90 <__sfp_lock_acquire>:
 800dd90:	4801      	ldr	r0, [pc, #4]	; (800dd98 <__sfp_lock_acquire+0x8>)
 800dd92:	f000 b8ea 	b.w	800df6a <__retarget_lock_acquire_recursive>
 800dd96:	bf00      	nop
 800dd98:	2400d29d 	.word	0x2400d29d

0800dd9c <__sfp_lock_release>:
 800dd9c:	4801      	ldr	r0, [pc, #4]	; (800dda4 <__sfp_lock_release+0x8>)
 800dd9e:	f000 b8e5 	b.w	800df6c <__retarget_lock_release_recursive>
 800dda2:	bf00      	nop
 800dda4:	2400d29d 	.word	0x2400d29d

0800dda8 <__sinit_lock_acquire>:
 800dda8:	4801      	ldr	r0, [pc, #4]	; (800ddb0 <__sinit_lock_acquire+0x8>)
 800ddaa:	f000 b8de 	b.w	800df6a <__retarget_lock_acquire_recursive>
 800ddae:	bf00      	nop
 800ddb0:	2400d29e 	.word	0x2400d29e

0800ddb4 <__sinit_lock_release>:
 800ddb4:	4801      	ldr	r0, [pc, #4]	; (800ddbc <__sinit_lock_release+0x8>)
 800ddb6:	f000 b8d9 	b.w	800df6c <__retarget_lock_release_recursive>
 800ddba:	bf00      	nop
 800ddbc:	2400d29e 	.word	0x2400d29e

0800ddc0 <__sinit>:
 800ddc0:	b510      	push	{r4, lr}
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	f7ff fff0 	bl	800dda8 <__sinit_lock_acquire>
 800ddc8:	69a3      	ldr	r3, [r4, #24]
 800ddca:	b11b      	cbz	r3, 800ddd4 <__sinit+0x14>
 800ddcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddd0:	f7ff bff0 	b.w	800ddb4 <__sinit_lock_release>
 800ddd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ddd8:	6523      	str	r3, [r4, #80]	; 0x50
 800ddda:	4b13      	ldr	r3, [pc, #76]	; (800de28 <__sinit+0x68>)
 800dddc:	4a13      	ldr	r2, [pc, #76]	; (800de2c <__sinit+0x6c>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	62a2      	str	r2, [r4, #40]	; 0x28
 800dde2:	42a3      	cmp	r3, r4
 800dde4:	bf04      	itt	eq
 800dde6:	2301      	moveq	r3, #1
 800dde8:	61a3      	streq	r3, [r4, #24]
 800ddea:	4620      	mov	r0, r4
 800ddec:	f000 f820 	bl	800de30 <__sfp>
 800ddf0:	6060      	str	r0, [r4, #4]
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f000 f81c 	bl	800de30 <__sfp>
 800ddf8:	60a0      	str	r0, [r4, #8]
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f000 f818 	bl	800de30 <__sfp>
 800de00:	2200      	movs	r2, #0
 800de02:	60e0      	str	r0, [r4, #12]
 800de04:	2104      	movs	r1, #4
 800de06:	6860      	ldr	r0, [r4, #4]
 800de08:	f7ff ff82 	bl	800dd10 <std>
 800de0c:	68a0      	ldr	r0, [r4, #8]
 800de0e:	2201      	movs	r2, #1
 800de10:	2109      	movs	r1, #9
 800de12:	f7ff ff7d 	bl	800dd10 <std>
 800de16:	68e0      	ldr	r0, [r4, #12]
 800de18:	2202      	movs	r2, #2
 800de1a:	2112      	movs	r1, #18
 800de1c:	f7ff ff78 	bl	800dd10 <std>
 800de20:	2301      	movs	r3, #1
 800de22:	61a3      	str	r3, [r4, #24]
 800de24:	e7d2      	b.n	800ddcc <__sinit+0xc>
 800de26:	bf00      	nop
 800de28:	0800ffd4 	.word	0x0800ffd4
 800de2c:	0800dd59 	.word	0x0800dd59

0800de30 <__sfp>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	4607      	mov	r7, r0
 800de34:	f7ff ffac 	bl	800dd90 <__sfp_lock_acquire>
 800de38:	4b1e      	ldr	r3, [pc, #120]	; (800deb4 <__sfp+0x84>)
 800de3a:	681e      	ldr	r6, [r3, #0]
 800de3c:	69b3      	ldr	r3, [r6, #24]
 800de3e:	b913      	cbnz	r3, 800de46 <__sfp+0x16>
 800de40:	4630      	mov	r0, r6
 800de42:	f7ff ffbd 	bl	800ddc0 <__sinit>
 800de46:	3648      	adds	r6, #72	; 0x48
 800de48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	d503      	bpl.n	800de58 <__sfp+0x28>
 800de50:	6833      	ldr	r3, [r6, #0]
 800de52:	b30b      	cbz	r3, 800de98 <__sfp+0x68>
 800de54:	6836      	ldr	r6, [r6, #0]
 800de56:	e7f7      	b.n	800de48 <__sfp+0x18>
 800de58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de5c:	b9d5      	cbnz	r5, 800de94 <__sfp+0x64>
 800de5e:	4b16      	ldr	r3, [pc, #88]	; (800deb8 <__sfp+0x88>)
 800de60:	60e3      	str	r3, [r4, #12]
 800de62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de66:	6665      	str	r5, [r4, #100]	; 0x64
 800de68:	f000 f87e 	bl	800df68 <__retarget_lock_init_recursive>
 800de6c:	f7ff ff96 	bl	800dd9c <__sfp_lock_release>
 800de70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de78:	6025      	str	r5, [r4, #0]
 800de7a:	61a5      	str	r5, [r4, #24]
 800de7c:	2208      	movs	r2, #8
 800de7e:	4629      	mov	r1, r5
 800de80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de84:	f000 f881 	bl	800df8a <memset>
 800de88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de90:	4620      	mov	r0, r4
 800de92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de94:	3468      	adds	r4, #104	; 0x68
 800de96:	e7d9      	b.n	800de4c <__sfp+0x1c>
 800de98:	2104      	movs	r1, #4
 800de9a:	4638      	mov	r0, r7
 800de9c:	f7ff ff62 	bl	800dd64 <__sfmoreglue>
 800dea0:	4604      	mov	r4, r0
 800dea2:	6030      	str	r0, [r6, #0]
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d1d5      	bne.n	800de54 <__sfp+0x24>
 800dea8:	f7ff ff78 	bl	800dd9c <__sfp_lock_release>
 800deac:	230c      	movs	r3, #12
 800deae:	603b      	str	r3, [r7, #0]
 800deb0:	e7ee      	b.n	800de90 <__sfp+0x60>
 800deb2:	bf00      	nop
 800deb4:	0800ffd4 	.word	0x0800ffd4
 800deb8:	ffff0001 	.word	0xffff0001

0800debc <fiprintf>:
 800debc:	b40e      	push	{r1, r2, r3}
 800debe:	b503      	push	{r0, r1, lr}
 800dec0:	4601      	mov	r1, r0
 800dec2:	ab03      	add	r3, sp, #12
 800dec4:	4805      	ldr	r0, [pc, #20]	; (800dedc <fiprintf+0x20>)
 800dec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deca:	6800      	ldr	r0, [r0, #0]
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	f000 f923 	bl	800e118 <_vfiprintf_r>
 800ded2:	b002      	add	sp, #8
 800ded4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ded8:	b003      	add	sp, #12
 800deda:	4770      	bx	lr
 800dedc:	24000018 	.word	0x24000018

0800dee0 <_fwalk_reent>:
 800dee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee4:	4606      	mov	r6, r0
 800dee6:	4688      	mov	r8, r1
 800dee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800deec:	2700      	movs	r7, #0
 800deee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800def2:	f1b9 0901 	subs.w	r9, r9, #1
 800def6:	d505      	bpl.n	800df04 <_fwalk_reent+0x24>
 800def8:	6824      	ldr	r4, [r4, #0]
 800defa:	2c00      	cmp	r4, #0
 800defc:	d1f7      	bne.n	800deee <_fwalk_reent+0xe>
 800defe:	4638      	mov	r0, r7
 800df00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df04:	89ab      	ldrh	r3, [r5, #12]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d907      	bls.n	800df1a <_fwalk_reent+0x3a>
 800df0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df0e:	3301      	adds	r3, #1
 800df10:	d003      	beq.n	800df1a <_fwalk_reent+0x3a>
 800df12:	4629      	mov	r1, r5
 800df14:	4630      	mov	r0, r6
 800df16:	47c0      	blx	r8
 800df18:	4307      	orrs	r7, r0
 800df1a:	3568      	adds	r5, #104	; 0x68
 800df1c:	e7e9      	b.n	800def2 <_fwalk_reent+0x12>
	...

0800df20 <__libc_init_array>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	4d0d      	ldr	r5, [pc, #52]	; (800df58 <__libc_init_array+0x38>)
 800df24:	4c0d      	ldr	r4, [pc, #52]	; (800df5c <__libc_init_array+0x3c>)
 800df26:	1b64      	subs	r4, r4, r5
 800df28:	10a4      	asrs	r4, r4, #2
 800df2a:	2600      	movs	r6, #0
 800df2c:	42a6      	cmp	r6, r4
 800df2e:	d109      	bne.n	800df44 <__libc_init_array+0x24>
 800df30:	4d0b      	ldr	r5, [pc, #44]	; (800df60 <__libc_init_array+0x40>)
 800df32:	4c0c      	ldr	r4, [pc, #48]	; (800df64 <__libc_init_array+0x44>)
 800df34:	f001 fe02 	bl	800fb3c <_init>
 800df38:	1b64      	subs	r4, r4, r5
 800df3a:	10a4      	asrs	r4, r4, #2
 800df3c:	2600      	movs	r6, #0
 800df3e:	42a6      	cmp	r6, r4
 800df40:	d105      	bne.n	800df4e <__libc_init_array+0x2e>
 800df42:	bd70      	pop	{r4, r5, r6, pc}
 800df44:	f855 3b04 	ldr.w	r3, [r5], #4
 800df48:	4798      	blx	r3
 800df4a:	3601      	adds	r6, #1
 800df4c:	e7ee      	b.n	800df2c <__libc_init_array+0xc>
 800df4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800df52:	4798      	blx	r3
 800df54:	3601      	adds	r6, #1
 800df56:	e7f2      	b.n	800df3e <__libc_init_array+0x1e>
 800df58:	08010030 	.word	0x08010030
 800df5c:	08010030 	.word	0x08010030
 800df60:	08010030 	.word	0x08010030
 800df64:	08010034 	.word	0x08010034

0800df68 <__retarget_lock_init_recursive>:
 800df68:	4770      	bx	lr

0800df6a <__retarget_lock_acquire_recursive>:
 800df6a:	4770      	bx	lr

0800df6c <__retarget_lock_release_recursive>:
 800df6c:	4770      	bx	lr

0800df6e <memcpy>:
 800df6e:	440a      	add	r2, r1
 800df70:	4291      	cmp	r1, r2
 800df72:	f100 33ff 	add.w	r3, r0, #4294967295
 800df76:	d100      	bne.n	800df7a <memcpy+0xc>
 800df78:	4770      	bx	lr
 800df7a:	b510      	push	{r4, lr}
 800df7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df84:	4291      	cmp	r1, r2
 800df86:	d1f9      	bne.n	800df7c <memcpy+0xe>
 800df88:	bd10      	pop	{r4, pc}

0800df8a <memset>:
 800df8a:	4402      	add	r2, r0
 800df8c:	4603      	mov	r3, r0
 800df8e:	4293      	cmp	r3, r2
 800df90:	d100      	bne.n	800df94 <memset+0xa>
 800df92:	4770      	bx	lr
 800df94:	f803 1b01 	strb.w	r1, [r3], #1
 800df98:	e7f9      	b.n	800df8e <memset+0x4>
	...

0800df9c <sbrk_aligned>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	4e0e      	ldr	r6, [pc, #56]	; (800dfd8 <sbrk_aligned+0x3c>)
 800dfa0:	460c      	mov	r4, r1
 800dfa2:	6831      	ldr	r1, [r6, #0]
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	b911      	cbnz	r1, 800dfae <sbrk_aligned+0x12>
 800dfa8:	f000 fbe4 	bl	800e774 <_sbrk_r>
 800dfac:	6030      	str	r0, [r6, #0]
 800dfae:	4621      	mov	r1, r4
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f000 fbdf 	bl	800e774 <_sbrk_r>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	d00a      	beq.n	800dfd0 <sbrk_aligned+0x34>
 800dfba:	1cc4      	adds	r4, r0, #3
 800dfbc:	f024 0403 	bic.w	r4, r4, #3
 800dfc0:	42a0      	cmp	r0, r4
 800dfc2:	d007      	beq.n	800dfd4 <sbrk_aligned+0x38>
 800dfc4:	1a21      	subs	r1, r4, r0
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	f000 fbd4 	bl	800e774 <_sbrk_r>
 800dfcc:	3001      	adds	r0, #1
 800dfce:	d101      	bne.n	800dfd4 <sbrk_aligned+0x38>
 800dfd0:	f04f 34ff 	mov.w	r4, #4294967295
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	bd70      	pop	{r4, r5, r6, pc}
 800dfd8:	2400d2a4 	.word	0x2400d2a4

0800dfdc <_malloc_r>:
 800dfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe0:	1ccd      	adds	r5, r1, #3
 800dfe2:	f025 0503 	bic.w	r5, r5, #3
 800dfe6:	3508      	adds	r5, #8
 800dfe8:	2d0c      	cmp	r5, #12
 800dfea:	bf38      	it	cc
 800dfec:	250c      	movcc	r5, #12
 800dfee:	2d00      	cmp	r5, #0
 800dff0:	4607      	mov	r7, r0
 800dff2:	db01      	blt.n	800dff8 <_malloc_r+0x1c>
 800dff4:	42a9      	cmp	r1, r5
 800dff6:	d905      	bls.n	800e004 <_malloc_r+0x28>
 800dff8:	230c      	movs	r3, #12
 800dffa:	603b      	str	r3, [r7, #0]
 800dffc:	2600      	movs	r6, #0
 800dffe:	4630      	mov	r0, r6
 800e000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e004:	4e2e      	ldr	r6, [pc, #184]	; (800e0c0 <_malloc_r+0xe4>)
 800e006:	f000 fea9 	bl	800ed5c <__malloc_lock>
 800e00a:	6833      	ldr	r3, [r6, #0]
 800e00c:	461c      	mov	r4, r3
 800e00e:	bb34      	cbnz	r4, 800e05e <_malloc_r+0x82>
 800e010:	4629      	mov	r1, r5
 800e012:	4638      	mov	r0, r7
 800e014:	f7ff ffc2 	bl	800df9c <sbrk_aligned>
 800e018:	1c43      	adds	r3, r0, #1
 800e01a:	4604      	mov	r4, r0
 800e01c:	d14d      	bne.n	800e0ba <_malloc_r+0xde>
 800e01e:	6834      	ldr	r4, [r6, #0]
 800e020:	4626      	mov	r6, r4
 800e022:	2e00      	cmp	r6, #0
 800e024:	d140      	bne.n	800e0a8 <_malloc_r+0xcc>
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	4631      	mov	r1, r6
 800e02a:	4638      	mov	r0, r7
 800e02c:	eb04 0803 	add.w	r8, r4, r3
 800e030:	f000 fba0 	bl	800e774 <_sbrk_r>
 800e034:	4580      	cmp	r8, r0
 800e036:	d13a      	bne.n	800e0ae <_malloc_r+0xd2>
 800e038:	6821      	ldr	r1, [r4, #0]
 800e03a:	3503      	adds	r5, #3
 800e03c:	1a6d      	subs	r5, r5, r1
 800e03e:	f025 0503 	bic.w	r5, r5, #3
 800e042:	3508      	adds	r5, #8
 800e044:	2d0c      	cmp	r5, #12
 800e046:	bf38      	it	cc
 800e048:	250c      	movcc	r5, #12
 800e04a:	4629      	mov	r1, r5
 800e04c:	4638      	mov	r0, r7
 800e04e:	f7ff ffa5 	bl	800df9c <sbrk_aligned>
 800e052:	3001      	adds	r0, #1
 800e054:	d02b      	beq.n	800e0ae <_malloc_r+0xd2>
 800e056:	6823      	ldr	r3, [r4, #0]
 800e058:	442b      	add	r3, r5
 800e05a:	6023      	str	r3, [r4, #0]
 800e05c:	e00e      	b.n	800e07c <_malloc_r+0xa0>
 800e05e:	6822      	ldr	r2, [r4, #0]
 800e060:	1b52      	subs	r2, r2, r5
 800e062:	d41e      	bmi.n	800e0a2 <_malloc_r+0xc6>
 800e064:	2a0b      	cmp	r2, #11
 800e066:	d916      	bls.n	800e096 <_malloc_r+0xba>
 800e068:	1961      	adds	r1, r4, r5
 800e06a:	42a3      	cmp	r3, r4
 800e06c:	6025      	str	r5, [r4, #0]
 800e06e:	bf18      	it	ne
 800e070:	6059      	strne	r1, [r3, #4]
 800e072:	6863      	ldr	r3, [r4, #4]
 800e074:	bf08      	it	eq
 800e076:	6031      	streq	r1, [r6, #0]
 800e078:	5162      	str	r2, [r4, r5]
 800e07a:	604b      	str	r3, [r1, #4]
 800e07c:	4638      	mov	r0, r7
 800e07e:	f104 060b 	add.w	r6, r4, #11
 800e082:	f000 fe71 	bl	800ed68 <__malloc_unlock>
 800e086:	f026 0607 	bic.w	r6, r6, #7
 800e08a:	1d23      	adds	r3, r4, #4
 800e08c:	1af2      	subs	r2, r6, r3
 800e08e:	d0b6      	beq.n	800dffe <_malloc_r+0x22>
 800e090:	1b9b      	subs	r3, r3, r6
 800e092:	50a3      	str	r3, [r4, r2]
 800e094:	e7b3      	b.n	800dffe <_malloc_r+0x22>
 800e096:	6862      	ldr	r2, [r4, #4]
 800e098:	42a3      	cmp	r3, r4
 800e09a:	bf0c      	ite	eq
 800e09c:	6032      	streq	r2, [r6, #0]
 800e09e:	605a      	strne	r2, [r3, #4]
 800e0a0:	e7ec      	b.n	800e07c <_malloc_r+0xa0>
 800e0a2:	4623      	mov	r3, r4
 800e0a4:	6864      	ldr	r4, [r4, #4]
 800e0a6:	e7b2      	b.n	800e00e <_malloc_r+0x32>
 800e0a8:	4634      	mov	r4, r6
 800e0aa:	6876      	ldr	r6, [r6, #4]
 800e0ac:	e7b9      	b.n	800e022 <_malloc_r+0x46>
 800e0ae:	230c      	movs	r3, #12
 800e0b0:	603b      	str	r3, [r7, #0]
 800e0b2:	4638      	mov	r0, r7
 800e0b4:	f000 fe58 	bl	800ed68 <__malloc_unlock>
 800e0b8:	e7a1      	b.n	800dffe <_malloc_r+0x22>
 800e0ba:	6025      	str	r5, [r4, #0]
 800e0bc:	e7de      	b.n	800e07c <_malloc_r+0xa0>
 800e0be:	bf00      	nop
 800e0c0:	2400d2a0 	.word	0x2400d2a0

0800e0c4 <__sfputc_r>:
 800e0c4:	6893      	ldr	r3, [r2, #8]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	b410      	push	{r4}
 800e0cc:	6093      	str	r3, [r2, #8]
 800e0ce:	da08      	bge.n	800e0e2 <__sfputc_r+0x1e>
 800e0d0:	6994      	ldr	r4, [r2, #24]
 800e0d2:	42a3      	cmp	r3, r4
 800e0d4:	db01      	blt.n	800e0da <__sfputc_r+0x16>
 800e0d6:	290a      	cmp	r1, #10
 800e0d8:	d103      	bne.n	800e0e2 <__sfputc_r+0x1e>
 800e0da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0de:	f000 bbff 	b.w	800e8e0 <__swbuf_r>
 800e0e2:	6813      	ldr	r3, [r2, #0]
 800e0e4:	1c58      	adds	r0, r3, #1
 800e0e6:	6010      	str	r0, [r2, #0]
 800e0e8:	7019      	strb	r1, [r3, #0]
 800e0ea:	4608      	mov	r0, r1
 800e0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <__sfputs_r>:
 800e0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	460f      	mov	r7, r1
 800e0f8:	4614      	mov	r4, r2
 800e0fa:	18d5      	adds	r5, r2, r3
 800e0fc:	42ac      	cmp	r4, r5
 800e0fe:	d101      	bne.n	800e104 <__sfputs_r+0x12>
 800e100:	2000      	movs	r0, #0
 800e102:	e007      	b.n	800e114 <__sfputs_r+0x22>
 800e104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e108:	463a      	mov	r2, r7
 800e10a:	4630      	mov	r0, r6
 800e10c:	f7ff ffda 	bl	800e0c4 <__sfputc_r>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d1f3      	bne.n	800e0fc <__sfputs_r+0xa>
 800e114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e118 <_vfiprintf_r>:
 800e118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e11c:	460d      	mov	r5, r1
 800e11e:	b09d      	sub	sp, #116	; 0x74
 800e120:	4614      	mov	r4, r2
 800e122:	4698      	mov	r8, r3
 800e124:	4606      	mov	r6, r0
 800e126:	b118      	cbz	r0, 800e130 <_vfiprintf_r+0x18>
 800e128:	6983      	ldr	r3, [r0, #24]
 800e12a:	b90b      	cbnz	r3, 800e130 <_vfiprintf_r+0x18>
 800e12c:	f7ff fe48 	bl	800ddc0 <__sinit>
 800e130:	4b89      	ldr	r3, [pc, #548]	; (800e358 <_vfiprintf_r+0x240>)
 800e132:	429d      	cmp	r5, r3
 800e134:	d11b      	bne.n	800e16e <_vfiprintf_r+0x56>
 800e136:	6875      	ldr	r5, [r6, #4]
 800e138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e13a:	07d9      	lsls	r1, r3, #31
 800e13c:	d405      	bmi.n	800e14a <_vfiprintf_r+0x32>
 800e13e:	89ab      	ldrh	r3, [r5, #12]
 800e140:	059a      	lsls	r2, r3, #22
 800e142:	d402      	bmi.n	800e14a <_vfiprintf_r+0x32>
 800e144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e146:	f7ff ff10 	bl	800df6a <__retarget_lock_acquire_recursive>
 800e14a:	89ab      	ldrh	r3, [r5, #12]
 800e14c:	071b      	lsls	r3, r3, #28
 800e14e:	d501      	bpl.n	800e154 <_vfiprintf_r+0x3c>
 800e150:	692b      	ldr	r3, [r5, #16]
 800e152:	b9eb      	cbnz	r3, 800e190 <_vfiprintf_r+0x78>
 800e154:	4629      	mov	r1, r5
 800e156:	4630      	mov	r0, r6
 800e158:	f000 fc26 	bl	800e9a8 <__swsetup_r>
 800e15c:	b1c0      	cbz	r0, 800e190 <_vfiprintf_r+0x78>
 800e15e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e160:	07dc      	lsls	r4, r3, #31
 800e162:	d50e      	bpl.n	800e182 <_vfiprintf_r+0x6a>
 800e164:	f04f 30ff 	mov.w	r0, #4294967295
 800e168:	b01d      	add	sp, #116	; 0x74
 800e16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16e:	4b7b      	ldr	r3, [pc, #492]	; (800e35c <_vfiprintf_r+0x244>)
 800e170:	429d      	cmp	r5, r3
 800e172:	d101      	bne.n	800e178 <_vfiprintf_r+0x60>
 800e174:	68b5      	ldr	r5, [r6, #8]
 800e176:	e7df      	b.n	800e138 <_vfiprintf_r+0x20>
 800e178:	4b79      	ldr	r3, [pc, #484]	; (800e360 <_vfiprintf_r+0x248>)
 800e17a:	429d      	cmp	r5, r3
 800e17c:	bf08      	it	eq
 800e17e:	68f5      	ldreq	r5, [r6, #12]
 800e180:	e7da      	b.n	800e138 <_vfiprintf_r+0x20>
 800e182:	89ab      	ldrh	r3, [r5, #12]
 800e184:	0598      	lsls	r0, r3, #22
 800e186:	d4ed      	bmi.n	800e164 <_vfiprintf_r+0x4c>
 800e188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e18a:	f7ff feef 	bl	800df6c <__retarget_lock_release_recursive>
 800e18e:	e7e9      	b.n	800e164 <_vfiprintf_r+0x4c>
 800e190:	2300      	movs	r3, #0
 800e192:	9309      	str	r3, [sp, #36]	; 0x24
 800e194:	2320      	movs	r3, #32
 800e196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e19a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e19e:	2330      	movs	r3, #48	; 0x30
 800e1a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e364 <_vfiprintf_r+0x24c>
 800e1a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1a8:	f04f 0901 	mov.w	r9, #1
 800e1ac:	4623      	mov	r3, r4
 800e1ae:	469a      	mov	sl, r3
 800e1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1b4:	b10a      	cbz	r2, 800e1ba <_vfiprintf_r+0xa2>
 800e1b6:	2a25      	cmp	r2, #37	; 0x25
 800e1b8:	d1f9      	bne.n	800e1ae <_vfiprintf_r+0x96>
 800e1ba:	ebba 0b04 	subs.w	fp, sl, r4
 800e1be:	d00b      	beq.n	800e1d8 <_vfiprintf_r+0xc0>
 800e1c0:	465b      	mov	r3, fp
 800e1c2:	4622      	mov	r2, r4
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f7ff ff93 	bl	800e0f2 <__sfputs_r>
 800e1cc:	3001      	adds	r0, #1
 800e1ce:	f000 80aa 	beq.w	800e326 <_vfiprintf_r+0x20e>
 800e1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1d4:	445a      	add	r2, fp
 800e1d6:	9209      	str	r2, [sp, #36]	; 0x24
 800e1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 80a2 	beq.w	800e326 <_vfiprintf_r+0x20e>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1ec:	f10a 0a01 	add.w	sl, sl, #1
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	9307      	str	r3, [sp, #28]
 800e1f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1f8:	931a      	str	r3, [sp, #104]	; 0x68
 800e1fa:	4654      	mov	r4, sl
 800e1fc:	2205      	movs	r2, #5
 800e1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e202:	4858      	ldr	r0, [pc, #352]	; (800e364 <_vfiprintf_r+0x24c>)
 800e204:	f7f2 f874 	bl	80002f0 <memchr>
 800e208:	9a04      	ldr	r2, [sp, #16]
 800e20a:	b9d8      	cbnz	r0, 800e244 <_vfiprintf_r+0x12c>
 800e20c:	06d1      	lsls	r1, r2, #27
 800e20e:	bf44      	itt	mi
 800e210:	2320      	movmi	r3, #32
 800e212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e216:	0713      	lsls	r3, r2, #28
 800e218:	bf44      	itt	mi
 800e21a:	232b      	movmi	r3, #43	; 0x2b
 800e21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e220:	f89a 3000 	ldrb.w	r3, [sl]
 800e224:	2b2a      	cmp	r3, #42	; 0x2a
 800e226:	d015      	beq.n	800e254 <_vfiprintf_r+0x13c>
 800e228:	9a07      	ldr	r2, [sp, #28]
 800e22a:	4654      	mov	r4, sl
 800e22c:	2000      	movs	r0, #0
 800e22e:	f04f 0c0a 	mov.w	ip, #10
 800e232:	4621      	mov	r1, r4
 800e234:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e238:	3b30      	subs	r3, #48	; 0x30
 800e23a:	2b09      	cmp	r3, #9
 800e23c:	d94e      	bls.n	800e2dc <_vfiprintf_r+0x1c4>
 800e23e:	b1b0      	cbz	r0, 800e26e <_vfiprintf_r+0x156>
 800e240:	9207      	str	r2, [sp, #28]
 800e242:	e014      	b.n	800e26e <_vfiprintf_r+0x156>
 800e244:	eba0 0308 	sub.w	r3, r0, r8
 800e248:	fa09 f303 	lsl.w	r3, r9, r3
 800e24c:	4313      	orrs	r3, r2
 800e24e:	9304      	str	r3, [sp, #16]
 800e250:	46a2      	mov	sl, r4
 800e252:	e7d2      	b.n	800e1fa <_vfiprintf_r+0xe2>
 800e254:	9b03      	ldr	r3, [sp, #12]
 800e256:	1d19      	adds	r1, r3, #4
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	9103      	str	r1, [sp, #12]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	bfbb      	ittet	lt
 800e260:	425b      	neglt	r3, r3
 800e262:	f042 0202 	orrlt.w	r2, r2, #2
 800e266:	9307      	strge	r3, [sp, #28]
 800e268:	9307      	strlt	r3, [sp, #28]
 800e26a:	bfb8      	it	lt
 800e26c:	9204      	strlt	r2, [sp, #16]
 800e26e:	7823      	ldrb	r3, [r4, #0]
 800e270:	2b2e      	cmp	r3, #46	; 0x2e
 800e272:	d10c      	bne.n	800e28e <_vfiprintf_r+0x176>
 800e274:	7863      	ldrb	r3, [r4, #1]
 800e276:	2b2a      	cmp	r3, #42	; 0x2a
 800e278:	d135      	bne.n	800e2e6 <_vfiprintf_r+0x1ce>
 800e27a:	9b03      	ldr	r3, [sp, #12]
 800e27c:	1d1a      	adds	r2, r3, #4
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	9203      	str	r2, [sp, #12]
 800e282:	2b00      	cmp	r3, #0
 800e284:	bfb8      	it	lt
 800e286:	f04f 33ff 	movlt.w	r3, #4294967295
 800e28a:	3402      	adds	r4, #2
 800e28c:	9305      	str	r3, [sp, #20]
 800e28e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e374 <_vfiprintf_r+0x25c>
 800e292:	7821      	ldrb	r1, [r4, #0]
 800e294:	2203      	movs	r2, #3
 800e296:	4650      	mov	r0, sl
 800e298:	f7f2 f82a 	bl	80002f0 <memchr>
 800e29c:	b140      	cbz	r0, 800e2b0 <_vfiprintf_r+0x198>
 800e29e:	2340      	movs	r3, #64	; 0x40
 800e2a0:	eba0 000a 	sub.w	r0, r0, sl
 800e2a4:	fa03 f000 	lsl.w	r0, r3, r0
 800e2a8:	9b04      	ldr	r3, [sp, #16]
 800e2aa:	4303      	orrs	r3, r0
 800e2ac:	3401      	adds	r4, #1
 800e2ae:	9304      	str	r3, [sp, #16]
 800e2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b4:	482c      	ldr	r0, [pc, #176]	; (800e368 <_vfiprintf_r+0x250>)
 800e2b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2ba:	2206      	movs	r2, #6
 800e2bc:	f7f2 f818 	bl	80002f0 <memchr>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d03f      	beq.n	800e344 <_vfiprintf_r+0x22c>
 800e2c4:	4b29      	ldr	r3, [pc, #164]	; (800e36c <_vfiprintf_r+0x254>)
 800e2c6:	bb1b      	cbnz	r3, 800e310 <_vfiprintf_r+0x1f8>
 800e2c8:	9b03      	ldr	r3, [sp, #12]
 800e2ca:	3307      	adds	r3, #7
 800e2cc:	f023 0307 	bic.w	r3, r3, #7
 800e2d0:	3308      	adds	r3, #8
 800e2d2:	9303      	str	r3, [sp, #12]
 800e2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d6:	443b      	add	r3, r7
 800e2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2da:	e767      	b.n	800e1ac <_vfiprintf_r+0x94>
 800e2dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	2001      	movs	r0, #1
 800e2e4:	e7a5      	b.n	800e232 <_vfiprintf_r+0x11a>
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	3401      	adds	r4, #1
 800e2ea:	9305      	str	r3, [sp, #20]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	f04f 0c0a 	mov.w	ip, #10
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2f8:	3a30      	subs	r2, #48	; 0x30
 800e2fa:	2a09      	cmp	r2, #9
 800e2fc:	d903      	bls.n	800e306 <_vfiprintf_r+0x1ee>
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0c5      	beq.n	800e28e <_vfiprintf_r+0x176>
 800e302:	9105      	str	r1, [sp, #20]
 800e304:	e7c3      	b.n	800e28e <_vfiprintf_r+0x176>
 800e306:	fb0c 2101 	mla	r1, ip, r1, r2
 800e30a:	4604      	mov	r4, r0
 800e30c:	2301      	movs	r3, #1
 800e30e:	e7f0      	b.n	800e2f2 <_vfiprintf_r+0x1da>
 800e310:	ab03      	add	r3, sp, #12
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	462a      	mov	r2, r5
 800e316:	4b16      	ldr	r3, [pc, #88]	; (800e370 <_vfiprintf_r+0x258>)
 800e318:	a904      	add	r1, sp, #16
 800e31a:	4630      	mov	r0, r6
 800e31c:	f3af 8000 	nop.w
 800e320:	4607      	mov	r7, r0
 800e322:	1c78      	adds	r0, r7, #1
 800e324:	d1d6      	bne.n	800e2d4 <_vfiprintf_r+0x1bc>
 800e326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e328:	07d9      	lsls	r1, r3, #31
 800e32a:	d405      	bmi.n	800e338 <_vfiprintf_r+0x220>
 800e32c:	89ab      	ldrh	r3, [r5, #12]
 800e32e:	059a      	lsls	r2, r3, #22
 800e330:	d402      	bmi.n	800e338 <_vfiprintf_r+0x220>
 800e332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e334:	f7ff fe1a 	bl	800df6c <__retarget_lock_release_recursive>
 800e338:	89ab      	ldrh	r3, [r5, #12]
 800e33a:	065b      	lsls	r3, r3, #25
 800e33c:	f53f af12 	bmi.w	800e164 <_vfiprintf_r+0x4c>
 800e340:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e342:	e711      	b.n	800e168 <_vfiprintf_r+0x50>
 800e344:	ab03      	add	r3, sp, #12
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	462a      	mov	r2, r5
 800e34a:	4b09      	ldr	r3, [pc, #36]	; (800e370 <_vfiprintf_r+0x258>)
 800e34c:	a904      	add	r1, sp, #16
 800e34e:	4630      	mov	r0, r6
 800e350:	f000 f880 	bl	800e454 <_printf_i>
 800e354:	e7e4      	b.n	800e320 <_vfiprintf_r+0x208>
 800e356:	bf00      	nop
 800e358:	0800ff94 	.word	0x0800ff94
 800e35c:	0800ffb4 	.word	0x0800ffb4
 800e360:	0800ff74 	.word	0x0800ff74
 800e364:	0800ffd8 	.word	0x0800ffd8
 800e368:	0800ffe2 	.word	0x0800ffe2
 800e36c:	00000000 	.word	0x00000000
 800e370:	0800e0f3 	.word	0x0800e0f3
 800e374:	0800ffde 	.word	0x0800ffde

0800e378 <_printf_common>:
 800e378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e37c:	4616      	mov	r6, r2
 800e37e:	4699      	mov	r9, r3
 800e380:	688a      	ldr	r2, [r1, #8]
 800e382:	690b      	ldr	r3, [r1, #16]
 800e384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e388:	4293      	cmp	r3, r2
 800e38a:	bfb8      	it	lt
 800e38c:	4613      	movlt	r3, r2
 800e38e:	6033      	str	r3, [r6, #0]
 800e390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e394:	4607      	mov	r7, r0
 800e396:	460c      	mov	r4, r1
 800e398:	b10a      	cbz	r2, 800e39e <_printf_common+0x26>
 800e39a:	3301      	adds	r3, #1
 800e39c:	6033      	str	r3, [r6, #0]
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	0699      	lsls	r1, r3, #26
 800e3a2:	bf42      	ittt	mi
 800e3a4:	6833      	ldrmi	r3, [r6, #0]
 800e3a6:	3302      	addmi	r3, #2
 800e3a8:	6033      	strmi	r3, [r6, #0]
 800e3aa:	6825      	ldr	r5, [r4, #0]
 800e3ac:	f015 0506 	ands.w	r5, r5, #6
 800e3b0:	d106      	bne.n	800e3c0 <_printf_common+0x48>
 800e3b2:	f104 0a19 	add.w	sl, r4, #25
 800e3b6:	68e3      	ldr	r3, [r4, #12]
 800e3b8:	6832      	ldr	r2, [r6, #0]
 800e3ba:	1a9b      	subs	r3, r3, r2
 800e3bc:	42ab      	cmp	r3, r5
 800e3be:	dc26      	bgt.n	800e40e <_printf_common+0x96>
 800e3c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3c4:	1e13      	subs	r3, r2, #0
 800e3c6:	6822      	ldr	r2, [r4, #0]
 800e3c8:	bf18      	it	ne
 800e3ca:	2301      	movne	r3, #1
 800e3cc:	0692      	lsls	r2, r2, #26
 800e3ce:	d42b      	bmi.n	800e428 <_printf_common+0xb0>
 800e3d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3d4:	4649      	mov	r1, r9
 800e3d6:	4638      	mov	r0, r7
 800e3d8:	47c0      	blx	r8
 800e3da:	3001      	adds	r0, #1
 800e3dc:	d01e      	beq.n	800e41c <_printf_common+0xa4>
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	68e5      	ldr	r5, [r4, #12]
 800e3e2:	6832      	ldr	r2, [r6, #0]
 800e3e4:	f003 0306 	and.w	r3, r3, #6
 800e3e8:	2b04      	cmp	r3, #4
 800e3ea:	bf08      	it	eq
 800e3ec:	1aad      	subeq	r5, r5, r2
 800e3ee:	68a3      	ldr	r3, [r4, #8]
 800e3f0:	6922      	ldr	r2, [r4, #16]
 800e3f2:	bf0c      	ite	eq
 800e3f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3f8:	2500      	movne	r5, #0
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	bfc4      	itt	gt
 800e3fe:	1a9b      	subgt	r3, r3, r2
 800e400:	18ed      	addgt	r5, r5, r3
 800e402:	2600      	movs	r6, #0
 800e404:	341a      	adds	r4, #26
 800e406:	42b5      	cmp	r5, r6
 800e408:	d11a      	bne.n	800e440 <_printf_common+0xc8>
 800e40a:	2000      	movs	r0, #0
 800e40c:	e008      	b.n	800e420 <_printf_common+0xa8>
 800e40e:	2301      	movs	r3, #1
 800e410:	4652      	mov	r2, sl
 800e412:	4649      	mov	r1, r9
 800e414:	4638      	mov	r0, r7
 800e416:	47c0      	blx	r8
 800e418:	3001      	adds	r0, #1
 800e41a:	d103      	bne.n	800e424 <_printf_common+0xac>
 800e41c:	f04f 30ff 	mov.w	r0, #4294967295
 800e420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e424:	3501      	adds	r5, #1
 800e426:	e7c6      	b.n	800e3b6 <_printf_common+0x3e>
 800e428:	18e1      	adds	r1, r4, r3
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	2030      	movs	r0, #48	; 0x30
 800e42e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e432:	4422      	add	r2, r4
 800e434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e43c:	3302      	adds	r3, #2
 800e43e:	e7c7      	b.n	800e3d0 <_printf_common+0x58>
 800e440:	2301      	movs	r3, #1
 800e442:	4622      	mov	r2, r4
 800e444:	4649      	mov	r1, r9
 800e446:	4638      	mov	r0, r7
 800e448:	47c0      	blx	r8
 800e44a:	3001      	adds	r0, #1
 800e44c:	d0e6      	beq.n	800e41c <_printf_common+0xa4>
 800e44e:	3601      	adds	r6, #1
 800e450:	e7d9      	b.n	800e406 <_printf_common+0x8e>
	...

0800e454 <_printf_i>:
 800e454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e458:	7e0f      	ldrb	r7, [r1, #24]
 800e45a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e45c:	2f78      	cmp	r7, #120	; 0x78
 800e45e:	4691      	mov	r9, r2
 800e460:	4680      	mov	r8, r0
 800e462:	460c      	mov	r4, r1
 800e464:	469a      	mov	sl, r3
 800e466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e46a:	d807      	bhi.n	800e47c <_printf_i+0x28>
 800e46c:	2f62      	cmp	r7, #98	; 0x62
 800e46e:	d80a      	bhi.n	800e486 <_printf_i+0x32>
 800e470:	2f00      	cmp	r7, #0
 800e472:	f000 80d8 	beq.w	800e626 <_printf_i+0x1d2>
 800e476:	2f58      	cmp	r7, #88	; 0x58
 800e478:	f000 80a3 	beq.w	800e5c2 <_printf_i+0x16e>
 800e47c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e484:	e03a      	b.n	800e4fc <_printf_i+0xa8>
 800e486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e48a:	2b15      	cmp	r3, #21
 800e48c:	d8f6      	bhi.n	800e47c <_printf_i+0x28>
 800e48e:	a101      	add	r1, pc, #4	; (adr r1, 800e494 <_printf_i+0x40>)
 800e490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e494:	0800e4ed 	.word	0x0800e4ed
 800e498:	0800e501 	.word	0x0800e501
 800e49c:	0800e47d 	.word	0x0800e47d
 800e4a0:	0800e47d 	.word	0x0800e47d
 800e4a4:	0800e47d 	.word	0x0800e47d
 800e4a8:	0800e47d 	.word	0x0800e47d
 800e4ac:	0800e501 	.word	0x0800e501
 800e4b0:	0800e47d 	.word	0x0800e47d
 800e4b4:	0800e47d 	.word	0x0800e47d
 800e4b8:	0800e47d 	.word	0x0800e47d
 800e4bc:	0800e47d 	.word	0x0800e47d
 800e4c0:	0800e60d 	.word	0x0800e60d
 800e4c4:	0800e531 	.word	0x0800e531
 800e4c8:	0800e5ef 	.word	0x0800e5ef
 800e4cc:	0800e47d 	.word	0x0800e47d
 800e4d0:	0800e47d 	.word	0x0800e47d
 800e4d4:	0800e62f 	.word	0x0800e62f
 800e4d8:	0800e47d 	.word	0x0800e47d
 800e4dc:	0800e531 	.word	0x0800e531
 800e4e0:	0800e47d 	.word	0x0800e47d
 800e4e4:	0800e47d 	.word	0x0800e47d
 800e4e8:	0800e5f7 	.word	0x0800e5f7
 800e4ec:	682b      	ldr	r3, [r5, #0]
 800e4ee:	1d1a      	adds	r2, r3, #4
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	602a      	str	r2, [r5, #0]
 800e4f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e0a3      	b.n	800e648 <_printf_i+0x1f4>
 800e500:	6820      	ldr	r0, [r4, #0]
 800e502:	6829      	ldr	r1, [r5, #0]
 800e504:	0606      	lsls	r6, r0, #24
 800e506:	f101 0304 	add.w	r3, r1, #4
 800e50a:	d50a      	bpl.n	800e522 <_printf_i+0xce>
 800e50c:	680e      	ldr	r6, [r1, #0]
 800e50e:	602b      	str	r3, [r5, #0]
 800e510:	2e00      	cmp	r6, #0
 800e512:	da03      	bge.n	800e51c <_printf_i+0xc8>
 800e514:	232d      	movs	r3, #45	; 0x2d
 800e516:	4276      	negs	r6, r6
 800e518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e51c:	485e      	ldr	r0, [pc, #376]	; (800e698 <_printf_i+0x244>)
 800e51e:	230a      	movs	r3, #10
 800e520:	e019      	b.n	800e556 <_printf_i+0x102>
 800e522:	680e      	ldr	r6, [r1, #0]
 800e524:	602b      	str	r3, [r5, #0]
 800e526:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e52a:	bf18      	it	ne
 800e52c:	b236      	sxthne	r6, r6
 800e52e:	e7ef      	b.n	800e510 <_printf_i+0xbc>
 800e530:	682b      	ldr	r3, [r5, #0]
 800e532:	6820      	ldr	r0, [r4, #0]
 800e534:	1d19      	adds	r1, r3, #4
 800e536:	6029      	str	r1, [r5, #0]
 800e538:	0601      	lsls	r1, r0, #24
 800e53a:	d501      	bpl.n	800e540 <_printf_i+0xec>
 800e53c:	681e      	ldr	r6, [r3, #0]
 800e53e:	e002      	b.n	800e546 <_printf_i+0xf2>
 800e540:	0646      	lsls	r6, r0, #25
 800e542:	d5fb      	bpl.n	800e53c <_printf_i+0xe8>
 800e544:	881e      	ldrh	r6, [r3, #0]
 800e546:	4854      	ldr	r0, [pc, #336]	; (800e698 <_printf_i+0x244>)
 800e548:	2f6f      	cmp	r7, #111	; 0x6f
 800e54a:	bf0c      	ite	eq
 800e54c:	2308      	moveq	r3, #8
 800e54e:	230a      	movne	r3, #10
 800e550:	2100      	movs	r1, #0
 800e552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e556:	6865      	ldr	r5, [r4, #4]
 800e558:	60a5      	str	r5, [r4, #8]
 800e55a:	2d00      	cmp	r5, #0
 800e55c:	bfa2      	ittt	ge
 800e55e:	6821      	ldrge	r1, [r4, #0]
 800e560:	f021 0104 	bicge.w	r1, r1, #4
 800e564:	6021      	strge	r1, [r4, #0]
 800e566:	b90e      	cbnz	r6, 800e56c <_printf_i+0x118>
 800e568:	2d00      	cmp	r5, #0
 800e56a:	d04d      	beq.n	800e608 <_printf_i+0x1b4>
 800e56c:	4615      	mov	r5, r2
 800e56e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e572:	fb03 6711 	mls	r7, r3, r1, r6
 800e576:	5dc7      	ldrb	r7, [r0, r7]
 800e578:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e57c:	4637      	mov	r7, r6
 800e57e:	42bb      	cmp	r3, r7
 800e580:	460e      	mov	r6, r1
 800e582:	d9f4      	bls.n	800e56e <_printf_i+0x11a>
 800e584:	2b08      	cmp	r3, #8
 800e586:	d10b      	bne.n	800e5a0 <_printf_i+0x14c>
 800e588:	6823      	ldr	r3, [r4, #0]
 800e58a:	07de      	lsls	r6, r3, #31
 800e58c:	d508      	bpl.n	800e5a0 <_printf_i+0x14c>
 800e58e:	6923      	ldr	r3, [r4, #16]
 800e590:	6861      	ldr	r1, [r4, #4]
 800e592:	4299      	cmp	r1, r3
 800e594:	bfde      	ittt	le
 800e596:	2330      	movle	r3, #48	; 0x30
 800e598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e59c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e5a0:	1b52      	subs	r2, r2, r5
 800e5a2:	6122      	str	r2, [r4, #16]
 800e5a4:	f8cd a000 	str.w	sl, [sp]
 800e5a8:	464b      	mov	r3, r9
 800e5aa:	aa03      	add	r2, sp, #12
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	4640      	mov	r0, r8
 800e5b0:	f7ff fee2 	bl	800e378 <_printf_common>
 800e5b4:	3001      	adds	r0, #1
 800e5b6:	d14c      	bne.n	800e652 <_printf_i+0x1fe>
 800e5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5bc:	b004      	add	sp, #16
 800e5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c2:	4835      	ldr	r0, [pc, #212]	; (800e698 <_printf_i+0x244>)
 800e5c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e5c8:	6829      	ldr	r1, [r5, #0]
 800e5ca:	6823      	ldr	r3, [r4, #0]
 800e5cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800e5d0:	6029      	str	r1, [r5, #0]
 800e5d2:	061d      	lsls	r5, r3, #24
 800e5d4:	d514      	bpl.n	800e600 <_printf_i+0x1ac>
 800e5d6:	07df      	lsls	r7, r3, #31
 800e5d8:	bf44      	itt	mi
 800e5da:	f043 0320 	orrmi.w	r3, r3, #32
 800e5de:	6023      	strmi	r3, [r4, #0]
 800e5e0:	b91e      	cbnz	r6, 800e5ea <_printf_i+0x196>
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	f023 0320 	bic.w	r3, r3, #32
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	2310      	movs	r3, #16
 800e5ec:	e7b0      	b.n	800e550 <_printf_i+0xfc>
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	f043 0320 	orr.w	r3, r3, #32
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	2378      	movs	r3, #120	; 0x78
 800e5f8:	4828      	ldr	r0, [pc, #160]	; (800e69c <_printf_i+0x248>)
 800e5fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e5fe:	e7e3      	b.n	800e5c8 <_printf_i+0x174>
 800e600:	0659      	lsls	r1, r3, #25
 800e602:	bf48      	it	mi
 800e604:	b2b6      	uxthmi	r6, r6
 800e606:	e7e6      	b.n	800e5d6 <_printf_i+0x182>
 800e608:	4615      	mov	r5, r2
 800e60a:	e7bb      	b.n	800e584 <_printf_i+0x130>
 800e60c:	682b      	ldr	r3, [r5, #0]
 800e60e:	6826      	ldr	r6, [r4, #0]
 800e610:	6961      	ldr	r1, [r4, #20]
 800e612:	1d18      	adds	r0, r3, #4
 800e614:	6028      	str	r0, [r5, #0]
 800e616:	0635      	lsls	r5, r6, #24
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	d501      	bpl.n	800e620 <_printf_i+0x1cc>
 800e61c:	6019      	str	r1, [r3, #0]
 800e61e:	e002      	b.n	800e626 <_printf_i+0x1d2>
 800e620:	0670      	lsls	r0, r6, #25
 800e622:	d5fb      	bpl.n	800e61c <_printf_i+0x1c8>
 800e624:	8019      	strh	r1, [r3, #0]
 800e626:	2300      	movs	r3, #0
 800e628:	6123      	str	r3, [r4, #16]
 800e62a:	4615      	mov	r5, r2
 800e62c:	e7ba      	b.n	800e5a4 <_printf_i+0x150>
 800e62e:	682b      	ldr	r3, [r5, #0]
 800e630:	1d1a      	adds	r2, r3, #4
 800e632:	602a      	str	r2, [r5, #0]
 800e634:	681d      	ldr	r5, [r3, #0]
 800e636:	6862      	ldr	r2, [r4, #4]
 800e638:	2100      	movs	r1, #0
 800e63a:	4628      	mov	r0, r5
 800e63c:	f7f1 fe58 	bl	80002f0 <memchr>
 800e640:	b108      	cbz	r0, 800e646 <_printf_i+0x1f2>
 800e642:	1b40      	subs	r0, r0, r5
 800e644:	6060      	str	r0, [r4, #4]
 800e646:	6863      	ldr	r3, [r4, #4]
 800e648:	6123      	str	r3, [r4, #16]
 800e64a:	2300      	movs	r3, #0
 800e64c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e650:	e7a8      	b.n	800e5a4 <_printf_i+0x150>
 800e652:	6923      	ldr	r3, [r4, #16]
 800e654:	462a      	mov	r2, r5
 800e656:	4649      	mov	r1, r9
 800e658:	4640      	mov	r0, r8
 800e65a:	47d0      	blx	sl
 800e65c:	3001      	adds	r0, #1
 800e65e:	d0ab      	beq.n	800e5b8 <_printf_i+0x164>
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	079b      	lsls	r3, r3, #30
 800e664:	d413      	bmi.n	800e68e <_printf_i+0x23a>
 800e666:	68e0      	ldr	r0, [r4, #12]
 800e668:	9b03      	ldr	r3, [sp, #12]
 800e66a:	4298      	cmp	r0, r3
 800e66c:	bfb8      	it	lt
 800e66e:	4618      	movlt	r0, r3
 800e670:	e7a4      	b.n	800e5bc <_printf_i+0x168>
 800e672:	2301      	movs	r3, #1
 800e674:	4632      	mov	r2, r6
 800e676:	4649      	mov	r1, r9
 800e678:	4640      	mov	r0, r8
 800e67a:	47d0      	blx	sl
 800e67c:	3001      	adds	r0, #1
 800e67e:	d09b      	beq.n	800e5b8 <_printf_i+0x164>
 800e680:	3501      	adds	r5, #1
 800e682:	68e3      	ldr	r3, [r4, #12]
 800e684:	9903      	ldr	r1, [sp, #12]
 800e686:	1a5b      	subs	r3, r3, r1
 800e688:	42ab      	cmp	r3, r5
 800e68a:	dcf2      	bgt.n	800e672 <_printf_i+0x21e>
 800e68c:	e7eb      	b.n	800e666 <_printf_i+0x212>
 800e68e:	2500      	movs	r5, #0
 800e690:	f104 0619 	add.w	r6, r4, #25
 800e694:	e7f5      	b.n	800e682 <_printf_i+0x22e>
 800e696:	bf00      	nop
 800e698:	0800ffe9 	.word	0x0800ffe9
 800e69c:	0800fffa 	.word	0x0800fffa

0800e6a0 <cleanup_glue>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	6809      	ldr	r1, [r1, #0]
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	b109      	cbz	r1, 800e6ae <cleanup_glue+0xe>
 800e6aa:	f7ff fff9 	bl	800e6a0 <cleanup_glue>
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6b6:	f000 bb5d 	b.w	800ed74 <_free_r>
	...

0800e6bc <_reclaim_reent>:
 800e6bc:	4b2c      	ldr	r3, [pc, #176]	; (800e770 <_reclaim_reent+0xb4>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4283      	cmp	r3, r0
 800e6c2:	b570      	push	{r4, r5, r6, lr}
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	d051      	beq.n	800e76c <_reclaim_reent+0xb0>
 800e6c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e6ca:	b143      	cbz	r3, 800e6de <_reclaim_reent+0x22>
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d14a      	bne.n	800e768 <_reclaim_reent+0xac>
 800e6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6d4:	6819      	ldr	r1, [r3, #0]
 800e6d6:	b111      	cbz	r1, 800e6de <_reclaim_reent+0x22>
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f000 fb4b 	bl	800ed74 <_free_r>
 800e6de:	6961      	ldr	r1, [r4, #20]
 800e6e0:	b111      	cbz	r1, 800e6e8 <_reclaim_reent+0x2c>
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	f000 fb46 	bl	800ed74 <_free_r>
 800e6e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e6ea:	b111      	cbz	r1, 800e6f2 <_reclaim_reent+0x36>
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f000 fb41 	bl	800ed74 <_free_r>
 800e6f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e6f4:	b111      	cbz	r1, 800e6fc <_reclaim_reent+0x40>
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f000 fb3c 	bl	800ed74 <_free_r>
 800e6fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e6fe:	b111      	cbz	r1, 800e706 <_reclaim_reent+0x4a>
 800e700:	4620      	mov	r0, r4
 800e702:	f000 fb37 	bl	800ed74 <_free_r>
 800e706:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e708:	b111      	cbz	r1, 800e710 <_reclaim_reent+0x54>
 800e70a:	4620      	mov	r0, r4
 800e70c:	f000 fb32 	bl	800ed74 <_free_r>
 800e710:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e712:	b111      	cbz	r1, 800e71a <_reclaim_reent+0x5e>
 800e714:	4620      	mov	r0, r4
 800e716:	f000 fb2d 	bl	800ed74 <_free_r>
 800e71a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e71c:	b111      	cbz	r1, 800e724 <_reclaim_reent+0x68>
 800e71e:	4620      	mov	r0, r4
 800e720:	f000 fb28 	bl	800ed74 <_free_r>
 800e724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e726:	b111      	cbz	r1, 800e72e <_reclaim_reent+0x72>
 800e728:	4620      	mov	r0, r4
 800e72a:	f000 fb23 	bl	800ed74 <_free_r>
 800e72e:	69a3      	ldr	r3, [r4, #24]
 800e730:	b1e3      	cbz	r3, 800e76c <_reclaim_reent+0xb0>
 800e732:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e734:	4620      	mov	r0, r4
 800e736:	4798      	blx	r3
 800e738:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e73a:	b1b9      	cbz	r1, 800e76c <_reclaim_reent+0xb0>
 800e73c:	4620      	mov	r0, r4
 800e73e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e742:	f7ff bfad 	b.w	800e6a0 <cleanup_glue>
 800e746:	5949      	ldr	r1, [r1, r5]
 800e748:	b941      	cbnz	r1, 800e75c <_reclaim_reent+0xa0>
 800e74a:	3504      	adds	r5, #4
 800e74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e74e:	2d80      	cmp	r5, #128	; 0x80
 800e750:	68d9      	ldr	r1, [r3, #12]
 800e752:	d1f8      	bne.n	800e746 <_reclaim_reent+0x8a>
 800e754:	4620      	mov	r0, r4
 800e756:	f000 fb0d 	bl	800ed74 <_free_r>
 800e75a:	e7ba      	b.n	800e6d2 <_reclaim_reent+0x16>
 800e75c:	680e      	ldr	r6, [r1, #0]
 800e75e:	4620      	mov	r0, r4
 800e760:	f000 fb08 	bl	800ed74 <_free_r>
 800e764:	4631      	mov	r1, r6
 800e766:	e7ef      	b.n	800e748 <_reclaim_reent+0x8c>
 800e768:	2500      	movs	r5, #0
 800e76a:	e7ef      	b.n	800e74c <_reclaim_reent+0x90>
 800e76c:	bd70      	pop	{r4, r5, r6, pc}
 800e76e:	bf00      	nop
 800e770:	24000018 	.word	0x24000018

0800e774 <_sbrk_r>:
 800e774:	b538      	push	{r3, r4, r5, lr}
 800e776:	4d06      	ldr	r5, [pc, #24]	; (800e790 <_sbrk_r+0x1c>)
 800e778:	2300      	movs	r3, #0
 800e77a:	4604      	mov	r4, r0
 800e77c:	4608      	mov	r0, r1
 800e77e:	602b      	str	r3, [r5, #0]
 800e780:	f7f3 fa68 	bl	8001c54 <_sbrk>
 800e784:	1c43      	adds	r3, r0, #1
 800e786:	d102      	bne.n	800e78e <_sbrk_r+0x1a>
 800e788:	682b      	ldr	r3, [r5, #0]
 800e78a:	b103      	cbz	r3, 800e78e <_sbrk_r+0x1a>
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	bd38      	pop	{r3, r4, r5, pc}
 800e790:	2400d2a8 	.word	0x2400d2a8

0800e794 <siprintf>:
 800e794:	b40e      	push	{r1, r2, r3}
 800e796:	b500      	push	{lr}
 800e798:	b09c      	sub	sp, #112	; 0x70
 800e79a:	ab1d      	add	r3, sp, #116	; 0x74
 800e79c:	9002      	str	r0, [sp, #8]
 800e79e:	9006      	str	r0, [sp, #24]
 800e7a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7a4:	4809      	ldr	r0, [pc, #36]	; (800e7cc <siprintf+0x38>)
 800e7a6:	9107      	str	r1, [sp, #28]
 800e7a8:	9104      	str	r1, [sp, #16]
 800e7aa:	4909      	ldr	r1, [pc, #36]	; (800e7d0 <siprintf+0x3c>)
 800e7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7b0:	9105      	str	r1, [sp, #20]
 800e7b2:	6800      	ldr	r0, [r0, #0]
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	a902      	add	r1, sp, #8
 800e7b8:	f000 fbb2 	bl	800ef20 <_svfiprintf_r>
 800e7bc:	9b02      	ldr	r3, [sp, #8]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	701a      	strb	r2, [r3, #0]
 800e7c2:	b01c      	add	sp, #112	; 0x70
 800e7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7c8:	b003      	add	sp, #12
 800e7ca:	4770      	bx	lr
 800e7cc:	24000018 	.word	0x24000018
 800e7d0:	ffff0208 	.word	0xffff0208

0800e7d4 <siscanf>:
 800e7d4:	b40e      	push	{r1, r2, r3}
 800e7d6:	b510      	push	{r4, lr}
 800e7d8:	b09f      	sub	sp, #124	; 0x7c
 800e7da:	ac21      	add	r4, sp, #132	; 0x84
 800e7dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e7e0:	f854 2b04 	ldr.w	r2, [r4], #4
 800e7e4:	9201      	str	r2, [sp, #4]
 800e7e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e7ea:	9004      	str	r0, [sp, #16]
 800e7ec:	9008      	str	r0, [sp, #32]
 800e7ee:	f7f1 fd77 	bl	80002e0 <strlen>
 800e7f2:	4b0c      	ldr	r3, [pc, #48]	; (800e824 <siscanf+0x50>)
 800e7f4:	9005      	str	r0, [sp, #20]
 800e7f6:	9009      	str	r0, [sp, #36]	; 0x24
 800e7f8:	930d      	str	r3, [sp, #52]	; 0x34
 800e7fa:	480b      	ldr	r0, [pc, #44]	; (800e828 <siscanf+0x54>)
 800e7fc:	9a01      	ldr	r2, [sp, #4]
 800e7fe:	6800      	ldr	r0, [r0, #0]
 800e800:	9403      	str	r4, [sp, #12]
 800e802:	2300      	movs	r3, #0
 800e804:	9311      	str	r3, [sp, #68]	; 0x44
 800e806:	9316      	str	r3, [sp, #88]	; 0x58
 800e808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e80c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e810:	a904      	add	r1, sp, #16
 800e812:	4623      	mov	r3, r4
 800e814:	f000 fcde 	bl	800f1d4 <__ssvfiscanf_r>
 800e818:	b01f      	add	sp, #124	; 0x7c
 800e81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e81e:	b003      	add	sp, #12
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	0800e84f 	.word	0x0800e84f
 800e828:	24000018 	.word	0x24000018

0800e82c <__sread>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	460c      	mov	r4, r1
 800e830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e834:	f000 ff98 	bl	800f768 <_read_r>
 800e838:	2800      	cmp	r0, #0
 800e83a:	bfab      	itete	ge
 800e83c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e83e:	89a3      	ldrhlt	r3, [r4, #12]
 800e840:	181b      	addge	r3, r3, r0
 800e842:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e846:	bfac      	ite	ge
 800e848:	6563      	strge	r3, [r4, #84]	; 0x54
 800e84a:	81a3      	strhlt	r3, [r4, #12]
 800e84c:	bd10      	pop	{r4, pc}

0800e84e <__seofread>:
 800e84e:	2000      	movs	r0, #0
 800e850:	4770      	bx	lr

0800e852 <__swrite>:
 800e852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e856:	461f      	mov	r7, r3
 800e858:	898b      	ldrh	r3, [r1, #12]
 800e85a:	05db      	lsls	r3, r3, #23
 800e85c:	4605      	mov	r5, r0
 800e85e:	460c      	mov	r4, r1
 800e860:	4616      	mov	r6, r2
 800e862:	d505      	bpl.n	800e870 <__swrite+0x1e>
 800e864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e868:	2302      	movs	r3, #2
 800e86a:	2200      	movs	r2, #0
 800e86c:	f000 f9e4 	bl	800ec38 <_lseek_r>
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e87a:	81a3      	strh	r3, [r4, #12]
 800e87c:	4632      	mov	r2, r6
 800e87e:	463b      	mov	r3, r7
 800e880:	4628      	mov	r0, r5
 800e882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e886:	f000 b87d 	b.w	800e984 <_write_r>

0800e88a <__sseek>:
 800e88a:	b510      	push	{r4, lr}
 800e88c:	460c      	mov	r4, r1
 800e88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e892:	f000 f9d1 	bl	800ec38 <_lseek_r>
 800e896:	1c43      	adds	r3, r0, #1
 800e898:	89a3      	ldrh	r3, [r4, #12]
 800e89a:	bf15      	itete	ne
 800e89c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e89e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e8a6:	81a3      	strheq	r3, [r4, #12]
 800e8a8:	bf18      	it	ne
 800e8aa:	81a3      	strhne	r3, [r4, #12]
 800e8ac:	bd10      	pop	{r4, pc}

0800e8ae <__sclose>:
 800e8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8b2:	f000 b8ef 	b.w	800ea94 <_close_r>

0800e8b6 <strncmp>:
 800e8b6:	b510      	push	{r4, lr}
 800e8b8:	b17a      	cbz	r2, 800e8da <strncmp+0x24>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	3901      	subs	r1, #1
 800e8be:	1884      	adds	r4, r0, r2
 800e8c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e8c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e8c8:	4290      	cmp	r0, r2
 800e8ca:	d101      	bne.n	800e8d0 <strncmp+0x1a>
 800e8cc:	42a3      	cmp	r3, r4
 800e8ce:	d101      	bne.n	800e8d4 <strncmp+0x1e>
 800e8d0:	1a80      	subs	r0, r0, r2
 800e8d2:	bd10      	pop	{r4, pc}
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d1f3      	bne.n	800e8c0 <strncmp+0xa>
 800e8d8:	e7fa      	b.n	800e8d0 <strncmp+0x1a>
 800e8da:	4610      	mov	r0, r2
 800e8dc:	e7f9      	b.n	800e8d2 <strncmp+0x1c>
	...

0800e8e0 <__swbuf_r>:
 800e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e2:	460e      	mov	r6, r1
 800e8e4:	4614      	mov	r4, r2
 800e8e6:	4605      	mov	r5, r0
 800e8e8:	b118      	cbz	r0, 800e8f2 <__swbuf_r+0x12>
 800e8ea:	6983      	ldr	r3, [r0, #24]
 800e8ec:	b90b      	cbnz	r3, 800e8f2 <__swbuf_r+0x12>
 800e8ee:	f7ff fa67 	bl	800ddc0 <__sinit>
 800e8f2:	4b21      	ldr	r3, [pc, #132]	; (800e978 <__swbuf_r+0x98>)
 800e8f4:	429c      	cmp	r4, r3
 800e8f6:	d12b      	bne.n	800e950 <__swbuf_r+0x70>
 800e8f8:	686c      	ldr	r4, [r5, #4]
 800e8fa:	69a3      	ldr	r3, [r4, #24]
 800e8fc:	60a3      	str	r3, [r4, #8]
 800e8fe:	89a3      	ldrh	r3, [r4, #12]
 800e900:	071a      	lsls	r2, r3, #28
 800e902:	d52f      	bpl.n	800e964 <__swbuf_r+0x84>
 800e904:	6923      	ldr	r3, [r4, #16]
 800e906:	b36b      	cbz	r3, 800e964 <__swbuf_r+0x84>
 800e908:	6923      	ldr	r3, [r4, #16]
 800e90a:	6820      	ldr	r0, [r4, #0]
 800e90c:	1ac0      	subs	r0, r0, r3
 800e90e:	6963      	ldr	r3, [r4, #20]
 800e910:	b2f6      	uxtb	r6, r6
 800e912:	4283      	cmp	r3, r0
 800e914:	4637      	mov	r7, r6
 800e916:	dc04      	bgt.n	800e922 <__swbuf_r+0x42>
 800e918:	4621      	mov	r1, r4
 800e91a:	4628      	mov	r0, r5
 800e91c:	f000 f950 	bl	800ebc0 <_fflush_r>
 800e920:	bb30      	cbnz	r0, 800e970 <__swbuf_r+0x90>
 800e922:	68a3      	ldr	r3, [r4, #8]
 800e924:	3b01      	subs	r3, #1
 800e926:	60a3      	str	r3, [r4, #8]
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	1c5a      	adds	r2, r3, #1
 800e92c:	6022      	str	r2, [r4, #0]
 800e92e:	701e      	strb	r6, [r3, #0]
 800e930:	6963      	ldr	r3, [r4, #20]
 800e932:	3001      	adds	r0, #1
 800e934:	4283      	cmp	r3, r0
 800e936:	d004      	beq.n	800e942 <__swbuf_r+0x62>
 800e938:	89a3      	ldrh	r3, [r4, #12]
 800e93a:	07db      	lsls	r3, r3, #31
 800e93c:	d506      	bpl.n	800e94c <__swbuf_r+0x6c>
 800e93e:	2e0a      	cmp	r6, #10
 800e940:	d104      	bne.n	800e94c <__swbuf_r+0x6c>
 800e942:	4621      	mov	r1, r4
 800e944:	4628      	mov	r0, r5
 800e946:	f000 f93b 	bl	800ebc0 <_fflush_r>
 800e94a:	b988      	cbnz	r0, 800e970 <__swbuf_r+0x90>
 800e94c:	4638      	mov	r0, r7
 800e94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e950:	4b0a      	ldr	r3, [pc, #40]	; (800e97c <__swbuf_r+0x9c>)
 800e952:	429c      	cmp	r4, r3
 800e954:	d101      	bne.n	800e95a <__swbuf_r+0x7a>
 800e956:	68ac      	ldr	r4, [r5, #8]
 800e958:	e7cf      	b.n	800e8fa <__swbuf_r+0x1a>
 800e95a:	4b09      	ldr	r3, [pc, #36]	; (800e980 <__swbuf_r+0xa0>)
 800e95c:	429c      	cmp	r4, r3
 800e95e:	bf08      	it	eq
 800e960:	68ec      	ldreq	r4, [r5, #12]
 800e962:	e7ca      	b.n	800e8fa <__swbuf_r+0x1a>
 800e964:	4621      	mov	r1, r4
 800e966:	4628      	mov	r0, r5
 800e968:	f000 f81e 	bl	800e9a8 <__swsetup_r>
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d0cb      	beq.n	800e908 <__swbuf_r+0x28>
 800e970:	f04f 37ff 	mov.w	r7, #4294967295
 800e974:	e7ea      	b.n	800e94c <__swbuf_r+0x6c>
 800e976:	bf00      	nop
 800e978:	0800ff94 	.word	0x0800ff94
 800e97c:	0800ffb4 	.word	0x0800ffb4
 800e980:	0800ff74 	.word	0x0800ff74

0800e984 <_write_r>:
 800e984:	b538      	push	{r3, r4, r5, lr}
 800e986:	4d07      	ldr	r5, [pc, #28]	; (800e9a4 <_write_r+0x20>)
 800e988:	4604      	mov	r4, r0
 800e98a:	4608      	mov	r0, r1
 800e98c:	4611      	mov	r1, r2
 800e98e:	2200      	movs	r2, #0
 800e990:	602a      	str	r2, [r5, #0]
 800e992:	461a      	mov	r2, r3
 800e994:	f7f3 f90d 	bl	8001bb2 <_write>
 800e998:	1c43      	adds	r3, r0, #1
 800e99a:	d102      	bne.n	800e9a2 <_write_r+0x1e>
 800e99c:	682b      	ldr	r3, [r5, #0]
 800e99e:	b103      	cbz	r3, 800e9a2 <_write_r+0x1e>
 800e9a0:	6023      	str	r3, [r4, #0]
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}
 800e9a4:	2400d2a8 	.word	0x2400d2a8

0800e9a8 <__swsetup_r>:
 800e9a8:	4b32      	ldr	r3, [pc, #200]	; (800ea74 <__swsetup_r+0xcc>)
 800e9aa:	b570      	push	{r4, r5, r6, lr}
 800e9ac:	681d      	ldr	r5, [r3, #0]
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	b125      	cbz	r5, 800e9be <__swsetup_r+0x16>
 800e9b4:	69ab      	ldr	r3, [r5, #24]
 800e9b6:	b913      	cbnz	r3, 800e9be <__swsetup_r+0x16>
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	f7ff fa01 	bl	800ddc0 <__sinit>
 800e9be:	4b2e      	ldr	r3, [pc, #184]	; (800ea78 <__swsetup_r+0xd0>)
 800e9c0:	429c      	cmp	r4, r3
 800e9c2:	d10f      	bne.n	800e9e4 <__swsetup_r+0x3c>
 800e9c4:	686c      	ldr	r4, [r5, #4]
 800e9c6:	89a3      	ldrh	r3, [r4, #12]
 800e9c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9cc:	0719      	lsls	r1, r3, #28
 800e9ce:	d42c      	bmi.n	800ea2a <__swsetup_r+0x82>
 800e9d0:	06dd      	lsls	r5, r3, #27
 800e9d2:	d411      	bmi.n	800e9f8 <__swsetup_r+0x50>
 800e9d4:	2309      	movs	r3, #9
 800e9d6:	6033      	str	r3, [r6, #0]
 800e9d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e9dc:	81a3      	strh	r3, [r4, #12]
 800e9de:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e2:	e03e      	b.n	800ea62 <__swsetup_r+0xba>
 800e9e4:	4b25      	ldr	r3, [pc, #148]	; (800ea7c <__swsetup_r+0xd4>)
 800e9e6:	429c      	cmp	r4, r3
 800e9e8:	d101      	bne.n	800e9ee <__swsetup_r+0x46>
 800e9ea:	68ac      	ldr	r4, [r5, #8]
 800e9ec:	e7eb      	b.n	800e9c6 <__swsetup_r+0x1e>
 800e9ee:	4b24      	ldr	r3, [pc, #144]	; (800ea80 <__swsetup_r+0xd8>)
 800e9f0:	429c      	cmp	r4, r3
 800e9f2:	bf08      	it	eq
 800e9f4:	68ec      	ldreq	r4, [r5, #12]
 800e9f6:	e7e6      	b.n	800e9c6 <__swsetup_r+0x1e>
 800e9f8:	0758      	lsls	r0, r3, #29
 800e9fa:	d512      	bpl.n	800ea22 <__swsetup_r+0x7a>
 800e9fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9fe:	b141      	cbz	r1, 800ea12 <__swsetup_r+0x6a>
 800ea00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea04:	4299      	cmp	r1, r3
 800ea06:	d002      	beq.n	800ea0e <__swsetup_r+0x66>
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f000 f9b3 	bl	800ed74 <_free_r>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	6363      	str	r3, [r4, #52]	; 0x34
 800ea12:	89a3      	ldrh	r3, [r4, #12]
 800ea14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea18:	81a3      	strh	r3, [r4, #12]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	6063      	str	r3, [r4, #4]
 800ea1e:	6923      	ldr	r3, [r4, #16]
 800ea20:	6023      	str	r3, [r4, #0]
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f043 0308 	orr.w	r3, r3, #8
 800ea28:	81a3      	strh	r3, [r4, #12]
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	b94b      	cbnz	r3, 800ea42 <__swsetup_r+0x9a>
 800ea2e:	89a3      	ldrh	r3, [r4, #12]
 800ea30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea38:	d003      	beq.n	800ea42 <__swsetup_r+0x9a>
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f000 f933 	bl	800eca8 <__smakebuf_r>
 800ea42:	89a0      	ldrh	r0, [r4, #12]
 800ea44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea48:	f010 0301 	ands.w	r3, r0, #1
 800ea4c:	d00a      	beq.n	800ea64 <__swsetup_r+0xbc>
 800ea4e:	2300      	movs	r3, #0
 800ea50:	60a3      	str	r3, [r4, #8]
 800ea52:	6963      	ldr	r3, [r4, #20]
 800ea54:	425b      	negs	r3, r3
 800ea56:	61a3      	str	r3, [r4, #24]
 800ea58:	6923      	ldr	r3, [r4, #16]
 800ea5a:	b943      	cbnz	r3, 800ea6e <__swsetup_r+0xc6>
 800ea5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea60:	d1ba      	bne.n	800e9d8 <__swsetup_r+0x30>
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	0781      	lsls	r1, r0, #30
 800ea66:	bf58      	it	pl
 800ea68:	6963      	ldrpl	r3, [r4, #20]
 800ea6a:	60a3      	str	r3, [r4, #8]
 800ea6c:	e7f4      	b.n	800ea58 <__swsetup_r+0xb0>
 800ea6e:	2000      	movs	r0, #0
 800ea70:	e7f7      	b.n	800ea62 <__swsetup_r+0xba>
 800ea72:	bf00      	nop
 800ea74:	24000018 	.word	0x24000018
 800ea78:	0800ff94 	.word	0x0800ff94
 800ea7c:	0800ffb4 	.word	0x0800ffb4
 800ea80:	0800ff74 	.word	0x0800ff74

0800ea84 <abort>:
 800ea84:	b508      	push	{r3, lr}
 800ea86:	2006      	movs	r0, #6
 800ea88:	f000 fee0 	bl	800f84c <raise>
 800ea8c:	2001      	movs	r0, #1
 800ea8e:	f7f3 f869 	bl	8001b64 <_exit>
	...

0800ea94 <_close_r>:
 800ea94:	b538      	push	{r3, r4, r5, lr}
 800ea96:	4d06      	ldr	r5, [pc, #24]	; (800eab0 <_close_r+0x1c>)
 800ea98:	2300      	movs	r3, #0
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	4608      	mov	r0, r1
 800ea9e:	602b      	str	r3, [r5, #0]
 800eaa0:	f7f3 f8a3 	bl	8001bea <_close>
 800eaa4:	1c43      	adds	r3, r0, #1
 800eaa6:	d102      	bne.n	800eaae <_close_r+0x1a>
 800eaa8:	682b      	ldr	r3, [r5, #0]
 800eaaa:	b103      	cbz	r3, 800eaae <_close_r+0x1a>
 800eaac:	6023      	str	r3, [r4, #0]
 800eaae:	bd38      	pop	{r3, r4, r5, pc}
 800eab0:	2400d2a8 	.word	0x2400d2a8

0800eab4 <__sflush_r>:
 800eab4:	898a      	ldrh	r2, [r1, #12]
 800eab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaba:	4605      	mov	r5, r0
 800eabc:	0710      	lsls	r0, r2, #28
 800eabe:	460c      	mov	r4, r1
 800eac0:	d458      	bmi.n	800eb74 <__sflush_r+0xc0>
 800eac2:	684b      	ldr	r3, [r1, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	dc05      	bgt.n	800ead4 <__sflush_r+0x20>
 800eac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	dc02      	bgt.n	800ead4 <__sflush_r+0x20>
 800eace:	2000      	movs	r0, #0
 800ead0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ead6:	2e00      	cmp	r6, #0
 800ead8:	d0f9      	beq.n	800eace <__sflush_r+0x1a>
 800eada:	2300      	movs	r3, #0
 800eadc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eae0:	682f      	ldr	r7, [r5, #0]
 800eae2:	602b      	str	r3, [r5, #0]
 800eae4:	d032      	beq.n	800eb4c <__sflush_r+0x98>
 800eae6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eae8:	89a3      	ldrh	r3, [r4, #12]
 800eaea:	075a      	lsls	r2, r3, #29
 800eaec:	d505      	bpl.n	800eafa <__sflush_r+0x46>
 800eaee:	6863      	ldr	r3, [r4, #4]
 800eaf0:	1ac0      	subs	r0, r0, r3
 800eaf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eaf4:	b10b      	cbz	r3, 800eafa <__sflush_r+0x46>
 800eaf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eaf8:	1ac0      	subs	r0, r0, r3
 800eafa:	2300      	movs	r3, #0
 800eafc:	4602      	mov	r2, r0
 800eafe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb00:	6a21      	ldr	r1, [r4, #32]
 800eb02:	4628      	mov	r0, r5
 800eb04:	47b0      	blx	r6
 800eb06:	1c43      	adds	r3, r0, #1
 800eb08:	89a3      	ldrh	r3, [r4, #12]
 800eb0a:	d106      	bne.n	800eb1a <__sflush_r+0x66>
 800eb0c:	6829      	ldr	r1, [r5, #0]
 800eb0e:	291d      	cmp	r1, #29
 800eb10:	d82c      	bhi.n	800eb6c <__sflush_r+0xb8>
 800eb12:	4a2a      	ldr	r2, [pc, #168]	; (800ebbc <__sflush_r+0x108>)
 800eb14:	40ca      	lsrs	r2, r1
 800eb16:	07d6      	lsls	r6, r2, #31
 800eb18:	d528      	bpl.n	800eb6c <__sflush_r+0xb8>
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	6062      	str	r2, [r4, #4]
 800eb1e:	04d9      	lsls	r1, r3, #19
 800eb20:	6922      	ldr	r2, [r4, #16]
 800eb22:	6022      	str	r2, [r4, #0]
 800eb24:	d504      	bpl.n	800eb30 <__sflush_r+0x7c>
 800eb26:	1c42      	adds	r2, r0, #1
 800eb28:	d101      	bne.n	800eb2e <__sflush_r+0x7a>
 800eb2a:	682b      	ldr	r3, [r5, #0]
 800eb2c:	b903      	cbnz	r3, 800eb30 <__sflush_r+0x7c>
 800eb2e:	6560      	str	r0, [r4, #84]	; 0x54
 800eb30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb32:	602f      	str	r7, [r5, #0]
 800eb34:	2900      	cmp	r1, #0
 800eb36:	d0ca      	beq.n	800eace <__sflush_r+0x1a>
 800eb38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb3c:	4299      	cmp	r1, r3
 800eb3e:	d002      	beq.n	800eb46 <__sflush_r+0x92>
 800eb40:	4628      	mov	r0, r5
 800eb42:	f000 f917 	bl	800ed74 <_free_r>
 800eb46:	2000      	movs	r0, #0
 800eb48:	6360      	str	r0, [r4, #52]	; 0x34
 800eb4a:	e7c1      	b.n	800ead0 <__sflush_r+0x1c>
 800eb4c:	6a21      	ldr	r1, [r4, #32]
 800eb4e:	2301      	movs	r3, #1
 800eb50:	4628      	mov	r0, r5
 800eb52:	47b0      	blx	r6
 800eb54:	1c41      	adds	r1, r0, #1
 800eb56:	d1c7      	bne.n	800eae8 <__sflush_r+0x34>
 800eb58:	682b      	ldr	r3, [r5, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d0c4      	beq.n	800eae8 <__sflush_r+0x34>
 800eb5e:	2b1d      	cmp	r3, #29
 800eb60:	d001      	beq.n	800eb66 <__sflush_r+0xb2>
 800eb62:	2b16      	cmp	r3, #22
 800eb64:	d101      	bne.n	800eb6a <__sflush_r+0xb6>
 800eb66:	602f      	str	r7, [r5, #0]
 800eb68:	e7b1      	b.n	800eace <__sflush_r+0x1a>
 800eb6a:	89a3      	ldrh	r3, [r4, #12]
 800eb6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb70:	81a3      	strh	r3, [r4, #12]
 800eb72:	e7ad      	b.n	800ead0 <__sflush_r+0x1c>
 800eb74:	690f      	ldr	r7, [r1, #16]
 800eb76:	2f00      	cmp	r7, #0
 800eb78:	d0a9      	beq.n	800eace <__sflush_r+0x1a>
 800eb7a:	0793      	lsls	r3, r2, #30
 800eb7c:	680e      	ldr	r6, [r1, #0]
 800eb7e:	bf08      	it	eq
 800eb80:	694b      	ldreq	r3, [r1, #20]
 800eb82:	600f      	str	r7, [r1, #0]
 800eb84:	bf18      	it	ne
 800eb86:	2300      	movne	r3, #0
 800eb88:	eba6 0807 	sub.w	r8, r6, r7
 800eb8c:	608b      	str	r3, [r1, #8]
 800eb8e:	f1b8 0f00 	cmp.w	r8, #0
 800eb92:	dd9c      	ble.n	800eace <__sflush_r+0x1a>
 800eb94:	6a21      	ldr	r1, [r4, #32]
 800eb96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb98:	4643      	mov	r3, r8
 800eb9a:	463a      	mov	r2, r7
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	47b0      	blx	r6
 800eba0:	2800      	cmp	r0, #0
 800eba2:	dc06      	bgt.n	800ebb2 <__sflush_r+0xfe>
 800eba4:	89a3      	ldrh	r3, [r4, #12]
 800eba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebaa:	81a3      	strh	r3, [r4, #12]
 800ebac:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb0:	e78e      	b.n	800ead0 <__sflush_r+0x1c>
 800ebb2:	4407      	add	r7, r0
 800ebb4:	eba8 0800 	sub.w	r8, r8, r0
 800ebb8:	e7e9      	b.n	800eb8e <__sflush_r+0xda>
 800ebba:	bf00      	nop
 800ebbc:	20400001 	.word	0x20400001

0800ebc0 <_fflush_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	690b      	ldr	r3, [r1, #16]
 800ebc4:	4605      	mov	r5, r0
 800ebc6:	460c      	mov	r4, r1
 800ebc8:	b913      	cbnz	r3, 800ebd0 <_fflush_r+0x10>
 800ebca:	2500      	movs	r5, #0
 800ebcc:	4628      	mov	r0, r5
 800ebce:	bd38      	pop	{r3, r4, r5, pc}
 800ebd0:	b118      	cbz	r0, 800ebda <_fflush_r+0x1a>
 800ebd2:	6983      	ldr	r3, [r0, #24]
 800ebd4:	b90b      	cbnz	r3, 800ebda <_fflush_r+0x1a>
 800ebd6:	f7ff f8f3 	bl	800ddc0 <__sinit>
 800ebda:	4b14      	ldr	r3, [pc, #80]	; (800ec2c <_fflush_r+0x6c>)
 800ebdc:	429c      	cmp	r4, r3
 800ebde:	d11b      	bne.n	800ec18 <_fflush_r+0x58>
 800ebe0:	686c      	ldr	r4, [r5, #4]
 800ebe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d0ef      	beq.n	800ebca <_fflush_r+0xa>
 800ebea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ebec:	07d0      	lsls	r0, r2, #31
 800ebee:	d404      	bmi.n	800ebfa <_fflush_r+0x3a>
 800ebf0:	0599      	lsls	r1, r3, #22
 800ebf2:	d402      	bmi.n	800ebfa <_fflush_r+0x3a>
 800ebf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebf6:	f7ff f9b8 	bl	800df6a <__retarget_lock_acquire_recursive>
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	4621      	mov	r1, r4
 800ebfe:	f7ff ff59 	bl	800eab4 <__sflush_r>
 800ec02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec04:	07da      	lsls	r2, r3, #31
 800ec06:	4605      	mov	r5, r0
 800ec08:	d4e0      	bmi.n	800ebcc <_fflush_r+0xc>
 800ec0a:	89a3      	ldrh	r3, [r4, #12]
 800ec0c:	059b      	lsls	r3, r3, #22
 800ec0e:	d4dd      	bmi.n	800ebcc <_fflush_r+0xc>
 800ec10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec12:	f7ff f9ab 	bl	800df6c <__retarget_lock_release_recursive>
 800ec16:	e7d9      	b.n	800ebcc <_fflush_r+0xc>
 800ec18:	4b05      	ldr	r3, [pc, #20]	; (800ec30 <_fflush_r+0x70>)
 800ec1a:	429c      	cmp	r4, r3
 800ec1c:	d101      	bne.n	800ec22 <_fflush_r+0x62>
 800ec1e:	68ac      	ldr	r4, [r5, #8]
 800ec20:	e7df      	b.n	800ebe2 <_fflush_r+0x22>
 800ec22:	4b04      	ldr	r3, [pc, #16]	; (800ec34 <_fflush_r+0x74>)
 800ec24:	429c      	cmp	r4, r3
 800ec26:	bf08      	it	eq
 800ec28:	68ec      	ldreq	r4, [r5, #12]
 800ec2a:	e7da      	b.n	800ebe2 <_fflush_r+0x22>
 800ec2c:	0800ff94 	.word	0x0800ff94
 800ec30:	0800ffb4 	.word	0x0800ffb4
 800ec34:	0800ff74 	.word	0x0800ff74

0800ec38 <_lseek_r>:
 800ec38:	b538      	push	{r3, r4, r5, lr}
 800ec3a:	4d07      	ldr	r5, [pc, #28]	; (800ec58 <_lseek_r+0x20>)
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	4608      	mov	r0, r1
 800ec40:	4611      	mov	r1, r2
 800ec42:	2200      	movs	r2, #0
 800ec44:	602a      	str	r2, [r5, #0]
 800ec46:	461a      	mov	r2, r3
 800ec48:	f7f2 fff6 	bl	8001c38 <_lseek>
 800ec4c:	1c43      	adds	r3, r0, #1
 800ec4e:	d102      	bne.n	800ec56 <_lseek_r+0x1e>
 800ec50:	682b      	ldr	r3, [r5, #0]
 800ec52:	b103      	cbz	r3, 800ec56 <_lseek_r+0x1e>
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	2400d2a8 	.word	0x2400d2a8

0800ec5c <__swhatbuf_r>:
 800ec5c:	b570      	push	{r4, r5, r6, lr}
 800ec5e:	460e      	mov	r6, r1
 800ec60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec64:	2900      	cmp	r1, #0
 800ec66:	b096      	sub	sp, #88	; 0x58
 800ec68:	4614      	mov	r4, r2
 800ec6a:	461d      	mov	r5, r3
 800ec6c:	da08      	bge.n	800ec80 <__swhatbuf_r+0x24>
 800ec6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ec72:	2200      	movs	r2, #0
 800ec74:	602a      	str	r2, [r5, #0]
 800ec76:	061a      	lsls	r2, r3, #24
 800ec78:	d410      	bmi.n	800ec9c <__swhatbuf_r+0x40>
 800ec7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec7e:	e00e      	b.n	800ec9e <__swhatbuf_r+0x42>
 800ec80:	466a      	mov	r2, sp
 800ec82:	f000 ff31 	bl	800fae8 <_fstat_r>
 800ec86:	2800      	cmp	r0, #0
 800ec88:	dbf1      	blt.n	800ec6e <__swhatbuf_r+0x12>
 800ec8a:	9a01      	ldr	r2, [sp, #4]
 800ec8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec94:	425a      	negs	r2, r3
 800ec96:	415a      	adcs	r2, r3
 800ec98:	602a      	str	r2, [r5, #0]
 800ec9a:	e7ee      	b.n	800ec7a <__swhatbuf_r+0x1e>
 800ec9c:	2340      	movs	r3, #64	; 0x40
 800ec9e:	2000      	movs	r0, #0
 800eca0:	6023      	str	r3, [r4, #0]
 800eca2:	b016      	add	sp, #88	; 0x58
 800eca4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eca8 <__smakebuf_r>:
 800eca8:	898b      	ldrh	r3, [r1, #12]
 800ecaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ecac:	079d      	lsls	r5, r3, #30
 800ecae:	4606      	mov	r6, r0
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	d507      	bpl.n	800ecc4 <__smakebuf_r+0x1c>
 800ecb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	6123      	str	r3, [r4, #16]
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	6163      	str	r3, [r4, #20]
 800ecc0:	b002      	add	sp, #8
 800ecc2:	bd70      	pop	{r4, r5, r6, pc}
 800ecc4:	ab01      	add	r3, sp, #4
 800ecc6:	466a      	mov	r2, sp
 800ecc8:	f7ff ffc8 	bl	800ec5c <__swhatbuf_r>
 800eccc:	9900      	ldr	r1, [sp, #0]
 800ecce:	4605      	mov	r5, r0
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f7ff f983 	bl	800dfdc <_malloc_r>
 800ecd6:	b948      	cbnz	r0, 800ecec <__smakebuf_r+0x44>
 800ecd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecdc:	059a      	lsls	r2, r3, #22
 800ecde:	d4ef      	bmi.n	800ecc0 <__smakebuf_r+0x18>
 800ece0:	f023 0303 	bic.w	r3, r3, #3
 800ece4:	f043 0302 	orr.w	r3, r3, #2
 800ece8:	81a3      	strh	r3, [r4, #12]
 800ecea:	e7e3      	b.n	800ecb4 <__smakebuf_r+0xc>
 800ecec:	4b0d      	ldr	r3, [pc, #52]	; (800ed24 <__smakebuf_r+0x7c>)
 800ecee:	62b3      	str	r3, [r6, #40]	; 0x28
 800ecf0:	89a3      	ldrh	r3, [r4, #12]
 800ecf2:	6020      	str	r0, [r4, #0]
 800ecf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecf8:	81a3      	strh	r3, [r4, #12]
 800ecfa:	9b00      	ldr	r3, [sp, #0]
 800ecfc:	6163      	str	r3, [r4, #20]
 800ecfe:	9b01      	ldr	r3, [sp, #4]
 800ed00:	6120      	str	r0, [r4, #16]
 800ed02:	b15b      	cbz	r3, 800ed1c <__smakebuf_r+0x74>
 800ed04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed08:	4630      	mov	r0, r6
 800ed0a:	f000 feff 	bl	800fb0c <_isatty_r>
 800ed0e:	b128      	cbz	r0, 800ed1c <__smakebuf_r+0x74>
 800ed10:	89a3      	ldrh	r3, [r4, #12]
 800ed12:	f023 0303 	bic.w	r3, r3, #3
 800ed16:	f043 0301 	orr.w	r3, r3, #1
 800ed1a:	81a3      	strh	r3, [r4, #12]
 800ed1c:	89a0      	ldrh	r0, [r4, #12]
 800ed1e:	4305      	orrs	r5, r0
 800ed20:	81a5      	strh	r5, [r4, #12]
 800ed22:	e7cd      	b.n	800ecc0 <__smakebuf_r+0x18>
 800ed24:	0800dd59 	.word	0x0800dd59

0800ed28 <memmove>:
 800ed28:	4288      	cmp	r0, r1
 800ed2a:	b510      	push	{r4, lr}
 800ed2c:	eb01 0402 	add.w	r4, r1, r2
 800ed30:	d902      	bls.n	800ed38 <memmove+0x10>
 800ed32:	4284      	cmp	r4, r0
 800ed34:	4623      	mov	r3, r4
 800ed36:	d807      	bhi.n	800ed48 <memmove+0x20>
 800ed38:	1e43      	subs	r3, r0, #1
 800ed3a:	42a1      	cmp	r1, r4
 800ed3c:	d008      	beq.n	800ed50 <memmove+0x28>
 800ed3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed46:	e7f8      	b.n	800ed3a <memmove+0x12>
 800ed48:	4402      	add	r2, r0
 800ed4a:	4601      	mov	r1, r0
 800ed4c:	428a      	cmp	r2, r1
 800ed4e:	d100      	bne.n	800ed52 <memmove+0x2a>
 800ed50:	bd10      	pop	{r4, pc}
 800ed52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed5a:	e7f7      	b.n	800ed4c <memmove+0x24>

0800ed5c <__malloc_lock>:
 800ed5c:	4801      	ldr	r0, [pc, #4]	; (800ed64 <__malloc_lock+0x8>)
 800ed5e:	f7ff b904 	b.w	800df6a <__retarget_lock_acquire_recursive>
 800ed62:	bf00      	nop
 800ed64:	2400d29c 	.word	0x2400d29c

0800ed68 <__malloc_unlock>:
 800ed68:	4801      	ldr	r0, [pc, #4]	; (800ed70 <__malloc_unlock+0x8>)
 800ed6a:	f7ff b8ff 	b.w	800df6c <__retarget_lock_release_recursive>
 800ed6e:	bf00      	nop
 800ed70:	2400d29c 	.word	0x2400d29c

0800ed74 <_free_r>:
 800ed74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed76:	2900      	cmp	r1, #0
 800ed78:	d044      	beq.n	800ee04 <_free_r+0x90>
 800ed7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed7e:	9001      	str	r0, [sp, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f1a1 0404 	sub.w	r4, r1, #4
 800ed86:	bfb8      	it	lt
 800ed88:	18e4      	addlt	r4, r4, r3
 800ed8a:	f7ff ffe7 	bl	800ed5c <__malloc_lock>
 800ed8e:	4a1e      	ldr	r2, [pc, #120]	; (800ee08 <_free_r+0x94>)
 800ed90:	9801      	ldr	r0, [sp, #4]
 800ed92:	6813      	ldr	r3, [r2, #0]
 800ed94:	b933      	cbnz	r3, 800eda4 <_free_r+0x30>
 800ed96:	6063      	str	r3, [r4, #4]
 800ed98:	6014      	str	r4, [r2, #0]
 800ed9a:	b003      	add	sp, #12
 800ed9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eda0:	f7ff bfe2 	b.w	800ed68 <__malloc_unlock>
 800eda4:	42a3      	cmp	r3, r4
 800eda6:	d908      	bls.n	800edba <_free_r+0x46>
 800eda8:	6825      	ldr	r5, [r4, #0]
 800edaa:	1961      	adds	r1, r4, r5
 800edac:	428b      	cmp	r3, r1
 800edae:	bf01      	itttt	eq
 800edb0:	6819      	ldreq	r1, [r3, #0]
 800edb2:	685b      	ldreq	r3, [r3, #4]
 800edb4:	1949      	addeq	r1, r1, r5
 800edb6:	6021      	streq	r1, [r4, #0]
 800edb8:	e7ed      	b.n	800ed96 <_free_r+0x22>
 800edba:	461a      	mov	r2, r3
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	b10b      	cbz	r3, 800edc4 <_free_r+0x50>
 800edc0:	42a3      	cmp	r3, r4
 800edc2:	d9fa      	bls.n	800edba <_free_r+0x46>
 800edc4:	6811      	ldr	r1, [r2, #0]
 800edc6:	1855      	adds	r5, r2, r1
 800edc8:	42a5      	cmp	r5, r4
 800edca:	d10b      	bne.n	800ede4 <_free_r+0x70>
 800edcc:	6824      	ldr	r4, [r4, #0]
 800edce:	4421      	add	r1, r4
 800edd0:	1854      	adds	r4, r2, r1
 800edd2:	42a3      	cmp	r3, r4
 800edd4:	6011      	str	r1, [r2, #0]
 800edd6:	d1e0      	bne.n	800ed9a <_free_r+0x26>
 800edd8:	681c      	ldr	r4, [r3, #0]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	6053      	str	r3, [r2, #4]
 800edde:	4421      	add	r1, r4
 800ede0:	6011      	str	r1, [r2, #0]
 800ede2:	e7da      	b.n	800ed9a <_free_r+0x26>
 800ede4:	d902      	bls.n	800edec <_free_r+0x78>
 800ede6:	230c      	movs	r3, #12
 800ede8:	6003      	str	r3, [r0, #0]
 800edea:	e7d6      	b.n	800ed9a <_free_r+0x26>
 800edec:	6825      	ldr	r5, [r4, #0]
 800edee:	1961      	adds	r1, r4, r5
 800edf0:	428b      	cmp	r3, r1
 800edf2:	bf04      	itt	eq
 800edf4:	6819      	ldreq	r1, [r3, #0]
 800edf6:	685b      	ldreq	r3, [r3, #4]
 800edf8:	6063      	str	r3, [r4, #4]
 800edfa:	bf04      	itt	eq
 800edfc:	1949      	addeq	r1, r1, r5
 800edfe:	6021      	streq	r1, [r4, #0]
 800ee00:	6054      	str	r4, [r2, #4]
 800ee02:	e7ca      	b.n	800ed9a <_free_r+0x26>
 800ee04:	b003      	add	sp, #12
 800ee06:	bd30      	pop	{r4, r5, pc}
 800ee08:	2400d2a0 	.word	0x2400d2a0

0800ee0c <_realloc_r>:
 800ee0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee10:	4680      	mov	r8, r0
 800ee12:	4614      	mov	r4, r2
 800ee14:	460e      	mov	r6, r1
 800ee16:	b921      	cbnz	r1, 800ee22 <_realloc_r+0x16>
 800ee18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	f7ff b8dd 	b.w	800dfdc <_malloc_r>
 800ee22:	b92a      	cbnz	r2, 800ee30 <_realloc_r+0x24>
 800ee24:	f7ff ffa6 	bl	800ed74 <_free_r>
 800ee28:	4625      	mov	r5, r4
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee30:	f000 fe7c 	bl	800fb2c <_malloc_usable_size_r>
 800ee34:	4284      	cmp	r4, r0
 800ee36:	4607      	mov	r7, r0
 800ee38:	d802      	bhi.n	800ee40 <_realloc_r+0x34>
 800ee3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee3e:	d812      	bhi.n	800ee66 <_realloc_r+0x5a>
 800ee40:	4621      	mov	r1, r4
 800ee42:	4640      	mov	r0, r8
 800ee44:	f7ff f8ca 	bl	800dfdc <_malloc_r>
 800ee48:	4605      	mov	r5, r0
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d0ed      	beq.n	800ee2a <_realloc_r+0x1e>
 800ee4e:	42bc      	cmp	r4, r7
 800ee50:	4622      	mov	r2, r4
 800ee52:	4631      	mov	r1, r6
 800ee54:	bf28      	it	cs
 800ee56:	463a      	movcs	r2, r7
 800ee58:	f7ff f889 	bl	800df6e <memcpy>
 800ee5c:	4631      	mov	r1, r6
 800ee5e:	4640      	mov	r0, r8
 800ee60:	f7ff ff88 	bl	800ed74 <_free_r>
 800ee64:	e7e1      	b.n	800ee2a <_realloc_r+0x1e>
 800ee66:	4635      	mov	r5, r6
 800ee68:	e7df      	b.n	800ee2a <_realloc_r+0x1e>

0800ee6a <__ssputs_r>:
 800ee6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee6e:	688e      	ldr	r6, [r1, #8]
 800ee70:	429e      	cmp	r6, r3
 800ee72:	4682      	mov	sl, r0
 800ee74:	460c      	mov	r4, r1
 800ee76:	4690      	mov	r8, r2
 800ee78:	461f      	mov	r7, r3
 800ee7a:	d838      	bhi.n	800eeee <__ssputs_r+0x84>
 800ee7c:	898a      	ldrh	r2, [r1, #12]
 800ee7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee82:	d032      	beq.n	800eeea <__ssputs_r+0x80>
 800ee84:	6825      	ldr	r5, [r4, #0]
 800ee86:	6909      	ldr	r1, [r1, #16]
 800ee88:	eba5 0901 	sub.w	r9, r5, r1
 800ee8c:	6965      	ldr	r5, [r4, #20]
 800ee8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee96:	3301      	adds	r3, #1
 800ee98:	444b      	add	r3, r9
 800ee9a:	106d      	asrs	r5, r5, #1
 800ee9c:	429d      	cmp	r5, r3
 800ee9e:	bf38      	it	cc
 800eea0:	461d      	movcc	r5, r3
 800eea2:	0553      	lsls	r3, r2, #21
 800eea4:	d531      	bpl.n	800ef0a <__ssputs_r+0xa0>
 800eea6:	4629      	mov	r1, r5
 800eea8:	f7ff f898 	bl	800dfdc <_malloc_r>
 800eeac:	4606      	mov	r6, r0
 800eeae:	b950      	cbnz	r0, 800eec6 <__ssputs_r+0x5c>
 800eeb0:	230c      	movs	r3, #12
 800eeb2:	f8ca 3000 	str.w	r3, [sl]
 800eeb6:	89a3      	ldrh	r3, [r4, #12]
 800eeb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eebc:	81a3      	strh	r3, [r4, #12]
 800eebe:	f04f 30ff 	mov.w	r0, #4294967295
 800eec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec6:	6921      	ldr	r1, [r4, #16]
 800eec8:	464a      	mov	r2, r9
 800eeca:	f7ff f850 	bl	800df6e <memcpy>
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eed8:	81a3      	strh	r3, [r4, #12]
 800eeda:	6126      	str	r6, [r4, #16]
 800eedc:	6165      	str	r5, [r4, #20]
 800eede:	444e      	add	r6, r9
 800eee0:	eba5 0509 	sub.w	r5, r5, r9
 800eee4:	6026      	str	r6, [r4, #0]
 800eee6:	60a5      	str	r5, [r4, #8]
 800eee8:	463e      	mov	r6, r7
 800eeea:	42be      	cmp	r6, r7
 800eeec:	d900      	bls.n	800eef0 <__ssputs_r+0x86>
 800eeee:	463e      	mov	r6, r7
 800eef0:	6820      	ldr	r0, [r4, #0]
 800eef2:	4632      	mov	r2, r6
 800eef4:	4641      	mov	r1, r8
 800eef6:	f7ff ff17 	bl	800ed28 <memmove>
 800eefa:	68a3      	ldr	r3, [r4, #8]
 800eefc:	1b9b      	subs	r3, r3, r6
 800eefe:	60a3      	str	r3, [r4, #8]
 800ef00:	6823      	ldr	r3, [r4, #0]
 800ef02:	4433      	add	r3, r6
 800ef04:	6023      	str	r3, [r4, #0]
 800ef06:	2000      	movs	r0, #0
 800ef08:	e7db      	b.n	800eec2 <__ssputs_r+0x58>
 800ef0a:	462a      	mov	r2, r5
 800ef0c:	f7ff ff7e 	bl	800ee0c <_realloc_r>
 800ef10:	4606      	mov	r6, r0
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d1e1      	bne.n	800eeda <__ssputs_r+0x70>
 800ef16:	6921      	ldr	r1, [r4, #16]
 800ef18:	4650      	mov	r0, sl
 800ef1a:	f7ff ff2b 	bl	800ed74 <_free_r>
 800ef1e:	e7c7      	b.n	800eeb0 <__ssputs_r+0x46>

0800ef20 <_svfiprintf_r>:
 800ef20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef24:	4698      	mov	r8, r3
 800ef26:	898b      	ldrh	r3, [r1, #12]
 800ef28:	061b      	lsls	r3, r3, #24
 800ef2a:	b09d      	sub	sp, #116	; 0x74
 800ef2c:	4607      	mov	r7, r0
 800ef2e:	460d      	mov	r5, r1
 800ef30:	4614      	mov	r4, r2
 800ef32:	d50e      	bpl.n	800ef52 <_svfiprintf_r+0x32>
 800ef34:	690b      	ldr	r3, [r1, #16]
 800ef36:	b963      	cbnz	r3, 800ef52 <_svfiprintf_r+0x32>
 800ef38:	2140      	movs	r1, #64	; 0x40
 800ef3a:	f7ff f84f 	bl	800dfdc <_malloc_r>
 800ef3e:	6028      	str	r0, [r5, #0]
 800ef40:	6128      	str	r0, [r5, #16]
 800ef42:	b920      	cbnz	r0, 800ef4e <_svfiprintf_r+0x2e>
 800ef44:	230c      	movs	r3, #12
 800ef46:	603b      	str	r3, [r7, #0]
 800ef48:	f04f 30ff 	mov.w	r0, #4294967295
 800ef4c:	e0d1      	b.n	800f0f2 <_svfiprintf_r+0x1d2>
 800ef4e:	2340      	movs	r3, #64	; 0x40
 800ef50:	616b      	str	r3, [r5, #20]
 800ef52:	2300      	movs	r3, #0
 800ef54:	9309      	str	r3, [sp, #36]	; 0x24
 800ef56:	2320      	movs	r3, #32
 800ef58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef60:	2330      	movs	r3, #48	; 0x30
 800ef62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f10c <_svfiprintf_r+0x1ec>
 800ef66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef6a:	f04f 0901 	mov.w	r9, #1
 800ef6e:	4623      	mov	r3, r4
 800ef70:	469a      	mov	sl, r3
 800ef72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef76:	b10a      	cbz	r2, 800ef7c <_svfiprintf_r+0x5c>
 800ef78:	2a25      	cmp	r2, #37	; 0x25
 800ef7a:	d1f9      	bne.n	800ef70 <_svfiprintf_r+0x50>
 800ef7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ef80:	d00b      	beq.n	800ef9a <_svfiprintf_r+0x7a>
 800ef82:	465b      	mov	r3, fp
 800ef84:	4622      	mov	r2, r4
 800ef86:	4629      	mov	r1, r5
 800ef88:	4638      	mov	r0, r7
 800ef8a:	f7ff ff6e 	bl	800ee6a <__ssputs_r>
 800ef8e:	3001      	adds	r0, #1
 800ef90:	f000 80aa 	beq.w	800f0e8 <_svfiprintf_r+0x1c8>
 800ef94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef96:	445a      	add	r2, fp
 800ef98:	9209      	str	r2, [sp, #36]	; 0x24
 800ef9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f000 80a2 	beq.w	800f0e8 <_svfiprintf_r+0x1c8>
 800efa4:	2300      	movs	r3, #0
 800efa6:	f04f 32ff 	mov.w	r2, #4294967295
 800efaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efae:	f10a 0a01 	add.w	sl, sl, #1
 800efb2:	9304      	str	r3, [sp, #16]
 800efb4:	9307      	str	r3, [sp, #28]
 800efb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efba:	931a      	str	r3, [sp, #104]	; 0x68
 800efbc:	4654      	mov	r4, sl
 800efbe:	2205      	movs	r2, #5
 800efc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efc4:	4851      	ldr	r0, [pc, #324]	; (800f10c <_svfiprintf_r+0x1ec>)
 800efc6:	f7f1 f993 	bl	80002f0 <memchr>
 800efca:	9a04      	ldr	r2, [sp, #16]
 800efcc:	b9d8      	cbnz	r0, 800f006 <_svfiprintf_r+0xe6>
 800efce:	06d0      	lsls	r0, r2, #27
 800efd0:	bf44      	itt	mi
 800efd2:	2320      	movmi	r3, #32
 800efd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efd8:	0711      	lsls	r1, r2, #28
 800efda:	bf44      	itt	mi
 800efdc:	232b      	movmi	r3, #43	; 0x2b
 800efde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efe2:	f89a 3000 	ldrb.w	r3, [sl]
 800efe6:	2b2a      	cmp	r3, #42	; 0x2a
 800efe8:	d015      	beq.n	800f016 <_svfiprintf_r+0xf6>
 800efea:	9a07      	ldr	r2, [sp, #28]
 800efec:	4654      	mov	r4, sl
 800efee:	2000      	movs	r0, #0
 800eff0:	f04f 0c0a 	mov.w	ip, #10
 800eff4:	4621      	mov	r1, r4
 800eff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800effa:	3b30      	subs	r3, #48	; 0x30
 800effc:	2b09      	cmp	r3, #9
 800effe:	d94e      	bls.n	800f09e <_svfiprintf_r+0x17e>
 800f000:	b1b0      	cbz	r0, 800f030 <_svfiprintf_r+0x110>
 800f002:	9207      	str	r2, [sp, #28]
 800f004:	e014      	b.n	800f030 <_svfiprintf_r+0x110>
 800f006:	eba0 0308 	sub.w	r3, r0, r8
 800f00a:	fa09 f303 	lsl.w	r3, r9, r3
 800f00e:	4313      	orrs	r3, r2
 800f010:	9304      	str	r3, [sp, #16]
 800f012:	46a2      	mov	sl, r4
 800f014:	e7d2      	b.n	800efbc <_svfiprintf_r+0x9c>
 800f016:	9b03      	ldr	r3, [sp, #12]
 800f018:	1d19      	adds	r1, r3, #4
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	9103      	str	r1, [sp, #12]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	bfbb      	ittet	lt
 800f022:	425b      	neglt	r3, r3
 800f024:	f042 0202 	orrlt.w	r2, r2, #2
 800f028:	9307      	strge	r3, [sp, #28]
 800f02a:	9307      	strlt	r3, [sp, #28]
 800f02c:	bfb8      	it	lt
 800f02e:	9204      	strlt	r2, [sp, #16]
 800f030:	7823      	ldrb	r3, [r4, #0]
 800f032:	2b2e      	cmp	r3, #46	; 0x2e
 800f034:	d10c      	bne.n	800f050 <_svfiprintf_r+0x130>
 800f036:	7863      	ldrb	r3, [r4, #1]
 800f038:	2b2a      	cmp	r3, #42	; 0x2a
 800f03a:	d135      	bne.n	800f0a8 <_svfiprintf_r+0x188>
 800f03c:	9b03      	ldr	r3, [sp, #12]
 800f03e:	1d1a      	adds	r2, r3, #4
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	9203      	str	r2, [sp, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	bfb8      	it	lt
 800f048:	f04f 33ff 	movlt.w	r3, #4294967295
 800f04c:	3402      	adds	r4, #2
 800f04e:	9305      	str	r3, [sp, #20]
 800f050:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f11c <_svfiprintf_r+0x1fc>
 800f054:	7821      	ldrb	r1, [r4, #0]
 800f056:	2203      	movs	r2, #3
 800f058:	4650      	mov	r0, sl
 800f05a:	f7f1 f949 	bl	80002f0 <memchr>
 800f05e:	b140      	cbz	r0, 800f072 <_svfiprintf_r+0x152>
 800f060:	2340      	movs	r3, #64	; 0x40
 800f062:	eba0 000a 	sub.w	r0, r0, sl
 800f066:	fa03 f000 	lsl.w	r0, r3, r0
 800f06a:	9b04      	ldr	r3, [sp, #16]
 800f06c:	4303      	orrs	r3, r0
 800f06e:	3401      	adds	r4, #1
 800f070:	9304      	str	r3, [sp, #16]
 800f072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f076:	4826      	ldr	r0, [pc, #152]	; (800f110 <_svfiprintf_r+0x1f0>)
 800f078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f07c:	2206      	movs	r2, #6
 800f07e:	f7f1 f937 	bl	80002f0 <memchr>
 800f082:	2800      	cmp	r0, #0
 800f084:	d038      	beq.n	800f0f8 <_svfiprintf_r+0x1d8>
 800f086:	4b23      	ldr	r3, [pc, #140]	; (800f114 <_svfiprintf_r+0x1f4>)
 800f088:	bb1b      	cbnz	r3, 800f0d2 <_svfiprintf_r+0x1b2>
 800f08a:	9b03      	ldr	r3, [sp, #12]
 800f08c:	3307      	adds	r3, #7
 800f08e:	f023 0307 	bic.w	r3, r3, #7
 800f092:	3308      	adds	r3, #8
 800f094:	9303      	str	r3, [sp, #12]
 800f096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f098:	4433      	add	r3, r6
 800f09a:	9309      	str	r3, [sp, #36]	; 0x24
 800f09c:	e767      	b.n	800ef6e <_svfiprintf_r+0x4e>
 800f09e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	2001      	movs	r0, #1
 800f0a6:	e7a5      	b.n	800eff4 <_svfiprintf_r+0xd4>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	3401      	adds	r4, #1
 800f0ac:	9305      	str	r3, [sp, #20]
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	f04f 0c0a 	mov.w	ip, #10
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0ba:	3a30      	subs	r2, #48	; 0x30
 800f0bc:	2a09      	cmp	r2, #9
 800f0be:	d903      	bls.n	800f0c8 <_svfiprintf_r+0x1a8>
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d0c5      	beq.n	800f050 <_svfiprintf_r+0x130>
 800f0c4:	9105      	str	r1, [sp, #20]
 800f0c6:	e7c3      	b.n	800f050 <_svfiprintf_r+0x130>
 800f0c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e7f0      	b.n	800f0b4 <_svfiprintf_r+0x194>
 800f0d2:	ab03      	add	r3, sp, #12
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	462a      	mov	r2, r5
 800f0d8:	4b0f      	ldr	r3, [pc, #60]	; (800f118 <_svfiprintf_r+0x1f8>)
 800f0da:	a904      	add	r1, sp, #16
 800f0dc:	4638      	mov	r0, r7
 800f0de:	f3af 8000 	nop.w
 800f0e2:	1c42      	adds	r2, r0, #1
 800f0e4:	4606      	mov	r6, r0
 800f0e6:	d1d6      	bne.n	800f096 <_svfiprintf_r+0x176>
 800f0e8:	89ab      	ldrh	r3, [r5, #12]
 800f0ea:	065b      	lsls	r3, r3, #25
 800f0ec:	f53f af2c 	bmi.w	800ef48 <_svfiprintf_r+0x28>
 800f0f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0f2:	b01d      	add	sp, #116	; 0x74
 800f0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f8:	ab03      	add	r3, sp, #12
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	462a      	mov	r2, r5
 800f0fe:	4b06      	ldr	r3, [pc, #24]	; (800f118 <_svfiprintf_r+0x1f8>)
 800f100:	a904      	add	r1, sp, #16
 800f102:	4638      	mov	r0, r7
 800f104:	f7ff f9a6 	bl	800e454 <_printf_i>
 800f108:	e7eb      	b.n	800f0e2 <_svfiprintf_r+0x1c2>
 800f10a:	bf00      	nop
 800f10c:	0800ffd8 	.word	0x0800ffd8
 800f110:	0800ffe2 	.word	0x0800ffe2
 800f114:	00000000 	.word	0x00000000
 800f118:	0800ee6b 	.word	0x0800ee6b
 800f11c:	0800ffde 	.word	0x0800ffde

0800f120 <_sungetc_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	1c4b      	adds	r3, r1, #1
 800f124:	4614      	mov	r4, r2
 800f126:	d103      	bne.n	800f130 <_sungetc_r+0x10>
 800f128:	f04f 35ff 	mov.w	r5, #4294967295
 800f12c:	4628      	mov	r0, r5
 800f12e:	bd38      	pop	{r3, r4, r5, pc}
 800f130:	8993      	ldrh	r3, [r2, #12]
 800f132:	f023 0320 	bic.w	r3, r3, #32
 800f136:	8193      	strh	r3, [r2, #12]
 800f138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f13a:	6852      	ldr	r2, [r2, #4]
 800f13c:	b2cd      	uxtb	r5, r1
 800f13e:	b18b      	cbz	r3, 800f164 <_sungetc_r+0x44>
 800f140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f142:	4293      	cmp	r3, r2
 800f144:	dd08      	ble.n	800f158 <_sungetc_r+0x38>
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	1e5a      	subs	r2, r3, #1
 800f14a:	6022      	str	r2, [r4, #0]
 800f14c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f150:	6863      	ldr	r3, [r4, #4]
 800f152:	3301      	adds	r3, #1
 800f154:	6063      	str	r3, [r4, #4]
 800f156:	e7e9      	b.n	800f12c <_sungetc_r+0xc>
 800f158:	4621      	mov	r1, r4
 800f15a:	f000 fc8b 	bl	800fa74 <__submore>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d0f1      	beq.n	800f146 <_sungetc_r+0x26>
 800f162:	e7e1      	b.n	800f128 <_sungetc_r+0x8>
 800f164:	6921      	ldr	r1, [r4, #16]
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	b151      	cbz	r1, 800f180 <_sungetc_r+0x60>
 800f16a:	4299      	cmp	r1, r3
 800f16c:	d208      	bcs.n	800f180 <_sungetc_r+0x60>
 800f16e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f172:	42a9      	cmp	r1, r5
 800f174:	d104      	bne.n	800f180 <_sungetc_r+0x60>
 800f176:	3b01      	subs	r3, #1
 800f178:	3201      	adds	r2, #1
 800f17a:	6023      	str	r3, [r4, #0]
 800f17c:	6062      	str	r2, [r4, #4]
 800f17e:	e7d5      	b.n	800f12c <_sungetc_r+0xc>
 800f180:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f188:	6363      	str	r3, [r4, #52]	; 0x34
 800f18a:	2303      	movs	r3, #3
 800f18c:	63a3      	str	r3, [r4, #56]	; 0x38
 800f18e:	4623      	mov	r3, r4
 800f190:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	2301      	movs	r3, #1
 800f198:	e7dc      	b.n	800f154 <_sungetc_r+0x34>

0800f19a <__ssrefill_r>:
 800f19a:	b510      	push	{r4, lr}
 800f19c:	460c      	mov	r4, r1
 800f19e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f1a0:	b169      	cbz	r1, 800f1be <__ssrefill_r+0x24>
 800f1a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1a6:	4299      	cmp	r1, r3
 800f1a8:	d001      	beq.n	800f1ae <__ssrefill_r+0x14>
 800f1aa:	f7ff fde3 	bl	800ed74 <_free_r>
 800f1ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1b0:	6063      	str	r3, [r4, #4]
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	6360      	str	r0, [r4, #52]	; 0x34
 800f1b6:	b113      	cbz	r3, 800f1be <__ssrefill_r+0x24>
 800f1b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f1ba:	6023      	str	r3, [r4, #0]
 800f1bc:	bd10      	pop	{r4, pc}
 800f1be:	6923      	ldr	r3, [r4, #16]
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	6063      	str	r3, [r4, #4]
 800f1c6:	89a3      	ldrh	r3, [r4, #12]
 800f1c8:	f043 0320 	orr.w	r3, r3, #32
 800f1cc:	81a3      	strh	r3, [r4, #12]
 800f1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d2:	e7f3      	b.n	800f1bc <__ssrefill_r+0x22>

0800f1d4 <__ssvfiscanf_r>:
 800f1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1d8:	460c      	mov	r4, r1
 800f1da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f1de:	2100      	movs	r1, #0
 800f1e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f1e4:	49a6      	ldr	r1, [pc, #664]	; (800f480 <__ssvfiscanf_r+0x2ac>)
 800f1e6:	91a0      	str	r1, [sp, #640]	; 0x280
 800f1e8:	f10d 0804 	add.w	r8, sp, #4
 800f1ec:	49a5      	ldr	r1, [pc, #660]	; (800f484 <__ssvfiscanf_r+0x2b0>)
 800f1ee:	4fa6      	ldr	r7, [pc, #664]	; (800f488 <__ssvfiscanf_r+0x2b4>)
 800f1f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f48c <__ssvfiscanf_r+0x2b8>
 800f1f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f1f8:	4606      	mov	r6, r0
 800f1fa:	91a1      	str	r1, [sp, #644]	; 0x284
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	7813      	ldrb	r3, [r2, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 815a 	beq.w	800f4ba <__ssvfiscanf_r+0x2e6>
 800f206:	5dd9      	ldrb	r1, [r3, r7]
 800f208:	f011 0108 	ands.w	r1, r1, #8
 800f20c:	f102 0501 	add.w	r5, r2, #1
 800f210:	d019      	beq.n	800f246 <__ssvfiscanf_r+0x72>
 800f212:	6863      	ldr	r3, [r4, #4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	dd0f      	ble.n	800f238 <__ssvfiscanf_r+0x64>
 800f218:	6823      	ldr	r3, [r4, #0]
 800f21a:	781a      	ldrb	r2, [r3, #0]
 800f21c:	5cba      	ldrb	r2, [r7, r2]
 800f21e:	0712      	lsls	r2, r2, #28
 800f220:	d401      	bmi.n	800f226 <__ssvfiscanf_r+0x52>
 800f222:	462a      	mov	r2, r5
 800f224:	e7eb      	b.n	800f1fe <__ssvfiscanf_r+0x2a>
 800f226:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f228:	3201      	adds	r2, #1
 800f22a:	9245      	str	r2, [sp, #276]	; 0x114
 800f22c:	6862      	ldr	r2, [r4, #4]
 800f22e:	3301      	adds	r3, #1
 800f230:	3a01      	subs	r2, #1
 800f232:	6062      	str	r2, [r4, #4]
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	e7ec      	b.n	800f212 <__ssvfiscanf_r+0x3e>
 800f238:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f23a:	4621      	mov	r1, r4
 800f23c:	4630      	mov	r0, r6
 800f23e:	4798      	blx	r3
 800f240:	2800      	cmp	r0, #0
 800f242:	d0e9      	beq.n	800f218 <__ssvfiscanf_r+0x44>
 800f244:	e7ed      	b.n	800f222 <__ssvfiscanf_r+0x4e>
 800f246:	2b25      	cmp	r3, #37	; 0x25
 800f248:	d012      	beq.n	800f270 <__ssvfiscanf_r+0x9c>
 800f24a:	469a      	mov	sl, r3
 800f24c:	6863      	ldr	r3, [r4, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f340 8091 	ble.w	800f376 <__ssvfiscanf_r+0x1a2>
 800f254:	6822      	ldr	r2, [r4, #0]
 800f256:	7813      	ldrb	r3, [r2, #0]
 800f258:	4553      	cmp	r3, sl
 800f25a:	f040 812e 	bne.w	800f4ba <__ssvfiscanf_r+0x2e6>
 800f25e:	6863      	ldr	r3, [r4, #4]
 800f260:	3b01      	subs	r3, #1
 800f262:	6063      	str	r3, [r4, #4]
 800f264:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f266:	3201      	adds	r2, #1
 800f268:	3301      	adds	r3, #1
 800f26a:	6022      	str	r2, [r4, #0]
 800f26c:	9345      	str	r3, [sp, #276]	; 0x114
 800f26e:	e7d8      	b.n	800f222 <__ssvfiscanf_r+0x4e>
 800f270:	9141      	str	r1, [sp, #260]	; 0x104
 800f272:	9143      	str	r1, [sp, #268]	; 0x10c
 800f274:	7853      	ldrb	r3, [r2, #1]
 800f276:	2b2a      	cmp	r3, #42	; 0x2a
 800f278:	bf02      	ittt	eq
 800f27a:	2310      	moveq	r3, #16
 800f27c:	1c95      	addeq	r5, r2, #2
 800f27e:	9341      	streq	r3, [sp, #260]	; 0x104
 800f280:	220a      	movs	r2, #10
 800f282:	46aa      	mov	sl, r5
 800f284:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f288:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f28c:	2b09      	cmp	r3, #9
 800f28e:	d91d      	bls.n	800f2cc <__ssvfiscanf_r+0xf8>
 800f290:	487e      	ldr	r0, [pc, #504]	; (800f48c <__ssvfiscanf_r+0x2b8>)
 800f292:	2203      	movs	r2, #3
 800f294:	f7f1 f82c 	bl	80002f0 <memchr>
 800f298:	b140      	cbz	r0, 800f2ac <__ssvfiscanf_r+0xd8>
 800f29a:	2301      	movs	r3, #1
 800f29c:	eba0 0009 	sub.w	r0, r0, r9
 800f2a0:	fa03 f000 	lsl.w	r0, r3, r0
 800f2a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f2a6:	4318      	orrs	r0, r3
 800f2a8:	9041      	str	r0, [sp, #260]	; 0x104
 800f2aa:	4655      	mov	r5, sl
 800f2ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f2b0:	2b78      	cmp	r3, #120	; 0x78
 800f2b2:	d806      	bhi.n	800f2c2 <__ssvfiscanf_r+0xee>
 800f2b4:	2b57      	cmp	r3, #87	; 0x57
 800f2b6:	d810      	bhi.n	800f2da <__ssvfiscanf_r+0x106>
 800f2b8:	2b25      	cmp	r3, #37	; 0x25
 800f2ba:	d0c6      	beq.n	800f24a <__ssvfiscanf_r+0x76>
 800f2bc:	d856      	bhi.n	800f36c <__ssvfiscanf_r+0x198>
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d064      	beq.n	800f38c <__ssvfiscanf_r+0x1b8>
 800f2c2:	2303      	movs	r3, #3
 800f2c4:	9347      	str	r3, [sp, #284]	; 0x11c
 800f2c6:	230a      	movs	r3, #10
 800f2c8:	9342      	str	r3, [sp, #264]	; 0x108
 800f2ca:	e071      	b.n	800f3b0 <__ssvfiscanf_r+0x1dc>
 800f2cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f2ce:	fb02 1103 	mla	r1, r2, r3, r1
 800f2d2:	3930      	subs	r1, #48	; 0x30
 800f2d4:	9143      	str	r1, [sp, #268]	; 0x10c
 800f2d6:	4655      	mov	r5, sl
 800f2d8:	e7d3      	b.n	800f282 <__ssvfiscanf_r+0xae>
 800f2da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f2de:	2a20      	cmp	r2, #32
 800f2e0:	d8ef      	bhi.n	800f2c2 <__ssvfiscanf_r+0xee>
 800f2e2:	a101      	add	r1, pc, #4	; (adr r1, 800f2e8 <__ssvfiscanf_r+0x114>)
 800f2e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f2e8:	0800f39b 	.word	0x0800f39b
 800f2ec:	0800f2c3 	.word	0x0800f2c3
 800f2f0:	0800f2c3 	.word	0x0800f2c3
 800f2f4:	0800f3f9 	.word	0x0800f3f9
 800f2f8:	0800f2c3 	.word	0x0800f2c3
 800f2fc:	0800f2c3 	.word	0x0800f2c3
 800f300:	0800f2c3 	.word	0x0800f2c3
 800f304:	0800f2c3 	.word	0x0800f2c3
 800f308:	0800f2c3 	.word	0x0800f2c3
 800f30c:	0800f2c3 	.word	0x0800f2c3
 800f310:	0800f2c3 	.word	0x0800f2c3
 800f314:	0800f40f 	.word	0x0800f40f
 800f318:	0800f3e5 	.word	0x0800f3e5
 800f31c:	0800f373 	.word	0x0800f373
 800f320:	0800f373 	.word	0x0800f373
 800f324:	0800f373 	.word	0x0800f373
 800f328:	0800f2c3 	.word	0x0800f2c3
 800f32c:	0800f3e9 	.word	0x0800f3e9
 800f330:	0800f2c3 	.word	0x0800f2c3
 800f334:	0800f2c3 	.word	0x0800f2c3
 800f338:	0800f2c3 	.word	0x0800f2c3
 800f33c:	0800f2c3 	.word	0x0800f2c3
 800f340:	0800f41f 	.word	0x0800f41f
 800f344:	0800f3f1 	.word	0x0800f3f1
 800f348:	0800f393 	.word	0x0800f393
 800f34c:	0800f2c3 	.word	0x0800f2c3
 800f350:	0800f2c3 	.word	0x0800f2c3
 800f354:	0800f41b 	.word	0x0800f41b
 800f358:	0800f2c3 	.word	0x0800f2c3
 800f35c:	0800f3e5 	.word	0x0800f3e5
 800f360:	0800f2c3 	.word	0x0800f2c3
 800f364:	0800f2c3 	.word	0x0800f2c3
 800f368:	0800f39b 	.word	0x0800f39b
 800f36c:	3b45      	subs	r3, #69	; 0x45
 800f36e:	2b02      	cmp	r3, #2
 800f370:	d8a7      	bhi.n	800f2c2 <__ssvfiscanf_r+0xee>
 800f372:	2305      	movs	r3, #5
 800f374:	e01b      	b.n	800f3ae <__ssvfiscanf_r+0x1da>
 800f376:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f378:	4621      	mov	r1, r4
 800f37a:	4630      	mov	r0, r6
 800f37c:	4798      	blx	r3
 800f37e:	2800      	cmp	r0, #0
 800f380:	f43f af68 	beq.w	800f254 <__ssvfiscanf_r+0x80>
 800f384:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f386:	2800      	cmp	r0, #0
 800f388:	f040 808d 	bne.w	800f4a6 <__ssvfiscanf_r+0x2d2>
 800f38c:	f04f 30ff 	mov.w	r0, #4294967295
 800f390:	e08f      	b.n	800f4b2 <__ssvfiscanf_r+0x2de>
 800f392:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f394:	f042 0220 	orr.w	r2, r2, #32
 800f398:	9241      	str	r2, [sp, #260]	; 0x104
 800f39a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f39c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3a0:	9241      	str	r2, [sp, #260]	; 0x104
 800f3a2:	2210      	movs	r2, #16
 800f3a4:	2b6f      	cmp	r3, #111	; 0x6f
 800f3a6:	9242      	str	r2, [sp, #264]	; 0x108
 800f3a8:	bf34      	ite	cc
 800f3aa:	2303      	movcc	r3, #3
 800f3ac:	2304      	movcs	r3, #4
 800f3ae:	9347      	str	r3, [sp, #284]	; 0x11c
 800f3b0:	6863      	ldr	r3, [r4, #4]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	dd42      	ble.n	800f43c <__ssvfiscanf_r+0x268>
 800f3b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f3b8:	0659      	lsls	r1, r3, #25
 800f3ba:	d404      	bmi.n	800f3c6 <__ssvfiscanf_r+0x1f2>
 800f3bc:	6823      	ldr	r3, [r4, #0]
 800f3be:	781a      	ldrb	r2, [r3, #0]
 800f3c0:	5cba      	ldrb	r2, [r7, r2]
 800f3c2:	0712      	lsls	r2, r2, #28
 800f3c4:	d441      	bmi.n	800f44a <__ssvfiscanf_r+0x276>
 800f3c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	dc50      	bgt.n	800f46e <__ssvfiscanf_r+0x29a>
 800f3cc:	466b      	mov	r3, sp
 800f3ce:	4622      	mov	r2, r4
 800f3d0:	a941      	add	r1, sp, #260	; 0x104
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	f000 f876 	bl	800f4c4 <_scanf_chars>
 800f3d8:	2801      	cmp	r0, #1
 800f3da:	d06e      	beq.n	800f4ba <__ssvfiscanf_r+0x2e6>
 800f3dc:	2802      	cmp	r0, #2
 800f3de:	f47f af20 	bne.w	800f222 <__ssvfiscanf_r+0x4e>
 800f3e2:	e7cf      	b.n	800f384 <__ssvfiscanf_r+0x1b0>
 800f3e4:	220a      	movs	r2, #10
 800f3e6:	e7dd      	b.n	800f3a4 <__ssvfiscanf_r+0x1d0>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	9342      	str	r3, [sp, #264]	; 0x108
 800f3ec:	2303      	movs	r3, #3
 800f3ee:	e7de      	b.n	800f3ae <__ssvfiscanf_r+0x1da>
 800f3f0:	2308      	movs	r3, #8
 800f3f2:	9342      	str	r3, [sp, #264]	; 0x108
 800f3f4:	2304      	movs	r3, #4
 800f3f6:	e7da      	b.n	800f3ae <__ssvfiscanf_r+0x1da>
 800f3f8:	4629      	mov	r1, r5
 800f3fa:	4640      	mov	r0, r8
 800f3fc:	f000 f9c6 	bl	800f78c <__sccl>
 800f400:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f406:	9341      	str	r3, [sp, #260]	; 0x104
 800f408:	4605      	mov	r5, r0
 800f40a:	2301      	movs	r3, #1
 800f40c:	e7cf      	b.n	800f3ae <__ssvfiscanf_r+0x1da>
 800f40e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f414:	9341      	str	r3, [sp, #260]	; 0x104
 800f416:	2300      	movs	r3, #0
 800f418:	e7c9      	b.n	800f3ae <__ssvfiscanf_r+0x1da>
 800f41a:	2302      	movs	r3, #2
 800f41c:	e7c7      	b.n	800f3ae <__ssvfiscanf_r+0x1da>
 800f41e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f420:	06c3      	lsls	r3, r0, #27
 800f422:	f53f aefe 	bmi.w	800f222 <__ssvfiscanf_r+0x4e>
 800f426:	9b00      	ldr	r3, [sp, #0]
 800f428:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f42a:	1d19      	adds	r1, r3, #4
 800f42c:	9100      	str	r1, [sp, #0]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f010 0f01 	tst.w	r0, #1
 800f434:	bf14      	ite	ne
 800f436:	801a      	strhne	r2, [r3, #0]
 800f438:	601a      	streq	r2, [r3, #0]
 800f43a:	e6f2      	b.n	800f222 <__ssvfiscanf_r+0x4e>
 800f43c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f43e:	4621      	mov	r1, r4
 800f440:	4630      	mov	r0, r6
 800f442:	4798      	blx	r3
 800f444:	2800      	cmp	r0, #0
 800f446:	d0b6      	beq.n	800f3b6 <__ssvfiscanf_r+0x1e2>
 800f448:	e79c      	b.n	800f384 <__ssvfiscanf_r+0x1b0>
 800f44a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f44c:	3201      	adds	r2, #1
 800f44e:	9245      	str	r2, [sp, #276]	; 0x114
 800f450:	6862      	ldr	r2, [r4, #4]
 800f452:	3a01      	subs	r2, #1
 800f454:	2a00      	cmp	r2, #0
 800f456:	6062      	str	r2, [r4, #4]
 800f458:	dd02      	ble.n	800f460 <__ssvfiscanf_r+0x28c>
 800f45a:	3301      	adds	r3, #1
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	e7ad      	b.n	800f3bc <__ssvfiscanf_r+0x1e8>
 800f460:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f462:	4621      	mov	r1, r4
 800f464:	4630      	mov	r0, r6
 800f466:	4798      	blx	r3
 800f468:	2800      	cmp	r0, #0
 800f46a:	d0a7      	beq.n	800f3bc <__ssvfiscanf_r+0x1e8>
 800f46c:	e78a      	b.n	800f384 <__ssvfiscanf_r+0x1b0>
 800f46e:	2b04      	cmp	r3, #4
 800f470:	dc0e      	bgt.n	800f490 <__ssvfiscanf_r+0x2bc>
 800f472:	466b      	mov	r3, sp
 800f474:	4622      	mov	r2, r4
 800f476:	a941      	add	r1, sp, #260	; 0x104
 800f478:	4630      	mov	r0, r6
 800f47a:	f000 f87d 	bl	800f578 <_scanf_i>
 800f47e:	e7ab      	b.n	800f3d8 <__ssvfiscanf_r+0x204>
 800f480:	0800f121 	.word	0x0800f121
 800f484:	0800f19b 	.word	0x0800f19b
 800f488:	0800fe71 	.word	0x0800fe71
 800f48c:	0800ffde 	.word	0x0800ffde
 800f490:	4b0b      	ldr	r3, [pc, #44]	; (800f4c0 <__ssvfiscanf_r+0x2ec>)
 800f492:	2b00      	cmp	r3, #0
 800f494:	f43f aec5 	beq.w	800f222 <__ssvfiscanf_r+0x4e>
 800f498:	466b      	mov	r3, sp
 800f49a:	4622      	mov	r2, r4
 800f49c:	a941      	add	r1, sp, #260	; 0x104
 800f49e:	4630      	mov	r0, r6
 800f4a0:	f3af 8000 	nop.w
 800f4a4:	e798      	b.n	800f3d8 <__ssvfiscanf_r+0x204>
 800f4a6:	89a3      	ldrh	r3, [r4, #12]
 800f4a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f4ac:	bf18      	it	ne
 800f4ae:	f04f 30ff 	movne.w	r0, #4294967295
 800f4b2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f4bc:	e7f9      	b.n	800f4b2 <__ssvfiscanf_r+0x2de>
 800f4be:	bf00      	nop
 800f4c0:	00000000 	.word	0x00000000

0800f4c4 <_scanf_chars>:
 800f4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4c8:	4615      	mov	r5, r2
 800f4ca:	688a      	ldr	r2, [r1, #8]
 800f4cc:	4680      	mov	r8, r0
 800f4ce:	460c      	mov	r4, r1
 800f4d0:	b932      	cbnz	r2, 800f4e0 <_scanf_chars+0x1c>
 800f4d2:	698a      	ldr	r2, [r1, #24]
 800f4d4:	2a00      	cmp	r2, #0
 800f4d6:	bf0c      	ite	eq
 800f4d8:	2201      	moveq	r2, #1
 800f4da:	f04f 32ff 	movne.w	r2, #4294967295
 800f4de:	608a      	str	r2, [r1, #8]
 800f4e0:	6822      	ldr	r2, [r4, #0]
 800f4e2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f574 <_scanf_chars+0xb0>
 800f4e6:	06d1      	lsls	r1, r2, #27
 800f4e8:	bf5f      	itttt	pl
 800f4ea:	681a      	ldrpl	r2, [r3, #0]
 800f4ec:	1d11      	addpl	r1, r2, #4
 800f4ee:	6019      	strpl	r1, [r3, #0]
 800f4f0:	6816      	ldrpl	r6, [r2, #0]
 800f4f2:	2700      	movs	r7, #0
 800f4f4:	69a0      	ldr	r0, [r4, #24]
 800f4f6:	b188      	cbz	r0, 800f51c <_scanf_chars+0x58>
 800f4f8:	2801      	cmp	r0, #1
 800f4fa:	d107      	bne.n	800f50c <_scanf_chars+0x48>
 800f4fc:	682a      	ldr	r2, [r5, #0]
 800f4fe:	7811      	ldrb	r1, [r2, #0]
 800f500:	6962      	ldr	r2, [r4, #20]
 800f502:	5c52      	ldrb	r2, [r2, r1]
 800f504:	b952      	cbnz	r2, 800f51c <_scanf_chars+0x58>
 800f506:	2f00      	cmp	r7, #0
 800f508:	d031      	beq.n	800f56e <_scanf_chars+0xaa>
 800f50a:	e022      	b.n	800f552 <_scanf_chars+0x8e>
 800f50c:	2802      	cmp	r0, #2
 800f50e:	d120      	bne.n	800f552 <_scanf_chars+0x8e>
 800f510:	682b      	ldr	r3, [r5, #0]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f518:	071b      	lsls	r3, r3, #28
 800f51a:	d41a      	bmi.n	800f552 <_scanf_chars+0x8e>
 800f51c:	6823      	ldr	r3, [r4, #0]
 800f51e:	06da      	lsls	r2, r3, #27
 800f520:	bf5e      	ittt	pl
 800f522:	682b      	ldrpl	r3, [r5, #0]
 800f524:	781b      	ldrbpl	r3, [r3, #0]
 800f526:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f52a:	682a      	ldr	r2, [r5, #0]
 800f52c:	686b      	ldr	r3, [r5, #4]
 800f52e:	3201      	adds	r2, #1
 800f530:	602a      	str	r2, [r5, #0]
 800f532:	68a2      	ldr	r2, [r4, #8]
 800f534:	3b01      	subs	r3, #1
 800f536:	3a01      	subs	r2, #1
 800f538:	606b      	str	r3, [r5, #4]
 800f53a:	3701      	adds	r7, #1
 800f53c:	60a2      	str	r2, [r4, #8]
 800f53e:	b142      	cbz	r2, 800f552 <_scanf_chars+0x8e>
 800f540:	2b00      	cmp	r3, #0
 800f542:	dcd7      	bgt.n	800f4f4 <_scanf_chars+0x30>
 800f544:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f548:	4629      	mov	r1, r5
 800f54a:	4640      	mov	r0, r8
 800f54c:	4798      	blx	r3
 800f54e:	2800      	cmp	r0, #0
 800f550:	d0d0      	beq.n	800f4f4 <_scanf_chars+0x30>
 800f552:	6823      	ldr	r3, [r4, #0]
 800f554:	f013 0310 	ands.w	r3, r3, #16
 800f558:	d105      	bne.n	800f566 <_scanf_chars+0xa2>
 800f55a:	68e2      	ldr	r2, [r4, #12]
 800f55c:	3201      	adds	r2, #1
 800f55e:	60e2      	str	r2, [r4, #12]
 800f560:	69a2      	ldr	r2, [r4, #24]
 800f562:	b102      	cbz	r2, 800f566 <_scanf_chars+0xa2>
 800f564:	7033      	strb	r3, [r6, #0]
 800f566:	6923      	ldr	r3, [r4, #16]
 800f568:	443b      	add	r3, r7
 800f56a:	6123      	str	r3, [r4, #16]
 800f56c:	2000      	movs	r0, #0
 800f56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f572:	bf00      	nop
 800f574:	0800fe71 	.word	0x0800fe71

0800f578 <_scanf_i>:
 800f578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f57c:	4698      	mov	r8, r3
 800f57e:	4b76      	ldr	r3, [pc, #472]	; (800f758 <_scanf_i+0x1e0>)
 800f580:	460c      	mov	r4, r1
 800f582:	4682      	mov	sl, r0
 800f584:	4616      	mov	r6, r2
 800f586:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f58a:	b087      	sub	sp, #28
 800f58c:	ab03      	add	r3, sp, #12
 800f58e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f592:	4b72      	ldr	r3, [pc, #456]	; (800f75c <_scanf_i+0x1e4>)
 800f594:	69a1      	ldr	r1, [r4, #24]
 800f596:	4a72      	ldr	r2, [pc, #456]	; (800f760 <_scanf_i+0x1e8>)
 800f598:	2903      	cmp	r1, #3
 800f59a:	bf18      	it	ne
 800f59c:	461a      	movne	r2, r3
 800f59e:	68a3      	ldr	r3, [r4, #8]
 800f5a0:	9201      	str	r2, [sp, #4]
 800f5a2:	1e5a      	subs	r2, r3, #1
 800f5a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f5a8:	bf88      	it	hi
 800f5aa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f5ae:	4627      	mov	r7, r4
 800f5b0:	bf82      	ittt	hi
 800f5b2:	eb03 0905 	addhi.w	r9, r3, r5
 800f5b6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f5ba:	60a3      	strhi	r3, [r4, #8]
 800f5bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f5c0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f5c4:	bf98      	it	ls
 800f5c6:	f04f 0900 	movls.w	r9, #0
 800f5ca:	6023      	str	r3, [r4, #0]
 800f5cc:	463d      	mov	r5, r7
 800f5ce:	f04f 0b00 	mov.w	fp, #0
 800f5d2:	6831      	ldr	r1, [r6, #0]
 800f5d4:	ab03      	add	r3, sp, #12
 800f5d6:	7809      	ldrb	r1, [r1, #0]
 800f5d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f5dc:	2202      	movs	r2, #2
 800f5de:	f7f0 fe87 	bl	80002f0 <memchr>
 800f5e2:	b328      	cbz	r0, 800f630 <_scanf_i+0xb8>
 800f5e4:	f1bb 0f01 	cmp.w	fp, #1
 800f5e8:	d159      	bne.n	800f69e <_scanf_i+0x126>
 800f5ea:	6862      	ldr	r2, [r4, #4]
 800f5ec:	b92a      	cbnz	r2, 800f5fa <_scanf_i+0x82>
 800f5ee:	6822      	ldr	r2, [r4, #0]
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5f6:	6063      	str	r3, [r4, #4]
 800f5f8:	6022      	str	r2, [r4, #0]
 800f5fa:	6822      	ldr	r2, [r4, #0]
 800f5fc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f600:	6022      	str	r2, [r4, #0]
 800f602:	68a2      	ldr	r2, [r4, #8]
 800f604:	1e51      	subs	r1, r2, #1
 800f606:	60a1      	str	r1, [r4, #8]
 800f608:	b192      	cbz	r2, 800f630 <_scanf_i+0xb8>
 800f60a:	6832      	ldr	r2, [r6, #0]
 800f60c:	1c51      	adds	r1, r2, #1
 800f60e:	6031      	str	r1, [r6, #0]
 800f610:	7812      	ldrb	r2, [r2, #0]
 800f612:	f805 2b01 	strb.w	r2, [r5], #1
 800f616:	6872      	ldr	r2, [r6, #4]
 800f618:	3a01      	subs	r2, #1
 800f61a:	2a00      	cmp	r2, #0
 800f61c:	6072      	str	r2, [r6, #4]
 800f61e:	dc07      	bgt.n	800f630 <_scanf_i+0xb8>
 800f620:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f624:	4631      	mov	r1, r6
 800f626:	4650      	mov	r0, sl
 800f628:	4790      	blx	r2
 800f62a:	2800      	cmp	r0, #0
 800f62c:	f040 8085 	bne.w	800f73a <_scanf_i+0x1c2>
 800f630:	f10b 0b01 	add.w	fp, fp, #1
 800f634:	f1bb 0f03 	cmp.w	fp, #3
 800f638:	d1cb      	bne.n	800f5d2 <_scanf_i+0x5a>
 800f63a:	6863      	ldr	r3, [r4, #4]
 800f63c:	b90b      	cbnz	r3, 800f642 <_scanf_i+0xca>
 800f63e:	230a      	movs	r3, #10
 800f640:	6063      	str	r3, [r4, #4]
 800f642:	6863      	ldr	r3, [r4, #4]
 800f644:	4947      	ldr	r1, [pc, #284]	; (800f764 <_scanf_i+0x1ec>)
 800f646:	6960      	ldr	r0, [r4, #20]
 800f648:	1ac9      	subs	r1, r1, r3
 800f64a:	f000 f89f 	bl	800f78c <__sccl>
 800f64e:	f04f 0b00 	mov.w	fp, #0
 800f652:	68a3      	ldr	r3, [r4, #8]
 800f654:	6822      	ldr	r2, [r4, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d03d      	beq.n	800f6d6 <_scanf_i+0x15e>
 800f65a:	6831      	ldr	r1, [r6, #0]
 800f65c:	6960      	ldr	r0, [r4, #20]
 800f65e:	f891 c000 	ldrb.w	ip, [r1]
 800f662:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f666:	2800      	cmp	r0, #0
 800f668:	d035      	beq.n	800f6d6 <_scanf_i+0x15e>
 800f66a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f66e:	d124      	bne.n	800f6ba <_scanf_i+0x142>
 800f670:	0510      	lsls	r0, r2, #20
 800f672:	d522      	bpl.n	800f6ba <_scanf_i+0x142>
 800f674:	f10b 0b01 	add.w	fp, fp, #1
 800f678:	f1b9 0f00 	cmp.w	r9, #0
 800f67c:	d003      	beq.n	800f686 <_scanf_i+0x10e>
 800f67e:	3301      	adds	r3, #1
 800f680:	f109 39ff 	add.w	r9, r9, #4294967295
 800f684:	60a3      	str	r3, [r4, #8]
 800f686:	6873      	ldr	r3, [r6, #4]
 800f688:	3b01      	subs	r3, #1
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	6073      	str	r3, [r6, #4]
 800f68e:	dd1b      	ble.n	800f6c8 <_scanf_i+0x150>
 800f690:	6833      	ldr	r3, [r6, #0]
 800f692:	3301      	adds	r3, #1
 800f694:	6033      	str	r3, [r6, #0]
 800f696:	68a3      	ldr	r3, [r4, #8]
 800f698:	3b01      	subs	r3, #1
 800f69a:	60a3      	str	r3, [r4, #8]
 800f69c:	e7d9      	b.n	800f652 <_scanf_i+0xda>
 800f69e:	f1bb 0f02 	cmp.w	fp, #2
 800f6a2:	d1ae      	bne.n	800f602 <_scanf_i+0x8a>
 800f6a4:	6822      	ldr	r2, [r4, #0]
 800f6a6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f6aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f6ae:	d1bf      	bne.n	800f630 <_scanf_i+0xb8>
 800f6b0:	2310      	movs	r3, #16
 800f6b2:	6063      	str	r3, [r4, #4]
 800f6b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f6b8:	e7a2      	b.n	800f600 <_scanf_i+0x88>
 800f6ba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f6be:	6022      	str	r2, [r4, #0]
 800f6c0:	780b      	ldrb	r3, [r1, #0]
 800f6c2:	f805 3b01 	strb.w	r3, [r5], #1
 800f6c6:	e7de      	b.n	800f686 <_scanf_i+0x10e>
 800f6c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f6cc:	4631      	mov	r1, r6
 800f6ce:	4650      	mov	r0, sl
 800f6d0:	4798      	blx	r3
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d0df      	beq.n	800f696 <_scanf_i+0x11e>
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	05db      	lsls	r3, r3, #23
 800f6da:	d50d      	bpl.n	800f6f8 <_scanf_i+0x180>
 800f6dc:	42bd      	cmp	r5, r7
 800f6de:	d909      	bls.n	800f6f4 <_scanf_i+0x17c>
 800f6e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f6e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f6e8:	4632      	mov	r2, r6
 800f6ea:	4650      	mov	r0, sl
 800f6ec:	4798      	blx	r3
 800f6ee:	f105 39ff 	add.w	r9, r5, #4294967295
 800f6f2:	464d      	mov	r5, r9
 800f6f4:	42bd      	cmp	r5, r7
 800f6f6:	d02d      	beq.n	800f754 <_scanf_i+0x1dc>
 800f6f8:	6822      	ldr	r2, [r4, #0]
 800f6fa:	f012 0210 	ands.w	r2, r2, #16
 800f6fe:	d113      	bne.n	800f728 <_scanf_i+0x1b0>
 800f700:	702a      	strb	r2, [r5, #0]
 800f702:	6863      	ldr	r3, [r4, #4]
 800f704:	9e01      	ldr	r6, [sp, #4]
 800f706:	4639      	mov	r1, r7
 800f708:	4650      	mov	r0, sl
 800f70a:	47b0      	blx	r6
 800f70c:	6821      	ldr	r1, [r4, #0]
 800f70e:	f8d8 3000 	ldr.w	r3, [r8]
 800f712:	f011 0f20 	tst.w	r1, #32
 800f716:	d013      	beq.n	800f740 <_scanf_i+0x1c8>
 800f718:	1d1a      	adds	r2, r3, #4
 800f71a:	f8c8 2000 	str.w	r2, [r8]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	6018      	str	r0, [r3, #0]
 800f722:	68e3      	ldr	r3, [r4, #12]
 800f724:	3301      	adds	r3, #1
 800f726:	60e3      	str	r3, [r4, #12]
 800f728:	1bed      	subs	r5, r5, r7
 800f72a:	44ab      	add	fp, r5
 800f72c:	6925      	ldr	r5, [r4, #16]
 800f72e:	445d      	add	r5, fp
 800f730:	6125      	str	r5, [r4, #16]
 800f732:	2000      	movs	r0, #0
 800f734:	b007      	add	sp, #28
 800f736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f73a:	f04f 0b00 	mov.w	fp, #0
 800f73e:	e7ca      	b.n	800f6d6 <_scanf_i+0x15e>
 800f740:	1d1a      	adds	r2, r3, #4
 800f742:	f8c8 2000 	str.w	r2, [r8]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f011 0f01 	tst.w	r1, #1
 800f74c:	bf14      	ite	ne
 800f74e:	8018      	strhne	r0, [r3, #0]
 800f750:	6018      	streq	r0, [r3, #0]
 800f752:	e7e6      	b.n	800f722 <_scanf_i+0x1aa>
 800f754:	2001      	movs	r0, #1
 800f756:	e7ed      	b.n	800f734 <_scanf_i+0x1bc>
 800f758:	0800fd98 	.word	0x0800fd98
 800f75c:	0800fa71 	.word	0x0800fa71
 800f760:	0800f989 	.word	0x0800f989
 800f764:	08010024 	.word	0x08010024

0800f768 <_read_r>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	4d07      	ldr	r5, [pc, #28]	; (800f788 <_read_r+0x20>)
 800f76c:	4604      	mov	r4, r0
 800f76e:	4608      	mov	r0, r1
 800f770:	4611      	mov	r1, r2
 800f772:	2200      	movs	r2, #0
 800f774:	602a      	str	r2, [r5, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	f7f2 f9fe 	bl	8001b78 <_read>
 800f77c:	1c43      	adds	r3, r0, #1
 800f77e:	d102      	bne.n	800f786 <_read_r+0x1e>
 800f780:	682b      	ldr	r3, [r5, #0]
 800f782:	b103      	cbz	r3, 800f786 <_read_r+0x1e>
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	bd38      	pop	{r3, r4, r5, pc}
 800f788:	2400d2a8 	.word	0x2400d2a8

0800f78c <__sccl>:
 800f78c:	b570      	push	{r4, r5, r6, lr}
 800f78e:	780b      	ldrb	r3, [r1, #0]
 800f790:	4604      	mov	r4, r0
 800f792:	2b5e      	cmp	r3, #94	; 0x5e
 800f794:	bf0b      	itete	eq
 800f796:	784b      	ldrbeq	r3, [r1, #1]
 800f798:	1c48      	addne	r0, r1, #1
 800f79a:	1c88      	addeq	r0, r1, #2
 800f79c:	2200      	movne	r2, #0
 800f79e:	bf08      	it	eq
 800f7a0:	2201      	moveq	r2, #1
 800f7a2:	1e61      	subs	r1, r4, #1
 800f7a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f7a8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800f7ac:	42a9      	cmp	r1, r5
 800f7ae:	d1fb      	bne.n	800f7a8 <__sccl+0x1c>
 800f7b0:	b90b      	cbnz	r3, 800f7b6 <__sccl+0x2a>
 800f7b2:	3801      	subs	r0, #1
 800f7b4:	bd70      	pop	{r4, r5, r6, pc}
 800f7b6:	f082 0201 	eor.w	r2, r2, #1
 800f7ba:	54e2      	strb	r2, [r4, r3]
 800f7bc:	4605      	mov	r5, r0
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f7c4:	292d      	cmp	r1, #45	; 0x2d
 800f7c6:	d006      	beq.n	800f7d6 <__sccl+0x4a>
 800f7c8:	295d      	cmp	r1, #93	; 0x5d
 800f7ca:	d0f3      	beq.n	800f7b4 <__sccl+0x28>
 800f7cc:	b909      	cbnz	r1, 800f7d2 <__sccl+0x46>
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	e7f0      	b.n	800f7b4 <__sccl+0x28>
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	e7f1      	b.n	800f7ba <__sccl+0x2e>
 800f7d6:	786e      	ldrb	r6, [r5, #1]
 800f7d8:	2e5d      	cmp	r6, #93	; 0x5d
 800f7da:	d0fa      	beq.n	800f7d2 <__sccl+0x46>
 800f7dc:	42b3      	cmp	r3, r6
 800f7de:	dcf8      	bgt.n	800f7d2 <__sccl+0x46>
 800f7e0:	3502      	adds	r5, #2
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	3101      	adds	r1, #1
 800f7e6:	428e      	cmp	r6, r1
 800f7e8:	5462      	strb	r2, [r4, r1]
 800f7ea:	dcfb      	bgt.n	800f7e4 <__sccl+0x58>
 800f7ec:	1af1      	subs	r1, r6, r3
 800f7ee:	3901      	subs	r1, #1
 800f7f0:	1c58      	adds	r0, r3, #1
 800f7f2:	42b3      	cmp	r3, r6
 800f7f4:	bfa8      	it	ge
 800f7f6:	2100      	movge	r1, #0
 800f7f8:	1843      	adds	r3, r0, r1
 800f7fa:	e7e0      	b.n	800f7be <__sccl+0x32>

0800f7fc <_raise_r>:
 800f7fc:	291f      	cmp	r1, #31
 800f7fe:	b538      	push	{r3, r4, r5, lr}
 800f800:	4604      	mov	r4, r0
 800f802:	460d      	mov	r5, r1
 800f804:	d904      	bls.n	800f810 <_raise_r+0x14>
 800f806:	2316      	movs	r3, #22
 800f808:	6003      	str	r3, [r0, #0]
 800f80a:	f04f 30ff 	mov.w	r0, #4294967295
 800f80e:	bd38      	pop	{r3, r4, r5, pc}
 800f810:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f812:	b112      	cbz	r2, 800f81a <_raise_r+0x1e>
 800f814:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f818:	b94b      	cbnz	r3, 800f82e <_raise_r+0x32>
 800f81a:	4620      	mov	r0, r4
 800f81c:	f000 f830 	bl	800f880 <_getpid_r>
 800f820:	462a      	mov	r2, r5
 800f822:	4601      	mov	r1, r0
 800f824:	4620      	mov	r0, r4
 800f826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f82a:	f000 b817 	b.w	800f85c <_kill_r>
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d00a      	beq.n	800f848 <_raise_r+0x4c>
 800f832:	1c59      	adds	r1, r3, #1
 800f834:	d103      	bne.n	800f83e <_raise_r+0x42>
 800f836:	2316      	movs	r3, #22
 800f838:	6003      	str	r3, [r0, #0]
 800f83a:	2001      	movs	r0, #1
 800f83c:	e7e7      	b.n	800f80e <_raise_r+0x12>
 800f83e:	2400      	movs	r4, #0
 800f840:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f844:	4628      	mov	r0, r5
 800f846:	4798      	blx	r3
 800f848:	2000      	movs	r0, #0
 800f84a:	e7e0      	b.n	800f80e <_raise_r+0x12>

0800f84c <raise>:
 800f84c:	4b02      	ldr	r3, [pc, #8]	; (800f858 <raise+0xc>)
 800f84e:	4601      	mov	r1, r0
 800f850:	6818      	ldr	r0, [r3, #0]
 800f852:	f7ff bfd3 	b.w	800f7fc <_raise_r>
 800f856:	bf00      	nop
 800f858:	24000018 	.word	0x24000018

0800f85c <_kill_r>:
 800f85c:	b538      	push	{r3, r4, r5, lr}
 800f85e:	4d07      	ldr	r5, [pc, #28]	; (800f87c <_kill_r+0x20>)
 800f860:	2300      	movs	r3, #0
 800f862:	4604      	mov	r4, r0
 800f864:	4608      	mov	r0, r1
 800f866:	4611      	mov	r1, r2
 800f868:	602b      	str	r3, [r5, #0]
 800f86a:	f7f2 f96b 	bl	8001b44 <_kill>
 800f86e:	1c43      	adds	r3, r0, #1
 800f870:	d102      	bne.n	800f878 <_kill_r+0x1c>
 800f872:	682b      	ldr	r3, [r5, #0]
 800f874:	b103      	cbz	r3, 800f878 <_kill_r+0x1c>
 800f876:	6023      	str	r3, [r4, #0]
 800f878:	bd38      	pop	{r3, r4, r5, pc}
 800f87a:	bf00      	nop
 800f87c:	2400d2a8 	.word	0x2400d2a8

0800f880 <_getpid_r>:
 800f880:	f7f2 b958 	b.w	8001b34 <_getpid>

0800f884 <_strtol_l.constprop.0>:
 800f884:	2b01      	cmp	r3, #1
 800f886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f88a:	d001      	beq.n	800f890 <_strtol_l.constprop.0+0xc>
 800f88c:	2b24      	cmp	r3, #36	; 0x24
 800f88e:	d906      	bls.n	800f89e <_strtol_l.constprop.0+0x1a>
 800f890:	f7fe fa38 	bl	800dd04 <__errno>
 800f894:	2316      	movs	r3, #22
 800f896:	6003      	str	r3, [r0, #0]
 800f898:	2000      	movs	r0, #0
 800f89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f89e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f984 <_strtol_l.constprop.0+0x100>
 800f8a2:	460d      	mov	r5, r1
 800f8a4:	462e      	mov	r6, r5
 800f8a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f8ae:	f017 0708 	ands.w	r7, r7, #8
 800f8b2:	d1f7      	bne.n	800f8a4 <_strtol_l.constprop.0+0x20>
 800f8b4:	2c2d      	cmp	r4, #45	; 0x2d
 800f8b6:	d132      	bne.n	800f91e <_strtol_l.constprop.0+0x9a>
 800f8b8:	782c      	ldrb	r4, [r5, #0]
 800f8ba:	2701      	movs	r7, #1
 800f8bc:	1cb5      	adds	r5, r6, #2
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d05b      	beq.n	800f97a <_strtol_l.constprop.0+0xf6>
 800f8c2:	2b10      	cmp	r3, #16
 800f8c4:	d109      	bne.n	800f8da <_strtol_l.constprop.0+0x56>
 800f8c6:	2c30      	cmp	r4, #48	; 0x30
 800f8c8:	d107      	bne.n	800f8da <_strtol_l.constprop.0+0x56>
 800f8ca:	782c      	ldrb	r4, [r5, #0]
 800f8cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f8d0:	2c58      	cmp	r4, #88	; 0x58
 800f8d2:	d14d      	bne.n	800f970 <_strtol_l.constprop.0+0xec>
 800f8d4:	786c      	ldrb	r4, [r5, #1]
 800f8d6:	2310      	movs	r3, #16
 800f8d8:	3502      	adds	r5, #2
 800f8da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f8de:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8e2:	f04f 0c00 	mov.w	ip, #0
 800f8e6:	fbb8 f9f3 	udiv	r9, r8, r3
 800f8ea:	4666      	mov	r6, ip
 800f8ec:	fb03 8a19 	mls	sl, r3, r9, r8
 800f8f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f8f4:	f1be 0f09 	cmp.w	lr, #9
 800f8f8:	d816      	bhi.n	800f928 <_strtol_l.constprop.0+0xa4>
 800f8fa:	4674      	mov	r4, lr
 800f8fc:	42a3      	cmp	r3, r4
 800f8fe:	dd24      	ble.n	800f94a <_strtol_l.constprop.0+0xc6>
 800f900:	f1bc 0f00 	cmp.w	ip, #0
 800f904:	db1e      	blt.n	800f944 <_strtol_l.constprop.0+0xc0>
 800f906:	45b1      	cmp	r9, r6
 800f908:	d31c      	bcc.n	800f944 <_strtol_l.constprop.0+0xc0>
 800f90a:	d101      	bne.n	800f910 <_strtol_l.constprop.0+0x8c>
 800f90c:	45a2      	cmp	sl, r4
 800f90e:	db19      	blt.n	800f944 <_strtol_l.constprop.0+0xc0>
 800f910:	fb06 4603 	mla	r6, r6, r3, r4
 800f914:	f04f 0c01 	mov.w	ip, #1
 800f918:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f91c:	e7e8      	b.n	800f8f0 <_strtol_l.constprop.0+0x6c>
 800f91e:	2c2b      	cmp	r4, #43	; 0x2b
 800f920:	bf04      	itt	eq
 800f922:	782c      	ldrbeq	r4, [r5, #0]
 800f924:	1cb5      	addeq	r5, r6, #2
 800f926:	e7ca      	b.n	800f8be <_strtol_l.constprop.0+0x3a>
 800f928:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f92c:	f1be 0f19 	cmp.w	lr, #25
 800f930:	d801      	bhi.n	800f936 <_strtol_l.constprop.0+0xb2>
 800f932:	3c37      	subs	r4, #55	; 0x37
 800f934:	e7e2      	b.n	800f8fc <_strtol_l.constprop.0+0x78>
 800f936:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f93a:	f1be 0f19 	cmp.w	lr, #25
 800f93e:	d804      	bhi.n	800f94a <_strtol_l.constprop.0+0xc6>
 800f940:	3c57      	subs	r4, #87	; 0x57
 800f942:	e7db      	b.n	800f8fc <_strtol_l.constprop.0+0x78>
 800f944:	f04f 3cff 	mov.w	ip, #4294967295
 800f948:	e7e6      	b.n	800f918 <_strtol_l.constprop.0+0x94>
 800f94a:	f1bc 0f00 	cmp.w	ip, #0
 800f94e:	da05      	bge.n	800f95c <_strtol_l.constprop.0+0xd8>
 800f950:	2322      	movs	r3, #34	; 0x22
 800f952:	6003      	str	r3, [r0, #0]
 800f954:	4646      	mov	r6, r8
 800f956:	b942      	cbnz	r2, 800f96a <_strtol_l.constprop.0+0xe6>
 800f958:	4630      	mov	r0, r6
 800f95a:	e79e      	b.n	800f89a <_strtol_l.constprop.0+0x16>
 800f95c:	b107      	cbz	r7, 800f960 <_strtol_l.constprop.0+0xdc>
 800f95e:	4276      	negs	r6, r6
 800f960:	2a00      	cmp	r2, #0
 800f962:	d0f9      	beq.n	800f958 <_strtol_l.constprop.0+0xd4>
 800f964:	f1bc 0f00 	cmp.w	ip, #0
 800f968:	d000      	beq.n	800f96c <_strtol_l.constprop.0+0xe8>
 800f96a:	1e69      	subs	r1, r5, #1
 800f96c:	6011      	str	r1, [r2, #0]
 800f96e:	e7f3      	b.n	800f958 <_strtol_l.constprop.0+0xd4>
 800f970:	2430      	movs	r4, #48	; 0x30
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1b1      	bne.n	800f8da <_strtol_l.constprop.0+0x56>
 800f976:	2308      	movs	r3, #8
 800f978:	e7af      	b.n	800f8da <_strtol_l.constprop.0+0x56>
 800f97a:	2c30      	cmp	r4, #48	; 0x30
 800f97c:	d0a5      	beq.n	800f8ca <_strtol_l.constprop.0+0x46>
 800f97e:	230a      	movs	r3, #10
 800f980:	e7ab      	b.n	800f8da <_strtol_l.constprop.0+0x56>
 800f982:	bf00      	nop
 800f984:	0800fe71 	.word	0x0800fe71

0800f988 <_strtol_r>:
 800f988:	f7ff bf7c 	b.w	800f884 <_strtol_l.constprop.0>

0800f98c <_strtoul_l.constprop.0>:
 800f98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f990:	4f36      	ldr	r7, [pc, #216]	; (800fa6c <_strtoul_l.constprop.0+0xe0>)
 800f992:	4686      	mov	lr, r0
 800f994:	460d      	mov	r5, r1
 800f996:	4628      	mov	r0, r5
 800f998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f99c:	5de6      	ldrb	r6, [r4, r7]
 800f99e:	f016 0608 	ands.w	r6, r6, #8
 800f9a2:	d1f8      	bne.n	800f996 <_strtoul_l.constprop.0+0xa>
 800f9a4:	2c2d      	cmp	r4, #45	; 0x2d
 800f9a6:	d12f      	bne.n	800fa08 <_strtoul_l.constprop.0+0x7c>
 800f9a8:	782c      	ldrb	r4, [r5, #0]
 800f9aa:	2601      	movs	r6, #1
 800f9ac:	1c85      	adds	r5, r0, #2
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d057      	beq.n	800fa62 <_strtoul_l.constprop.0+0xd6>
 800f9b2:	2b10      	cmp	r3, #16
 800f9b4:	d109      	bne.n	800f9ca <_strtoul_l.constprop.0+0x3e>
 800f9b6:	2c30      	cmp	r4, #48	; 0x30
 800f9b8:	d107      	bne.n	800f9ca <_strtoul_l.constprop.0+0x3e>
 800f9ba:	7828      	ldrb	r0, [r5, #0]
 800f9bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f9c0:	2858      	cmp	r0, #88	; 0x58
 800f9c2:	d149      	bne.n	800fa58 <_strtoul_l.constprop.0+0xcc>
 800f9c4:	786c      	ldrb	r4, [r5, #1]
 800f9c6:	2310      	movs	r3, #16
 800f9c8:	3502      	adds	r5, #2
 800f9ca:	f04f 38ff 	mov.w	r8, #4294967295
 800f9ce:	2700      	movs	r7, #0
 800f9d0:	fbb8 f8f3 	udiv	r8, r8, r3
 800f9d4:	fb03 f908 	mul.w	r9, r3, r8
 800f9d8:	ea6f 0909 	mvn.w	r9, r9
 800f9dc:	4638      	mov	r0, r7
 800f9de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f9e2:	f1bc 0f09 	cmp.w	ip, #9
 800f9e6:	d814      	bhi.n	800fa12 <_strtoul_l.constprop.0+0x86>
 800f9e8:	4664      	mov	r4, ip
 800f9ea:	42a3      	cmp	r3, r4
 800f9ec:	dd22      	ble.n	800fa34 <_strtoul_l.constprop.0+0xa8>
 800f9ee:	2f00      	cmp	r7, #0
 800f9f0:	db1d      	blt.n	800fa2e <_strtoul_l.constprop.0+0xa2>
 800f9f2:	4580      	cmp	r8, r0
 800f9f4:	d31b      	bcc.n	800fa2e <_strtoul_l.constprop.0+0xa2>
 800f9f6:	d101      	bne.n	800f9fc <_strtoul_l.constprop.0+0x70>
 800f9f8:	45a1      	cmp	r9, r4
 800f9fa:	db18      	blt.n	800fa2e <_strtoul_l.constprop.0+0xa2>
 800f9fc:	fb00 4003 	mla	r0, r0, r3, r4
 800fa00:	2701      	movs	r7, #1
 800fa02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa06:	e7ea      	b.n	800f9de <_strtoul_l.constprop.0+0x52>
 800fa08:	2c2b      	cmp	r4, #43	; 0x2b
 800fa0a:	bf04      	itt	eq
 800fa0c:	782c      	ldrbeq	r4, [r5, #0]
 800fa0e:	1c85      	addeq	r5, r0, #2
 800fa10:	e7cd      	b.n	800f9ae <_strtoul_l.constprop.0+0x22>
 800fa12:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fa16:	f1bc 0f19 	cmp.w	ip, #25
 800fa1a:	d801      	bhi.n	800fa20 <_strtoul_l.constprop.0+0x94>
 800fa1c:	3c37      	subs	r4, #55	; 0x37
 800fa1e:	e7e4      	b.n	800f9ea <_strtoul_l.constprop.0+0x5e>
 800fa20:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fa24:	f1bc 0f19 	cmp.w	ip, #25
 800fa28:	d804      	bhi.n	800fa34 <_strtoul_l.constprop.0+0xa8>
 800fa2a:	3c57      	subs	r4, #87	; 0x57
 800fa2c:	e7dd      	b.n	800f9ea <_strtoul_l.constprop.0+0x5e>
 800fa2e:	f04f 37ff 	mov.w	r7, #4294967295
 800fa32:	e7e6      	b.n	800fa02 <_strtoul_l.constprop.0+0x76>
 800fa34:	2f00      	cmp	r7, #0
 800fa36:	da07      	bge.n	800fa48 <_strtoul_l.constprop.0+0xbc>
 800fa38:	2322      	movs	r3, #34	; 0x22
 800fa3a:	f8ce 3000 	str.w	r3, [lr]
 800fa3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa42:	b932      	cbnz	r2, 800fa52 <_strtoul_l.constprop.0+0xc6>
 800fa44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa48:	b106      	cbz	r6, 800fa4c <_strtoul_l.constprop.0+0xc0>
 800fa4a:	4240      	negs	r0, r0
 800fa4c:	2a00      	cmp	r2, #0
 800fa4e:	d0f9      	beq.n	800fa44 <_strtoul_l.constprop.0+0xb8>
 800fa50:	b107      	cbz	r7, 800fa54 <_strtoul_l.constprop.0+0xc8>
 800fa52:	1e69      	subs	r1, r5, #1
 800fa54:	6011      	str	r1, [r2, #0]
 800fa56:	e7f5      	b.n	800fa44 <_strtoul_l.constprop.0+0xb8>
 800fa58:	2430      	movs	r4, #48	; 0x30
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1b5      	bne.n	800f9ca <_strtoul_l.constprop.0+0x3e>
 800fa5e:	2308      	movs	r3, #8
 800fa60:	e7b3      	b.n	800f9ca <_strtoul_l.constprop.0+0x3e>
 800fa62:	2c30      	cmp	r4, #48	; 0x30
 800fa64:	d0a9      	beq.n	800f9ba <_strtoul_l.constprop.0+0x2e>
 800fa66:	230a      	movs	r3, #10
 800fa68:	e7af      	b.n	800f9ca <_strtoul_l.constprop.0+0x3e>
 800fa6a:	bf00      	nop
 800fa6c:	0800fe71 	.word	0x0800fe71

0800fa70 <_strtoul_r>:
 800fa70:	f7ff bf8c 	b.w	800f98c <_strtoul_l.constprop.0>

0800fa74 <__submore>:
 800fa74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa78:	460c      	mov	r4, r1
 800fa7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fa7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa80:	4299      	cmp	r1, r3
 800fa82:	d11d      	bne.n	800fac0 <__submore+0x4c>
 800fa84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fa88:	f7fe faa8 	bl	800dfdc <_malloc_r>
 800fa8c:	b918      	cbnz	r0, 800fa96 <__submore+0x22>
 800fa8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa9a:	63a3      	str	r3, [r4, #56]	; 0x38
 800fa9c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800faa0:	6360      	str	r0, [r4, #52]	; 0x34
 800faa2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800faa6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800faaa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800faae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fab2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fab6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800faba:	6020      	str	r0, [r4, #0]
 800fabc:	2000      	movs	r0, #0
 800fabe:	e7e8      	b.n	800fa92 <__submore+0x1e>
 800fac0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fac2:	0077      	lsls	r7, r6, #1
 800fac4:	463a      	mov	r2, r7
 800fac6:	f7ff f9a1 	bl	800ee0c <_realloc_r>
 800faca:	4605      	mov	r5, r0
 800facc:	2800      	cmp	r0, #0
 800face:	d0de      	beq.n	800fa8e <__submore+0x1a>
 800fad0:	eb00 0806 	add.w	r8, r0, r6
 800fad4:	4601      	mov	r1, r0
 800fad6:	4632      	mov	r2, r6
 800fad8:	4640      	mov	r0, r8
 800fada:	f7fe fa48 	bl	800df6e <memcpy>
 800fade:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fae2:	f8c4 8000 	str.w	r8, [r4]
 800fae6:	e7e9      	b.n	800fabc <__submore+0x48>

0800fae8 <_fstat_r>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4d07      	ldr	r5, [pc, #28]	; (800fb08 <_fstat_r+0x20>)
 800faec:	2300      	movs	r3, #0
 800faee:	4604      	mov	r4, r0
 800faf0:	4608      	mov	r0, r1
 800faf2:	4611      	mov	r1, r2
 800faf4:	602b      	str	r3, [r5, #0]
 800faf6:	f7f2 f884 	bl	8001c02 <_fstat>
 800fafa:	1c43      	adds	r3, r0, #1
 800fafc:	d102      	bne.n	800fb04 <_fstat_r+0x1c>
 800fafe:	682b      	ldr	r3, [r5, #0]
 800fb00:	b103      	cbz	r3, 800fb04 <_fstat_r+0x1c>
 800fb02:	6023      	str	r3, [r4, #0]
 800fb04:	bd38      	pop	{r3, r4, r5, pc}
 800fb06:	bf00      	nop
 800fb08:	2400d2a8 	.word	0x2400d2a8

0800fb0c <_isatty_r>:
 800fb0c:	b538      	push	{r3, r4, r5, lr}
 800fb0e:	4d06      	ldr	r5, [pc, #24]	; (800fb28 <_isatty_r+0x1c>)
 800fb10:	2300      	movs	r3, #0
 800fb12:	4604      	mov	r4, r0
 800fb14:	4608      	mov	r0, r1
 800fb16:	602b      	str	r3, [r5, #0]
 800fb18:	f7f2 f883 	bl	8001c22 <_isatty>
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	d102      	bne.n	800fb26 <_isatty_r+0x1a>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	b103      	cbz	r3, 800fb26 <_isatty_r+0x1a>
 800fb24:	6023      	str	r3, [r4, #0]
 800fb26:	bd38      	pop	{r3, r4, r5, pc}
 800fb28:	2400d2a8 	.word	0x2400d2a8

0800fb2c <_malloc_usable_size_r>:
 800fb2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb30:	1f18      	subs	r0, r3, #4
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	bfbc      	itt	lt
 800fb36:	580b      	ldrlt	r3, [r1, r0]
 800fb38:	18c0      	addlt	r0, r0, r3
 800fb3a:	4770      	bx	lr

0800fb3c <_init>:
 800fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3e:	bf00      	nop
 800fb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb42:	bc08      	pop	{r3}
 800fb44:	469e      	mov	lr, r3
 800fb46:	4770      	bx	lr

0800fb48 <_fini>:
 800fb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb4a:	bf00      	nop
 800fb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb4e:	bc08      	pop	{r3}
 800fb50:	469e      	mov	lr, r3
 800fb52:	4770      	bx	lr

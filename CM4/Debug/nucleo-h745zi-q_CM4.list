
nucleo-h745zi-q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006934  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08106bd4  08106bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08106dc8  08106dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08106dcc  08106dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  10000000  08106dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000cadc  1000007c  08106e4c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  1000cb58  08106e4c  0002cb58  2**0
                  ALLOC
  8 .shared       000080e4  10010000  10010000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.attributes 00000030  00000000  00000000  000380e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e29b  00000000  00000000  00038114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000401e  00000000  00000000  000563af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001718  00000000  00000000  0005a3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001550  00000000  00000000  0005bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d4e5  00000000  00000000  0005d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c404  00000000  00000000  0009a51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018e228  00000000  00000000  000b6921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00244b49  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006710  00000000  00000000  00244b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000007c 	.word	0x1000007c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08106bbc 	.word	0x08106bbc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000080 	.word	0x10000080
 81002dc:	08106bbc 	.word	0x08106bbc

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <generateInterruptIPC_messageBuffer>:
/* Defines the memory that will actually hold the streams within the stream buffer.*/
volatile uint8_t ucStorageBuffer_ctrl[2][ mbaCONTROL_MESSAGE_BUFFER_SIZE ] __attribute__((section(".shared"))); 
volatile uint8_t ucStorageBuffer[2][ mbaTASK_MESSAGE_BUFFER_SIZE ] __attribute__((section(".shared"))); 


void generateInterruptIPC_messageBuffer(void* updatedMessageBuffer){
 8100390:	b580      	push	{r7, lr}
 8100392:	b084      	sub	sp, #16
 8100394:	af00      	add	r7, sp, #0
 8100396:	6078      	str	r0, [r7, #4]
  MessageBufferHandle_t xUpdatedBuffer = ( MessageBufferHandle_t ) updatedMessageBuffer;
 8100398:	687b      	ldr	r3, [r7, #4]
 810039a:	60fb      	str	r3, [r7, #12]
  
  if( xUpdatedBuffer != xControlMessageBuffer[CONTROL_SEND_IDX] )
 810039c:	4b09      	ldr	r3, [pc, #36]	; (81003c4 <generateInterruptIPC_messageBuffer+0x34>)
 810039e:	685a      	ldr	r2, [r3, #4]
 81003a0:	68fb      	ldr	r3, [r7, #12]
 81003a2:	429a      	cmp	r2, r3
 81003a4:	d00a      	beq.n	81003bc <generateInterruptIPC_messageBuffer+0x2c>
  {
    /* Use xControlMessageBuffer to pass the handle of the message buffer
    written to by core 1 to the interrupt handler about to be generated in
    core 2. */
    xMessageBufferSend( xControlMessageBuffer[CONTROL_SEND_IDX], &xUpdatedBuffer,
 81003a6:	4b07      	ldr	r3, [pc, #28]	; (81003c4 <generateInterruptIPC_messageBuffer+0x34>)
 81003a8:	6858      	ldr	r0, [r3, #4]
 81003aa:	f107 010c 	add.w	r1, r7, #12
 81003ae:	2300      	movs	r3, #0
 81003b0:	2204      	movs	r2, #4
 81003b2:	f003 f902 	bl	81035ba <xStreamBufferSend>
                        sizeof( xUpdatedBuffer ), mbaDONT_BLOCK );
    
    /* This is where the interrupt would be generated. */
    generateIT_IPC(MB_SEND_EXTI_LINE);
 81003b6:	2004      	movs	r0, #4
 81003b8:	f000 f846 	bl	8100448 <generateIT_IPC>
  }
}
 81003bc:	bf00      	nop
 81003be:	3710      	adds	r7, #16
 81003c0:	46bd      	mov	sp, r7
 81003c2:	bd80      	pop	{r7, pc}
 81003c4:	10010000 	.word	0x10010000

081003c8 <interruptHandlerIPC_messageBuffer>:

void interruptHandlerIPC_messageBuffer( void ) {
 81003c8:	b580      	push	{r7, lr}
 81003ca:	b082      	sub	sp, #8
 81003cc:	af00      	add	r7, sp, #0
    MessageBufferHandle_t xUpdatedMessageBuffer;
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 81003ce:	2300      	movs	r3, #0
 81003d0:	603b      	str	r3, [r7, #0]
    
    /* xControlMessageBuffer contains the handle of the message buffer that
    contains data. */
    if( xMessageBufferReceiveFromISR(
 81003d2:	4b0f      	ldr	r3, [pc, #60]	; (8100410 <interruptHandlerIPC_messageBuffer+0x48>)
 81003d4:	6818      	ldr	r0, [r3, #0]
 81003d6:	463b      	mov	r3, r7
 81003d8:	1d39      	adds	r1, r7, #4
 81003da:	2204      	movs	r2, #4
 81003dc:	f003 fa65 	bl	81038aa <xStreamBufferReceiveFromISR>
 81003e0:	4603      	mov	r3, r0
 81003e2:	2b04      	cmp	r3, #4
 81003e4:	d105      	bne.n	81003f2 <interruptHandlerIPC_messageBuffer+0x2a>
                xControlMessageBuffer[CONTROL_RECV_IDX], &xUpdatedMessageBuffer,
                sizeof( xUpdatedMessageBuffer ), &xHigherPriorityTaskWoken)
            == sizeof( xUpdatedMessageBuffer ) ) {
        /* API function notifying any task waiting for the messagebuffer*/
        xMessageBufferSendCompletedFromISR( xUpdatedMessageBuffer, &xHigherPriorityTaskWoken );
 81003e6:	687b      	ldr	r3, [r7, #4]
 81003e8:	463a      	mov	r2, r7
 81003ea:	4611      	mov	r1, r2
 81003ec:	4618      	mov	r0, r3
 81003ee:	f003 fafd 	bl	81039ec <xStreamBufferSendCompletedFromISR>
    }
    /* Scheduling with normal FreeRTOS semantics */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 81003f2:	683b      	ldr	r3, [r7, #0]
 81003f4:	2b00      	cmp	r3, #0
 81003f6:	d007      	beq.n	8100408 <interruptHandlerIPC_messageBuffer+0x40>
 81003f8:	4b06      	ldr	r3, [pc, #24]	; (8100414 <interruptHandlerIPC_messageBuffer+0x4c>)
 81003fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81003fe:	601a      	str	r2, [r3, #0]
 8100400:	f3bf 8f4f 	dsb	sy
 8100404:	f3bf 8f6f 	isb	sy
 8100408:	bf00      	nop
 810040a:	3708      	adds	r7, #8
 810040c:	46bd      	mov	sp, r7
 810040e:	bd80      	pop	{r7, pc}
 8100410:	10010000 	.word	0x10010000
 8100414:	e000ed04 	.word	0xe000ed04

08100418 <ctrl_getDataSize>:

void ctrl_setDataSize(uint32_t dataSize) {
    shDataSize = dataSize;
}

uint32_t ctrl_getDataSize(void) {
 8100418:	b480      	push	{r7}
 810041a:	af00      	add	r7, sp, #0
    return shDataSize;
 810041c:	4b03      	ldr	r3, [pc, #12]	; (810042c <ctrl_getDataSize+0x14>)
 810041e:	681b      	ldr	r3, [r3, #0]
}
 8100420:	4618      	mov	r0, r3
 8100422:	46bd      	mov	sp, r7
 8100424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100428:	4770      	bx	lr
 810042a:	bf00      	nop
 810042c:	100180d0 	.word	0x100180d0

08100430 <ctrl_getDirection>:

void ctrl_setDirection(measDirection direction) {
    shDirection = direction;
}

measDirection ctrl_getDirection(void) {
 8100430:	b480      	push	{r7}
 8100432:	af00      	add	r7, sp, #0
    return shDirection;
 8100434:	4b03      	ldr	r3, [pc, #12]	; (8100444 <ctrl_getDirection+0x14>)
 8100436:	781b      	ldrb	r3, [r3, #0]
 8100438:	b2db      	uxtb	r3, r3
}
 810043a:	4618      	mov	r0, r3
 810043c:	46bd      	mov	sp, r7
 810043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100442:	4770      	bx	lr
 8100444:	100180d4 	.word	0x100180d4

08100448 <generateIT_IPC>:

void generateIT_IPC(uint32_t EXTI_Line) {
 8100448:	b580      	push	{r7, lr}
 810044a:	b082      	sub	sp, #8
 810044c:	af00      	add	r7, sp, #0
 810044e:	6078      	str	r0, [r7, #4]
#ifdef CORE_CM4
    HAL_EXTI_D2_EventInputConfig(EXTI_Line, EXTI_MODE_IT, DISABLE);
 8100450:	2200      	movs	r2, #0
 8100452:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8100456:	6878      	ldr	r0, [r7, #4]
 8100458:	f000 fcfd 	bl	8100e56 <HAL_EXTI_D2_EventInputConfig>
    HAL_EXTI_D1_EventInputConfig(EXTI_Line, EXTI_MODE_IT, ENABLE);
 810045c:	2201      	movs	r2, #1
 810045e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8100462:	6878      	ldr	r0, [r7, #4]
 8100464:	f000 fc7d 	bl	8100d62 <HAL_EXTI_D1_EventInputConfig>
    HAL_EXTI_GenerateSWInterrupt(EXTI_Line);
 8100468:	6878      	ldr	r0, [r7, #4]
 810046a:	f000 fc43 	bl	8100cf4 <HAL_EXTI_GenerateSWInterrupt>
    HAL_EXTI_D2_EventInputConfig(EXTI_Line, EXTI_MODE_IT, ENABLE);
    HAL_EXTI_GenerateSWInterrupt(EXTI_Line);
#else
    #error Neither core is defined
#endif // CORE
}
 810046e:	bf00      	nop
 8100470:	3708      	adds	r7, #8
 8100472:	46bd      	mov	sp, r7
 8100474:	bd80      	pop	{r7, pc}
	...

08100478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100478:	b480      	push	{r7}
 810047a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810047c:	4b09      	ldr	r3, [pc, #36]	; (81004a4 <SystemInit+0x2c>)
 810047e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100482:	4a08      	ldr	r2, [pc, #32]	; (81004a4 <SystemInit+0x2c>)
 8100484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810048c:	4b05      	ldr	r3, [pc, #20]	; (81004a4 <SystemInit+0x2c>)
 810048e:	691b      	ldr	r3, [r3, #16]
 8100490:	4a04      	ldr	r2, [pc, #16]	; (81004a4 <SystemInit+0x2c>)
 8100492:	f043 0310 	orr.w	r3, r3, #16
 8100496:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100498:	bf00      	nop
 810049a:	46bd      	mov	sp, r7
 810049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004a0:	4770      	bx	lr
 81004a2:	bf00      	nop
 81004a4:	e000ed00 	.word	0xe000ed00

081004a8 <time_startTime>:
/* Shared variables for time measurement */
static volatile uint32_t shStartTime __attribute__((section(".shared"))); 
static volatile uint32_t shEndTime __attribute__((section(".shared")));
static volatile uint32_t shOffset __attribute__((section(".shared")));

void time_startTime(void) {
 81004a8:	b480      	push	{r7}
 81004aa:	af00      	add	r7, sp, #0
    shStartTime = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 81004ac:	4b05      	ldr	r3, [pc, #20]	; (81004c4 <time_startTime+0x1c>)
 81004ae:	681b      	ldr	r3, [r3, #0]
 81004b0:	681b      	ldr	r3, [r3, #0]
 81004b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81004b4:	4a04      	ldr	r2, [pc, #16]	; (81004c8 <time_startTime+0x20>)
 81004b6:	6013      	str	r3, [r2, #0]
    __COMPILER_BARRIER();
}
 81004b8:	bf00      	nop
 81004ba:	46bd      	mov	sp, r7
 81004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004c0:	4770      	bx	lr
 81004c2:	bf00      	nop
 81004c4:	10000008 	.word	0x10000008
 81004c8:	100180d8 	.word	0x100180d8

081004cc <time_endTime>:

void time_endTime(void) {
 81004cc:	b480      	push	{r7}
 81004ce:	af00      	add	r7, sp, #0
    __COMPILER_BARRIER();
    shEndTime = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 81004d0:	4b05      	ldr	r3, [pc, #20]	; (81004e8 <time_endTime+0x1c>)
 81004d2:	681b      	ldr	r3, [r3, #0]
 81004d4:	681b      	ldr	r3, [r3, #0]
 81004d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81004d8:	4a04      	ldr	r2, [pc, #16]	; (81004ec <time_endTime+0x20>)
 81004da:	6013      	str	r3, [r2, #0]
}
 81004dc:	bf00      	nop
 81004de:	46bd      	mov	sp, r7
 81004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004e4:	4770      	bx	lr
 81004e6:	bf00      	nop
 81004e8:	10000008 	.word	0x10000008
 81004ec:	100180dc 	.word	0x100180dc

081004f0 <time_setSharedOffset>:

void time_setSharedOffset(void) {
 81004f0:	b580      	push	{r7, lr}
 81004f2:	af00      	add	r7, sp, #0
    shOffset = time_measureOffset();
 81004f4:	f000 f808 	bl	8100508 <time_measureOffset>
 81004f8:	4603      	mov	r3, r0
 81004fa:	4a02      	ldr	r2, [pc, #8]	; (8100504 <time_setSharedOffset+0x14>)
 81004fc:	6013      	str	r3, [r2, #0]
}
 81004fe:	bf00      	nop
 8100500:	bd80      	pop	{r7, pc}
 8100502:	bf00      	nop
 8100504:	100180e0 	.word	0x100180e0

08100508 <time_measureOffset>:

uint32_t time_getSharedOffset() {
    return shOffset;
}

uint32_t time_measureOffset(void) {
 8100508:	b480      	push	{r7}
 810050a:	b083      	sub	sp, #12
 810050c:	af00      	add	r7, sp, #0
    volatile uint32_t st = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 810050e:	4b09      	ldr	r3, [pc, #36]	; (8100534 <time_measureOffset+0x2c>)
 8100510:	681b      	ldr	r3, [r3, #0]
 8100512:	681b      	ldr	r3, [r3, #0]
 8100514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100516:	607b      	str	r3, [r7, #4]
    __COMPILER_BARRIER();
    volatile uint32_t end = __HAL_TIM_GET_COUNTER(htimTimeMeas);
 8100518:	4b06      	ldr	r3, [pc, #24]	; (8100534 <time_measureOffset+0x2c>)
 810051a:	681b      	ldr	r3, [r3, #0]
 810051c:	681b      	ldr	r3, [r3, #0]
 810051e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100520:	603b      	str	r3, [r7, #0]
    return end - st;
 8100522:	683a      	ldr	r2, [r7, #0]
 8100524:	687b      	ldr	r3, [r7, #4]
 8100526:	1ad3      	subs	r3, r2, r3
}
 8100528:	4618      	mov	r0, r3
 810052a:	370c      	adds	r7, #12
 810052c:	46bd      	mov	sp, r7
 810052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100532:	4770      	bx	lr
 8100534:	10000008 	.word	0x10000008

08100538 <ErrorHandler>:
#ifndef ERROR_HANDLER_H
#define ERROR_HANDLER_H

static inline void ErrorHandler() {
 8100538:	b480      	push	{r7}
 810053a:	af00      	add	r7, sp, #0
    while(0) {}
 810053c:	bf00      	nop
}
 810053e:	bf00      	nop
 8100540:	46bd      	mov	sp, r7
 8100542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100546:	4770      	bx	lr

08100548 <HAL_GPIO_EXTI_Callback>:
TaskHandle_t core2TaskHandle;
SemaphoreHandle_t startMeasSemaphore = NULL;

/* Override the callback function to handle interrupts */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8100548:	b580      	push	{r7, lr}
 810054a:	b082      	sub	sp, #8
 810054c:	af00      	add	r7, sp, #0
 810054e:	4603      	mov	r3, r0
 8100550:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8100552:	88fb      	ldrh	r3, [r7, #6]
 8100554:	2b01      	cmp	r3, #1
 8100556:	d002      	beq.n	810055e <HAL_GPIO_EXTI_Callback+0x16>
 8100558:	2b08      	cmp	r3, #8
 810055a:	d006      	beq.n	810056a <HAL_GPIO_EXTI_Callback+0x22>
 810055c:	e008      	b.n	8100570 <HAL_GPIO_EXTI_Callback+0x28>
  {
  case MB1TO2_GPIO_PIN:
    interruptHandlerIPC_messageBuffer();
 810055e:	f7ff ff33 	bl	81003c8 <interruptHandlerIPC_messageBuffer>
    HAL_EXTI_D2_ClearFlag(MB1TO2_INT_EXTI_LINE);
 8100562:	2000      	movs	r0, #0
 8100564:	f000 fbe6 	bl	8100d34 <HAL_EXTI_D2_ClearFlag>
    break;
 8100568:	e005      	b.n	8100576 <HAL_GPIO_EXTI_Callback+0x2e>
  case START_MEAS_GPIO_PIN:
    interruptHandlerIPC_startMeas();
 810056a:	f000 f997 	bl	810089c <interruptHandlerIPC_startMeas>
    break;
 810056e:	e002      	b.n	8100576 <HAL_GPIO_EXTI_Callback+0x2e>
  default:
    ErrorHandler();
 8100570:	f7ff ffe2 	bl	8100538 <ErrorHandler>
    break;
 8100574:	bf00      	nop
  }
}
 8100576:	bf00      	nop
 8100578:	3708      	adds	r7, #8
 810057a:	46bd      	mov	sp, r7
 810057c:	bd80      	pop	{r7, pc}
	...

08100580 <core2MeasurementTask>:

/* m4 core task waiting for measurement and handling it */
void core2MeasurementTask( void *pvParameters )
{
 8100580:	b580      	push	{r7, lr}
 8100582:	b082      	sub	sp, #8
 8100584:	af00      	add	r7, sp, #0
 8100586:	6078      	str	r0, [r7, #4]
  startMeasSemaphore = xSemaphoreCreateBinary();
 8100588:	2203      	movs	r2, #3
 810058a:	2100      	movs	r1, #0
 810058c:	2001      	movs	r0, #1
 810058e:	f002 f9eb 	bl	8102968 <xQueueGenericCreate>
 8100592:	4603      	mov	r3, r0
 8100594:	4a0f      	ldr	r2, [pc, #60]	; (81005d4 <core2MeasurementTask+0x54>)
 8100596:	6013      	str	r3, [r2, #0]

  for( ;; )
  {   
    /* Wait for start signal and direction of the measurement */
    (void)xSemaphoreTake( startMeasSemaphore, portMAX_DELAY ); // indefinite block
 8100598:	4b0e      	ldr	r3, [pc, #56]	; (81005d4 <core2MeasurementTask+0x54>)
 810059a:	681b      	ldr	r3, [r3, #0]
 810059c:	f04f 31ff 	mov.w	r1, #4294967295
 81005a0:	4618      	mov	r0, r3
 81005a2:	f002 fd45 	bl	8103030 <xQueueSemaphoreTake>
    
    /* Perform one measurement */
    switch (ctrl_getDirection())
 81005a6:	f7ff ff43 	bl	8100430 <ctrl_getDirection>
 81005aa:	4603      	mov	r3, r0
 81005ac:	2b00      	cmp	r3, #0
 81005ae:	d002      	beq.n	81005b6 <core2MeasurementTask+0x36>
 81005b0:	2b01      	cmp	r3, #1
 81005b2:	d003      	beq.n	81005bc <core2MeasurementTask+0x3c>
 81005b4:	e009      	b.n	81005ca <core2MeasurementTask+0x4a>
    {
    case M7_SEND: /* m7 sends, this core recieves */
      app_measureCore2Recieving();
 81005b6:	f000 f80f 	bl	81005d8 <app_measureCore2Recieving>
      break;
 81005ba:	e009      	b.n	81005d0 <core2MeasurementTask+0x50>
    case M7_RECIEVE:
      app_measureCore2Sending(ctrl_getDataSize());
 81005bc:	f7ff ff2c 	bl	8100418 <ctrl_getDataSize>
 81005c0:	4603      	mov	r3, r0
 81005c2:	4618      	mov	r0, r3
 81005c4:	f000 f84a 	bl	810065c <app_measureCore2Sending>
      break;
 81005c8:	e002      	b.n	81005d0 <core2MeasurementTask+0x50>
    default:
      ErrorHandler();
 81005ca:	f7ff ffb5 	bl	8100538 <ErrorHandler>
      break;
 81005ce:	bf00      	nop
    (void)xSemaphoreTake( startMeasSemaphore, portMAX_DELAY ); // indefinite block
 81005d0:	e7e2      	b.n	8100598 <core2MeasurementTask+0x18>
 81005d2:	bf00      	nop
 81005d4:	1000009c 	.word	0x1000009c

081005d8 <app_measureCore2Recieving>:
    }
  }
}

void app_measureCore2Recieving(void){
 81005d8:	b580      	push	{r7, lr}
 81005da:	b082      	sub	sp, #8
 81005dc:	af00      	add	r7, sp, #0
  static uint8_t ulNextValue = 0;
  uint32_t xReceivedBytes, sizeFromMessage;
  static uint8_t recieveBuffer[ MAX_DATA_SIZE ];

  xReceivedBytes = xMessageBufferReceive( xDataMessageBuffers[MB1TO2_IDX],
 81005de:	4b1b      	ldr	r3, [pc, #108]	; (810064c <app_measureCore2Recieving+0x74>)
 81005e0:	6818      	ldr	r0, [r3, #0]
 81005e2:	f04f 33ff 	mov.w	r3, #4294967295
 81005e6:	f643 72f8 	movw	r2, #16376	; 0x3ff8
 81005ea:	4919      	ldr	r1, [pc, #100]	; (8100650 <app_measureCore2Recieving+0x78>)
 81005ec:	f003 f8c8 	bl	8103780 <xStreamBufferReceive>
 81005f0:	6078      	str	r0, [r7, #4]
                                          recieveBuffer,
                                          sizeof(recieveBuffer),
                                          portMAX_DELAY );
  time_endTime(); /* global shared variable */
 81005f2:	f7ff ff6b 	bl	81004cc <time_endTime>
  time_setSharedOffset();
 81005f6:	f7ff ff7b 	bl	81004f0 <time_setSharedOffset>
  /* Checking the size and last element of the data */
  sscanf((char*)recieveBuffer, "%lu", &sizeFromMessage);
 81005fa:	463b      	mov	r3, r7
 81005fc:	461a      	mov	r2, r3
 81005fe:	4915      	ldr	r1, [pc, #84]	; (8100654 <app_measureCore2Recieving+0x7c>)
 8100600:	4813      	ldr	r0, [pc, #76]	; (8100650 <app_measureCore2Recieving+0x78>)
 8100602:	f005 fa85 	bl	8105b10 <siscanf>
  if(xReceivedBytes != sizeFromMessage || 
 8100606:	683b      	ldr	r3, [r7, #0]
 8100608:	687a      	ldr	r2, [r7, #4]
 810060a:	429a      	cmp	r2, r3
 810060c:	d10a      	bne.n	8100624 <app_measureCore2Recieving+0x4c>
      ((sizeFromMessage > 2) && recieveBuffer[xReceivedBytes - 1] != ulNextValue)){
 810060e:	683b      	ldr	r3, [r7, #0]
  if(xReceivedBytes != sizeFromMessage || 
 8100610:	2b02      	cmp	r3, #2
 8100612:	d909      	bls.n	8100628 <app_measureCore2Recieving+0x50>
      ((sizeFromMessage > 2) && recieveBuffer[xReceivedBytes - 1] != ulNextValue)){
 8100614:	687b      	ldr	r3, [r7, #4]
 8100616:	3b01      	subs	r3, #1
 8100618:	4a0d      	ldr	r2, [pc, #52]	; (8100650 <app_measureCore2Recieving+0x78>)
 810061a:	5cd2      	ldrb	r2, [r2, r3]
 810061c:	4b0e      	ldr	r3, [pc, #56]	; (8100658 <app_measureCore2Recieving+0x80>)
 810061e:	781b      	ldrb	r3, [r3, #0]
 8100620:	429a      	cmp	r2, r3
 8100622:	d001      	beq.n	8100628 <app_measureCore2Recieving+0x50>
    ErrorHandler();
 8100624:	f7ff ff88 	bl	8100538 <ErrorHandler>
  }

  memset( recieveBuffer, 0x00, xReceivedBytes );
 8100628:	687a      	ldr	r2, [r7, #4]
 810062a:	2100      	movs	r1, #0
 810062c:	4808      	ldr	r0, [pc, #32]	; (8100650 <app_measureCore2Recieving+0x78>)
 810062e:	f005 f939 	bl	81058a4 <memset>
  ulNextValue++;
 8100632:	4b09      	ldr	r3, [pc, #36]	; (8100658 <app_measureCore2Recieving+0x80>)
 8100634:	781b      	ldrb	r3, [r3, #0]
 8100636:	3301      	adds	r3, #1
 8100638:	b2da      	uxtb	r2, r3
 810063a:	4b07      	ldr	r3, [pc, #28]	; (8100658 <app_measureCore2Recieving+0x80>)
 810063c:	701a      	strb	r2, [r3, #0]
  generateInterruptIPC_endMeasurement();
 810063e:	f000 f926 	bl	810088e <generateInterruptIPC_endMeasurement>
}
 8100642:	bf00      	nop
 8100644:	3708      	adds	r7, #8
 8100646:	46bd      	mov	sp, r7
 8100648:	bd80      	pop	{r7, pc}
 810064a:	bf00      	nop
 810064c:	10010008 	.word	0x10010008
 8100650:	100000a0 	.word	0x100000a0
 8100654:	08106bd4 	.word	0x08106bd4
 8100658:	10004098 	.word	0x10004098

0810065c <app_measureCore2Sending>:

void app_measureCore2Sending(uint32_t dataSize){
 810065c:	b580      	push	{r7, lr}
 810065e:	b084      	sub	sp, #16
 8100660:	af00      	add	r7, sp, #0
 8100662:	6078      	str	r0, [r7, #4]
  static char sendBuffer[MAX_DATA_SIZE];
  static uint8_t nextValue = 0;
  for (uint32_t j = 0; j < dataSize; ++j){
 8100664:	2300      	movs	r3, #0
 8100666:	60fb      	str	r3, [r7, #12]
 8100668:	e009      	b.n	810067e <app_measureCore2Sending+0x22>
    sendBuffer[j] = nextValue;
 810066a:	4b15      	ldr	r3, [pc, #84]	; (81006c0 <app_measureCore2Sending+0x64>)
 810066c:	7819      	ldrb	r1, [r3, #0]
 810066e:	4a15      	ldr	r2, [pc, #84]	; (81006c4 <app_measureCore2Sending+0x68>)
 8100670:	68fb      	ldr	r3, [r7, #12]
 8100672:	4413      	add	r3, r2
 8100674:	460a      	mov	r2, r1
 8100676:	701a      	strb	r2, [r3, #0]
  for (uint32_t j = 0; j < dataSize; ++j){
 8100678:	68fb      	ldr	r3, [r7, #12]
 810067a:	3301      	adds	r3, #1
 810067c:	60fb      	str	r3, [r7, #12]
 810067e:	68fa      	ldr	r2, [r7, #12]
 8100680:	687b      	ldr	r3, [r7, #4]
 8100682:	429a      	cmp	r2, r3
 8100684:	d3f1      	bcc.n	810066a <app_measureCore2Sending+0xe>
  }
  sprintf((char*)sendBuffer, "%lu", dataSize);
 8100686:	687a      	ldr	r2, [r7, #4]
 8100688:	490f      	ldr	r1, [pc, #60]	; (81006c8 <app_measureCore2Sending+0x6c>)
 810068a:	480e      	ldr	r0, [pc, #56]	; (81006c4 <app_measureCore2Sending+0x68>)
 810068c:	f005 fa20 	bl	8105ad0 <siprintf>
  vTaskDelay(1/portTICK_PERIOD_MS);
 8100690:	2001      	movs	r0, #1
 8100692:	f003 fcb3 	bl	8103ffc <vTaskDelay>
  time_setSharedOffset();
 8100696:	f7ff ff2b 	bl	81004f0 <time_setSharedOffset>
  /* Start measurement */
  time_startTime();
 810069a:	f7ff ff05 	bl	81004a8 <time_startTime>
  xMessageBufferSend(xDataMessageBuffers[MB2TO1_IDX],
 810069e:	4b0b      	ldr	r3, [pc, #44]	; (81006cc <app_measureCore2Sending+0x70>)
 81006a0:	6858      	ldr	r0, [r3, #4]
 81006a2:	2300      	movs	r3, #0
 81006a4:	687a      	ldr	r2, [r7, #4]
 81006a6:	4907      	ldr	r1, [pc, #28]	; (81006c4 <app_measureCore2Sending+0x68>)
 81006a8:	f002 ff87 	bl	81035ba <xStreamBufferSend>
                     (void*) sendBuffer,
                     dataSize,
                     mbaDONT_BLOCK);
  ++nextValue;                     
 81006ac:	4b04      	ldr	r3, [pc, #16]	; (81006c0 <app_measureCore2Sending+0x64>)
 81006ae:	781b      	ldrb	r3, [r3, #0]
 81006b0:	3301      	adds	r3, #1
 81006b2:	b2da      	uxtb	r2, r3
 81006b4:	4b02      	ldr	r3, [pc, #8]	; (81006c0 <app_measureCore2Sending+0x64>)
 81006b6:	701a      	strb	r2, [r3, #0]
}
 81006b8:	bf00      	nop
 81006ba:	3710      	adds	r7, #16
 81006bc:	46bd      	mov	sp, r7
 81006be:	bd80      	pop	{r7, pc}
 81006c0:	10004099 	.word	0x10004099
 81006c4:	1000409c 	.word	0x1000409c
 81006c8:	08106bd4 	.word	0x08106bd4
 81006cc:	10010008 	.word	0x10010008

081006d0 <app_createTasks>:

/* Creating the tasks for the m4 core */
void app_createTasks(void){
 81006d0:	b580      	push	{r7, lr}
 81006d2:	b084      	sub	sp, #16
 81006d4:	af02      	add	r7, sp, #8
  xTaskCreate(core2MeasurementTask, "AMPCore2", configMINIMAL_STACK_SIZE,
 81006d6:	4b0e      	ldr	r3, [pc, #56]	; (8100710 <app_createTasks+0x40>)
 81006d8:	9301      	str	r3, [sp, #4]
 81006da:	2301      	movs	r3, #1
 81006dc:	9300      	str	r3, [sp, #0]
 81006de:	2300      	movs	r3, #0
 81006e0:	2280      	movs	r2, #128	; 0x80
 81006e2:	490c      	ldr	r1, [pc, #48]	; (8100714 <app_createTasks+0x44>)
 81006e4:	480c      	ldr	r0, [pc, #48]	; (8100718 <app_createTasks+0x48>)
 81006e6:	f003 fb2d 	bl	8103d44 <xTaskCreate>
              NULL, tskIDLE_PRIORITY + 1, &core2TaskHandle);
  configASSERT(core2TaskHandle);
 81006ea:	4b09      	ldr	r3, [pc, #36]	; (8100710 <app_createTasks+0x40>)
 81006ec:	681b      	ldr	r3, [r3, #0]
 81006ee:	2b00      	cmp	r3, #0
 81006f0:	d10a      	bne.n	8100708 <app_createTasks+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81006f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81006f6:	f383 8811 	msr	BASEPRI, r3
 81006fa:	f3bf 8f6f 	isb	sy
 81006fe:	f3bf 8f4f 	dsb	sy
 8100702:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8100704:	bf00      	nop
 8100706:	e7fe      	b.n	8100706 <app_createTasks+0x36>
}
 8100708:	bf00      	nop
 810070a:	3708      	adds	r7, #8
 810070c:	46bd      	mov	sp, r7
 810070e:	bd80      	pop	{r7, pc}
 8100710:	10000098 	.word	0x10000098
 8100714:	08106bd8 	.word	0x08106bd8
 8100718:	08100581 	.word	0x08100581

0810071c <ErrorHandler>:
static inline void ErrorHandler() {
 810071c:	b480      	push	{r7}
 810071e:	af00      	add	r7, sp, #0
    while(0) {}
 8100720:	bf00      	nop
}
 8100722:	bf00      	nop
 8100724:	46bd      	mov	sp, r7
 8100726:	f85d 7b04 	ldr.w	r7, [sp], #4
 810072a:	4770      	bx	lr

0810072c <initIPC_MessageBuffers>:
#include "ipc_mb.h"

void initIPC_MessageBuffers(void) {
 810072c:	b580      	push	{r7, lr}
 810072e:	af00      	add	r7, sp, #0
    /* Timer for time measurement */
    htim5.Instance = TIM5; // IMPORTANT to be able to read the timer! todo move somewhere else
 8100730:	4b1b      	ldr	r3, [pc, #108]	; (81007a0 <initIPC_MessageBuffers+0x74>)
 8100732:	4a1c      	ldr	r2, [pc, #112]	; (81007a4 <initIPC_MessageBuffers+0x78>)
 8100734:	601a      	str	r2, [r3, #0]

    /* Int config for message buffer*/
    HAL_EXTI_EdgeConfig(MB2TO1_INT_EXTI_LINE, EXTI_RISING_EDGE);
 8100736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 810073a:	2004      	movs	r0, #4
 810073c:	f000 fa70 	bl	8100c20 <HAL_EXTI_EdgeConfig>

    /* SW interrupt for message buffer */
    HAL_NVIC_SetPriority(MB1TO2_INT_EXTI_IRQ, 0xFU, 0U);
 8100740:	2200      	movs	r2, #0
 8100742:	210f      	movs	r1, #15
 8100744:	2006      	movs	r0, #6
 8100746:	f000 fcb9 	bl	81010bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MB1TO2_INT_EXTI_IRQ);
 810074a:	2006      	movs	r0, #6
 810074c:	f000 fcd0 	bl	81010f0 <HAL_NVIC_EnableIRQ>
    
    /* m7 core initializes the message buffers */
    if (( xControlMessageBuffer[MB1TO2_IDX] == NULL ) |
 8100750:	4b15      	ldr	r3, [pc, #84]	; (81007a8 <initIPC_MessageBuffers+0x7c>)
 8100752:	681b      	ldr	r3, [r3, #0]
 8100754:	2b00      	cmp	r3, #0
 8100756:	bf0c      	ite	eq
 8100758:	2301      	moveq	r3, #1
 810075a:	2300      	movne	r3, #0
 810075c:	b2da      	uxtb	r2, r3
        ( xDataMessageBuffers[MB1TO2_IDX] == NULL ) |
 810075e:	4b13      	ldr	r3, [pc, #76]	; (81007ac <initIPC_MessageBuffers+0x80>)
 8100760:	681b      	ldr	r3, [r3, #0]
    if (( xControlMessageBuffer[MB1TO2_IDX] == NULL ) |
 8100762:	2b00      	cmp	r3, #0
 8100764:	bf0c      	ite	eq
 8100766:	2301      	moveq	r3, #1
 8100768:	2300      	movne	r3, #0
 810076a:	b2db      	uxtb	r3, r3
 810076c:	4313      	orrs	r3, r2
 810076e:	b2db      	uxtb	r3, r3
 8100770:	461a      	mov	r2, r3
        ( xControlMessageBuffer[MB2TO1_IDX] == NULL) |
 8100772:	4b0d      	ldr	r3, [pc, #52]	; (81007a8 <initIPC_MessageBuffers+0x7c>)
 8100774:	685b      	ldr	r3, [r3, #4]
 8100776:	2b00      	cmp	r3, #0
 8100778:	bf0c      	ite	eq
 810077a:	2301      	moveq	r3, #1
 810077c:	2300      	movne	r3, #0
 810077e:	b2db      	uxtb	r3, r3
        ( xDataMessageBuffers[MB1TO2_IDX] == NULL ) |
 8100780:	4313      	orrs	r3, r2
        ( xDataMessageBuffers[MB2TO1_IDX] == NULL))
 8100782:	4a0a      	ldr	r2, [pc, #40]	; (81007ac <initIPC_MessageBuffers+0x80>)
 8100784:	6852      	ldr	r2, [r2, #4]
 8100786:	2a00      	cmp	r2, #0
 8100788:	bf0c      	ite	eq
 810078a:	2201      	moveq	r2, #1
 810078c:	2200      	movne	r2, #0
 810078e:	b2d2      	uxtb	r2, r2
        ( xControlMessageBuffer[MB2TO1_IDX] == NULL) |
 8100790:	4313      	orrs	r3, r2
    if (( xControlMessageBuffer[MB1TO2_IDX] == NULL ) |
 8100792:	2b00      	cmp	r3, #0
 8100794:	d001      	beq.n	810079a <initIPC_MessageBuffers+0x6e>
    {
        ErrorHandler();
 8100796:	f7ff ffc1 	bl	810071c <ErrorHandler>
    }
}
 810079a:	bf00      	nop
 810079c:	bd80      	pop	{r7, pc}
 810079e:	bf00      	nop
 81007a0:	10008094 	.word	0x10008094
 81007a4:	40000c00 	.word	0x40000c00
 81007a8:	10010000 	.word	0x10010000
 81007ac:	10010008 	.word	0x10010008

081007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81007b0:	b580      	push	{r7, lr}
 81007b2:	b082      	sub	sp, #8
 81007b4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81007b6:	4b20      	ldr	r3, [pc, #128]	; (8100838 <main+0x88>)
 81007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007bc:	4a1e      	ldr	r2, [pc, #120]	; (8100838 <main+0x88>)
 81007be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007c6:	4b1c      	ldr	r3, [pc, #112]	; (8100838 <main+0x88>)
 81007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81007d0:	607b      	str	r3, [r7, #4]
 81007d2:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007d4:	2001      	movs	r0, #1
 81007d6:	f000 fcc7 	bl	8101168 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81007da:	f000 fd51 	bl	8101280 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81007de:	2201      	movs	r2, #1
 81007e0:	2102      	movs	r1, #2
 81007e2:	2000      	movs	r0, #0
 81007e4:	f000 fcd2 	bl	810118c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007e8:	4b14      	ldr	r3, [pc, #80]	; (810083c <main+0x8c>)
 81007ea:	681b      	ldr	r3, [r3, #0]
 81007ec:	091b      	lsrs	r3, r3, #4
 81007ee:	f003 030f 	and.w	r3, r3, #15
 81007f2:	2b07      	cmp	r3, #7
 81007f4:	d108      	bne.n	8100808 <main+0x58>
 81007f6:	4b12      	ldr	r3, [pc, #72]	; (8100840 <main+0x90>)
 81007f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81007fc:	4a10      	ldr	r2, [pc, #64]	; (8100840 <main+0x90>)
 81007fe:	f043 0301 	orr.w	r3, r3, #1
 8100802:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100806:	e007      	b.n	8100818 <main+0x68>
 8100808:	4b0d      	ldr	r3, [pc, #52]	; (8100840 <main+0x90>)
 810080a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810080e:	4a0c      	ldr	r2, [pc, #48]	; (8100840 <main+0x90>)
 8100810:	f043 0301 	orr.w	r3, r3, #1
 8100814:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100818:	f000 f990 	bl	8100b3c <HAL_Init>

  /* USER CODE BEGIN Init */
  ctrl_initInterrupts();
 810081c:	f000 f826 	bl	810086c <ctrl_initInterrupts>
  initIPC_MessageBuffers();
 8100820:	f7ff ff84 	bl	810072c <initIPC_MessageBuffers>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100824:	f001 fa52 	bl	8101ccc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8100828:	4b06      	ldr	r3, [pc, #24]	; (8100844 <main+0x94>)
 810082a:	2200      	movs	r2, #0
 810082c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  app_createTasks();
 810082e:	f7ff ff4f 	bl	81006d0 <app_createTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100832:	f001 fa6f 	bl	8101d14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100836:	e7fe      	b.n	8100836 <main+0x86>
 8100838:	58024400 	.word	0x58024400
 810083c:	e000ed00 	.word	0xe000ed00
 8100840:	58026400 	.word	0x58026400
 8100844:	100080e0 	.word	0x100080e0

08100848 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100848:	b580      	push	{r7, lr}
 810084a:	b082      	sub	sp, #8
 810084c:	af00      	add	r7, sp, #0
 810084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8100850:	687b      	ldr	r3, [r7, #4]
 8100852:	681b      	ldr	r3, [r3, #0]
 8100854:	4a04      	ldr	r2, [pc, #16]	; (8100868 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100856:	4293      	cmp	r3, r2
 8100858:	d101      	bne.n	810085e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810085a:	f000 f9cd 	bl	8100bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810085e:	bf00      	nop
 8100860:	3708      	adds	r7, #8
 8100862:	46bd      	mov	sp, r7
 8100864:	bd80      	pop	{r7, pc}
 8100866:	bf00      	nop
 8100868:	40010000 	.word	0x40010000

0810086c <ctrl_initInterrupts>:
#include "meas_control.h"

#include "stm32h7xx_hal.h"
#include "FreeRTOS.h"

void ctrl_initInterrupts(void) {
 810086c:	b580      	push	{r7, lr}
 810086e:	af00      	add	r7, sp, #0
    /* Int config for end of meas */
    HAL_EXTI_EdgeConfig(END_MEAS_INT_EXTI_LINE, EXTI_RISING_EDGE);
 8100870:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8100874:	2002      	movs	r0, #2
 8100876:	f000 f9d3 	bl	8100c20 <HAL_EXTI_EdgeConfig>

    /* SW interrupt to signal start of meas */
    HAL_NVIC_SetPriority(START_MEAS_INT_EXTI_IRQ, 0xFU, 1U);
 810087a:	2201      	movs	r2, #1
 810087c:	210f      	movs	r1, #15
 810087e:	2009      	movs	r0, #9
 8100880:	f000 fc1c 	bl	81010bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(START_MEAS_INT_EXTI_IRQ);
 8100884:	2009      	movs	r0, #9
 8100886:	f000 fc33 	bl	81010f0 <HAL_NVIC_EnableIRQ>
}
 810088a:	bf00      	nop
 810088c:	bd80      	pop	{r7, pc}

0810088e <generateInterruptIPC_endMeasurement>:

void generateInterruptIPC_endMeasurement(void) {
 810088e:	b580      	push	{r7, lr}
 8100890:	af00      	add	r7, sp, #0
    generateIT_IPC(END_MEAS_INT_EXTI_LINE);
 8100892:	2002      	movs	r0, #2
 8100894:	f7ff fdd8 	bl	8100448 <generateIT_IPC>
}
 8100898:	bf00      	nop
 810089a:	bd80      	pop	{r7, pc}

0810089c <interruptHandlerIPC_startMeas>:

void interruptHandlerIPC_startMeas(void) {
 810089c:	b580      	push	{r7, lr}
 810089e:	b082      	sub	sp, #8
 81008a0:	af00      	add	r7, sp, #0
    /* Signaling to task with notification*/
    BaseType_t xHigherPriorityTaskWoken;
    xSemaphoreGiveFromISR( startMeasSemaphore, &xHigherPriorityTaskWoken );
 81008a2:	4b0c      	ldr	r3, [pc, #48]	; (81008d4 <interruptHandlerIPC_startMeas+0x38>)
 81008a4:	681b      	ldr	r3, [r3, #0]
 81008a6:	1d3a      	adds	r2, r7, #4
 81008a8:	4611      	mov	r1, r2
 81008aa:	4618      	mov	r0, r3
 81008ac:	f002 fa53 	bl	8102d56 <xQueueGiveFromISR>
    /* TODO bad solution, message buffer uses notification as well*/
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 81008b0:	687b      	ldr	r3, [r7, #4]
 81008b2:	2b00      	cmp	r3, #0
 81008b4:	d007      	beq.n	81008c6 <interruptHandlerIPC_startMeas+0x2a>
 81008b6:	4b08      	ldr	r3, [pc, #32]	; (81008d8 <interruptHandlerIPC_startMeas+0x3c>)
 81008b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81008bc:	601a      	str	r2, [r3, #0]
 81008be:	f3bf 8f4f 	dsb	sy
 81008c2:	f3bf 8f6f 	isb	sy

    HAL_EXTI_D2_ClearFlag(START_MEAS_INT_EXTI_LINE);
 81008c6:	2003      	movs	r0, #3
 81008c8:	f000 fa34 	bl	8100d34 <HAL_EXTI_D2_ClearFlag>
 81008cc:	bf00      	nop
 81008ce:	3708      	adds	r7, #8
 81008d0:	46bd      	mov	sp, r7
 81008d2:	bd80      	pop	{r7, pc}
 81008d4:	1000009c 	.word	0x1000009c
 81008d8:	e000ed04 	.word	0xe000ed04

081008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81008dc:	b580      	push	{r7, lr}
 81008de:	b082      	sub	sp, #8
 81008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81008e2:	4b0c      	ldr	r3, [pc, #48]	; (8100914 <HAL_MspInit+0x38>)
 81008e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81008e8:	4a0a      	ldr	r2, [pc, #40]	; (8100914 <HAL_MspInit+0x38>)
 81008ea:	f043 0302 	orr.w	r3, r3, #2
 81008ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81008f2:	4b08      	ldr	r3, [pc, #32]	; (8100914 <HAL_MspInit+0x38>)
 81008f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81008f8:	f003 0302 	and.w	r3, r3, #2
 81008fc:	607b      	str	r3, [r7, #4]
 81008fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100900:	2200      	movs	r2, #0
 8100902:	210f      	movs	r1, #15
 8100904:	f06f 0001 	mvn.w	r0, #1
 8100908:	f000 fbd8 	bl	81010bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810090c:	bf00      	nop
 810090e:	3708      	adds	r7, #8
 8100910:	46bd      	mov	sp, r7
 8100912:	bd80      	pop	{r7, pc}
 8100914:	58024400 	.word	0x58024400

08100918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100918:	b480      	push	{r7}
 810091a:	b085      	sub	sp, #20
 810091c:	af00      	add	r7, sp, #0
 810091e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8100920:	687b      	ldr	r3, [r7, #4]
 8100922:	681b      	ldr	r3, [r3, #0]
 8100924:	4a0b      	ldr	r2, [pc, #44]	; (8100954 <HAL_TIM_Base_MspInit+0x3c>)
 8100926:	4293      	cmp	r3, r2
 8100928:	d10e      	bne.n	8100948 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 810092a:	4b0b      	ldr	r3, [pc, #44]	; (8100958 <HAL_TIM_Base_MspInit+0x40>)
 810092c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100930:	4a09      	ldr	r2, [pc, #36]	; (8100958 <HAL_TIM_Base_MspInit+0x40>)
 8100932:	f043 0308 	orr.w	r3, r3, #8
 8100936:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810093a:	4b07      	ldr	r3, [pc, #28]	; (8100958 <HAL_TIM_Base_MspInit+0x40>)
 810093c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100940:	f003 0308 	and.w	r3, r3, #8
 8100944:	60fb      	str	r3, [r7, #12]
 8100946:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8100948:	bf00      	nop
 810094a:	3714      	adds	r7, #20
 810094c:	46bd      	mov	sp, r7
 810094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100952:	4770      	bx	lr
 8100954:	40000c00 	.word	0x40000c00
 8100958:	58024400 	.word	0x58024400

0810095c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810095c:	b580      	push	{r7, lr}
 810095e:	b08e      	sub	sp, #56	; 0x38
 8100960:	af00      	add	r7, sp, #0
 8100962:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100964:	687b      	ldr	r3, [r7, #4]
 8100966:	2b0f      	cmp	r3, #15
 8100968:	d844      	bhi.n	81009f4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 810096a:	2200      	movs	r2, #0
 810096c:	6879      	ldr	r1, [r7, #4]
 810096e:	2019      	movs	r0, #25
 8100970:	f000 fba4 	bl	81010bc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8100974:	2019      	movs	r0, #25
 8100976:	f000 fbbb 	bl	81010f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 810097a:	4a24      	ldr	r2, [pc, #144]	; (8100a0c <HAL_InitTick+0xb0>)
 810097c:	687b      	ldr	r3, [r7, #4]
 810097e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8100980:	4b23      	ldr	r3, [pc, #140]	; (8100a10 <HAL_InitTick+0xb4>)
 8100982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100986:	4a22      	ldr	r2, [pc, #136]	; (8100a10 <HAL_InitTick+0xb4>)
 8100988:	f043 0301 	orr.w	r3, r3, #1
 810098c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100990:	4b1f      	ldr	r3, [pc, #124]	; (8100a10 <HAL_InitTick+0xb4>)
 8100992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100996:	f003 0301 	and.w	r3, r3, #1
 810099a:	60bb      	str	r3, [r7, #8]
 810099c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810099e:	f107 020c 	add.w	r2, r7, #12
 81009a2:	f107 0310 	add.w	r3, r7, #16
 81009a6:	4611      	mov	r1, r2
 81009a8:	4618      	mov	r0, r3
 81009aa:	f000 fe39 	bl	8101620 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 81009ae:	f000 fe21 	bl	81015f4 <HAL_RCC_GetPCLK2Freq>
 81009b2:	4603      	mov	r3, r0
 81009b4:	005b      	lsls	r3, r3, #1
 81009b6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81009b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81009ba:	4a16      	ldr	r2, [pc, #88]	; (8100a14 <HAL_InitTick+0xb8>)
 81009bc:	fba2 2303 	umull	r2, r3, r2, r3
 81009c0:	0c9b      	lsrs	r3, r3, #18
 81009c2:	3b01      	subs	r3, #1
 81009c4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 81009c6:	4b14      	ldr	r3, [pc, #80]	; (8100a18 <HAL_InitTick+0xbc>)
 81009c8:	4a14      	ldr	r2, [pc, #80]	; (8100a1c <HAL_InitTick+0xc0>)
 81009ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 81009cc:	4b12      	ldr	r3, [pc, #72]	; (8100a18 <HAL_InitTick+0xbc>)
 81009ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 81009d2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 81009d4:	4a10      	ldr	r2, [pc, #64]	; (8100a18 <HAL_InitTick+0xbc>)
 81009d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81009d8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 81009da:	4b0f      	ldr	r3, [pc, #60]	; (8100a18 <HAL_InitTick+0xbc>)
 81009dc:	2200      	movs	r2, #0
 81009de:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81009e0:	4b0d      	ldr	r3, [pc, #52]	; (8100a18 <HAL_InitTick+0xbc>)
 81009e2:	2200      	movs	r2, #0
 81009e4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 81009e6:	480c      	ldr	r0, [pc, #48]	; (8100a18 <HAL_InitTick+0xbc>)
 81009e8:	f000 fe5c 	bl	81016a4 <HAL_TIM_Base_Init>
 81009ec:	4603      	mov	r3, r0
 81009ee:	2b00      	cmp	r3, #0
 81009f0:	d107      	bne.n	8100a02 <HAL_InitTick+0xa6>
 81009f2:	e001      	b.n	81009f8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 81009f4:	2301      	movs	r3, #1
 81009f6:	e005      	b.n	8100a04 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 81009f8:	4807      	ldr	r0, [pc, #28]	; (8100a18 <HAL_InitTick+0xbc>)
 81009fa:	f000 feab 	bl	8101754 <HAL_TIM_Base_Start_IT>
 81009fe:	4603      	mov	r3, r0
 8100a00:	e000      	b.n	8100a04 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8100a02:	2301      	movs	r3, #1
}
 8100a04:	4618      	mov	r0, r3
 8100a06:	3738      	adds	r7, #56	; 0x38
 8100a08:	46bd      	mov	sp, r7
 8100a0a:	bd80      	pop	{r7, pc}
 8100a0c:	1000000c 	.word	0x1000000c
 8100a10:	58024400 	.word	0x58024400
 8100a14:	431bde83 	.word	0x431bde83
 8100a18:	100080e4 	.word	0x100080e4
 8100a1c:	40010000 	.word	0x40010000

08100a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100a20:	b480      	push	{r7}
 8100a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100a24:	e7fe      	b.n	8100a24 <NMI_Handler+0x4>

08100a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100a26:	b480      	push	{r7}
 8100a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100a2a:	e7fe      	b.n	8100a2a <HardFault_Handler+0x4>

08100a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100a2c:	b480      	push	{r7}
 8100a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100a30:	e7fe      	b.n	8100a30 <MemManage_Handler+0x4>

08100a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100a32:	b480      	push	{r7}
 8100a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100a36:	e7fe      	b.n	8100a36 <BusFault_Handler+0x4>

08100a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100a38:	b480      	push	{r7}
 8100a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100a3c:	e7fe      	b.n	8100a3c <UsageFault_Handler+0x4>

08100a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100a3e:	b480      	push	{r7}
 8100a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100a42:	bf00      	nop
 8100a44:	46bd      	mov	sp, r7
 8100a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a4a:	4770      	bx	lr

08100a4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8100a4c:	b580      	push	{r7, lr}
 8100a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8100a50:	4802      	ldr	r0, [pc, #8]	; (8100a5c <TIM1_UP_IRQHandler+0x10>)
 8100a52:	f000 fef7 	bl	8101844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8100a56:	bf00      	nop
 8100a58:	bd80      	pop	{r7, pc}
 8100a5a:	bf00      	nop
 8100a5c:	100080e4 	.word	0x100080e4

08100a60 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler( void )
{
 8100a60:	b580      	push	{r7, lr}
 8100a62:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(MB1TO2_GPIO_PIN);
 8100a64:	2001      	movs	r0, #1
 8100a66:	f000 fb65 	bl	8101134 <HAL_GPIO_EXTI_IRQHandler>
}
 8100a6a:	bf00      	nop
 8100a6c:	bd80      	pop	{r7, pc}

08100a6e <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8100a6e:	b580      	push	{r7, lr}
 8100a70:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(START_MEAS_GPIO_PIN);
 8100a72:	2008      	movs	r0, #8
 8100a74:	f000 fb5e 	bl	8101134 <HAL_GPIO_EXTI_IRQHandler>
}
 8100a78:	bf00      	nop
 8100a7a:	bd80      	pop	{r7, pc}

08100a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100a7c:	b580      	push	{r7, lr}
 8100a7e:	b086      	sub	sp, #24
 8100a80:	af00      	add	r7, sp, #0
 8100a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100a84:	4a14      	ldr	r2, [pc, #80]	; (8100ad8 <_sbrk+0x5c>)
 8100a86:	4b15      	ldr	r3, [pc, #84]	; (8100adc <_sbrk+0x60>)
 8100a88:	1ad3      	subs	r3, r2, r3
 8100a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100a8c:	697b      	ldr	r3, [r7, #20]
 8100a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100a90:	4b13      	ldr	r3, [pc, #76]	; (8100ae0 <_sbrk+0x64>)
 8100a92:	681b      	ldr	r3, [r3, #0]
 8100a94:	2b00      	cmp	r3, #0
 8100a96:	d102      	bne.n	8100a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100a98:	4b11      	ldr	r3, [pc, #68]	; (8100ae0 <_sbrk+0x64>)
 8100a9a:	4a12      	ldr	r2, [pc, #72]	; (8100ae4 <_sbrk+0x68>)
 8100a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100a9e:	4b10      	ldr	r3, [pc, #64]	; (8100ae0 <_sbrk+0x64>)
 8100aa0:	681a      	ldr	r2, [r3, #0]
 8100aa2:	687b      	ldr	r3, [r7, #4]
 8100aa4:	4413      	add	r3, r2
 8100aa6:	693a      	ldr	r2, [r7, #16]
 8100aa8:	429a      	cmp	r2, r3
 8100aaa:	d207      	bcs.n	8100abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100aac:	f004 fec0 	bl	8105830 <__errno>
 8100ab0:	4603      	mov	r3, r0
 8100ab2:	220c      	movs	r2, #12
 8100ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8100aba:	e009      	b.n	8100ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100abc:	4b08      	ldr	r3, [pc, #32]	; (8100ae0 <_sbrk+0x64>)
 8100abe:	681b      	ldr	r3, [r3, #0]
 8100ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100ac2:	4b07      	ldr	r3, [pc, #28]	; (8100ae0 <_sbrk+0x64>)
 8100ac4:	681a      	ldr	r2, [r3, #0]
 8100ac6:	687b      	ldr	r3, [r7, #4]
 8100ac8:	4413      	add	r3, r2
 8100aca:	4a05      	ldr	r2, [pc, #20]	; (8100ae0 <_sbrk+0x64>)
 8100acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100ace:	68fb      	ldr	r3, [r7, #12]
}
 8100ad0:	4618      	mov	r0, r3
 8100ad2:	3718      	adds	r7, #24
 8100ad4:	46bd      	mov	sp, r7
 8100ad6:	bd80      	pop	{r7, pc}
 8100ad8:	10048000 	.word	0x10048000
 8100adc:	00000400 	.word	0x00000400
 8100ae0:	10008130 	.word	0x10008130
 8100ae4:	1000cb58 	.word	0x1000cb58

08100ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100b20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100aec:	f7ff fcc4 	bl	8100478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100af0:	480c      	ldr	r0, [pc, #48]	; (8100b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100af2:	490d      	ldr	r1, [pc, #52]	; (8100b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100af4:	4a0d      	ldr	r2, [pc, #52]	; (8100b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100af8:	e002      	b.n	8100b00 <LoopCopyDataInit>

08100afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100afe:	3304      	adds	r3, #4

08100b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100b04:	d3f9      	bcc.n	8100afa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100b06:	4a0a      	ldr	r2, [pc, #40]	; (8100b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100b08:	4c0a      	ldr	r4, [pc, #40]	; (8100b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100b0c:	e001      	b.n	8100b12 <LoopFillZerobss>

08100b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100b10:	3204      	adds	r2, #4

08100b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100b14:	d3fb      	bcc.n	8100b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100b16:	f004 fe91 	bl	810583c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100b1a:	f7ff fe49 	bl	81007b0 <main>
  bx  lr
 8100b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100b20:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100b24:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100b28:	1000007c 	.word	0x1000007c
  ldr r2, =_sidata
 8100b2c:	08106dd0 	.word	0x08106dd0
  ldr r2, =_sbss
 8100b30:	1000007c 	.word	0x1000007c
  ldr r4, =_ebss
 8100b34:	1000cb58 	.word	0x1000cb58

08100b38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100b38:	e7fe      	b.n	8100b38 <ADC3_IRQHandler>
	...

08100b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100b3c:	b580      	push	{r7, lr}
 8100b3e:	b082      	sub	sp, #8
 8100b40:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100b42:	4b28      	ldr	r3, [pc, #160]	; (8100be4 <HAL_Init+0xa8>)
 8100b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100b48:	4a26      	ldr	r2, [pc, #152]	; (8100be4 <HAL_Init+0xa8>)
 8100b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100b4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100b52:	4b24      	ldr	r3, [pc, #144]	; (8100be4 <HAL_Init+0xa8>)
 8100b54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100b5c:	603b      	str	r3, [r7, #0]
 8100b5e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100b60:	4b21      	ldr	r3, [pc, #132]	; (8100be8 <HAL_Init+0xac>)
 8100b62:	681b      	ldr	r3, [r3, #0]
 8100b64:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100b68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100b6c:	4a1e      	ldr	r2, [pc, #120]	; (8100be8 <HAL_Init+0xac>)
 8100b6e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100b72:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100b74:	4b1c      	ldr	r3, [pc, #112]	; (8100be8 <HAL_Init+0xac>)
 8100b76:	681b      	ldr	r3, [r3, #0]
 8100b78:	4a1b      	ldr	r2, [pc, #108]	; (8100be8 <HAL_Init+0xac>)
 8100b7a:	f043 0301 	orr.w	r3, r3, #1
 8100b7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100b80:	2003      	movs	r0, #3
 8100b82:	f000 fa90 	bl	81010a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100b86:	f000 fb89 	bl	810129c <HAL_RCC_GetSysClockFreq>
 8100b8a:	4602      	mov	r2, r0
 8100b8c:	4b15      	ldr	r3, [pc, #84]	; (8100be4 <HAL_Init+0xa8>)
 8100b8e:	699b      	ldr	r3, [r3, #24]
 8100b90:	0a1b      	lsrs	r3, r3, #8
 8100b92:	f003 030f 	and.w	r3, r3, #15
 8100b96:	4915      	ldr	r1, [pc, #84]	; (8100bec <HAL_Init+0xb0>)
 8100b98:	5ccb      	ldrb	r3, [r1, r3]
 8100b9a:	f003 031f 	and.w	r3, r3, #31
 8100b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8100ba2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100ba4:	4b0f      	ldr	r3, [pc, #60]	; (8100be4 <HAL_Init+0xa8>)
 8100ba6:	699b      	ldr	r3, [r3, #24]
 8100ba8:	f003 030f 	and.w	r3, r3, #15
 8100bac:	4a0f      	ldr	r2, [pc, #60]	; (8100bec <HAL_Init+0xb0>)
 8100bae:	5cd3      	ldrb	r3, [r2, r3]
 8100bb0:	f003 031f 	and.w	r3, r3, #31
 8100bb4:	687a      	ldr	r2, [r7, #4]
 8100bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8100bba:	4a0d      	ldr	r2, [pc, #52]	; (8100bf0 <HAL_Init+0xb4>)
 8100bbc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100bbe:	4b0c      	ldr	r3, [pc, #48]	; (8100bf0 <HAL_Init+0xb4>)
 8100bc0:	681b      	ldr	r3, [r3, #0]
 8100bc2:	4a0c      	ldr	r2, [pc, #48]	; (8100bf4 <HAL_Init+0xb8>)
 8100bc4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100bc6:	200f      	movs	r0, #15
 8100bc8:	f7ff fec8 	bl	810095c <HAL_InitTick>
 8100bcc:	4603      	mov	r3, r0
 8100bce:	2b00      	cmp	r3, #0
 8100bd0:	d001      	beq.n	8100bd6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100bd2:	2301      	movs	r3, #1
 8100bd4:	e002      	b.n	8100bdc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100bd6:	f7ff fe81 	bl	81008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100bda:	2300      	movs	r3, #0
}
 8100bdc:	4618      	mov	r0, r3
 8100bde:	3708      	adds	r7, #8
 8100be0:	46bd      	mov	sp, r7
 8100be2:	bd80      	pop	{r7, pc}
 8100be4:	58024400 	.word	0x58024400
 8100be8:	40024400 	.word	0x40024400
 8100bec:	08106c08 	.word	0x08106c08
 8100bf0:	10000004 	.word	0x10000004
 8100bf4:	10000000 	.word	0x10000000

08100bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100bf8:	b480      	push	{r7}
 8100bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100bfc:	4b06      	ldr	r3, [pc, #24]	; (8100c18 <HAL_IncTick+0x20>)
 8100bfe:	781b      	ldrb	r3, [r3, #0]
 8100c00:	461a      	mov	r2, r3
 8100c02:	4b06      	ldr	r3, [pc, #24]	; (8100c1c <HAL_IncTick+0x24>)
 8100c04:	681b      	ldr	r3, [r3, #0]
 8100c06:	4413      	add	r3, r2
 8100c08:	4a04      	ldr	r2, [pc, #16]	; (8100c1c <HAL_IncTick+0x24>)
 8100c0a:	6013      	str	r3, [r2, #0]
}
 8100c0c:	bf00      	nop
 8100c0e:	46bd      	mov	sp, r7
 8100c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c14:	4770      	bx	lr
 8100c16:	bf00      	nop
 8100c18:	10000010 	.word	0x10000010
 8100c1c:	10008134 	.word	0x10008134

08100c20 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
 8100c20:	b480      	push	{r7}
 8100c22:	b083      	sub	sp, #12
 8100c24:	af00      	add	r7, sp, #0
 8100c26:	6078      	str	r0, [r7, #4]
 8100c28:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100c2a:	687b      	ldr	r3, [r7, #4]
 8100c2c:	095b      	lsrs	r3, r3, #5
 8100c2e:	015b      	lsls	r3, r3, #5
 8100c30:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100c34:	3304      	adds	r3, #4
 8100c36:	6819      	ldr	r1, [r3, #0]
 8100c38:	687b      	ldr	r3, [r7, #4]
 8100c3a:	f003 031f 	and.w	r3, r3, #31
 8100c3e:	2201      	movs	r2, #1
 8100c40:	fa02 f303 	lsl.w	r3, r2, r3
 8100c44:	43da      	mvns	r2, r3
 8100c46:	687b      	ldr	r3, [r7, #4]
 8100c48:	095b      	lsrs	r3, r3, #5
 8100c4a:	015b      	lsls	r3, r3, #5
 8100c4c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100c50:	3304      	adds	r3, #4
 8100c52:	4618      	mov	r0, r3
 8100c54:	ea01 0302 	and.w	r3, r1, r2
 8100c58:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100c5a:	687b      	ldr	r3, [r7, #4]
 8100c5c:	095b      	lsrs	r3, r3, #5
 8100c5e:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
 8100c62:	015b      	lsls	r3, r3, #5
 8100c64:	681a      	ldr	r2, [r3, #0]
 8100c66:	687b      	ldr	r3, [r7, #4]
 8100c68:	f003 031f 	and.w	r3, r3, #31
 8100c6c:	2101      	movs	r1, #1
 8100c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8100c72:	43db      	mvns	r3, r3
 8100c74:	6879      	ldr	r1, [r7, #4]
 8100c76:	0949      	lsrs	r1, r1, #5
 8100c78:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
 8100c7c:	0149      	lsls	r1, r1, #5
 8100c7e:	4013      	ands	r3, r2
 8100c80:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
 8100c82:	683b      	ldr	r3, [r7, #0]
 8100c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100c88:	2b00      	cmp	r3, #0
 8100c8a:	d012      	beq.n	8100cb2 <HAL_EXTI_EdgeConfig+0x92>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100c8c:	687b      	ldr	r3, [r7, #4]
 8100c8e:	095b      	lsrs	r3, r3, #5
 8100c90:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
 8100c94:	015b      	lsls	r3, r3, #5
 8100c96:	681a      	ldr	r2, [r3, #0]
 8100c98:	687b      	ldr	r3, [r7, #4]
 8100c9a:	f003 031f 	and.w	r3, r3, #31
 8100c9e:	2101      	movs	r1, #1
 8100ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8100ca4:	6879      	ldr	r1, [r7, #4]
 8100ca6:	0949      	lsrs	r1, r1, #5
 8100ca8:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
 8100cac:	0149      	lsls	r1, r1, #5
 8100cae:	4313      	orrs	r3, r2
 8100cb0:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
 8100cb2:	683b      	ldr	r3, [r7, #0]
 8100cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100cb8:	2b00      	cmp	r3, #0
 8100cba:	d015      	beq.n	8100ce8 <HAL_EXTI_EdgeConfig+0xc8>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100cbc:	687b      	ldr	r3, [r7, #4]
 8100cbe:	095b      	lsrs	r3, r3, #5
 8100cc0:	015b      	lsls	r3, r3, #5
 8100cc2:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100cc6:	3304      	adds	r3, #4
 8100cc8:	6819      	ldr	r1, [r3, #0]
 8100cca:	687b      	ldr	r3, [r7, #4]
 8100ccc:	f003 031f 	and.w	r3, r3, #31
 8100cd0:	2201      	movs	r2, #1
 8100cd2:	409a      	lsls	r2, r3
 8100cd4:	687b      	ldr	r3, [r7, #4]
 8100cd6:	095b      	lsrs	r3, r3, #5
 8100cd8:	015b      	lsls	r3, r3, #5
 8100cda:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100cde:	3304      	adds	r3, #4
 8100ce0:	4618      	mov	r0, r3
 8100ce2:	ea41 0302 	orr.w	r3, r1, r2
 8100ce6:	6003      	str	r3, [r0, #0]
  }
}
 8100ce8:	bf00      	nop
 8100cea:	370c      	adds	r7, #12
 8100cec:	46bd      	mov	sp, r7
 8100cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cf2:	4770      	bx	lr

08100cf4 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8100cf4:	b480      	push	{r7}
 8100cf6:	b083      	sub	sp, #12
 8100cf8:	af00      	add	r7, sp, #0
 8100cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100cfc:	687b      	ldr	r3, [r7, #4]
 8100cfe:	095b      	lsrs	r3, r3, #5
 8100d00:	015b      	lsls	r3, r3, #5
 8100d02:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100d06:	3308      	adds	r3, #8
 8100d08:	6819      	ldr	r1, [r3, #0]
 8100d0a:	687b      	ldr	r3, [r7, #4]
 8100d0c:	f003 031f 	and.w	r3, r3, #31
 8100d10:	2201      	movs	r2, #1
 8100d12:	409a      	lsls	r2, r3
 8100d14:	687b      	ldr	r3, [r7, #4]
 8100d16:	095b      	lsrs	r3, r3, #5
 8100d18:	015b      	lsls	r3, r3, #5
 8100d1a:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100d1e:	3308      	adds	r3, #8
 8100d20:	4618      	mov	r0, r3
 8100d22:	ea41 0302 	orr.w	r3, r1, r2
 8100d26:	6003      	str	r3, [r0, #0]
}
 8100d28:	bf00      	nop
 8100d2a:	370c      	adds	r7, #12
 8100d2c:	46bd      	mov	sp, r7
 8100d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d32:	4770      	bx	lr

08100d34 <HAL_EXTI_D2_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D2_ClearFlag(uint32_t EXTI_Line)
{
 8100d34:	b480      	push	{r7}
 8100d36:	b083      	sub	sp, #12
 8100d38:	af00      	add	r7, sp, #0
 8100d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D2_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100d3c:	687b      	ldr	r3, [r7, #4]
 8100d3e:	f003 021f 	and.w	r2, r3, #31
 8100d42:	687b      	ldr	r3, [r7, #4]
 8100d44:	095b      	lsrs	r3, r3, #5
 8100d46:	011b      	lsls	r3, r3, #4
 8100d48:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100d4c:	33c8      	adds	r3, #200	; 0xc8
 8100d4e:	4619      	mov	r1, r3
 8100d50:	2301      	movs	r3, #1
 8100d52:	4093      	lsls	r3, r2
 8100d54:	600b      	str	r3, [r1, #0]
}
 8100d56:	bf00      	nop
 8100d58:	370c      	adds	r7, #12
 8100d5a:	46bd      	mov	sp, r7
 8100d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d60:	4770      	bx	lr

08100d62 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 8100d62:	b480      	push	{r7}
 8100d64:	b085      	sub	sp, #20
 8100d66:	af00      	add	r7, sp, #0
 8100d68:	60f8      	str	r0, [r7, #12]
 8100d6a:	60b9      	str	r1, [r7, #8]
 8100d6c:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 8100d6e:	68bb      	ldr	r3, [r7, #8]
 8100d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100d74:	2b00      	cmp	r3, #0
 8100d76:	d031      	beq.n	8100ddc <HAL_EXTI_D1_EventInputConfig+0x7a>
  {
     if( EXTI_LineCmd == 0UL)
 8100d78:	687b      	ldr	r3, [r7, #4]
 8100d7a:	2b00      	cmp	r3, #0
 8100d7c:	d118      	bne.n	8100db0 <HAL_EXTI_D1_EventInputConfig+0x4e>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 8100d7e:	68fb      	ldr	r3, [r7, #12]
 8100d80:	095b      	lsrs	r3, r3, #5
 8100d82:	f103 63b0 	add.w	r3, r3, #92274688	; 0x5800000
 8100d86:	3308      	adds	r3, #8
 8100d88:	011b      	lsls	r3, r3, #4
 8100d8a:	6819      	ldr	r1, [r3, #0]
 8100d8c:	68fb      	ldr	r3, [r7, #12]
 8100d8e:	f003 031f 	and.w	r3, r3, #31
 8100d92:	2201      	movs	r2, #1
 8100d94:	fa02 f303 	lsl.w	r3, r2, r3
 8100d98:	43da      	mvns	r2, r3
 8100d9a:	68fb      	ldr	r3, [r7, #12]
 8100d9c:	095b      	lsrs	r3, r3, #5
 8100d9e:	f103 63b0 	add.w	r3, r3, #92274688	; 0x5800000
 8100da2:	3308      	adds	r3, #8
 8100da4:	011b      	lsls	r3, r3, #4
 8100da6:	4618      	mov	r0, r3
 8100da8:	ea01 0302 	and.w	r3, r1, r2
 8100dac:	6003      	str	r3, [r0, #0]
 8100dae:	e015      	b.n	8100ddc <HAL_EXTI_D1_EventInputConfig+0x7a>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100db0:	68fb      	ldr	r3, [r7, #12]
 8100db2:	095b      	lsrs	r3, r3, #5
 8100db4:	f103 63b0 	add.w	r3, r3, #92274688	; 0x5800000
 8100db8:	3308      	adds	r3, #8
 8100dba:	011b      	lsls	r3, r3, #4
 8100dbc:	6819      	ldr	r1, [r3, #0]
 8100dbe:	68fb      	ldr	r3, [r7, #12]
 8100dc0:	f003 031f 	and.w	r3, r3, #31
 8100dc4:	2201      	movs	r2, #1
 8100dc6:	409a      	lsls	r2, r3
 8100dc8:	68fb      	ldr	r3, [r7, #12]
 8100dca:	095b      	lsrs	r3, r3, #5
 8100dcc:	f103 63b0 	add.w	r3, r3, #92274688	; 0x5800000
 8100dd0:	3308      	adds	r3, #8
 8100dd2:	011b      	lsls	r3, r3, #4
 8100dd4:	4618      	mov	r0, r3
 8100dd6:	ea41 0302 	orr.w	r3, r1, r2
 8100dda:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 8100ddc:	68bb      	ldr	r3, [r7, #8]
 8100dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100de2:	2b00      	cmp	r3, #0
 8100de4:	d031      	beq.n	8100e4a <HAL_EXTI_D1_EventInputConfig+0xe8>
  {
    if( EXTI_LineCmd == 0UL)
 8100de6:	687b      	ldr	r3, [r7, #4]
 8100de8:	2b00      	cmp	r3, #0
 8100dea:	d118      	bne.n	8100e1e <HAL_EXTI_D1_EventInputConfig+0xbc>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100dec:	68fb      	ldr	r3, [r7, #12]
 8100dee:	095b      	lsrs	r3, r3, #5
 8100df0:	011b      	lsls	r3, r3, #4
 8100df2:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100df6:	3384      	adds	r3, #132	; 0x84
 8100df8:	6819      	ldr	r1, [r3, #0]
 8100dfa:	68fb      	ldr	r3, [r7, #12]
 8100dfc:	f003 031f 	and.w	r3, r3, #31
 8100e00:	2201      	movs	r2, #1
 8100e02:	fa02 f303 	lsl.w	r3, r2, r3
 8100e06:	43da      	mvns	r2, r3
 8100e08:	68fb      	ldr	r3, [r7, #12]
 8100e0a:	095b      	lsrs	r3, r3, #5
 8100e0c:	011b      	lsls	r3, r3, #4
 8100e0e:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100e12:	3384      	adds	r3, #132	; 0x84
 8100e14:	4618      	mov	r0, r3
 8100e16:	ea01 0302 	and.w	r3, r1, r2
 8100e1a:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 8100e1c:	e015      	b.n	8100e4a <HAL_EXTI_D1_EventInputConfig+0xe8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100e1e:	68fb      	ldr	r3, [r7, #12]
 8100e20:	095b      	lsrs	r3, r3, #5
 8100e22:	011b      	lsls	r3, r3, #4
 8100e24:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100e28:	3384      	adds	r3, #132	; 0x84
 8100e2a:	6819      	ldr	r1, [r3, #0]
 8100e2c:	68fb      	ldr	r3, [r7, #12]
 8100e2e:	f003 031f 	and.w	r3, r3, #31
 8100e32:	2201      	movs	r2, #1
 8100e34:	409a      	lsls	r2, r3
 8100e36:	68fb      	ldr	r3, [r7, #12]
 8100e38:	095b      	lsrs	r3, r3, #5
 8100e3a:	011b      	lsls	r3, r3, #4
 8100e3c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100e40:	3384      	adds	r3, #132	; 0x84
 8100e42:	4618      	mov	r0, r3
 8100e44:	ea41 0302 	orr.w	r3, r1, r2
 8100e48:	6003      	str	r3, [r0, #0]
}
 8100e4a:	bf00      	nop
 8100e4c:	3714      	adds	r7, #20
 8100e4e:	46bd      	mov	sp, r7
 8100e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e54:	4770      	bx	lr

08100e56 <HAL_EXTI_D2_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D2_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 8100e56:	b480      	push	{r7}
 8100e58:	b085      	sub	sp, #20
 8100e5a:	af00      	add	r7, sp, #0
 8100e5c:	60f8      	str	r0, [r7, #12]
 8100e5e:	60b9      	str	r1, [r7, #8]
 8100e60:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D2_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 8100e62:	68bb      	ldr	r3, [r7, #8]
 8100e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100e68:	2b00      	cmp	r3, #0
 8100e6a:	d031      	beq.n	8100ed0 <HAL_EXTI_D2_EventInputConfig+0x7a>
  {
    if( EXTI_LineCmd == 0UL)
 8100e6c:	687b      	ldr	r3, [r7, #4]
 8100e6e:	2b00      	cmp	r3, #0
 8100e70:	d118      	bne.n	8100ea4 <HAL_EXTI_D2_EventInputConfig+0x4e>
    {
    /* Clear EXTI line configuration */
     CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 8100e72:	68fb      	ldr	r3, [r7, #12]
 8100e74:	095b      	lsrs	r3, r3, #5
 8100e76:	f103 63b0 	add.w	r3, r3, #92274688	; 0x5800000
 8100e7a:	330c      	adds	r3, #12
 8100e7c:	011b      	lsls	r3, r3, #4
 8100e7e:	6819      	ldr	r1, [r3, #0]
 8100e80:	68fb      	ldr	r3, [r7, #12]
 8100e82:	f003 031f 	and.w	r3, r3, #31
 8100e86:	2201      	movs	r2, #1
 8100e88:	fa02 f303 	lsl.w	r3, r2, r3
 8100e8c:	43da      	mvns	r2, r3
 8100e8e:	68fb      	ldr	r3, [r7, #12]
 8100e90:	095b      	lsrs	r3, r3, #5
 8100e92:	f103 63b0 	add.w	r3, r3, #92274688	; 0x5800000
 8100e96:	330c      	adds	r3, #12
 8100e98:	011b      	lsls	r3, r3, #4
 8100e9a:	4618      	mov	r0, r3
 8100e9c:	ea01 0302 	and.w	r3, r1, r2
 8100ea0:	6003      	str	r3, [r0, #0]
 8100ea2:	e015      	b.n	8100ed0 <HAL_EXTI_D2_EventInputConfig+0x7a>
    }
    else
    {
     SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100ea4:	68fb      	ldr	r3, [r7, #12]
 8100ea6:	095b      	lsrs	r3, r3, #5
 8100ea8:	f103 63b0 	add.w	r3, r3, #92274688	; 0x5800000
 8100eac:	330c      	adds	r3, #12
 8100eae:	011b      	lsls	r3, r3, #4
 8100eb0:	6819      	ldr	r1, [r3, #0]
 8100eb2:	68fb      	ldr	r3, [r7, #12]
 8100eb4:	f003 031f 	and.w	r3, r3, #31
 8100eb8:	2201      	movs	r2, #1
 8100eba:	409a      	lsls	r2, r3
 8100ebc:	68fb      	ldr	r3, [r7, #12]
 8100ebe:	095b      	lsrs	r3, r3, #5
 8100ec0:	f103 63b0 	add.w	r3, r3, #92274688	; 0x5800000
 8100ec4:	330c      	adds	r3, #12
 8100ec6:	011b      	lsls	r3, r3, #4
 8100ec8:	4618      	mov	r0, r3
 8100eca:	ea41 0302 	orr.w	r3, r1, r2
 8100ece:	6003      	str	r3, [r0, #0]
    }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 8100ed0:	68bb      	ldr	r3, [r7, #8]
 8100ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100ed6:	2b00      	cmp	r3, #0
 8100ed8:	d031      	beq.n	8100f3e <HAL_EXTI_D2_EventInputConfig+0xe8>
  {
    if( EXTI_LineCmd == 0UL)
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	2b00      	cmp	r3, #0
 8100ede:	d118      	bne.n	8100f12 <HAL_EXTI_D2_EventInputConfig+0xbc>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100ee0:	68fb      	ldr	r3, [r7, #12]
 8100ee2:	095b      	lsrs	r3, r3, #5
 8100ee4:	011b      	lsls	r3, r3, #4
 8100ee6:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100eea:	33c4      	adds	r3, #196	; 0xc4
 8100eec:	6819      	ldr	r1, [r3, #0]
 8100eee:	68fb      	ldr	r3, [r7, #12]
 8100ef0:	f003 031f 	and.w	r3, r3, #31
 8100ef4:	2201      	movs	r2, #1
 8100ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8100efa:	43da      	mvns	r2, r3
 8100efc:	68fb      	ldr	r3, [r7, #12]
 8100efe:	095b      	lsrs	r3, r3, #5
 8100f00:	011b      	lsls	r3, r3, #4
 8100f02:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100f06:	33c4      	adds	r3, #196	; 0xc4
 8100f08:	4618      	mov	r0, r3
 8100f0a:	ea01 0302 	and.w	r3, r1, r2
 8100f0e:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 8100f10:	e015      	b.n	8100f3e <HAL_EXTI_D2_EventInputConfig+0xe8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8100f12:	68fb      	ldr	r3, [r7, #12]
 8100f14:	095b      	lsrs	r3, r3, #5
 8100f16:	011b      	lsls	r3, r3, #4
 8100f18:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100f1c:	33c4      	adds	r3, #196	; 0xc4
 8100f1e:	6819      	ldr	r1, [r3, #0]
 8100f20:	68fb      	ldr	r3, [r7, #12]
 8100f22:	f003 031f 	and.w	r3, r3, #31
 8100f26:	2201      	movs	r2, #1
 8100f28:	409a      	lsls	r2, r3
 8100f2a:	68fb      	ldr	r3, [r7, #12]
 8100f2c:	095b      	lsrs	r3, r3, #5
 8100f2e:	011b      	lsls	r3, r3, #4
 8100f30:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8100f34:	33c4      	adds	r3, #196	; 0xc4
 8100f36:	4618      	mov	r0, r3
 8100f38:	ea41 0302 	orr.w	r3, r1, r2
 8100f3c:	6003      	str	r3, [r0, #0]
}
 8100f3e:	bf00      	nop
 8100f40:	3714      	adds	r7, #20
 8100f42:	46bd      	mov	sp, r7
 8100f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f48:	4770      	bx	lr
	...

08100f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100f4c:	b480      	push	{r7}
 8100f4e:	b085      	sub	sp, #20
 8100f50:	af00      	add	r7, sp, #0
 8100f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100f54:	687b      	ldr	r3, [r7, #4]
 8100f56:	f003 0307 	and.w	r3, r3, #7
 8100f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100f5c:	4b0c      	ldr	r3, [pc, #48]	; (8100f90 <__NVIC_SetPriorityGrouping+0x44>)
 8100f5e:	68db      	ldr	r3, [r3, #12]
 8100f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100f62:	68ba      	ldr	r2, [r7, #8]
 8100f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100f68:	4013      	ands	r3, r2
 8100f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100f6c:	68fb      	ldr	r3, [r7, #12]
 8100f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100f70:	68bb      	ldr	r3, [r7, #8]
 8100f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100f7e:	4a04      	ldr	r2, [pc, #16]	; (8100f90 <__NVIC_SetPriorityGrouping+0x44>)
 8100f80:	68bb      	ldr	r3, [r7, #8]
 8100f82:	60d3      	str	r3, [r2, #12]
}
 8100f84:	bf00      	nop
 8100f86:	3714      	adds	r7, #20
 8100f88:	46bd      	mov	sp, r7
 8100f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f8e:	4770      	bx	lr
 8100f90:	e000ed00 	.word	0xe000ed00

08100f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100f94:	b480      	push	{r7}
 8100f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100f98:	4b04      	ldr	r3, [pc, #16]	; (8100fac <__NVIC_GetPriorityGrouping+0x18>)
 8100f9a:	68db      	ldr	r3, [r3, #12]
 8100f9c:	0a1b      	lsrs	r3, r3, #8
 8100f9e:	f003 0307 	and.w	r3, r3, #7
}
 8100fa2:	4618      	mov	r0, r3
 8100fa4:	46bd      	mov	sp, r7
 8100fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100faa:	4770      	bx	lr
 8100fac:	e000ed00 	.word	0xe000ed00

08100fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100fb0:	b480      	push	{r7}
 8100fb2:	b083      	sub	sp, #12
 8100fb4:	af00      	add	r7, sp, #0
 8100fb6:	4603      	mov	r3, r0
 8100fb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100fbe:	2b00      	cmp	r3, #0
 8100fc0:	db0b      	blt.n	8100fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100fc2:	88fb      	ldrh	r3, [r7, #6]
 8100fc4:	f003 021f 	and.w	r2, r3, #31
 8100fc8:	4907      	ldr	r1, [pc, #28]	; (8100fe8 <__NVIC_EnableIRQ+0x38>)
 8100fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100fce:	095b      	lsrs	r3, r3, #5
 8100fd0:	2001      	movs	r0, #1
 8100fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8100fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100fda:	bf00      	nop
 8100fdc:	370c      	adds	r7, #12
 8100fde:	46bd      	mov	sp, r7
 8100fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe4:	4770      	bx	lr
 8100fe6:	bf00      	nop
 8100fe8:	e000e100 	.word	0xe000e100

08100fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100fec:	b480      	push	{r7}
 8100fee:	b083      	sub	sp, #12
 8100ff0:	af00      	add	r7, sp, #0
 8100ff2:	4603      	mov	r3, r0
 8100ff4:	6039      	str	r1, [r7, #0]
 8100ff6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ffc:	2b00      	cmp	r3, #0
 8100ffe:	db0a      	blt.n	8101016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101000:	683b      	ldr	r3, [r7, #0]
 8101002:	b2da      	uxtb	r2, r3
 8101004:	490c      	ldr	r1, [pc, #48]	; (8101038 <__NVIC_SetPriority+0x4c>)
 8101006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810100a:	0112      	lsls	r2, r2, #4
 810100c:	b2d2      	uxtb	r2, r2
 810100e:	440b      	add	r3, r1
 8101010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101014:	e00a      	b.n	810102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101016:	683b      	ldr	r3, [r7, #0]
 8101018:	b2da      	uxtb	r2, r3
 810101a:	4908      	ldr	r1, [pc, #32]	; (810103c <__NVIC_SetPriority+0x50>)
 810101c:	88fb      	ldrh	r3, [r7, #6]
 810101e:	f003 030f 	and.w	r3, r3, #15
 8101022:	3b04      	subs	r3, #4
 8101024:	0112      	lsls	r2, r2, #4
 8101026:	b2d2      	uxtb	r2, r2
 8101028:	440b      	add	r3, r1
 810102a:	761a      	strb	r2, [r3, #24]
}
 810102c:	bf00      	nop
 810102e:	370c      	adds	r7, #12
 8101030:	46bd      	mov	sp, r7
 8101032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101036:	4770      	bx	lr
 8101038:	e000e100 	.word	0xe000e100
 810103c:	e000ed00 	.word	0xe000ed00

08101040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101040:	b480      	push	{r7}
 8101042:	b089      	sub	sp, #36	; 0x24
 8101044:	af00      	add	r7, sp, #0
 8101046:	60f8      	str	r0, [r7, #12]
 8101048:	60b9      	str	r1, [r7, #8]
 810104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810104c:	68fb      	ldr	r3, [r7, #12]
 810104e:	f003 0307 	and.w	r3, r3, #7
 8101052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101054:	69fb      	ldr	r3, [r7, #28]
 8101056:	f1c3 0307 	rsb	r3, r3, #7
 810105a:	2b04      	cmp	r3, #4
 810105c:	bf28      	it	cs
 810105e:	2304      	movcs	r3, #4
 8101060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101062:	69fb      	ldr	r3, [r7, #28]
 8101064:	3304      	adds	r3, #4
 8101066:	2b06      	cmp	r3, #6
 8101068:	d902      	bls.n	8101070 <NVIC_EncodePriority+0x30>
 810106a:	69fb      	ldr	r3, [r7, #28]
 810106c:	3b03      	subs	r3, #3
 810106e:	e000      	b.n	8101072 <NVIC_EncodePriority+0x32>
 8101070:	2300      	movs	r3, #0
 8101072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101074:	f04f 32ff 	mov.w	r2, #4294967295
 8101078:	69bb      	ldr	r3, [r7, #24]
 810107a:	fa02 f303 	lsl.w	r3, r2, r3
 810107e:	43da      	mvns	r2, r3
 8101080:	68bb      	ldr	r3, [r7, #8]
 8101082:	401a      	ands	r2, r3
 8101084:	697b      	ldr	r3, [r7, #20]
 8101086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101088:	f04f 31ff 	mov.w	r1, #4294967295
 810108c:	697b      	ldr	r3, [r7, #20]
 810108e:	fa01 f303 	lsl.w	r3, r1, r3
 8101092:	43d9      	mvns	r1, r3
 8101094:	687b      	ldr	r3, [r7, #4]
 8101096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101098:	4313      	orrs	r3, r2
         );
}
 810109a:	4618      	mov	r0, r3
 810109c:	3724      	adds	r7, #36	; 0x24
 810109e:	46bd      	mov	sp, r7
 81010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010a4:	4770      	bx	lr

081010a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81010a6:	b580      	push	{r7, lr}
 81010a8:	b082      	sub	sp, #8
 81010aa:	af00      	add	r7, sp, #0
 81010ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81010ae:	6878      	ldr	r0, [r7, #4]
 81010b0:	f7ff ff4c 	bl	8100f4c <__NVIC_SetPriorityGrouping>
}
 81010b4:	bf00      	nop
 81010b6:	3708      	adds	r7, #8
 81010b8:	46bd      	mov	sp, r7
 81010ba:	bd80      	pop	{r7, pc}

081010bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81010bc:	b580      	push	{r7, lr}
 81010be:	b086      	sub	sp, #24
 81010c0:	af00      	add	r7, sp, #0
 81010c2:	4603      	mov	r3, r0
 81010c4:	60b9      	str	r1, [r7, #8]
 81010c6:	607a      	str	r2, [r7, #4]
 81010c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81010ca:	f7ff ff63 	bl	8100f94 <__NVIC_GetPriorityGrouping>
 81010ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81010d0:	687a      	ldr	r2, [r7, #4]
 81010d2:	68b9      	ldr	r1, [r7, #8]
 81010d4:	6978      	ldr	r0, [r7, #20]
 81010d6:	f7ff ffb3 	bl	8101040 <NVIC_EncodePriority>
 81010da:	4602      	mov	r2, r0
 81010dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81010e0:	4611      	mov	r1, r2
 81010e2:	4618      	mov	r0, r3
 81010e4:	f7ff ff82 	bl	8100fec <__NVIC_SetPriority>
}
 81010e8:	bf00      	nop
 81010ea:	3718      	adds	r7, #24
 81010ec:	46bd      	mov	sp, r7
 81010ee:	bd80      	pop	{r7, pc}

081010f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81010f0:	b580      	push	{r7, lr}
 81010f2:	b082      	sub	sp, #8
 81010f4:	af00      	add	r7, sp, #0
 81010f6:	4603      	mov	r3, r0
 81010f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81010fe:	4618      	mov	r0, r3
 8101100:	f7ff ff56 	bl	8100fb0 <__NVIC_EnableIRQ>
}
 8101104:	bf00      	nop
 8101106:	3708      	adds	r7, #8
 8101108:	46bd      	mov	sp, r7
 810110a:	bd80      	pop	{r7, pc}

0810110c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810110c:	b480      	push	{r7}
 810110e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101110:	4b07      	ldr	r3, [pc, #28]	; (8101130 <HAL_GetCurrentCPUID+0x24>)
 8101112:	681b      	ldr	r3, [r3, #0]
 8101114:	091b      	lsrs	r3, r3, #4
 8101116:	f003 030f 	and.w	r3, r3, #15
 810111a:	2b07      	cmp	r3, #7
 810111c:	d101      	bne.n	8101122 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810111e:	2303      	movs	r3, #3
 8101120:	e000      	b.n	8101124 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101122:	2301      	movs	r3, #1
  }
}
 8101124:	4618      	mov	r0, r3
 8101126:	46bd      	mov	sp, r7
 8101128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810112c:	4770      	bx	lr
 810112e:	bf00      	nop
 8101130:	e000ed00 	.word	0xe000ed00

08101134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8101134:	b580      	push	{r7, lr}
 8101136:	b082      	sub	sp, #8
 8101138:	af00      	add	r7, sp, #0
 810113a:	4603      	mov	r3, r0
 810113c:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 810113e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101142:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101146:	88fb      	ldrh	r3, [r7, #6]
 8101148:	4013      	ands	r3, r2
 810114a:	2b00      	cmp	r3, #0
 810114c:	d008      	beq.n	8101160 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 810114e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101152:	88fb      	ldrh	r3, [r7, #6]
 8101154:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8101158:	88fb      	ldrh	r3, [r7, #6]
 810115a:	4618      	mov	r0, r3
 810115c:	f7ff f9f4 	bl	8100548 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8101160:	bf00      	nop
 8101162:	3708      	adds	r7, #8
 8101164:	46bd      	mov	sp, r7
 8101166:	bd80      	pop	{r7, pc}

08101168 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101168:	b480      	push	{r7}
 810116a:	b083      	sub	sp, #12
 810116c:	af00      	add	r7, sp, #0
 810116e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101170:	4b05      	ldr	r3, [pc, #20]	; (8101188 <HAL_HSEM_ActivateNotification+0x20>)
 8101172:	681a      	ldr	r2, [r3, #0]
 8101174:	4904      	ldr	r1, [pc, #16]	; (8101188 <HAL_HSEM_ActivateNotification+0x20>)
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	4313      	orrs	r3, r2
 810117a:	600b      	str	r3, [r1, #0]
#endif
}
 810117c:	bf00      	nop
 810117e:	370c      	adds	r7, #12
 8101180:	46bd      	mov	sp, r7
 8101182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101186:	4770      	bx	lr
 8101188:	58026510 	.word	0x58026510

0810118c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810118c:	b580      	push	{r7, lr}
 810118e:	b084      	sub	sp, #16
 8101190:	af00      	add	r7, sp, #0
 8101192:	60f8      	str	r0, [r7, #12]
 8101194:	460b      	mov	r3, r1
 8101196:	607a      	str	r2, [r7, #4]
 8101198:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810119a:	4b37      	ldr	r3, [pc, #220]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 810119c:	681b      	ldr	r3, [r3, #0]
 810119e:	f023 0201 	bic.w	r2, r3, #1
 81011a2:	4935      	ldr	r1, [pc, #212]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011a4:	68fb      	ldr	r3, [r7, #12]
 81011a6:	4313      	orrs	r3, r2
 81011a8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81011aa:	687b      	ldr	r3, [r7, #4]
 81011ac:	2b00      	cmp	r3, #0
 81011ae:	d123      	bne.n	81011f8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81011b0:	f7ff ffac 	bl	810110c <HAL_GetCurrentCPUID>
 81011b4:	4603      	mov	r3, r0
 81011b6:	2b03      	cmp	r3, #3
 81011b8:	d158      	bne.n	810126c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81011ba:	4b2f      	ldr	r3, [pc, #188]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011bc:	691b      	ldr	r3, [r3, #16]
 81011be:	4a2e      	ldr	r2, [pc, #184]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011c0:	f023 0301 	bic.w	r3, r3, #1
 81011c4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011c6:	4b2d      	ldr	r3, [pc, #180]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011c8:	691b      	ldr	r3, [r3, #16]
 81011ca:	4a2c      	ldr	r2, [pc, #176]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011cc:	f043 0304 	orr.w	r3, r3, #4
 81011d0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81011d2:	f3bf 8f4f 	dsb	sy
}
 81011d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81011d8:	f3bf 8f6f 	isb	sy
}
 81011dc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81011de:	7afb      	ldrb	r3, [r7, #11]
 81011e0:	2b01      	cmp	r3, #1
 81011e2:	d101      	bne.n	81011e8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81011e4:	bf30      	wfi
 81011e6:	e000      	b.n	81011ea <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81011e8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011ea:	4b24      	ldr	r3, [pc, #144]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011ec:	691b      	ldr	r3, [r3, #16]
 81011ee:	4a23      	ldr	r2, [pc, #140]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011f0:	f023 0304 	bic.w	r3, r3, #4
 81011f4:	6113      	str	r3, [r2, #16]
 81011f6:	e03c      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	2b01      	cmp	r3, #1
 81011fc:	d123      	bne.n	8101246 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81011fe:	f7ff ff85 	bl	810110c <HAL_GetCurrentCPUID>
 8101202:	4603      	mov	r3, r0
 8101204:	2b01      	cmp	r3, #1
 8101206:	d133      	bne.n	8101270 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101208:	4b1b      	ldr	r3, [pc, #108]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 810120a:	695b      	ldr	r3, [r3, #20]
 810120c:	4a1a      	ldr	r2, [pc, #104]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 810120e:	f023 0302 	bic.w	r3, r3, #2
 8101212:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101214:	4b19      	ldr	r3, [pc, #100]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101216:	691b      	ldr	r3, [r3, #16]
 8101218:	4a18      	ldr	r2, [pc, #96]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810121a:	f043 0304 	orr.w	r3, r3, #4
 810121e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101220:	f3bf 8f4f 	dsb	sy
}
 8101224:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101226:	f3bf 8f6f 	isb	sy
}
 810122a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810122c:	7afb      	ldrb	r3, [r7, #11]
 810122e:	2b01      	cmp	r3, #1
 8101230:	d101      	bne.n	8101236 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101232:	bf30      	wfi
 8101234:	e000      	b.n	8101238 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101236:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101238:	4b10      	ldr	r3, [pc, #64]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810123a:	691b      	ldr	r3, [r3, #16]
 810123c:	4a0f      	ldr	r2, [pc, #60]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810123e:	f023 0304 	bic.w	r3, r3, #4
 8101242:	6113      	str	r3, [r2, #16]
 8101244:	e015      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101246:	f7ff ff61 	bl	810110c <HAL_GetCurrentCPUID>
 810124a:	4603      	mov	r3, r0
 810124c:	2b03      	cmp	r3, #3
 810124e:	d106      	bne.n	810125e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101250:	4b09      	ldr	r3, [pc, #36]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101252:	691b      	ldr	r3, [r3, #16]
 8101254:	4a08      	ldr	r2, [pc, #32]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101256:	f023 0304 	bic.w	r3, r3, #4
 810125a:	6113      	str	r3, [r2, #16]
 810125c:	e009      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810125e:	4b06      	ldr	r3, [pc, #24]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101260:	695b      	ldr	r3, [r3, #20]
 8101262:	4a05      	ldr	r2, [pc, #20]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101264:	f023 0304 	bic.w	r3, r3, #4
 8101268:	6153      	str	r3, [r2, #20]
 810126a:	e002      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810126c:	bf00      	nop
 810126e:	e000      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101270:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101272:	3710      	adds	r7, #16
 8101274:	46bd      	mov	sp, r7
 8101276:	bd80      	pop	{r7, pc}
 8101278:	58024800 	.word	0x58024800
 810127c:	e000ed00 	.word	0xe000ed00

08101280 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101280:	b580      	push	{r7, lr}
 8101282:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101284:	f7ff ff42 	bl	810110c <HAL_GetCurrentCPUID>
 8101288:	4603      	mov	r3, r0
 810128a:	2b03      	cmp	r3, #3
 810128c:	d101      	bne.n	8101292 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810128e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101290:	e001      	b.n	8101296 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101292:	bf40      	sev
    __WFE ();
 8101294:	bf20      	wfe
}
 8101296:	bf00      	nop
 8101298:	bd80      	pop	{r7, pc}
	...

0810129c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810129c:	b480      	push	{r7}
 810129e:	b089      	sub	sp, #36	; 0x24
 81012a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81012a2:	4bb3      	ldr	r3, [pc, #716]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012a4:	691b      	ldr	r3, [r3, #16]
 81012a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81012aa:	2b18      	cmp	r3, #24
 81012ac:	f200 8155 	bhi.w	810155a <HAL_RCC_GetSysClockFreq+0x2be>
 81012b0:	a201      	add	r2, pc, #4	; (adr r2, 81012b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81012b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81012b6:	bf00      	nop
 81012b8:	0810131d 	.word	0x0810131d
 81012bc:	0810155b 	.word	0x0810155b
 81012c0:	0810155b 	.word	0x0810155b
 81012c4:	0810155b 	.word	0x0810155b
 81012c8:	0810155b 	.word	0x0810155b
 81012cc:	0810155b 	.word	0x0810155b
 81012d0:	0810155b 	.word	0x0810155b
 81012d4:	0810155b 	.word	0x0810155b
 81012d8:	08101343 	.word	0x08101343
 81012dc:	0810155b 	.word	0x0810155b
 81012e0:	0810155b 	.word	0x0810155b
 81012e4:	0810155b 	.word	0x0810155b
 81012e8:	0810155b 	.word	0x0810155b
 81012ec:	0810155b 	.word	0x0810155b
 81012f0:	0810155b 	.word	0x0810155b
 81012f4:	0810155b 	.word	0x0810155b
 81012f8:	08101349 	.word	0x08101349
 81012fc:	0810155b 	.word	0x0810155b
 8101300:	0810155b 	.word	0x0810155b
 8101304:	0810155b 	.word	0x0810155b
 8101308:	0810155b 	.word	0x0810155b
 810130c:	0810155b 	.word	0x0810155b
 8101310:	0810155b 	.word	0x0810155b
 8101314:	0810155b 	.word	0x0810155b
 8101318:	0810134f 	.word	0x0810134f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810131c:	4b94      	ldr	r3, [pc, #592]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810131e:	681b      	ldr	r3, [r3, #0]
 8101320:	f003 0320 	and.w	r3, r3, #32
 8101324:	2b00      	cmp	r3, #0
 8101326:	d009      	beq.n	810133c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101328:	4b91      	ldr	r3, [pc, #580]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810132a:	681b      	ldr	r3, [r3, #0]
 810132c:	08db      	lsrs	r3, r3, #3
 810132e:	f003 0303 	and.w	r3, r3, #3
 8101332:	4a90      	ldr	r2, [pc, #576]	; (8101574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101334:	fa22 f303 	lsr.w	r3, r2, r3
 8101338:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810133a:	e111      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810133c:	4b8d      	ldr	r3, [pc, #564]	; (8101574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810133e:	61bb      	str	r3, [r7, #24]
      break;
 8101340:	e10e      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101342:	4b8d      	ldr	r3, [pc, #564]	; (8101578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101344:	61bb      	str	r3, [r7, #24]
      break;
 8101346:	e10b      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101348:	4b8c      	ldr	r3, [pc, #560]	; (810157c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810134a:	61bb      	str	r3, [r7, #24]
      break;
 810134c:	e108      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810134e:	4b88      	ldr	r3, [pc, #544]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101352:	f003 0303 	and.w	r3, r3, #3
 8101356:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101358:	4b85      	ldr	r3, [pc, #532]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810135c:	091b      	lsrs	r3, r3, #4
 810135e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101362:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101364:	4b82      	ldr	r3, [pc, #520]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101368:	f003 0301 	and.w	r3, r3, #1
 810136c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810136e:	4b80      	ldr	r3, [pc, #512]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101372:	08db      	lsrs	r3, r3, #3
 8101374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101378:	68fa      	ldr	r2, [r7, #12]
 810137a:	fb02 f303 	mul.w	r3, r2, r3
 810137e:	ee07 3a90 	vmov	s15, r3
 8101382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101386:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810138a:	693b      	ldr	r3, [r7, #16]
 810138c:	2b00      	cmp	r3, #0
 810138e:	f000 80e1 	beq.w	8101554 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101392:	697b      	ldr	r3, [r7, #20]
 8101394:	2b02      	cmp	r3, #2
 8101396:	f000 8083 	beq.w	81014a0 <HAL_RCC_GetSysClockFreq+0x204>
 810139a:	697b      	ldr	r3, [r7, #20]
 810139c:	2b02      	cmp	r3, #2
 810139e:	f200 80a1 	bhi.w	81014e4 <HAL_RCC_GetSysClockFreq+0x248>
 81013a2:	697b      	ldr	r3, [r7, #20]
 81013a4:	2b00      	cmp	r3, #0
 81013a6:	d003      	beq.n	81013b0 <HAL_RCC_GetSysClockFreq+0x114>
 81013a8:	697b      	ldr	r3, [r7, #20]
 81013aa:	2b01      	cmp	r3, #1
 81013ac:	d056      	beq.n	810145c <HAL_RCC_GetSysClockFreq+0x1c0>
 81013ae:	e099      	b.n	81014e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81013b0:	4b6f      	ldr	r3, [pc, #444]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013b2:	681b      	ldr	r3, [r3, #0]
 81013b4:	f003 0320 	and.w	r3, r3, #32
 81013b8:	2b00      	cmp	r3, #0
 81013ba:	d02d      	beq.n	8101418 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81013bc:	4b6c      	ldr	r3, [pc, #432]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013be:	681b      	ldr	r3, [r3, #0]
 81013c0:	08db      	lsrs	r3, r3, #3
 81013c2:	f003 0303 	and.w	r3, r3, #3
 81013c6:	4a6b      	ldr	r2, [pc, #428]	; (8101574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81013c8:	fa22 f303 	lsr.w	r3, r2, r3
 81013cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81013ce:	687b      	ldr	r3, [r7, #4]
 81013d0:	ee07 3a90 	vmov	s15, r3
 81013d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013d8:	693b      	ldr	r3, [r7, #16]
 81013da:	ee07 3a90 	vmov	s15, r3
 81013de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013e6:	4b62      	ldr	r3, [pc, #392]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81013ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81013ee:	ee07 3a90 	vmov	s15, r3
 81013f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81013fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 81013fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810140a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810140e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101412:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101416:	e087      	b.n	8101528 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101418:	693b      	ldr	r3, [r7, #16]
 810141a:	ee07 3a90 	vmov	s15, r3
 810141e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101422:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101584 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810142a:	4b51      	ldr	r3, [pc, #324]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810142e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101432:	ee07 3a90 	vmov	s15, r3
 8101436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810143a:	ed97 6a02 	vldr	s12, [r7, #8]
 810143e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810144a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810144e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810145a:	e065      	b.n	8101528 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810145c:	693b      	ldr	r3, [r7, #16]
 810145e:	ee07 3a90 	vmov	s15, r3
 8101462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101466:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101588 <HAL_RCC_GetSysClockFreq+0x2ec>
 810146a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810146e:	4b40      	ldr	r3, [pc, #256]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101476:	ee07 3a90 	vmov	s15, r3
 810147a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810147e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101482:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810148a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810148e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101496:	ee67 7a27 	vmul.f32	s15, s14, s15
 810149a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810149e:	e043      	b.n	8101528 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81014a0:	693b      	ldr	r3, [r7, #16]
 81014a2:	ee07 3a90 	vmov	s15, r3
 81014a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 810158c <HAL_RCC_GetSysClockFreq+0x2f0>
 81014ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014b2:	4b2f      	ldr	r3, [pc, #188]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014ba:	ee07 3a90 	vmov	s15, r3
 81014be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81014c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81014e2:	e021      	b.n	8101528 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81014e4:	693b      	ldr	r3, [r7, #16]
 81014e6:	ee07 3a90 	vmov	s15, r3
 81014ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101588 <HAL_RCC_GetSysClockFreq+0x2ec>
 81014f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014f6:	4b1e      	ldr	r3, [pc, #120]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014fe:	ee07 3a90 	vmov	s15, r3
 8101502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101506:	ed97 6a02 	vldr	s12, [r7, #8]
 810150a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 810150e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810151a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810151e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101526:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101528:	4b11      	ldr	r3, [pc, #68]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810152c:	0a5b      	lsrs	r3, r3, #9
 810152e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101532:	3301      	adds	r3, #1
 8101534:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101536:	683b      	ldr	r3, [r7, #0]
 8101538:	ee07 3a90 	vmov	s15, r3
 810153c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101540:	edd7 6a07 	vldr	s13, [r7, #28]
 8101544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810154c:	ee17 3a90 	vmov	r3, s15
 8101550:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101552:	e005      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101554:	2300      	movs	r3, #0
 8101556:	61bb      	str	r3, [r7, #24]
      break;
 8101558:	e002      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810155a:	4b07      	ldr	r3, [pc, #28]	; (8101578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810155c:	61bb      	str	r3, [r7, #24]
      break;
 810155e:	bf00      	nop
  }

  return sysclockfreq;
 8101560:	69bb      	ldr	r3, [r7, #24]
}
 8101562:	4618      	mov	r0, r3
 8101564:	3724      	adds	r7, #36	; 0x24
 8101566:	46bd      	mov	sp, r7
 8101568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810156c:	4770      	bx	lr
 810156e:	bf00      	nop
 8101570:	58024400 	.word	0x58024400
 8101574:	03d09000 	.word	0x03d09000
 8101578:	003d0900 	.word	0x003d0900
 810157c:	007a1200 	.word	0x007a1200
 8101580:	46000000 	.word	0x46000000
 8101584:	4c742400 	.word	0x4c742400
 8101588:	4a742400 	.word	0x4a742400
 810158c:	4af42400 	.word	0x4af42400

08101590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101590:	b580      	push	{r7, lr}
 8101592:	b082      	sub	sp, #8
 8101594:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101596:	f7ff fe81 	bl	810129c <HAL_RCC_GetSysClockFreq>
 810159a:	4602      	mov	r2, r0
 810159c:	4b11      	ldr	r3, [pc, #68]	; (81015e4 <HAL_RCC_GetHCLKFreq+0x54>)
 810159e:	699b      	ldr	r3, [r3, #24]
 81015a0:	0a1b      	lsrs	r3, r3, #8
 81015a2:	f003 030f 	and.w	r3, r3, #15
 81015a6:	4910      	ldr	r1, [pc, #64]	; (81015e8 <HAL_RCC_GetHCLKFreq+0x58>)
 81015a8:	5ccb      	ldrb	r3, [r1, r3]
 81015aa:	f003 031f 	and.w	r3, r3, #31
 81015ae:	fa22 f303 	lsr.w	r3, r2, r3
 81015b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81015b4:	4b0b      	ldr	r3, [pc, #44]	; (81015e4 <HAL_RCC_GetHCLKFreq+0x54>)
 81015b6:	699b      	ldr	r3, [r3, #24]
 81015b8:	f003 030f 	and.w	r3, r3, #15
 81015bc:	4a0a      	ldr	r2, [pc, #40]	; (81015e8 <HAL_RCC_GetHCLKFreq+0x58>)
 81015be:	5cd3      	ldrb	r3, [r2, r3]
 81015c0:	f003 031f 	and.w	r3, r3, #31
 81015c4:	687a      	ldr	r2, [r7, #4]
 81015c6:	fa22 f303 	lsr.w	r3, r2, r3
 81015ca:	4a08      	ldr	r2, [pc, #32]	; (81015ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81015cc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81015ce:	4b07      	ldr	r3, [pc, #28]	; (81015ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	4a07      	ldr	r2, [pc, #28]	; (81015f0 <HAL_RCC_GetHCLKFreq+0x60>)
 81015d4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81015d6:	4b05      	ldr	r3, [pc, #20]	; (81015ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81015d8:	681b      	ldr	r3, [r3, #0]
}
 81015da:	4618      	mov	r0, r3
 81015dc:	3708      	adds	r7, #8
 81015de:	46bd      	mov	sp, r7
 81015e0:	bd80      	pop	{r7, pc}
 81015e2:	bf00      	nop
 81015e4:	58024400 	.word	0x58024400
 81015e8:	08106c08 	.word	0x08106c08
 81015ec:	10000004 	.word	0x10000004
 81015f0:	10000000 	.word	0x10000000

081015f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81015f4:	b580      	push	{r7, lr}
 81015f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81015f8:	f7ff ffca 	bl	8101590 <HAL_RCC_GetHCLKFreq>
 81015fc:	4602      	mov	r2, r0
 81015fe:	4b06      	ldr	r3, [pc, #24]	; (8101618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101600:	69db      	ldr	r3, [r3, #28]
 8101602:	0a1b      	lsrs	r3, r3, #8
 8101604:	f003 0307 	and.w	r3, r3, #7
 8101608:	4904      	ldr	r1, [pc, #16]	; (810161c <HAL_RCC_GetPCLK2Freq+0x28>)
 810160a:	5ccb      	ldrb	r3, [r1, r3]
 810160c:	f003 031f 	and.w	r3, r3, #31
 8101610:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101614:	4618      	mov	r0, r3
 8101616:	bd80      	pop	{r7, pc}
 8101618:	58024400 	.word	0x58024400
 810161c:	08106c08 	.word	0x08106c08

08101620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101620:	b480      	push	{r7}
 8101622:	b083      	sub	sp, #12
 8101624:	af00      	add	r7, sp, #0
 8101626:	6078      	str	r0, [r7, #4]
 8101628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810162a:	687b      	ldr	r3, [r7, #4]
 810162c:	223f      	movs	r2, #63	; 0x3f
 810162e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101630:	4b1a      	ldr	r3, [pc, #104]	; (810169c <HAL_RCC_GetClockConfig+0x7c>)
 8101632:	691b      	ldr	r3, [r3, #16]
 8101634:	f003 0207 	and.w	r2, r3, #7
 8101638:	687b      	ldr	r3, [r7, #4]
 810163a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810163c:	4b17      	ldr	r3, [pc, #92]	; (810169c <HAL_RCC_GetClockConfig+0x7c>)
 810163e:	699b      	ldr	r3, [r3, #24]
 8101640:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101644:	687b      	ldr	r3, [r7, #4]
 8101646:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8101648:	4b14      	ldr	r3, [pc, #80]	; (810169c <HAL_RCC_GetClockConfig+0x7c>)
 810164a:	699b      	ldr	r3, [r3, #24]
 810164c:	f003 020f 	and.w	r2, r3, #15
 8101650:	687b      	ldr	r3, [r7, #4]
 8101652:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101654:	4b11      	ldr	r3, [pc, #68]	; (810169c <HAL_RCC_GetClockConfig+0x7c>)
 8101656:	699b      	ldr	r3, [r3, #24]
 8101658:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810165c:	687b      	ldr	r3, [r7, #4]
 810165e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101660:	4b0e      	ldr	r3, [pc, #56]	; (810169c <HAL_RCC_GetClockConfig+0x7c>)
 8101662:	69db      	ldr	r3, [r3, #28]
 8101664:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810166c:	4b0b      	ldr	r3, [pc, #44]	; (810169c <HAL_RCC_GetClockConfig+0x7c>)
 810166e:	69db      	ldr	r3, [r3, #28]
 8101670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8101678:	4b08      	ldr	r3, [pc, #32]	; (810169c <HAL_RCC_GetClockConfig+0x7c>)
 810167a:	6a1b      	ldr	r3, [r3, #32]
 810167c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101680:	687b      	ldr	r3, [r7, #4]
 8101682:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101684:	4b06      	ldr	r3, [pc, #24]	; (81016a0 <HAL_RCC_GetClockConfig+0x80>)
 8101686:	681b      	ldr	r3, [r3, #0]
 8101688:	f003 020f 	and.w	r2, r3, #15
 810168c:	683b      	ldr	r3, [r7, #0]
 810168e:	601a      	str	r2, [r3, #0]
}
 8101690:	bf00      	nop
 8101692:	370c      	adds	r7, #12
 8101694:	46bd      	mov	sp, r7
 8101696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810169a:	4770      	bx	lr
 810169c:	58024400 	.word	0x58024400
 81016a0:	52002000 	.word	0x52002000

081016a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81016a4:	b580      	push	{r7, lr}
 81016a6:	b082      	sub	sp, #8
 81016a8:	af00      	add	r7, sp, #0
 81016aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81016ac:	687b      	ldr	r3, [r7, #4]
 81016ae:	2b00      	cmp	r3, #0
 81016b0:	d101      	bne.n	81016b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81016b2:	2301      	movs	r3, #1
 81016b4:	e049      	b.n	810174a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81016bc:	b2db      	uxtb	r3, r3
 81016be:	2b00      	cmp	r3, #0
 81016c0:	d106      	bne.n	81016d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	2200      	movs	r2, #0
 81016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81016ca:	6878      	ldr	r0, [r7, #4]
 81016cc:	f7ff f924 	bl	8100918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81016d0:	687b      	ldr	r3, [r7, #4]
 81016d2:	2202      	movs	r2, #2
 81016d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81016d8:	687b      	ldr	r3, [r7, #4]
 81016da:	681a      	ldr	r2, [r3, #0]
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	3304      	adds	r3, #4
 81016e0:	4619      	mov	r1, r3
 81016e2:	4610      	mov	r0, r2
 81016e4:	f000 f9f6 	bl	8101ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81016e8:	687b      	ldr	r3, [r7, #4]
 81016ea:	2201      	movs	r2, #1
 81016ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81016f0:	687b      	ldr	r3, [r7, #4]
 81016f2:	2201      	movs	r2, #1
 81016f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81016f8:	687b      	ldr	r3, [r7, #4]
 81016fa:	2201      	movs	r2, #1
 81016fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101700:	687b      	ldr	r3, [r7, #4]
 8101702:	2201      	movs	r2, #1
 8101704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101708:	687b      	ldr	r3, [r7, #4]
 810170a:	2201      	movs	r2, #1
 810170c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	2201      	movs	r2, #1
 8101714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101718:	687b      	ldr	r3, [r7, #4]
 810171a:	2201      	movs	r2, #1
 810171c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	2201      	movs	r2, #1
 8101724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101728:	687b      	ldr	r3, [r7, #4]
 810172a:	2201      	movs	r2, #1
 810172c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	2201      	movs	r2, #1
 8101734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101738:	687b      	ldr	r3, [r7, #4]
 810173a:	2201      	movs	r2, #1
 810173c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101740:	687b      	ldr	r3, [r7, #4]
 8101742:	2201      	movs	r2, #1
 8101744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101748:	2300      	movs	r3, #0
}
 810174a:	4618      	mov	r0, r3
 810174c:	3708      	adds	r7, #8
 810174e:	46bd      	mov	sp, r7
 8101750:	bd80      	pop	{r7, pc}
	...

08101754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8101754:	b480      	push	{r7}
 8101756:	b085      	sub	sp, #20
 8101758:	af00      	add	r7, sp, #0
 810175a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810175c:	687b      	ldr	r3, [r7, #4]
 810175e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101762:	b2db      	uxtb	r3, r3
 8101764:	2b01      	cmp	r3, #1
 8101766:	d001      	beq.n	810176c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8101768:	2301      	movs	r3, #1
 810176a:	e054      	b.n	8101816 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	2202      	movs	r2, #2
 8101770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8101774:	687b      	ldr	r3, [r7, #4]
 8101776:	681b      	ldr	r3, [r3, #0]
 8101778:	68da      	ldr	r2, [r3, #12]
 810177a:	687b      	ldr	r3, [r7, #4]
 810177c:	681b      	ldr	r3, [r3, #0]
 810177e:	f042 0201 	orr.w	r2, r2, #1
 8101782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8101784:	687b      	ldr	r3, [r7, #4]
 8101786:	681b      	ldr	r3, [r3, #0]
 8101788:	4a26      	ldr	r2, [pc, #152]	; (8101824 <HAL_TIM_Base_Start_IT+0xd0>)
 810178a:	4293      	cmp	r3, r2
 810178c:	d022      	beq.n	81017d4 <HAL_TIM_Base_Start_IT+0x80>
 810178e:	687b      	ldr	r3, [r7, #4]
 8101790:	681b      	ldr	r3, [r3, #0]
 8101792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101796:	d01d      	beq.n	81017d4 <HAL_TIM_Base_Start_IT+0x80>
 8101798:	687b      	ldr	r3, [r7, #4]
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	4a22      	ldr	r2, [pc, #136]	; (8101828 <HAL_TIM_Base_Start_IT+0xd4>)
 810179e:	4293      	cmp	r3, r2
 81017a0:	d018      	beq.n	81017d4 <HAL_TIM_Base_Start_IT+0x80>
 81017a2:	687b      	ldr	r3, [r7, #4]
 81017a4:	681b      	ldr	r3, [r3, #0]
 81017a6:	4a21      	ldr	r2, [pc, #132]	; (810182c <HAL_TIM_Base_Start_IT+0xd8>)
 81017a8:	4293      	cmp	r3, r2
 81017aa:	d013      	beq.n	81017d4 <HAL_TIM_Base_Start_IT+0x80>
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	681b      	ldr	r3, [r3, #0]
 81017b0:	4a1f      	ldr	r2, [pc, #124]	; (8101830 <HAL_TIM_Base_Start_IT+0xdc>)
 81017b2:	4293      	cmp	r3, r2
 81017b4:	d00e      	beq.n	81017d4 <HAL_TIM_Base_Start_IT+0x80>
 81017b6:	687b      	ldr	r3, [r7, #4]
 81017b8:	681b      	ldr	r3, [r3, #0]
 81017ba:	4a1e      	ldr	r2, [pc, #120]	; (8101834 <HAL_TIM_Base_Start_IT+0xe0>)
 81017bc:	4293      	cmp	r3, r2
 81017be:	d009      	beq.n	81017d4 <HAL_TIM_Base_Start_IT+0x80>
 81017c0:	687b      	ldr	r3, [r7, #4]
 81017c2:	681b      	ldr	r3, [r3, #0]
 81017c4:	4a1c      	ldr	r2, [pc, #112]	; (8101838 <HAL_TIM_Base_Start_IT+0xe4>)
 81017c6:	4293      	cmp	r3, r2
 81017c8:	d004      	beq.n	81017d4 <HAL_TIM_Base_Start_IT+0x80>
 81017ca:	687b      	ldr	r3, [r7, #4]
 81017cc:	681b      	ldr	r3, [r3, #0]
 81017ce:	4a1b      	ldr	r2, [pc, #108]	; (810183c <HAL_TIM_Base_Start_IT+0xe8>)
 81017d0:	4293      	cmp	r3, r2
 81017d2:	d115      	bne.n	8101800 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81017d4:	687b      	ldr	r3, [r7, #4]
 81017d6:	681b      	ldr	r3, [r3, #0]
 81017d8:	689a      	ldr	r2, [r3, #8]
 81017da:	4b19      	ldr	r3, [pc, #100]	; (8101840 <HAL_TIM_Base_Start_IT+0xec>)
 81017dc:	4013      	ands	r3, r2
 81017de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81017e0:	68fb      	ldr	r3, [r7, #12]
 81017e2:	2b06      	cmp	r3, #6
 81017e4:	d015      	beq.n	8101812 <HAL_TIM_Base_Start_IT+0xbe>
 81017e6:	68fb      	ldr	r3, [r7, #12]
 81017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81017ec:	d011      	beq.n	8101812 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	681b      	ldr	r3, [r3, #0]
 81017f2:	681a      	ldr	r2, [r3, #0]
 81017f4:	687b      	ldr	r3, [r7, #4]
 81017f6:	681b      	ldr	r3, [r3, #0]
 81017f8:	f042 0201 	orr.w	r2, r2, #1
 81017fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81017fe:	e008      	b.n	8101812 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8101800:	687b      	ldr	r3, [r7, #4]
 8101802:	681b      	ldr	r3, [r3, #0]
 8101804:	681a      	ldr	r2, [r3, #0]
 8101806:	687b      	ldr	r3, [r7, #4]
 8101808:	681b      	ldr	r3, [r3, #0]
 810180a:	f042 0201 	orr.w	r2, r2, #1
 810180e:	601a      	str	r2, [r3, #0]
 8101810:	e000      	b.n	8101814 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8101814:	2300      	movs	r3, #0
}
 8101816:	4618      	mov	r0, r3
 8101818:	3714      	adds	r7, #20
 810181a:	46bd      	mov	sp, r7
 810181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101820:	4770      	bx	lr
 8101822:	bf00      	nop
 8101824:	40010000 	.word	0x40010000
 8101828:	40000400 	.word	0x40000400
 810182c:	40000800 	.word	0x40000800
 8101830:	40000c00 	.word	0x40000c00
 8101834:	40010400 	.word	0x40010400
 8101838:	40001800 	.word	0x40001800
 810183c:	40014000 	.word	0x40014000
 8101840:	00010007 	.word	0x00010007

08101844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8101844:	b580      	push	{r7, lr}
 8101846:	b082      	sub	sp, #8
 8101848:	af00      	add	r7, sp, #0
 810184a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810184c:	687b      	ldr	r3, [r7, #4]
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	691b      	ldr	r3, [r3, #16]
 8101852:	f003 0302 	and.w	r3, r3, #2
 8101856:	2b02      	cmp	r3, #2
 8101858:	d122      	bne.n	81018a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	681b      	ldr	r3, [r3, #0]
 810185e:	68db      	ldr	r3, [r3, #12]
 8101860:	f003 0302 	and.w	r3, r3, #2
 8101864:	2b02      	cmp	r3, #2
 8101866:	d11b      	bne.n	81018a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8101868:	687b      	ldr	r3, [r7, #4]
 810186a:	681b      	ldr	r3, [r3, #0]
 810186c:	f06f 0202 	mvn.w	r2, #2
 8101870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8101872:	687b      	ldr	r3, [r7, #4]
 8101874:	2201      	movs	r2, #1
 8101876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8101878:	687b      	ldr	r3, [r7, #4]
 810187a:	681b      	ldr	r3, [r3, #0]
 810187c:	699b      	ldr	r3, [r3, #24]
 810187e:	f003 0303 	and.w	r3, r3, #3
 8101882:	2b00      	cmp	r3, #0
 8101884:	d003      	beq.n	810188e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8101886:	6878      	ldr	r0, [r7, #4]
 8101888:	f000 f905 	bl	8101a96 <HAL_TIM_IC_CaptureCallback>
 810188c:	e005      	b.n	810189a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810188e:	6878      	ldr	r0, [r7, #4]
 8101890:	f000 f8f7 	bl	8101a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101894:	6878      	ldr	r0, [r7, #4]
 8101896:	f000 f908 	bl	8101aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810189a:	687b      	ldr	r3, [r7, #4]
 810189c:	2200      	movs	r2, #0
 810189e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81018a0:	687b      	ldr	r3, [r7, #4]
 81018a2:	681b      	ldr	r3, [r3, #0]
 81018a4:	691b      	ldr	r3, [r3, #16]
 81018a6:	f003 0304 	and.w	r3, r3, #4
 81018aa:	2b04      	cmp	r3, #4
 81018ac:	d122      	bne.n	81018f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81018ae:	687b      	ldr	r3, [r7, #4]
 81018b0:	681b      	ldr	r3, [r3, #0]
 81018b2:	68db      	ldr	r3, [r3, #12]
 81018b4:	f003 0304 	and.w	r3, r3, #4
 81018b8:	2b04      	cmp	r3, #4
 81018ba:	d11b      	bne.n	81018f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81018bc:	687b      	ldr	r3, [r7, #4]
 81018be:	681b      	ldr	r3, [r3, #0]
 81018c0:	f06f 0204 	mvn.w	r2, #4
 81018c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81018c6:	687b      	ldr	r3, [r7, #4]
 81018c8:	2202      	movs	r2, #2
 81018ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81018cc:	687b      	ldr	r3, [r7, #4]
 81018ce:	681b      	ldr	r3, [r3, #0]
 81018d0:	699b      	ldr	r3, [r3, #24]
 81018d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81018d6:	2b00      	cmp	r3, #0
 81018d8:	d003      	beq.n	81018e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81018da:	6878      	ldr	r0, [r7, #4]
 81018dc:	f000 f8db 	bl	8101a96 <HAL_TIM_IC_CaptureCallback>
 81018e0:	e005      	b.n	81018ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81018e2:	6878      	ldr	r0, [r7, #4]
 81018e4:	f000 f8cd 	bl	8101a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81018e8:	6878      	ldr	r0, [r7, #4]
 81018ea:	f000 f8de 	bl	8101aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81018ee:	687b      	ldr	r3, [r7, #4]
 81018f0:	2200      	movs	r2, #0
 81018f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81018f4:	687b      	ldr	r3, [r7, #4]
 81018f6:	681b      	ldr	r3, [r3, #0]
 81018f8:	691b      	ldr	r3, [r3, #16]
 81018fa:	f003 0308 	and.w	r3, r3, #8
 81018fe:	2b08      	cmp	r3, #8
 8101900:	d122      	bne.n	8101948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8101902:	687b      	ldr	r3, [r7, #4]
 8101904:	681b      	ldr	r3, [r3, #0]
 8101906:	68db      	ldr	r3, [r3, #12]
 8101908:	f003 0308 	and.w	r3, r3, #8
 810190c:	2b08      	cmp	r3, #8
 810190e:	d11b      	bne.n	8101948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8101910:	687b      	ldr	r3, [r7, #4]
 8101912:	681b      	ldr	r3, [r3, #0]
 8101914:	f06f 0208 	mvn.w	r2, #8
 8101918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	2204      	movs	r2, #4
 810191e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8101920:	687b      	ldr	r3, [r7, #4]
 8101922:	681b      	ldr	r3, [r3, #0]
 8101924:	69db      	ldr	r3, [r3, #28]
 8101926:	f003 0303 	and.w	r3, r3, #3
 810192a:	2b00      	cmp	r3, #0
 810192c:	d003      	beq.n	8101936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810192e:	6878      	ldr	r0, [r7, #4]
 8101930:	f000 f8b1 	bl	8101a96 <HAL_TIM_IC_CaptureCallback>
 8101934:	e005      	b.n	8101942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101936:	6878      	ldr	r0, [r7, #4]
 8101938:	f000 f8a3 	bl	8101a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810193c:	6878      	ldr	r0, [r7, #4]
 810193e:	f000 f8b4 	bl	8101aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	2200      	movs	r2, #0
 8101946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8101948:	687b      	ldr	r3, [r7, #4]
 810194a:	681b      	ldr	r3, [r3, #0]
 810194c:	691b      	ldr	r3, [r3, #16]
 810194e:	f003 0310 	and.w	r3, r3, #16
 8101952:	2b10      	cmp	r3, #16
 8101954:	d122      	bne.n	810199c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8101956:	687b      	ldr	r3, [r7, #4]
 8101958:	681b      	ldr	r3, [r3, #0]
 810195a:	68db      	ldr	r3, [r3, #12]
 810195c:	f003 0310 	and.w	r3, r3, #16
 8101960:	2b10      	cmp	r3, #16
 8101962:	d11b      	bne.n	810199c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8101964:	687b      	ldr	r3, [r7, #4]
 8101966:	681b      	ldr	r3, [r3, #0]
 8101968:	f06f 0210 	mvn.w	r2, #16
 810196c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	2208      	movs	r2, #8
 8101972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8101974:	687b      	ldr	r3, [r7, #4]
 8101976:	681b      	ldr	r3, [r3, #0]
 8101978:	69db      	ldr	r3, [r3, #28]
 810197a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810197e:	2b00      	cmp	r3, #0
 8101980:	d003      	beq.n	810198a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101982:	6878      	ldr	r0, [r7, #4]
 8101984:	f000 f887 	bl	8101a96 <HAL_TIM_IC_CaptureCallback>
 8101988:	e005      	b.n	8101996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810198a:	6878      	ldr	r0, [r7, #4]
 810198c:	f000 f879 	bl	8101a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101990:	6878      	ldr	r0, [r7, #4]
 8101992:	f000 f88a 	bl	8101aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101996:	687b      	ldr	r3, [r7, #4]
 8101998:	2200      	movs	r2, #0
 810199a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	681b      	ldr	r3, [r3, #0]
 81019a0:	691b      	ldr	r3, [r3, #16]
 81019a2:	f003 0301 	and.w	r3, r3, #1
 81019a6:	2b01      	cmp	r3, #1
 81019a8:	d10e      	bne.n	81019c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	681b      	ldr	r3, [r3, #0]
 81019ae:	68db      	ldr	r3, [r3, #12]
 81019b0:	f003 0301 	and.w	r3, r3, #1
 81019b4:	2b01      	cmp	r3, #1
 81019b6:	d107      	bne.n	81019c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81019b8:	687b      	ldr	r3, [r7, #4]
 81019ba:	681b      	ldr	r3, [r3, #0]
 81019bc:	f06f 0201 	mvn.w	r2, #1
 81019c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81019c2:	6878      	ldr	r0, [r7, #4]
 81019c4:	f7fe ff40 	bl	8100848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	681b      	ldr	r3, [r3, #0]
 81019cc:	691b      	ldr	r3, [r3, #16]
 81019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81019d2:	2b80      	cmp	r3, #128	; 0x80
 81019d4:	d10e      	bne.n	81019f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	681b      	ldr	r3, [r3, #0]
 81019da:	68db      	ldr	r3, [r3, #12]
 81019dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81019e0:	2b80      	cmp	r3, #128	; 0x80
 81019e2:	d107      	bne.n	81019f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81019e4:	687b      	ldr	r3, [r7, #4]
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81019ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81019ee:	6878      	ldr	r0, [r7, #4]
 81019f0:	f000 f914 	bl	8101c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81019f4:	687b      	ldr	r3, [r7, #4]
 81019f6:	681b      	ldr	r3, [r3, #0]
 81019f8:	691b      	ldr	r3, [r3, #16]
 81019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81019fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101a02:	d10e      	bne.n	8101a22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8101a04:	687b      	ldr	r3, [r7, #4]
 8101a06:	681b      	ldr	r3, [r3, #0]
 8101a08:	68db      	ldr	r3, [r3, #12]
 8101a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101a0e:	2b80      	cmp	r3, #128	; 0x80
 8101a10:	d107      	bne.n	8101a22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	681b      	ldr	r3, [r3, #0]
 8101a16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8101a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101a1c:	6878      	ldr	r0, [r7, #4]
 8101a1e:	f000 f907 	bl	8101c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	681b      	ldr	r3, [r3, #0]
 8101a26:	691b      	ldr	r3, [r3, #16]
 8101a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101a2c:	2b40      	cmp	r3, #64	; 0x40
 8101a2e:	d10e      	bne.n	8101a4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	681b      	ldr	r3, [r3, #0]
 8101a34:	68db      	ldr	r3, [r3, #12]
 8101a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101a3a:	2b40      	cmp	r3, #64	; 0x40
 8101a3c:	d107      	bne.n	8101a4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	681b      	ldr	r3, [r3, #0]
 8101a42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8101a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8101a48:	6878      	ldr	r0, [r7, #4]
 8101a4a:	f000 f838 	bl	8101abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8101a4e:	687b      	ldr	r3, [r7, #4]
 8101a50:	681b      	ldr	r3, [r3, #0]
 8101a52:	691b      	ldr	r3, [r3, #16]
 8101a54:	f003 0320 	and.w	r3, r3, #32
 8101a58:	2b20      	cmp	r3, #32
 8101a5a:	d10e      	bne.n	8101a7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	681b      	ldr	r3, [r3, #0]
 8101a60:	68db      	ldr	r3, [r3, #12]
 8101a62:	f003 0320 	and.w	r3, r3, #32
 8101a66:	2b20      	cmp	r3, #32
 8101a68:	d107      	bne.n	8101a7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8101a6a:	687b      	ldr	r3, [r7, #4]
 8101a6c:	681b      	ldr	r3, [r3, #0]
 8101a6e:	f06f 0220 	mvn.w	r2, #32
 8101a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8101a74:	6878      	ldr	r0, [r7, #4]
 8101a76:	f000 f8c7 	bl	8101c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8101a7a:	bf00      	nop
 8101a7c:	3708      	adds	r7, #8
 8101a7e:	46bd      	mov	sp, r7
 8101a80:	bd80      	pop	{r7, pc}

08101a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101a82:	b480      	push	{r7}
 8101a84:	b083      	sub	sp, #12
 8101a86:	af00      	add	r7, sp, #0
 8101a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8101a8a:	bf00      	nop
 8101a8c:	370c      	adds	r7, #12
 8101a8e:	46bd      	mov	sp, r7
 8101a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a94:	4770      	bx	lr

08101a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8101a96:	b480      	push	{r7}
 8101a98:	b083      	sub	sp, #12
 8101a9a:	af00      	add	r7, sp, #0
 8101a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8101a9e:	bf00      	nop
 8101aa0:	370c      	adds	r7, #12
 8101aa2:	46bd      	mov	sp, r7
 8101aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa8:	4770      	bx	lr

08101aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8101aaa:	b480      	push	{r7}
 8101aac:	b083      	sub	sp, #12
 8101aae:	af00      	add	r7, sp, #0
 8101ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8101ab2:	bf00      	nop
 8101ab4:	370c      	adds	r7, #12
 8101ab6:	46bd      	mov	sp, r7
 8101ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101abc:	4770      	bx	lr

08101abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8101abe:	b480      	push	{r7}
 8101ac0:	b083      	sub	sp, #12
 8101ac2:	af00      	add	r7, sp, #0
 8101ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8101ac6:	bf00      	nop
 8101ac8:	370c      	adds	r7, #12
 8101aca:	46bd      	mov	sp, r7
 8101acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ad0:	4770      	bx	lr
	...

08101ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8101ad4:	b480      	push	{r7}
 8101ad6:	b085      	sub	sp, #20
 8101ad8:	af00      	add	r7, sp, #0
 8101ada:	6078      	str	r0, [r7, #4]
 8101adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	4a40      	ldr	r2, [pc, #256]	; (8101be8 <TIM_Base_SetConfig+0x114>)
 8101ae8:	4293      	cmp	r3, r2
 8101aea:	d013      	beq.n	8101b14 <TIM_Base_SetConfig+0x40>
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101af2:	d00f      	beq.n	8101b14 <TIM_Base_SetConfig+0x40>
 8101af4:	687b      	ldr	r3, [r7, #4]
 8101af6:	4a3d      	ldr	r2, [pc, #244]	; (8101bec <TIM_Base_SetConfig+0x118>)
 8101af8:	4293      	cmp	r3, r2
 8101afa:	d00b      	beq.n	8101b14 <TIM_Base_SetConfig+0x40>
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	4a3c      	ldr	r2, [pc, #240]	; (8101bf0 <TIM_Base_SetConfig+0x11c>)
 8101b00:	4293      	cmp	r3, r2
 8101b02:	d007      	beq.n	8101b14 <TIM_Base_SetConfig+0x40>
 8101b04:	687b      	ldr	r3, [r7, #4]
 8101b06:	4a3b      	ldr	r2, [pc, #236]	; (8101bf4 <TIM_Base_SetConfig+0x120>)
 8101b08:	4293      	cmp	r3, r2
 8101b0a:	d003      	beq.n	8101b14 <TIM_Base_SetConfig+0x40>
 8101b0c:	687b      	ldr	r3, [r7, #4]
 8101b0e:	4a3a      	ldr	r2, [pc, #232]	; (8101bf8 <TIM_Base_SetConfig+0x124>)
 8101b10:	4293      	cmp	r3, r2
 8101b12:	d108      	bne.n	8101b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101b14:	68fb      	ldr	r3, [r7, #12]
 8101b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101b1c:	683b      	ldr	r3, [r7, #0]
 8101b1e:	685b      	ldr	r3, [r3, #4]
 8101b20:	68fa      	ldr	r2, [r7, #12]
 8101b22:	4313      	orrs	r3, r2
 8101b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	4a2f      	ldr	r2, [pc, #188]	; (8101be8 <TIM_Base_SetConfig+0x114>)
 8101b2a:	4293      	cmp	r3, r2
 8101b2c:	d01f      	beq.n	8101b6e <TIM_Base_SetConfig+0x9a>
 8101b2e:	687b      	ldr	r3, [r7, #4]
 8101b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b34:	d01b      	beq.n	8101b6e <TIM_Base_SetConfig+0x9a>
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	4a2c      	ldr	r2, [pc, #176]	; (8101bec <TIM_Base_SetConfig+0x118>)
 8101b3a:	4293      	cmp	r3, r2
 8101b3c:	d017      	beq.n	8101b6e <TIM_Base_SetConfig+0x9a>
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	4a2b      	ldr	r2, [pc, #172]	; (8101bf0 <TIM_Base_SetConfig+0x11c>)
 8101b42:	4293      	cmp	r3, r2
 8101b44:	d013      	beq.n	8101b6e <TIM_Base_SetConfig+0x9a>
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	4a2a      	ldr	r2, [pc, #168]	; (8101bf4 <TIM_Base_SetConfig+0x120>)
 8101b4a:	4293      	cmp	r3, r2
 8101b4c:	d00f      	beq.n	8101b6e <TIM_Base_SetConfig+0x9a>
 8101b4e:	687b      	ldr	r3, [r7, #4]
 8101b50:	4a29      	ldr	r2, [pc, #164]	; (8101bf8 <TIM_Base_SetConfig+0x124>)
 8101b52:	4293      	cmp	r3, r2
 8101b54:	d00b      	beq.n	8101b6e <TIM_Base_SetConfig+0x9a>
 8101b56:	687b      	ldr	r3, [r7, #4]
 8101b58:	4a28      	ldr	r2, [pc, #160]	; (8101bfc <TIM_Base_SetConfig+0x128>)
 8101b5a:	4293      	cmp	r3, r2
 8101b5c:	d007      	beq.n	8101b6e <TIM_Base_SetConfig+0x9a>
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	4a27      	ldr	r2, [pc, #156]	; (8101c00 <TIM_Base_SetConfig+0x12c>)
 8101b62:	4293      	cmp	r3, r2
 8101b64:	d003      	beq.n	8101b6e <TIM_Base_SetConfig+0x9a>
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	4a26      	ldr	r2, [pc, #152]	; (8101c04 <TIM_Base_SetConfig+0x130>)
 8101b6a:	4293      	cmp	r3, r2
 8101b6c:	d108      	bne.n	8101b80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8101b6e:	68fb      	ldr	r3, [r7, #12]
 8101b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8101b76:	683b      	ldr	r3, [r7, #0]
 8101b78:	68db      	ldr	r3, [r3, #12]
 8101b7a:	68fa      	ldr	r2, [r7, #12]
 8101b7c:	4313      	orrs	r3, r2
 8101b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8101b80:	68fb      	ldr	r3, [r7, #12]
 8101b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8101b86:	683b      	ldr	r3, [r7, #0]
 8101b88:	695b      	ldr	r3, [r3, #20]
 8101b8a:	4313      	orrs	r3, r2
 8101b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8101b8e:	687b      	ldr	r3, [r7, #4]
 8101b90:	68fa      	ldr	r2, [r7, #12]
 8101b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8101b94:	683b      	ldr	r3, [r7, #0]
 8101b96:	689a      	ldr	r2, [r3, #8]
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8101b9c:	683b      	ldr	r3, [r7, #0]
 8101b9e:	681a      	ldr	r2, [r3, #0]
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	4a10      	ldr	r2, [pc, #64]	; (8101be8 <TIM_Base_SetConfig+0x114>)
 8101ba8:	4293      	cmp	r3, r2
 8101baa:	d00f      	beq.n	8101bcc <TIM_Base_SetConfig+0xf8>
 8101bac:	687b      	ldr	r3, [r7, #4]
 8101bae:	4a12      	ldr	r2, [pc, #72]	; (8101bf8 <TIM_Base_SetConfig+0x124>)
 8101bb0:	4293      	cmp	r3, r2
 8101bb2:	d00b      	beq.n	8101bcc <TIM_Base_SetConfig+0xf8>
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	4a11      	ldr	r2, [pc, #68]	; (8101bfc <TIM_Base_SetConfig+0x128>)
 8101bb8:	4293      	cmp	r3, r2
 8101bba:	d007      	beq.n	8101bcc <TIM_Base_SetConfig+0xf8>
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	4a10      	ldr	r2, [pc, #64]	; (8101c00 <TIM_Base_SetConfig+0x12c>)
 8101bc0:	4293      	cmp	r3, r2
 8101bc2:	d003      	beq.n	8101bcc <TIM_Base_SetConfig+0xf8>
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	4a0f      	ldr	r2, [pc, #60]	; (8101c04 <TIM_Base_SetConfig+0x130>)
 8101bc8:	4293      	cmp	r3, r2
 8101bca:	d103      	bne.n	8101bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8101bcc:	683b      	ldr	r3, [r7, #0]
 8101bce:	691a      	ldr	r2, [r3, #16]
 8101bd0:	687b      	ldr	r3, [r7, #4]
 8101bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8101bd4:	687b      	ldr	r3, [r7, #4]
 8101bd6:	2201      	movs	r2, #1
 8101bd8:	615a      	str	r2, [r3, #20]
}
 8101bda:	bf00      	nop
 8101bdc:	3714      	adds	r7, #20
 8101bde:	46bd      	mov	sp, r7
 8101be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be4:	4770      	bx	lr
 8101be6:	bf00      	nop
 8101be8:	40010000 	.word	0x40010000
 8101bec:	40000400 	.word	0x40000400
 8101bf0:	40000800 	.word	0x40000800
 8101bf4:	40000c00 	.word	0x40000c00
 8101bf8:	40010400 	.word	0x40010400
 8101bfc:	40014000 	.word	0x40014000
 8101c00:	40014400 	.word	0x40014400
 8101c04:	40014800 	.word	0x40014800

08101c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8101c08:	b480      	push	{r7}
 8101c0a:	b083      	sub	sp, #12
 8101c0c:	af00      	add	r7, sp, #0
 8101c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8101c10:	bf00      	nop
 8101c12:	370c      	adds	r7, #12
 8101c14:	46bd      	mov	sp, r7
 8101c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c1a:	4770      	bx	lr

08101c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8101c1c:	b480      	push	{r7}
 8101c1e:	b083      	sub	sp, #12
 8101c20:	af00      	add	r7, sp, #0
 8101c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8101c24:	bf00      	nop
 8101c26:	370c      	adds	r7, #12
 8101c28:	46bd      	mov	sp, r7
 8101c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c2e:	4770      	bx	lr

08101c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8101c30:	b480      	push	{r7}
 8101c32:	b083      	sub	sp, #12
 8101c34:	af00      	add	r7, sp, #0
 8101c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8101c38:	bf00      	nop
 8101c3a:	370c      	adds	r7, #12
 8101c3c:	46bd      	mov	sp, r7
 8101c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c42:	4770      	bx	lr

08101c44 <__NVIC_SetPriority>:
{
 8101c44:	b480      	push	{r7}
 8101c46:	b083      	sub	sp, #12
 8101c48:	af00      	add	r7, sp, #0
 8101c4a:	4603      	mov	r3, r0
 8101c4c:	6039      	str	r1, [r7, #0]
 8101c4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c54:	2b00      	cmp	r3, #0
 8101c56:	db0a      	blt.n	8101c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101c58:	683b      	ldr	r3, [r7, #0]
 8101c5a:	b2da      	uxtb	r2, r3
 8101c5c:	490c      	ldr	r1, [pc, #48]	; (8101c90 <__NVIC_SetPriority+0x4c>)
 8101c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c62:	0112      	lsls	r2, r2, #4
 8101c64:	b2d2      	uxtb	r2, r2
 8101c66:	440b      	add	r3, r1
 8101c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8101c6c:	e00a      	b.n	8101c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101c6e:	683b      	ldr	r3, [r7, #0]
 8101c70:	b2da      	uxtb	r2, r3
 8101c72:	4908      	ldr	r1, [pc, #32]	; (8101c94 <__NVIC_SetPriority+0x50>)
 8101c74:	88fb      	ldrh	r3, [r7, #6]
 8101c76:	f003 030f 	and.w	r3, r3, #15
 8101c7a:	3b04      	subs	r3, #4
 8101c7c:	0112      	lsls	r2, r2, #4
 8101c7e:	b2d2      	uxtb	r2, r2
 8101c80:	440b      	add	r3, r1
 8101c82:	761a      	strb	r2, [r3, #24]
}
 8101c84:	bf00      	nop
 8101c86:	370c      	adds	r7, #12
 8101c88:	46bd      	mov	sp, r7
 8101c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c8e:	4770      	bx	lr
 8101c90:	e000e100 	.word	0xe000e100
 8101c94:	e000ed00 	.word	0xe000ed00

08101c98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8101c98:	b580      	push	{r7, lr}
 8101c9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8101c9c:	4b05      	ldr	r3, [pc, #20]	; (8101cb4 <SysTick_Handler+0x1c>)
 8101c9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8101ca0:	f002 fe72 	bl	8104988 <xTaskGetSchedulerState>
 8101ca4:	4603      	mov	r3, r0
 8101ca6:	2b01      	cmp	r3, #1
 8101ca8:	d001      	beq.n	8101cae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8101caa:	f000 fced 	bl	8102688 <xPortSysTickHandler>
  }
}
 8101cae:	bf00      	nop
 8101cb0:	bd80      	pop	{r7, pc}
 8101cb2:	bf00      	nop
 8101cb4:	e000e010 	.word	0xe000e010

08101cb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8101cb8:	b580      	push	{r7, lr}
 8101cba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8101cbc:	2100      	movs	r1, #0
 8101cbe:	f06f 0004 	mvn.w	r0, #4
 8101cc2:	f7ff ffbf 	bl	8101c44 <__NVIC_SetPriority>
#endif
}
 8101cc6:	bf00      	nop
 8101cc8:	bd80      	pop	{r7, pc}
	...

08101ccc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8101ccc:	b480      	push	{r7}
 8101cce:	b083      	sub	sp, #12
 8101cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101cd2:	f3ef 8305 	mrs	r3, IPSR
 8101cd6:	603b      	str	r3, [r7, #0]
  return(result);
 8101cd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101cda:	2b00      	cmp	r3, #0
 8101cdc:	d003      	beq.n	8101ce6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8101cde:	f06f 0305 	mvn.w	r3, #5
 8101ce2:	607b      	str	r3, [r7, #4]
 8101ce4:	e00c      	b.n	8101d00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8101ce6:	4b0a      	ldr	r3, [pc, #40]	; (8101d10 <osKernelInitialize+0x44>)
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	2b00      	cmp	r3, #0
 8101cec:	d105      	bne.n	8101cfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8101cee:	4b08      	ldr	r3, [pc, #32]	; (8101d10 <osKernelInitialize+0x44>)
 8101cf0:	2201      	movs	r2, #1
 8101cf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8101cf4:	2300      	movs	r3, #0
 8101cf6:	607b      	str	r3, [r7, #4]
 8101cf8:	e002      	b.n	8101d00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8101cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8101cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101d00:	687b      	ldr	r3, [r7, #4]
}
 8101d02:	4618      	mov	r0, r3
 8101d04:	370c      	adds	r7, #12
 8101d06:	46bd      	mov	sp, r7
 8101d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0c:	4770      	bx	lr
 8101d0e:	bf00      	nop
 8101d10:	10008138 	.word	0x10008138

08101d14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8101d14:	b580      	push	{r7, lr}
 8101d16:	b082      	sub	sp, #8
 8101d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101d1a:	f3ef 8305 	mrs	r3, IPSR
 8101d1e:	603b      	str	r3, [r7, #0]
  return(result);
 8101d20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101d22:	2b00      	cmp	r3, #0
 8101d24:	d003      	beq.n	8101d2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8101d26:	f06f 0305 	mvn.w	r3, #5
 8101d2a:	607b      	str	r3, [r7, #4]
 8101d2c:	e010      	b.n	8101d50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8101d2e:	4b0b      	ldr	r3, [pc, #44]	; (8101d5c <osKernelStart+0x48>)
 8101d30:	681b      	ldr	r3, [r3, #0]
 8101d32:	2b01      	cmp	r3, #1
 8101d34:	d109      	bne.n	8101d4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8101d36:	f7ff ffbf 	bl	8101cb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8101d3a:	4b08      	ldr	r3, [pc, #32]	; (8101d5c <osKernelStart+0x48>)
 8101d3c:	2202      	movs	r2, #2
 8101d3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8101d40:	f002 f990 	bl	8104064 <vTaskStartScheduler>
      stat = osOK;
 8101d44:	2300      	movs	r3, #0
 8101d46:	607b      	str	r3, [r7, #4]
 8101d48:	e002      	b.n	8101d50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8101d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8101d4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101d50:	687b      	ldr	r3, [r7, #4]
}
 8101d52:	4618      	mov	r0, r3
 8101d54:	3708      	adds	r7, #8
 8101d56:	46bd      	mov	sp, r7
 8101d58:	bd80      	pop	{r7, pc}
 8101d5a:	bf00      	nop
 8101d5c:	10008138 	.word	0x10008138

08101d60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8101d60:	b480      	push	{r7}
 8101d62:	b085      	sub	sp, #20
 8101d64:	af00      	add	r7, sp, #0
 8101d66:	60f8      	str	r0, [r7, #12]
 8101d68:	60b9      	str	r1, [r7, #8]
 8101d6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8101d6c:	68fb      	ldr	r3, [r7, #12]
 8101d6e:	4a07      	ldr	r2, [pc, #28]	; (8101d8c <vApplicationGetIdleTaskMemory+0x2c>)
 8101d70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8101d72:	68bb      	ldr	r3, [r7, #8]
 8101d74:	4a06      	ldr	r2, [pc, #24]	; (8101d90 <vApplicationGetIdleTaskMemory+0x30>)
 8101d76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	2280      	movs	r2, #128	; 0x80
 8101d7c:	601a      	str	r2, [r3, #0]
}
 8101d7e:	bf00      	nop
 8101d80:	3714      	adds	r7, #20
 8101d82:	46bd      	mov	sp, r7
 8101d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d88:	4770      	bx	lr
 8101d8a:	bf00      	nop
 8101d8c:	1000813c 	.word	0x1000813c
 8101d90:	100081f8 	.word	0x100081f8

08101d94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8101d94:	b480      	push	{r7}
 8101d96:	b085      	sub	sp, #20
 8101d98:	af00      	add	r7, sp, #0
 8101d9a:	60f8      	str	r0, [r7, #12]
 8101d9c:	60b9      	str	r1, [r7, #8]
 8101d9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8101da0:	68fb      	ldr	r3, [r7, #12]
 8101da2:	4a07      	ldr	r2, [pc, #28]	; (8101dc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8101da4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8101da6:	68bb      	ldr	r3, [r7, #8]
 8101da8:	4a06      	ldr	r2, [pc, #24]	; (8101dc4 <vApplicationGetTimerTaskMemory+0x30>)
 8101daa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101db2:	601a      	str	r2, [r3, #0]
}
 8101db4:	bf00      	nop
 8101db6:	3714      	adds	r7, #20
 8101db8:	46bd      	mov	sp, r7
 8101dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dbe:	4770      	bx	lr
 8101dc0:	100083f8 	.word	0x100083f8
 8101dc4:	100084b4 	.word	0x100084b4

08101dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8101dc8:	b580      	push	{r7, lr}
 8101dca:	b08a      	sub	sp, #40	; 0x28
 8101dcc:	af00      	add	r7, sp, #0
 8101dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8101dd0:	2300      	movs	r3, #0
 8101dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8101dd4:	f002 f9b6 	bl	8104144 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8101dd8:	4b5b      	ldr	r3, [pc, #364]	; (8101f48 <pvPortMalloc+0x180>)
 8101dda:	681b      	ldr	r3, [r3, #0]
 8101ddc:	2b00      	cmp	r3, #0
 8101dde:	d101      	bne.n	8101de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8101de0:	f000 f920 	bl	8102024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8101de4:	4b59      	ldr	r3, [pc, #356]	; (8101f4c <pvPortMalloc+0x184>)
 8101de6:	681a      	ldr	r2, [r3, #0]
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	4013      	ands	r3, r2
 8101dec:	2b00      	cmp	r3, #0
 8101dee:	f040 8093 	bne.w	8101f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	2b00      	cmp	r3, #0
 8101df6:	d01d      	beq.n	8101e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8101df8:	2208      	movs	r2, #8
 8101dfa:	687b      	ldr	r3, [r7, #4]
 8101dfc:	4413      	add	r3, r2
 8101dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8101e00:	687b      	ldr	r3, [r7, #4]
 8101e02:	f003 0307 	and.w	r3, r3, #7
 8101e06:	2b00      	cmp	r3, #0
 8101e08:	d014      	beq.n	8101e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8101e0a:	687b      	ldr	r3, [r7, #4]
 8101e0c:	f023 0307 	bic.w	r3, r3, #7
 8101e10:	3308      	adds	r3, #8
 8101e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	f003 0307 	and.w	r3, r3, #7
 8101e1a:	2b00      	cmp	r3, #0
 8101e1c:	d00a      	beq.n	8101e34 <pvPortMalloc+0x6c>
	__asm volatile
 8101e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101e22:	f383 8811 	msr	BASEPRI, r3
 8101e26:	f3bf 8f6f 	isb	sy
 8101e2a:	f3bf 8f4f 	dsb	sy
 8101e2e:	617b      	str	r3, [r7, #20]
}
 8101e30:	bf00      	nop
 8101e32:	e7fe      	b.n	8101e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	2b00      	cmp	r3, #0
 8101e38:	d06e      	beq.n	8101f18 <pvPortMalloc+0x150>
 8101e3a:	4b45      	ldr	r3, [pc, #276]	; (8101f50 <pvPortMalloc+0x188>)
 8101e3c:	681b      	ldr	r3, [r3, #0]
 8101e3e:	687a      	ldr	r2, [r7, #4]
 8101e40:	429a      	cmp	r2, r3
 8101e42:	d869      	bhi.n	8101f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8101e44:	4b43      	ldr	r3, [pc, #268]	; (8101f54 <pvPortMalloc+0x18c>)
 8101e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8101e48:	4b42      	ldr	r3, [pc, #264]	; (8101f54 <pvPortMalloc+0x18c>)
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101e4e:	e004      	b.n	8101e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8101e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8101e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e56:	681b      	ldr	r3, [r3, #0]
 8101e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e5c:	685b      	ldr	r3, [r3, #4]
 8101e5e:	687a      	ldr	r2, [r7, #4]
 8101e60:	429a      	cmp	r2, r3
 8101e62:	d903      	bls.n	8101e6c <pvPortMalloc+0xa4>
 8101e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e66:	681b      	ldr	r3, [r3, #0]
 8101e68:	2b00      	cmp	r3, #0
 8101e6a:	d1f1      	bne.n	8101e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8101e6c:	4b36      	ldr	r3, [pc, #216]	; (8101f48 <pvPortMalloc+0x180>)
 8101e6e:	681b      	ldr	r3, [r3, #0]
 8101e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101e72:	429a      	cmp	r2, r3
 8101e74:	d050      	beq.n	8101f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8101e76:	6a3b      	ldr	r3, [r7, #32]
 8101e78:	681b      	ldr	r3, [r3, #0]
 8101e7a:	2208      	movs	r2, #8
 8101e7c:	4413      	add	r3, r2
 8101e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8101e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e82:	681a      	ldr	r2, [r3, #0]
 8101e84:	6a3b      	ldr	r3, [r7, #32]
 8101e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8101e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e8a:	685a      	ldr	r2, [r3, #4]
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	1ad2      	subs	r2, r2, r3
 8101e90:	2308      	movs	r3, #8
 8101e92:	005b      	lsls	r3, r3, #1
 8101e94:	429a      	cmp	r2, r3
 8101e96:	d91f      	bls.n	8101ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8101e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	4413      	add	r3, r2
 8101e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101ea0:	69bb      	ldr	r3, [r7, #24]
 8101ea2:	f003 0307 	and.w	r3, r3, #7
 8101ea6:	2b00      	cmp	r3, #0
 8101ea8:	d00a      	beq.n	8101ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8101eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101eae:	f383 8811 	msr	BASEPRI, r3
 8101eb2:	f3bf 8f6f 	isb	sy
 8101eb6:	f3bf 8f4f 	dsb	sy
 8101eba:	613b      	str	r3, [r7, #16]
}
 8101ebc:	bf00      	nop
 8101ebe:	e7fe      	b.n	8101ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8101ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ec2:	685a      	ldr	r2, [r3, #4]
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	1ad2      	subs	r2, r2, r3
 8101ec8:	69bb      	ldr	r3, [r7, #24]
 8101eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8101ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ece:	687a      	ldr	r2, [r7, #4]
 8101ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8101ed2:	69b8      	ldr	r0, [r7, #24]
 8101ed4:	f000 f908 	bl	81020e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8101ed8:	4b1d      	ldr	r3, [pc, #116]	; (8101f50 <pvPortMalloc+0x188>)
 8101eda:	681a      	ldr	r2, [r3, #0]
 8101edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ede:	685b      	ldr	r3, [r3, #4]
 8101ee0:	1ad3      	subs	r3, r2, r3
 8101ee2:	4a1b      	ldr	r2, [pc, #108]	; (8101f50 <pvPortMalloc+0x188>)
 8101ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8101ee6:	4b1a      	ldr	r3, [pc, #104]	; (8101f50 <pvPortMalloc+0x188>)
 8101ee8:	681a      	ldr	r2, [r3, #0]
 8101eea:	4b1b      	ldr	r3, [pc, #108]	; (8101f58 <pvPortMalloc+0x190>)
 8101eec:	681b      	ldr	r3, [r3, #0]
 8101eee:	429a      	cmp	r2, r3
 8101ef0:	d203      	bcs.n	8101efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8101ef2:	4b17      	ldr	r3, [pc, #92]	; (8101f50 <pvPortMalloc+0x188>)
 8101ef4:	681b      	ldr	r3, [r3, #0]
 8101ef6:	4a18      	ldr	r2, [pc, #96]	; (8101f58 <pvPortMalloc+0x190>)
 8101ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8101efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101efc:	685a      	ldr	r2, [r3, #4]
 8101efe:	4b13      	ldr	r3, [pc, #76]	; (8101f4c <pvPortMalloc+0x184>)
 8101f00:	681b      	ldr	r3, [r3, #0]
 8101f02:	431a      	orrs	r2, r3
 8101f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8101f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101f0a:	2200      	movs	r2, #0
 8101f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8101f0e:	4b13      	ldr	r3, [pc, #76]	; (8101f5c <pvPortMalloc+0x194>)
 8101f10:	681b      	ldr	r3, [r3, #0]
 8101f12:	3301      	adds	r3, #1
 8101f14:	4a11      	ldr	r2, [pc, #68]	; (8101f5c <pvPortMalloc+0x194>)
 8101f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8101f18:	f002 f922 	bl	8104160 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8101f1c:	69fb      	ldr	r3, [r7, #28]
 8101f1e:	f003 0307 	and.w	r3, r3, #7
 8101f22:	2b00      	cmp	r3, #0
 8101f24:	d00a      	beq.n	8101f3c <pvPortMalloc+0x174>
	__asm volatile
 8101f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f2a:	f383 8811 	msr	BASEPRI, r3
 8101f2e:	f3bf 8f6f 	isb	sy
 8101f32:	f3bf 8f4f 	dsb	sy
 8101f36:	60fb      	str	r3, [r7, #12]
}
 8101f38:	bf00      	nop
 8101f3a:	e7fe      	b.n	8101f3a <pvPortMalloc+0x172>
	return pvReturn;
 8101f3c:	69fb      	ldr	r3, [r7, #28]
}
 8101f3e:	4618      	mov	r0, r3
 8101f40:	3728      	adds	r7, #40	; 0x28
 8101f42:	46bd      	mov	sp, r7
 8101f44:	bd80      	pop	{r7, pc}
 8101f46:	bf00      	nop
 8101f48:	1000c4bc 	.word	0x1000c4bc
 8101f4c:	1000c4d0 	.word	0x1000c4d0
 8101f50:	1000c4c0 	.word	0x1000c4c0
 8101f54:	1000c4b4 	.word	0x1000c4b4
 8101f58:	1000c4c4 	.word	0x1000c4c4
 8101f5c:	1000c4c8 	.word	0x1000c4c8

08101f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8101f60:	b580      	push	{r7, lr}
 8101f62:	b086      	sub	sp, #24
 8101f64:	af00      	add	r7, sp, #0
 8101f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	2b00      	cmp	r3, #0
 8101f70:	d04d      	beq.n	810200e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8101f72:	2308      	movs	r3, #8
 8101f74:	425b      	negs	r3, r3
 8101f76:	697a      	ldr	r2, [r7, #20]
 8101f78:	4413      	add	r3, r2
 8101f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8101f7c:	697b      	ldr	r3, [r7, #20]
 8101f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8101f80:	693b      	ldr	r3, [r7, #16]
 8101f82:	685a      	ldr	r2, [r3, #4]
 8101f84:	4b24      	ldr	r3, [pc, #144]	; (8102018 <vPortFree+0xb8>)
 8101f86:	681b      	ldr	r3, [r3, #0]
 8101f88:	4013      	ands	r3, r2
 8101f8a:	2b00      	cmp	r3, #0
 8101f8c:	d10a      	bne.n	8101fa4 <vPortFree+0x44>
	__asm volatile
 8101f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f92:	f383 8811 	msr	BASEPRI, r3
 8101f96:	f3bf 8f6f 	isb	sy
 8101f9a:	f3bf 8f4f 	dsb	sy
 8101f9e:	60fb      	str	r3, [r7, #12]
}
 8101fa0:	bf00      	nop
 8101fa2:	e7fe      	b.n	8101fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8101fa4:	693b      	ldr	r3, [r7, #16]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	2b00      	cmp	r3, #0
 8101faa:	d00a      	beq.n	8101fc2 <vPortFree+0x62>
	__asm volatile
 8101fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101fb0:	f383 8811 	msr	BASEPRI, r3
 8101fb4:	f3bf 8f6f 	isb	sy
 8101fb8:	f3bf 8f4f 	dsb	sy
 8101fbc:	60bb      	str	r3, [r7, #8]
}
 8101fbe:	bf00      	nop
 8101fc0:	e7fe      	b.n	8101fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8101fc2:	693b      	ldr	r3, [r7, #16]
 8101fc4:	685a      	ldr	r2, [r3, #4]
 8101fc6:	4b14      	ldr	r3, [pc, #80]	; (8102018 <vPortFree+0xb8>)
 8101fc8:	681b      	ldr	r3, [r3, #0]
 8101fca:	4013      	ands	r3, r2
 8101fcc:	2b00      	cmp	r3, #0
 8101fce:	d01e      	beq.n	810200e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8101fd0:	693b      	ldr	r3, [r7, #16]
 8101fd2:	681b      	ldr	r3, [r3, #0]
 8101fd4:	2b00      	cmp	r3, #0
 8101fd6:	d11a      	bne.n	810200e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8101fd8:	693b      	ldr	r3, [r7, #16]
 8101fda:	685a      	ldr	r2, [r3, #4]
 8101fdc:	4b0e      	ldr	r3, [pc, #56]	; (8102018 <vPortFree+0xb8>)
 8101fde:	681b      	ldr	r3, [r3, #0]
 8101fe0:	43db      	mvns	r3, r3
 8101fe2:	401a      	ands	r2, r3
 8101fe4:	693b      	ldr	r3, [r7, #16]
 8101fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8101fe8:	f002 f8ac 	bl	8104144 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8101fec:	693b      	ldr	r3, [r7, #16]
 8101fee:	685a      	ldr	r2, [r3, #4]
 8101ff0:	4b0a      	ldr	r3, [pc, #40]	; (810201c <vPortFree+0xbc>)
 8101ff2:	681b      	ldr	r3, [r3, #0]
 8101ff4:	4413      	add	r3, r2
 8101ff6:	4a09      	ldr	r2, [pc, #36]	; (810201c <vPortFree+0xbc>)
 8101ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8101ffa:	6938      	ldr	r0, [r7, #16]
 8101ffc:	f000 f874 	bl	81020e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8102000:	4b07      	ldr	r3, [pc, #28]	; (8102020 <vPortFree+0xc0>)
 8102002:	681b      	ldr	r3, [r3, #0]
 8102004:	3301      	adds	r3, #1
 8102006:	4a06      	ldr	r2, [pc, #24]	; (8102020 <vPortFree+0xc0>)
 8102008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810200a:	f002 f8a9 	bl	8104160 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810200e:	bf00      	nop
 8102010:	3718      	adds	r7, #24
 8102012:	46bd      	mov	sp, r7
 8102014:	bd80      	pop	{r7, pc}
 8102016:	bf00      	nop
 8102018:	1000c4d0 	.word	0x1000c4d0
 810201c:	1000c4c0 	.word	0x1000c4c0
 8102020:	1000c4cc 	.word	0x1000c4cc

08102024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8102024:	b480      	push	{r7}
 8102026:	b085      	sub	sp, #20
 8102028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810202a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810202e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8102030:	4b27      	ldr	r3, [pc, #156]	; (81020d0 <prvHeapInit+0xac>)
 8102032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8102034:	68fb      	ldr	r3, [r7, #12]
 8102036:	f003 0307 	and.w	r3, r3, #7
 810203a:	2b00      	cmp	r3, #0
 810203c:	d00c      	beq.n	8102058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810203e:	68fb      	ldr	r3, [r7, #12]
 8102040:	3307      	adds	r3, #7
 8102042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8102044:	68fb      	ldr	r3, [r7, #12]
 8102046:	f023 0307 	bic.w	r3, r3, #7
 810204a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810204c:	68ba      	ldr	r2, [r7, #8]
 810204e:	68fb      	ldr	r3, [r7, #12]
 8102050:	1ad3      	subs	r3, r2, r3
 8102052:	4a1f      	ldr	r2, [pc, #124]	; (81020d0 <prvHeapInit+0xac>)
 8102054:	4413      	add	r3, r2
 8102056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8102058:	68fb      	ldr	r3, [r7, #12]
 810205a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810205c:	4a1d      	ldr	r2, [pc, #116]	; (81020d4 <prvHeapInit+0xb0>)
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8102062:	4b1c      	ldr	r3, [pc, #112]	; (81020d4 <prvHeapInit+0xb0>)
 8102064:	2200      	movs	r2, #0
 8102066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	68ba      	ldr	r2, [r7, #8]
 810206c:	4413      	add	r3, r2
 810206e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8102070:	2208      	movs	r2, #8
 8102072:	68fb      	ldr	r3, [r7, #12]
 8102074:	1a9b      	subs	r3, r3, r2
 8102076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8102078:	68fb      	ldr	r3, [r7, #12]
 810207a:	f023 0307 	bic.w	r3, r3, #7
 810207e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8102080:	68fb      	ldr	r3, [r7, #12]
 8102082:	4a15      	ldr	r2, [pc, #84]	; (81020d8 <prvHeapInit+0xb4>)
 8102084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8102086:	4b14      	ldr	r3, [pc, #80]	; (81020d8 <prvHeapInit+0xb4>)
 8102088:	681b      	ldr	r3, [r3, #0]
 810208a:	2200      	movs	r2, #0
 810208c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810208e:	4b12      	ldr	r3, [pc, #72]	; (81020d8 <prvHeapInit+0xb4>)
 8102090:	681b      	ldr	r3, [r3, #0]
 8102092:	2200      	movs	r2, #0
 8102094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810209a:	683b      	ldr	r3, [r7, #0]
 810209c:	68fa      	ldr	r2, [r7, #12]
 810209e:	1ad2      	subs	r2, r2, r3
 81020a0:	683b      	ldr	r3, [r7, #0]
 81020a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81020a4:	4b0c      	ldr	r3, [pc, #48]	; (81020d8 <prvHeapInit+0xb4>)
 81020a6:	681a      	ldr	r2, [r3, #0]
 81020a8:	683b      	ldr	r3, [r7, #0]
 81020aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81020ac:	683b      	ldr	r3, [r7, #0]
 81020ae:	685b      	ldr	r3, [r3, #4]
 81020b0:	4a0a      	ldr	r2, [pc, #40]	; (81020dc <prvHeapInit+0xb8>)
 81020b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81020b4:	683b      	ldr	r3, [r7, #0]
 81020b6:	685b      	ldr	r3, [r3, #4]
 81020b8:	4a09      	ldr	r2, [pc, #36]	; (81020e0 <prvHeapInit+0xbc>)
 81020ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 81020bc:	4b09      	ldr	r3, [pc, #36]	; (81020e4 <prvHeapInit+0xc0>)
 81020be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81020c2:	601a      	str	r2, [r3, #0]
}
 81020c4:	bf00      	nop
 81020c6:	3714      	adds	r7, #20
 81020c8:	46bd      	mov	sp, r7
 81020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ce:	4770      	bx	lr
 81020d0:	100088b4 	.word	0x100088b4
 81020d4:	1000c4b4 	.word	0x1000c4b4
 81020d8:	1000c4bc 	.word	0x1000c4bc
 81020dc:	1000c4c4 	.word	0x1000c4c4
 81020e0:	1000c4c0 	.word	0x1000c4c0
 81020e4:	1000c4d0 	.word	0x1000c4d0

081020e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81020e8:	b480      	push	{r7}
 81020ea:	b085      	sub	sp, #20
 81020ec:	af00      	add	r7, sp, #0
 81020ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81020f0:	4b28      	ldr	r3, [pc, #160]	; (8102194 <prvInsertBlockIntoFreeList+0xac>)
 81020f2:	60fb      	str	r3, [r7, #12]
 81020f4:	e002      	b.n	81020fc <prvInsertBlockIntoFreeList+0x14>
 81020f6:	68fb      	ldr	r3, [r7, #12]
 81020f8:	681b      	ldr	r3, [r3, #0]
 81020fa:	60fb      	str	r3, [r7, #12]
 81020fc:	68fb      	ldr	r3, [r7, #12]
 81020fe:	681b      	ldr	r3, [r3, #0]
 8102100:	687a      	ldr	r2, [r7, #4]
 8102102:	429a      	cmp	r2, r3
 8102104:	d8f7      	bhi.n	81020f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8102106:	68fb      	ldr	r3, [r7, #12]
 8102108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810210a:	68fb      	ldr	r3, [r7, #12]
 810210c:	685b      	ldr	r3, [r3, #4]
 810210e:	68ba      	ldr	r2, [r7, #8]
 8102110:	4413      	add	r3, r2
 8102112:	687a      	ldr	r2, [r7, #4]
 8102114:	429a      	cmp	r2, r3
 8102116:	d108      	bne.n	810212a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	685a      	ldr	r2, [r3, #4]
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	685b      	ldr	r3, [r3, #4]
 8102120:	441a      	add	r2, r3
 8102122:	68fb      	ldr	r3, [r7, #12]
 8102124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8102126:	68fb      	ldr	r3, [r7, #12]
 8102128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	685b      	ldr	r3, [r3, #4]
 8102132:	68ba      	ldr	r2, [r7, #8]
 8102134:	441a      	add	r2, r3
 8102136:	68fb      	ldr	r3, [r7, #12]
 8102138:	681b      	ldr	r3, [r3, #0]
 810213a:	429a      	cmp	r2, r3
 810213c:	d118      	bne.n	8102170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810213e:	68fb      	ldr	r3, [r7, #12]
 8102140:	681a      	ldr	r2, [r3, #0]
 8102142:	4b15      	ldr	r3, [pc, #84]	; (8102198 <prvInsertBlockIntoFreeList+0xb0>)
 8102144:	681b      	ldr	r3, [r3, #0]
 8102146:	429a      	cmp	r2, r3
 8102148:	d00d      	beq.n	8102166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	685a      	ldr	r2, [r3, #4]
 810214e:	68fb      	ldr	r3, [r7, #12]
 8102150:	681b      	ldr	r3, [r3, #0]
 8102152:	685b      	ldr	r3, [r3, #4]
 8102154:	441a      	add	r2, r3
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810215a:	68fb      	ldr	r3, [r7, #12]
 810215c:	681b      	ldr	r3, [r3, #0]
 810215e:	681a      	ldr	r2, [r3, #0]
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	601a      	str	r2, [r3, #0]
 8102164:	e008      	b.n	8102178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8102166:	4b0c      	ldr	r3, [pc, #48]	; (8102198 <prvInsertBlockIntoFreeList+0xb0>)
 8102168:	681a      	ldr	r2, [r3, #0]
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	601a      	str	r2, [r3, #0]
 810216e:	e003      	b.n	8102178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8102170:	68fb      	ldr	r3, [r7, #12]
 8102172:	681a      	ldr	r2, [r3, #0]
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8102178:	68fa      	ldr	r2, [r7, #12]
 810217a:	687b      	ldr	r3, [r7, #4]
 810217c:	429a      	cmp	r2, r3
 810217e:	d002      	beq.n	8102186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8102180:	68fb      	ldr	r3, [r7, #12]
 8102182:	687a      	ldr	r2, [r7, #4]
 8102184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102186:	bf00      	nop
 8102188:	3714      	adds	r7, #20
 810218a:	46bd      	mov	sp, r7
 810218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102190:	4770      	bx	lr
 8102192:	bf00      	nop
 8102194:	1000c4b4 	.word	0x1000c4b4
 8102198:	1000c4bc 	.word	0x1000c4bc

0810219c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810219c:	b480      	push	{r7}
 810219e:	b083      	sub	sp, #12
 81021a0:	af00      	add	r7, sp, #0
 81021a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	f103 0208 	add.w	r2, r3, #8
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	f04f 32ff 	mov.w	r2, #4294967295
 81021b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	f103 0208 	add.w	r2, r3, #8
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81021c0:	687b      	ldr	r3, [r7, #4]
 81021c2:	f103 0208 	add.w	r2, r3, #8
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 81021ca:	687b      	ldr	r3, [r7, #4]
 81021cc:	2200      	movs	r2, #0
 81021ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81021d0:	bf00      	nop
 81021d2:	370c      	adds	r7, #12
 81021d4:	46bd      	mov	sp, r7
 81021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021da:	4770      	bx	lr

081021dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81021dc:	b480      	push	{r7}
 81021de:	b083      	sub	sp, #12
 81021e0:	af00      	add	r7, sp, #0
 81021e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	2200      	movs	r2, #0
 81021e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81021ea:	bf00      	nop
 81021ec:	370c      	adds	r7, #12
 81021ee:	46bd      	mov	sp, r7
 81021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f4:	4770      	bx	lr

081021f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81021f6:	b480      	push	{r7}
 81021f8:	b085      	sub	sp, #20
 81021fa:	af00      	add	r7, sp, #0
 81021fc:	6078      	str	r0, [r7, #4]
 81021fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	685b      	ldr	r3, [r3, #4]
 8102204:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8102206:	683b      	ldr	r3, [r7, #0]
 8102208:	68fa      	ldr	r2, [r7, #12]
 810220a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810220c:	68fb      	ldr	r3, [r7, #12]
 810220e:	689a      	ldr	r2, [r3, #8]
 8102210:	683b      	ldr	r3, [r7, #0]
 8102212:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8102214:	68fb      	ldr	r3, [r7, #12]
 8102216:	689b      	ldr	r3, [r3, #8]
 8102218:	683a      	ldr	r2, [r7, #0]
 810221a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810221c:	68fb      	ldr	r3, [r7, #12]
 810221e:	683a      	ldr	r2, [r7, #0]
 8102220:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8102222:	683b      	ldr	r3, [r7, #0]
 8102224:	687a      	ldr	r2, [r7, #4]
 8102226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	1c5a      	adds	r2, r3, #1
 810222e:	687b      	ldr	r3, [r7, #4]
 8102230:	601a      	str	r2, [r3, #0]
}
 8102232:	bf00      	nop
 8102234:	3714      	adds	r7, #20
 8102236:	46bd      	mov	sp, r7
 8102238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810223c:	4770      	bx	lr

0810223e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810223e:	b480      	push	{r7}
 8102240:	b085      	sub	sp, #20
 8102242:	af00      	add	r7, sp, #0
 8102244:	6078      	str	r0, [r7, #4]
 8102246:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8102248:	683b      	ldr	r3, [r7, #0]
 810224a:	681b      	ldr	r3, [r3, #0]
 810224c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810224e:	68bb      	ldr	r3, [r7, #8]
 8102250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102254:	d103      	bne.n	810225e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	691b      	ldr	r3, [r3, #16]
 810225a:	60fb      	str	r3, [r7, #12]
 810225c:	e00c      	b.n	8102278 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	3308      	adds	r3, #8
 8102262:	60fb      	str	r3, [r7, #12]
 8102264:	e002      	b.n	810226c <vListInsert+0x2e>
 8102266:	68fb      	ldr	r3, [r7, #12]
 8102268:	685b      	ldr	r3, [r3, #4]
 810226a:	60fb      	str	r3, [r7, #12]
 810226c:	68fb      	ldr	r3, [r7, #12]
 810226e:	685b      	ldr	r3, [r3, #4]
 8102270:	681b      	ldr	r3, [r3, #0]
 8102272:	68ba      	ldr	r2, [r7, #8]
 8102274:	429a      	cmp	r2, r3
 8102276:	d2f6      	bcs.n	8102266 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8102278:	68fb      	ldr	r3, [r7, #12]
 810227a:	685a      	ldr	r2, [r3, #4]
 810227c:	683b      	ldr	r3, [r7, #0]
 810227e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8102280:	683b      	ldr	r3, [r7, #0]
 8102282:	685b      	ldr	r3, [r3, #4]
 8102284:	683a      	ldr	r2, [r7, #0]
 8102286:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8102288:	683b      	ldr	r3, [r7, #0]
 810228a:	68fa      	ldr	r2, [r7, #12]
 810228c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810228e:	68fb      	ldr	r3, [r7, #12]
 8102290:	683a      	ldr	r2, [r7, #0]
 8102292:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8102294:	683b      	ldr	r3, [r7, #0]
 8102296:	687a      	ldr	r2, [r7, #4]
 8102298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	681b      	ldr	r3, [r3, #0]
 810229e:	1c5a      	adds	r2, r3, #1
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	601a      	str	r2, [r3, #0]
}
 81022a4:	bf00      	nop
 81022a6:	3714      	adds	r7, #20
 81022a8:	46bd      	mov	sp, r7
 81022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ae:	4770      	bx	lr

081022b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 81022b0:	b480      	push	{r7}
 81022b2:	b085      	sub	sp, #20
 81022b4:	af00      	add	r7, sp, #0
 81022b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	691b      	ldr	r3, [r3, #16]
 81022bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 81022be:	687b      	ldr	r3, [r7, #4]
 81022c0:	685b      	ldr	r3, [r3, #4]
 81022c2:	687a      	ldr	r2, [r7, #4]
 81022c4:	6892      	ldr	r2, [r2, #8]
 81022c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	689b      	ldr	r3, [r3, #8]
 81022cc:	687a      	ldr	r2, [r7, #4]
 81022ce:	6852      	ldr	r2, [r2, #4]
 81022d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81022d2:	68fb      	ldr	r3, [r7, #12]
 81022d4:	685b      	ldr	r3, [r3, #4]
 81022d6:	687a      	ldr	r2, [r7, #4]
 81022d8:	429a      	cmp	r2, r3
 81022da:	d103      	bne.n	81022e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	689a      	ldr	r2, [r3, #8]
 81022e0:	68fb      	ldr	r3, [r7, #12]
 81022e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81022e4:	687b      	ldr	r3, [r7, #4]
 81022e6:	2200      	movs	r2, #0
 81022e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81022ea:	68fb      	ldr	r3, [r7, #12]
 81022ec:	681b      	ldr	r3, [r3, #0]
 81022ee:	1e5a      	subs	r2, r3, #1
 81022f0:	68fb      	ldr	r3, [r7, #12]
 81022f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81022f4:	68fb      	ldr	r3, [r7, #12]
 81022f6:	681b      	ldr	r3, [r3, #0]
}
 81022f8:	4618      	mov	r0, r3
 81022fa:	3714      	adds	r7, #20
 81022fc:	46bd      	mov	sp, r7
 81022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102302:	4770      	bx	lr

08102304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8102304:	b480      	push	{r7}
 8102306:	b085      	sub	sp, #20
 8102308:	af00      	add	r7, sp, #0
 810230a:	60f8      	str	r0, [r7, #12]
 810230c:	60b9      	str	r1, [r7, #8]
 810230e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8102310:	68fb      	ldr	r3, [r7, #12]
 8102312:	3b04      	subs	r3, #4
 8102314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8102316:	68fb      	ldr	r3, [r7, #12]
 8102318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810231c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810231e:	68fb      	ldr	r3, [r7, #12]
 8102320:	3b04      	subs	r3, #4
 8102322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8102324:	68bb      	ldr	r3, [r7, #8]
 8102326:	f023 0201 	bic.w	r2, r3, #1
 810232a:	68fb      	ldr	r3, [r7, #12]
 810232c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810232e:	68fb      	ldr	r3, [r7, #12]
 8102330:	3b04      	subs	r3, #4
 8102332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8102334:	4a0c      	ldr	r2, [pc, #48]	; (8102368 <pxPortInitialiseStack+0x64>)
 8102336:	68fb      	ldr	r3, [r7, #12]
 8102338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810233a:	68fb      	ldr	r3, [r7, #12]
 810233c:	3b14      	subs	r3, #20
 810233e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8102340:	687a      	ldr	r2, [r7, #4]
 8102342:	68fb      	ldr	r3, [r7, #12]
 8102344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8102346:	68fb      	ldr	r3, [r7, #12]
 8102348:	3b04      	subs	r3, #4
 810234a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810234c:	68fb      	ldr	r3, [r7, #12]
 810234e:	f06f 0202 	mvn.w	r2, #2
 8102352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8102354:	68fb      	ldr	r3, [r7, #12]
 8102356:	3b20      	subs	r3, #32
 8102358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810235a:	68fb      	ldr	r3, [r7, #12]
}
 810235c:	4618      	mov	r0, r3
 810235e:	3714      	adds	r7, #20
 8102360:	46bd      	mov	sp, r7
 8102362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102366:	4770      	bx	lr
 8102368:	0810236d 	.word	0x0810236d

0810236c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810236c:	b480      	push	{r7}
 810236e:	b085      	sub	sp, #20
 8102370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8102372:	2300      	movs	r3, #0
 8102374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8102376:	4b12      	ldr	r3, [pc, #72]	; (81023c0 <prvTaskExitError+0x54>)
 8102378:	681b      	ldr	r3, [r3, #0]
 810237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810237e:	d00a      	beq.n	8102396 <prvTaskExitError+0x2a>
	__asm volatile
 8102380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102384:	f383 8811 	msr	BASEPRI, r3
 8102388:	f3bf 8f6f 	isb	sy
 810238c:	f3bf 8f4f 	dsb	sy
 8102390:	60fb      	str	r3, [r7, #12]
}
 8102392:	bf00      	nop
 8102394:	e7fe      	b.n	8102394 <prvTaskExitError+0x28>
	__asm volatile
 8102396:	f04f 0350 	mov.w	r3, #80	; 0x50
 810239a:	f383 8811 	msr	BASEPRI, r3
 810239e:	f3bf 8f6f 	isb	sy
 81023a2:	f3bf 8f4f 	dsb	sy
 81023a6:	60bb      	str	r3, [r7, #8]
}
 81023a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81023aa:	bf00      	nop
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	2b00      	cmp	r3, #0
 81023b0:	d0fc      	beq.n	81023ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 81023b2:	bf00      	nop
 81023b4:	bf00      	nop
 81023b6:	3714      	adds	r7, #20
 81023b8:	46bd      	mov	sp, r7
 81023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023be:	4770      	bx	lr
 81023c0:	10000014 	.word	0x10000014
	...

081023d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81023d0:	4b07      	ldr	r3, [pc, #28]	; (81023f0 <pxCurrentTCBConst2>)
 81023d2:	6819      	ldr	r1, [r3, #0]
 81023d4:	6808      	ldr	r0, [r1, #0]
 81023d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81023da:	f380 8809 	msr	PSP, r0
 81023de:	f3bf 8f6f 	isb	sy
 81023e2:	f04f 0000 	mov.w	r0, #0
 81023e6:	f380 8811 	msr	BASEPRI, r0
 81023ea:	4770      	bx	lr
 81023ec:	f3af 8000 	nop.w

081023f0 <pxCurrentTCBConst2>:
 81023f0:	1000c51c 	.word	0x1000c51c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81023f4:	bf00      	nop
 81023f6:	bf00      	nop

081023f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81023f8:	4808      	ldr	r0, [pc, #32]	; (810241c <prvPortStartFirstTask+0x24>)
 81023fa:	6800      	ldr	r0, [r0, #0]
 81023fc:	6800      	ldr	r0, [r0, #0]
 81023fe:	f380 8808 	msr	MSP, r0
 8102402:	f04f 0000 	mov.w	r0, #0
 8102406:	f380 8814 	msr	CONTROL, r0
 810240a:	b662      	cpsie	i
 810240c:	b661      	cpsie	f
 810240e:	f3bf 8f4f 	dsb	sy
 8102412:	f3bf 8f6f 	isb	sy
 8102416:	df00      	svc	0
 8102418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810241a:	bf00      	nop
 810241c:	e000ed08 	.word	0xe000ed08

08102420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8102420:	b580      	push	{r7, lr}
 8102422:	b086      	sub	sp, #24
 8102424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8102426:	4b46      	ldr	r3, [pc, #280]	; (8102540 <xPortStartScheduler+0x120>)
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	4a46      	ldr	r2, [pc, #280]	; (8102544 <xPortStartScheduler+0x124>)
 810242c:	4293      	cmp	r3, r2
 810242e:	d10a      	bne.n	8102446 <xPortStartScheduler+0x26>
	__asm volatile
 8102430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102434:	f383 8811 	msr	BASEPRI, r3
 8102438:	f3bf 8f6f 	isb	sy
 810243c:	f3bf 8f4f 	dsb	sy
 8102440:	613b      	str	r3, [r7, #16]
}
 8102442:	bf00      	nop
 8102444:	e7fe      	b.n	8102444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8102446:	4b3e      	ldr	r3, [pc, #248]	; (8102540 <xPortStartScheduler+0x120>)
 8102448:	681b      	ldr	r3, [r3, #0]
 810244a:	4a3f      	ldr	r2, [pc, #252]	; (8102548 <xPortStartScheduler+0x128>)
 810244c:	4293      	cmp	r3, r2
 810244e:	d10a      	bne.n	8102466 <xPortStartScheduler+0x46>
	__asm volatile
 8102450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102454:	f383 8811 	msr	BASEPRI, r3
 8102458:	f3bf 8f6f 	isb	sy
 810245c:	f3bf 8f4f 	dsb	sy
 8102460:	60fb      	str	r3, [r7, #12]
}
 8102462:	bf00      	nop
 8102464:	e7fe      	b.n	8102464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8102466:	4b39      	ldr	r3, [pc, #228]	; (810254c <xPortStartScheduler+0x12c>)
 8102468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810246a:	697b      	ldr	r3, [r7, #20]
 810246c:	781b      	ldrb	r3, [r3, #0]
 810246e:	b2db      	uxtb	r3, r3
 8102470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8102472:	697b      	ldr	r3, [r7, #20]
 8102474:	22ff      	movs	r2, #255	; 0xff
 8102476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8102478:	697b      	ldr	r3, [r7, #20]
 810247a:	781b      	ldrb	r3, [r3, #0]
 810247c:	b2db      	uxtb	r3, r3
 810247e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8102480:	78fb      	ldrb	r3, [r7, #3]
 8102482:	b2db      	uxtb	r3, r3
 8102484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8102488:	b2da      	uxtb	r2, r3
 810248a:	4b31      	ldr	r3, [pc, #196]	; (8102550 <xPortStartScheduler+0x130>)
 810248c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810248e:	4b31      	ldr	r3, [pc, #196]	; (8102554 <xPortStartScheduler+0x134>)
 8102490:	2207      	movs	r2, #7
 8102492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102494:	e009      	b.n	81024aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8102496:	4b2f      	ldr	r3, [pc, #188]	; (8102554 <xPortStartScheduler+0x134>)
 8102498:	681b      	ldr	r3, [r3, #0]
 810249a:	3b01      	subs	r3, #1
 810249c:	4a2d      	ldr	r2, [pc, #180]	; (8102554 <xPortStartScheduler+0x134>)
 810249e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81024a0:	78fb      	ldrb	r3, [r7, #3]
 81024a2:	b2db      	uxtb	r3, r3
 81024a4:	005b      	lsls	r3, r3, #1
 81024a6:	b2db      	uxtb	r3, r3
 81024a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81024aa:	78fb      	ldrb	r3, [r7, #3]
 81024ac:	b2db      	uxtb	r3, r3
 81024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81024b2:	2b80      	cmp	r3, #128	; 0x80
 81024b4:	d0ef      	beq.n	8102496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 81024b6:	4b27      	ldr	r3, [pc, #156]	; (8102554 <xPortStartScheduler+0x134>)
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	f1c3 0307 	rsb	r3, r3, #7
 81024be:	2b04      	cmp	r3, #4
 81024c0:	d00a      	beq.n	81024d8 <xPortStartScheduler+0xb8>
	__asm volatile
 81024c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81024c6:	f383 8811 	msr	BASEPRI, r3
 81024ca:	f3bf 8f6f 	isb	sy
 81024ce:	f3bf 8f4f 	dsb	sy
 81024d2:	60bb      	str	r3, [r7, #8]
}
 81024d4:	bf00      	nop
 81024d6:	e7fe      	b.n	81024d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 81024d8:	4b1e      	ldr	r3, [pc, #120]	; (8102554 <xPortStartScheduler+0x134>)
 81024da:	681b      	ldr	r3, [r3, #0]
 81024dc:	021b      	lsls	r3, r3, #8
 81024de:	4a1d      	ldr	r2, [pc, #116]	; (8102554 <xPortStartScheduler+0x134>)
 81024e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 81024e2:	4b1c      	ldr	r3, [pc, #112]	; (8102554 <xPortStartScheduler+0x134>)
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81024ea:	4a1a      	ldr	r2, [pc, #104]	; (8102554 <xPortStartScheduler+0x134>)
 81024ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	b2da      	uxtb	r2, r3
 81024f2:	697b      	ldr	r3, [r7, #20]
 81024f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81024f6:	4b18      	ldr	r3, [pc, #96]	; (8102558 <xPortStartScheduler+0x138>)
 81024f8:	681b      	ldr	r3, [r3, #0]
 81024fa:	4a17      	ldr	r2, [pc, #92]	; (8102558 <xPortStartScheduler+0x138>)
 81024fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8102500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8102502:	4b15      	ldr	r3, [pc, #84]	; (8102558 <xPortStartScheduler+0x138>)
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	4a14      	ldr	r2, [pc, #80]	; (8102558 <xPortStartScheduler+0x138>)
 8102508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810250c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810250e:	f000 f8dd 	bl	81026cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8102512:	4b12      	ldr	r3, [pc, #72]	; (810255c <xPortStartScheduler+0x13c>)
 8102514:	2200      	movs	r2, #0
 8102516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8102518:	f000 f8fc 	bl	8102714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810251c:	4b10      	ldr	r3, [pc, #64]	; (8102560 <xPortStartScheduler+0x140>)
 810251e:	681b      	ldr	r3, [r3, #0]
 8102520:	4a0f      	ldr	r2, [pc, #60]	; (8102560 <xPortStartScheduler+0x140>)
 8102522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8102526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8102528:	f7ff ff66 	bl	81023f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810252c:	f001 ff80 	bl	8104430 <vTaskSwitchContext>
	prvTaskExitError();
 8102530:	f7ff ff1c 	bl	810236c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8102534:	2300      	movs	r3, #0
}
 8102536:	4618      	mov	r0, r3
 8102538:	3718      	adds	r7, #24
 810253a:	46bd      	mov	sp, r7
 810253c:	bd80      	pop	{r7, pc}
 810253e:	bf00      	nop
 8102540:	e000ed00 	.word	0xe000ed00
 8102544:	410fc271 	.word	0x410fc271
 8102548:	410fc270 	.word	0x410fc270
 810254c:	e000e400 	.word	0xe000e400
 8102550:	1000c4d4 	.word	0x1000c4d4
 8102554:	1000c4d8 	.word	0x1000c4d8
 8102558:	e000ed20 	.word	0xe000ed20
 810255c:	10000014 	.word	0x10000014
 8102560:	e000ef34 	.word	0xe000ef34

08102564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8102564:	b480      	push	{r7}
 8102566:	b083      	sub	sp, #12
 8102568:	af00      	add	r7, sp, #0
	__asm volatile
 810256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810256e:	f383 8811 	msr	BASEPRI, r3
 8102572:	f3bf 8f6f 	isb	sy
 8102576:	f3bf 8f4f 	dsb	sy
 810257a:	607b      	str	r3, [r7, #4]
}
 810257c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810257e:	4b0f      	ldr	r3, [pc, #60]	; (81025bc <vPortEnterCritical+0x58>)
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	3301      	adds	r3, #1
 8102584:	4a0d      	ldr	r2, [pc, #52]	; (81025bc <vPortEnterCritical+0x58>)
 8102586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8102588:	4b0c      	ldr	r3, [pc, #48]	; (81025bc <vPortEnterCritical+0x58>)
 810258a:	681b      	ldr	r3, [r3, #0]
 810258c:	2b01      	cmp	r3, #1
 810258e:	d10f      	bne.n	81025b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8102590:	4b0b      	ldr	r3, [pc, #44]	; (81025c0 <vPortEnterCritical+0x5c>)
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	b2db      	uxtb	r3, r3
 8102596:	2b00      	cmp	r3, #0
 8102598:	d00a      	beq.n	81025b0 <vPortEnterCritical+0x4c>
	__asm volatile
 810259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810259e:	f383 8811 	msr	BASEPRI, r3
 81025a2:	f3bf 8f6f 	isb	sy
 81025a6:	f3bf 8f4f 	dsb	sy
 81025aa:	603b      	str	r3, [r7, #0]
}
 81025ac:	bf00      	nop
 81025ae:	e7fe      	b.n	81025ae <vPortEnterCritical+0x4a>
	}
}
 81025b0:	bf00      	nop
 81025b2:	370c      	adds	r7, #12
 81025b4:	46bd      	mov	sp, r7
 81025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025ba:	4770      	bx	lr
 81025bc:	10000014 	.word	0x10000014
 81025c0:	e000ed04 	.word	0xe000ed04

081025c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 81025c4:	b480      	push	{r7}
 81025c6:	b083      	sub	sp, #12
 81025c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 81025ca:	4b12      	ldr	r3, [pc, #72]	; (8102614 <vPortExitCritical+0x50>)
 81025cc:	681b      	ldr	r3, [r3, #0]
 81025ce:	2b00      	cmp	r3, #0
 81025d0:	d10a      	bne.n	81025e8 <vPortExitCritical+0x24>
	__asm volatile
 81025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81025d6:	f383 8811 	msr	BASEPRI, r3
 81025da:	f3bf 8f6f 	isb	sy
 81025de:	f3bf 8f4f 	dsb	sy
 81025e2:	607b      	str	r3, [r7, #4]
}
 81025e4:	bf00      	nop
 81025e6:	e7fe      	b.n	81025e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81025e8:	4b0a      	ldr	r3, [pc, #40]	; (8102614 <vPortExitCritical+0x50>)
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	3b01      	subs	r3, #1
 81025ee:	4a09      	ldr	r2, [pc, #36]	; (8102614 <vPortExitCritical+0x50>)
 81025f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81025f2:	4b08      	ldr	r3, [pc, #32]	; (8102614 <vPortExitCritical+0x50>)
 81025f4:	681b      	ldr	r3, [r3, #0]
 81025f6:	2b00      	cmp	r3, #0
 81025f8:	d105      	bne.n	8102606 <vPortExitCritical+0x42>
 81025fa:	2300      	movs	r3, #0
 81025fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81025fe:	683b      	ldr	r3, [r7, #0]
 8102600:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8102604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8102606:	bf00      	nop
 8102608:	370c      	adds	r7, #12
 810260a:	46bd      	mov	sp, r7
 810260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102610:	4770      	bx	lr
 8102612:	bf00      	nop
 8102614:	10000014 	.word	0x10000014
	...

08102620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8102620:	f3ef 8009 	mrs	r0, PSP
 8102624:	f3bf 8f6f 	isb	sy
 8102628:	4b15      	ldr	r3, [pc, #84]	; (8102680 <pxCurrentTCBConst>)
 810262a:	681a      	ldr	r2, [r3, #0]
 810262c:	f01e 0f10 	tst.w	lr, #16
 8102630:	bf08      	it	eq
 8102632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8102636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810263a:	6010      	str	r0, [r2, #0]
 810263c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8102640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8102644:	f380 8811 	msr	BASEPRI, r0
 8102648:	f3bf 8f4f 	dsb	sy
 810264c:	f3bf 8f6f 	isb	sy
 8102650:	f001 feee 	bl	8104430 <vTaskSwitchContext>
 8102654:	f04f 0000 	mov.w	r0, #0
 8102658:	f380 8811 	msr	BASEPRI, r0
 810265c:	bc09      	pop	{r0, r3}
 810265e:	6819      	ldr	r1, [r3, #0]
 8102660:	6808      	ldr	r0, [r1, #0]
 8102662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102666:	f01e 0f10 	tst.w	lr, #16
 810266a:	bf08      	it	eq
 810266c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8102670:	f380 8809 	msr	PSP, r0
 8102674:	f3bf 8f6f 	isb	sy
 8102678:	4770      	bx	lr
 810267a:	bf00      	nop
 810267c:	f3af 8000 	nop.w

08102680 <pxCurrentTCBConst>:
 8102680:	1000c51c 	.word	0x1000c51c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8102684:	bf00      	nop
 8102686:	bf00      	nop

08102688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8102688:	b580      	push	{r7, lr}
 810268a:	b082      	sub	sp, #8
 810268c:	af00      	add	r7, sp, #0
	__asm volatile
 810268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102692:	f383 8811 	msr	BASEPRI, r3
 8102696:	f3bf 8f6f 	isb	sy
 810269a:	f3bf 8f4f 	dsb	sy
 810269e:	607b      	str	r3, [r7, #4]
}
 81026a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81026a2:	f001 fe0b 	bl	81042bc <xTaskIncrementTick>
 81026a6:	4603      	mov	r3, r0
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d003      	beq.n	81026b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81026ac:	4b06      	ldr	r3, [pc, #24]	; (81026c8 <xPortSysTickHandler+0x40>)
 81026ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81026b2:	601a      	str	r2, [r3, #0]
 81026b4:	2300      	movs	r3, #0
 81026b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 81026b8:	683b      	ldr	r3, [r7, #0]
 81026ba:	f383 8811 	msr	BASEPRI, r3
}
 81026be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 81026c0:	bf00      	nop
 81026c2:	3708      	adds	r7, #8
 81026c4:	46bd      	mov	sp, r7
 81026c6:	bd80      	pop	{r7, pc}
 81026c8:	e000ed04 	.word	0xe000ed04

081026cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 81026cc:	b480      	push	{r7}
 81026ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 81026d0:	4b0b      	ldr	r3, [pc, #44]	; (8102700 <vPortSetupTimerInterrupt+0x34>)
 81026d2:	2200      	movs	r2, #0
 81026d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 81026d6:	4b0b      	ldr	r3, [pc, #44]	; (8102704 <vPortSetupTimerInterrupt+0x38>)
 81026d8:	2200      	movs	r2, #0
 81026da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 81026dc:	4b0a      	ldr	r3, [pc, #40]	; (8102708 <vPortSetupTimerInterrupt+0x3c>)
 81026de:	681b      	ldr	r3, [r3, #0]
 81026e0:	4a0a      	ldr	r2, [pc, #40]	; (810270c <vPortSetupTimerInterrupt+0x40>)
 81026e2:	fba2 2303 	umull	r2, r3, r2, r3
 81026e6:	099b      	lsrs	r3, r3, #6
 81026e8:	4a09      	ldr	r2, [pc, #36]	; (8102710 <vPortSetupTimerInterrupt+0x44>)
 81026ea:	3b01      	subs	r3, #1
 81026ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 81026ee:	4b04      	ldr	r3, [pc, #16]	; (8102700 <vPortSetupTimerInterrupt+0x34>)
 81026f0:	2207      	movs	r2, #7
 81026f2:	601a      	str	r2, [r3, #0]
}
 81026f4:	bf00      	nop
 81026f6:	46bd      	mov	sp, r7
 81026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026fc:	4770      	bx	lr
 81026fe:	bf00      	nop
 8102700:	e000e010 	.word	0xe000e010
 8102704:	e000e018 	.word	0xe000e018
 8102708:	10000004 	.word	0x10000004
 810270c:	10624dd3 	.word	0x10624dd3
 8102710:	e000e014 	.word	0xe000e014

08102714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8102714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8102724 <vPortEnableVFP+0x10>
 8102718:	6801      	ldr	r1, [r0, #0]
 810271a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810271e:	6001      	str	r1, [r0, #0]
 8102720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8102722:	bf00      	nop
 8102724:	e000ed88 	.word	0xe000ed88

08102728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8102728:	b480      	push	{r7}
 810272a:	b085      	sub	sp, #20
 810272c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810272e:	f3ef 8305 	mrs	r3, IPSR
 8102732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8102734:	68fb      	ldr	r3, [r7, #12]
 8102736:	2b0f      	cmp	r3, #15
 8102738:	d914      	bls.n	8102764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810273a:	4a17      	ldr	r2, [pc, #92]	; (8102798 <vPortValidateInterruptPriority+0x70>)
 810273c:	68fb      	ldr	r3, [r7, #12]
 810273e:	4413      	add	r3, r2
 8102740:	781b      	ldrb	r3, [r3, #0]
 8102742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8102744:	4b15      	ldr	r3, [pc, #84]	; (810279c <vPortValidateInterruptPriority+0x74>)
 8102746:	781b      	ldrb	r3, [r3, #0]
 8102748:	7afa      	ldrb	r2, [r7, #11]
 810274a:	429a      	cmp	r2, r3
 810274c:	d20a      	bcs.n	8102764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 810274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102752:	f383 8811 	msr	BASEPRI, r3
 8102756:	f3bf 8f6f 	isb	sy
 810275a:	f3bf 8f4f 	dsb	sy
 810275e:	607b      	str	r3, [r7, #4]
}
 8102760:	bf00      	nop
 8102762:	e7fe      	b.n	8102762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8102764:	4b0e      	ldr	r3, [pc, #56]	; (81027a0 <vPortValidateInterruptPriority+0x78>)
 8102766:	681b      	ldr	r3, [r3, #0]
 8102768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810276c:	4b0d      	ldr	r3, [pc, #52]	; (81027a4 <vPortValidateInterruptPriority+0x7c>)
 810276e:	681b      	ldr	r3, [r3, #0]
 8102770:	429a      	cmp	r2, r3
 8102772:	d90a      	bls.n	810278a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8102774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102778:	f383 8811 	msr	BASEPRI, r3
 810277c:	f3bf 8f6f 	isb	sy
 8102780:	f3bf 8f4f 	dsb	sy
 8102784:	603b      	str	r3, [r7, #0]
}
 8102786:	bf00      	nop
 8102788:	e7fe      	b.n	8102788 <vPortValidateInterruptPriority+0x60>
	}
 810278a:	bf00      	nop
 810278c:	3714      	adds	r7, #20
 810278e:	46bd      	mov	sp, r7
 8102790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102794:	4770      	bx	lr
 8102796:	bf00      	nop
 8102798:	e000e3f0 	.word	0xe000e3f0
 810279c:	1000c4d4 	.word	0x1000c4d4
 81027a0:	e000ed0c 	.word	0xe000ed0c
 81027a4:	1000c4d8 	.word	0x1000c4d8

081027a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 81027a8:	b580      	push	{r7, lr}
 81027aa:	b084      	sub	sp, #16
 81027ac:	af00      	add	r7, sp, #0
 81027ae:	6078      	str	r0, [r7, #4]
 81027b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 81027b6:	68fb      	ldr	r3, [r7, #12]
 81027b8:	2b00      	cmp	r3, #0
 81027ba:	d10a      	bne.n	81027d2 <xQueueGenericReset+0x2a>
	__asm volatile
 81027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81027c0:	f383 8811 	msr	BASEPRI, r3
 81027c4:	f3bf 8f6f 	isb	sy
 81027c8:	f3bf 8f4f 	dsb	sy
 81027cc:	60bb      	str	r3, [r7, #8]
}
 81027ce:	bf00      	nop
 81027d0:	e7fe      	b.n	81027d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 81027d2:	f7ff fec7 	bl	8102564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81027d6:	68fb      	ldr	r3, [r7, #12]
 81027d8:	681a      	ldr	r2, [r3, #0]
 81027da:	68fb      	ldr	r3, [r7, #12]
 81027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81027de:	68f9      	ldr	r1, [r7, #12]
 81027e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 81027e2:	fb01 f303 	mul.w	r3, r1, r3
 81027e6:	441a      	add	r2, r3
 81027e8:	68fb      	ldr	r3, [r7, #12]
 81027ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81027ec:	68fb      	ldr	r3, [r7, #12]
 81027ee:	2200      	movs	r2, #0
 81027f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81027f2:	68fb      	ldr	r3, [r7, #12]
 81027f4:	681a      	ldr	r2, [r3, #0]
 81027f6:	68fb      	ldr	r3, [r7, #12]
 81027f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81027fa:	68fb      	ldr	r3, [r7, #12]
 81027fc:	681a      	ldr	r2, [r3, #0]
 81027fe:	68fb      	ldr	r3, [r7, #12]
 8102800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102802:	3b01      	subs	r3, #1
 8102804:	68f9      	ldr	r1, [r7, #12]
 8102806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8102808:	fb01 f303 	mul.w	r3, r1, r3
 810280c:	441a      	add	r2, r3
 810280e:	68fb      	ldr	r3, [r7, #12]
 8102810:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8102812:	68fb      	ldr	r3, [r7, #12]
 8102814:	22ff      	movs	r2, #255	; 0xff
 8102816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810281a:	68fb      	ldr	r3, [r7, #12]
 810281c:	22ff      	movs	r2, #255	; 0xff
 810281e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8102822:	683b      	ldr	r3, [r7, #0]
 8102824:	2b00      	cmp	r3, #0
 8102826:	d114      	bne.n	8102852 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102828:	68fb      	ldr	r3, [r7, #12]
 810282a:	691b      	ldr	r3, [r3, #16]
 810282c:	2b00      	cmp	r3, #0
 810282e:	d01a      	beq.n	8102866 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102830:	68fb      	ldr	r3, [r7, #12]
 8102832:	3310      	adds	r3, #16
 8102834:	4618      	mov	r0, r3
 8102836:	f001 feaf 	bl	8104598 <xTaskRemoveFromEventList>
 810283a:	4603      	mov	r3, r0
 810283c:	2b00      	cmp	r3, #0
 810283e:	d012      	beq.n	8102866 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8102840:	4b0c      	ldr	r3, [pc, #48]	; (8102874 <xQueueGenericReset+0xcc>)
 8102842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102846:	601a      	str	r2, [r3, #0]
 8102848:	f3bf 8f4f 	dsb	sy
 810284c:	f3bf 8f6f 	isb	sy
 8102850:	e009      	b.n	8102866 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8102852:	68fb      	ldr	r3, [r7, #12]
 8102854:	3310      	adds	r3, #16
 8102856:	4618      	mov	r0, r3
 8102858:	f7ff fca0 	bl	810219c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810285c:	68fb      	ldr	r3, [r7, #12]
 810285e:	3324      	adds	r3, #36	; 0x24
 8102860:	4618      	mov	r0, r3
 8102862:	f7ff fc9b 	bl	810219c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8102866:	f7ff fead 	bl	81025c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810286a:	2301      	movs	r3, #1
}
 810286c:	4618      	mov	r0, r3
 810286e:	3710      	adds	r7, #16
 8102870:	46bd      	mov	sp, r7
 8102872:	bd80      	pop	{r7, pc}
 8102874:	e000ed04 	.word	0xe000ed04

08102878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8102878:	b580      	push	{r7, lr}
 810287a:	b08e      	sub	sp, #56	; 0x38
 810287c:	af02      	add	r7, sp, #8
 810287e:	60f8      	str	r0, [r7, #12]
 8102880:	60b9      	str	r1, [r7, #8]
 8102882:	607a      	str	r2, [r7, #4]
 8102884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8102886:	68fb      	ldr	r3, [r7, #12]
 8102888:	2b00      	cmp	r3, #0
 810288a:	d10a      	bne.n	81028a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102890:	f383 8811 	msr	BASEPRI, r3
 8102894:	f3bf 8f6f 	isb	sy
 8102898:	f3bf 8f4f 	dsb	sy
 810289c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810289e:	bf00      	nop
 81028a0:	e7fe      	b.n	81028a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 81028a2:	683b      	ldr	r3, [r7, #0]
 81028a4:	2b00      	cmp	r3, #0
 81028a6:	d10a      	bne.n	81028be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 81028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81028ac:	f383 8811 	msr	BASEPRI, r3
 81028b0:	f3bf 8f6f 	isb	sy
 81028b4:	f3bf 8f4f 	dsb	sy
 81028b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 81028ba:	bf00      	nop
 81028bc:	e7fe      	b.n	81028bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	2b00      	cmp	r3, #0
 81028c2:	d002      	beq.n	81028ca <xQueueGenericCreateStatic+0x52>
 81028c4:	68bb      	ldr	r3, [r7, #8]
 81028c6:	2b00      	cmp	r3, #0
 81028c8:	d001      	beq.n	81028ce <xQueueGenericCreateStatic+0x56>
 81028ca:	2301      	movs	r3, #1
 81028cc:	e000      	b.n	81028d0 <xQueueGenericCreateStatic+0x58>
 81028ce:	2300      	movs	r3, #0
 81028d0:	2b00      	cmp	r3, #0
 81028d2:	d10a      	bne.n	81028ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 81028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81028d8:	f383 8811 	msr	BASEPRI, r3
 81028dc:	f3bf 8f6f 	isb	sy
 81028e0:	f3bf 8f4f 	dsb	sy
 81028e4:	623b      	str	r3, [r7, #32]
}
 81028e6:	bf00      	nop
 81028e8:	e7fe      	b.n	81028e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	2b00      	cmp	r3, #0
 81028ee:	d102      	bne.n	81028f6 <xQueueGenericCreateStatic+0x7e>
 81028f0:	68bb      	ldr	r3, [r7, #8]
 81028f2:	2b00      	cmp	r3, #0
 81028f4:	d101      	bne.n	81028fa <xQueueGenericCreateStatic+0x82>
 81028f6:	2301      	movs	r3, #1
 81028f8:	e000      	b.n	81028fc <xQueueGenericCreateStatic+0x84>
 81028fa:	2300      	movs	r3, #0
 81028fc:	2b00      	cmp	r3, #0
 81028fe:	d10a      	bne.n	8102916 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8102900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102904:	f383 8811 	msr	BASEPRI, r3
 8102908:	f3bf 8f6f 	isb	sy
 810290c:	f3bf 8f4f 	dsb	sy
 8102910:	61fb      	str	r3, [r7, #28]
}
 8102912:	bf00      	nop
 8102914:	e7fe      	b.n	8102914 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8102916:	2350      	movs	r3, #80	; 0x50
 8102918:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810291a:	697b      	ldr	r3, [r7, #20]
 810291c:	2b50      	cmp	r3, #80	; 0x50
 810291e:	d00a      	beq.n	8102936 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8102920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102924:	f383 8811 	msr	BASEPRI, r3
 8102928:	f3bf 8f6f 	isb	sy
 810292c:	f3bf 8f4f 	dsb	sy
 8102930:	61bb      	str	r3, [r7, #24]
}
 8102932:	bf00      	nop
 8102934:	e7fe      	b.n	8102934 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8102936:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8102938:	683b      	ldr	r3, [r7, #0]
 810293a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810293e:	2b00      	cmp	r3, #0
 8102940:	d00d      	beq.n	810295e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8102942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102944:	2201      	movs	r2, #1
 8102946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810294a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102950:	9300      	str	r3, [sp, #0]
 8102952:	4613      	mov	r3, r2
 8102954:	687a      	ldr	r2, [r7, #4]
 8102956:	68b9      	ldr	r1, [r7, #8]
 8102958:	68f8      	ldr	r0, [r7, #12]
 810295a:	f000 f83f 	bl	81029dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8102960:	4618      	mov	r0, r3
 8102962:	3730      	adds	r7, #48	; 0x30
 8102964:	46bd      	mov	sp, r7
 8102966:	bd80      	pop	{r7, pc}

08102968 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8102968:	b580      	push	{r7, lr}
 810296a:	b08a      	sub	sp, #40	; 0x28
 810296c:	af02      	add	r7, sp, #8
 810296e:	60f8      	str	r0, [r7, #12]
 8102970:	60b9      	str	r1, [r7, #8]
 8102972:	4613      	mov	r3, r2
 8102974:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8102976:	68fb      	ldr	r3, [r7, #12]
 8102978:	2b00      	cmp	r3, #0
 810297a:	d10a      	bne.n	8102992 <xQueueGenericCreate+0x2a>
	__asm volatile
 810297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102980:	f383 8811 	msr	BASEPRI, r3
 8102984:	f3bf 8f6f 	isb	sy
 8102988:	f3bf 8f4f 	dsb	sy
 810298c:	613b      	str	r3, [r7, #16]
}
 810298e:	bf00      	nop
 8102990:	e7fe      	b.n	8102990 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102992:	68fb      	ldr	r3, [r7, #12]
 8102994:	68ba      	ldr	r2, [r7, #8]
 8102996:	fb02 f303 	mul.w	r3, r2, r3
 810299a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810299c:	69fb      	ldr	r3, [r7, #28]
 810299e:	3350      	adds	r3, #80	; 0x50
 81029a0:	4618      	mov	r0, r3
 81029a2:	f7ff fa11 	bl	8101dc8 <pvPortMalloc>
 81029a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 81029a8:	69bb      	ldr	r3, [r7, #24]
 81029aa:	2b00      	cmp	r3, #0
 81029ac:	d011      	beq.n	81029d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 81029ae:	69bb      	ldr	r3, [r7, #24]
 81029b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81029b2:	697b      	ldr	r3, [r7, #20]
 81029b4:	3350      	adds	r3, #80	; 0x50
 81029b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 81029b8:	69bb      	ldr	r3, [r7, #24]
 81029ba:	2200      	movs	r2, #0
 81029bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81029c0:	79fa      	ldrb	r2, [r7, #7]
 81029c2:	69bb      	ldr	r3, [r7, #24]
 81029c4:	9300      	str	r3, [sp, #0]
 81029c6:	4613      	mov	r3, r2
 81029c8:	697a      	ldr	r2, [r7, #20]
 81029ca:	68b9      	ldr	r1, [r7, #8]
 81029cc:	68f8      	ldr	r0, [r7, #12]
 81029ce:	f000 f805 	bl	81029dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81029d2:	69bb      	ldr	r3, [r7, #24]
	}
 81029d4:	4618      	mov	r0, r3
 81029d6:	3720      	adds	r7, #32
 81029d8:	46bd      	mov	sp, r7
 81029da:	bd80      	pop	{r7, pc}

081029dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 81029dc:	b580      	push	{r7, lr}
 81029de:	b084      	sub	sp, #16
 81029e0:	af00      	add	r7, sp, #0
 81029e2:	60f8      	str	r0, [r7, #12]
 81029e4:	60b9      	str	r1, [r7, #8]
 81029e6:	607a      	str	r2, [r7, #4]
 81029e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 81029ea:	68bb      	ldr	r3, [r7, #8]
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d103      	bne.n	81029f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 81029f0:	69bb      	ldr	r3, [r7, #24]
 81029f2:	69ba      	ldr	r2, [r7, #24]
 81029f4:	601a      	str	r2, [r3, #0]
 81029f6:	e002      	b.n	81029fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 81029f8:	69bb      	ldr	r3, [r7, #24]
 81029fa:	687a      	ldr	r2, [r7, #4]
 81029fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 81029fe:	69bb      	ldr	r3, [r7, #24]
 8102a00:	68fa      	ldr	r2, [r7, #12]
 8102a02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8102a04:	69bb      	ldr	r3, [r7, #24]
 8102a06:	68ba      	ldr	r2, [r7, #8]
 8102a08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8102a0a:	2101      	movs	r1, #1
 8102a0c:	69b8      	ldr	r0, [r7, #24]
 8102a0e:	f7ff fecb 	bl	81027a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8102a12:	69bb      	ldr	r3, [r7, #24]
 8102a14:	78fa      	ldrb	r2, [r7, #3]
 8102a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8102a1a:	bf00      	nop
 8102a1c:	3710      	adds	r7, #16
 8102a1e:	46bd      	mov	sp, r7
 8102a20:	bd80      	pop	{r7, pc}
	...

08102a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8102a24:	b580      	push	{r7, lr}
 8102a26:	b08e      	sub	sp, #56	; 0x38
 8102a28:	af00      	add	r7, sp, #0
 8102a2a:	60f8      	str	r0, [r7, #12]
 8102a2c:	60b9      	str	r1, [r7, #8]
 8102a2e:	607a      	str	r2, [r7, #4]
 8102a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8102a32:	2300      	movs	r3, #0
 8102a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102a36:	68fb      	ldr	r3, [r7, #12]
 8102a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8102a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a3c:	2b00      	cmp	r3, #0
 8102a3e:	d10a      	bne.n	8102a56 <xQueueGenericSend+0x32>
	__asm volatile
 8102a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102a44:	f383 8811 	msr	BASEPRI, r3
 8102a48:	f3bf 8f6f 	isb	sy
 8102a4c:	f3bf 8f4f 	dsb	sy
 8102a50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8102a52:	bf00      	nop
 8102a54:	e7fe      	b.n	8102a54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102a56:	68bb      	ldr	r3, [r7, #8]
 8102a58:	2b00      	cmp	r3, #0
 8102a5a:	d103      	bne.n	8102a64 <xQueueGenericSend+0x40>
 8102a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a60:	2b00      	cmp	r3, #0
 8102a62:	d101      	bne.n	8102a68 <xQueueGenericSend+0x44>
 8102a64:	2301      	movs	r3, #1
 8102a66:	e000      	b.n	8102a6a <xQueueGenericSend+0x46>
 8102a68:	2300      	movs	r3, #0
 8102a6a:	2b00      	cmp	r3, #0
 8102a6c:	d10a      	bne.n	8102a84 <xQueueGenericSend+0x60>
	__asm volatile
 8102a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102a72:	f383 8811 	msr	BASEPRI, r3
 8102a76:	f3bf 8f6f 	isb	sy
 8102a7a:	f3bf 8f4f 	dsb	sy
 8102a7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8102a80:	bf00      	nop
 8102a82:	e7fe      	b.n	8102a82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8102a84:	683b      	ldr	r3, [r7, #0]
 8102a86:	2b02      	cmp	r3, #2
 8102a88:	d103      	bne.n	8102a92 <xQueueGenericSend+0x6e>
 8102a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102a8e:	2b01      	cmp	r3, #1
 8102a90:	d101      	bne.n	8102a96 <xQueueGenericSend+0x72>
 8102a92:	2301      	movs	r3, #1
 8102a94:	e000      	b.n	8102a98 <xQueueGenericSend+0x74>
 8102a96:	2300      	movs	r3, #0
 8102a98:	2b00      	cmp	r3, #0
 8102a9a:	d10a      	bne.n	8102ab2 <xQueueGenericSend+0x8e>
	__asm volatile
 8102a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102aa0:	f383 8811 	msr	BASEPRI, r3
 8102aa4:	f3bf 8f6f 	isb	sy
 8102aa8:	f3bf 8f4f 	dsb	sy
 8102aac:	623b      	str	r3, [r7, #32]
}
 8102aae:	bf00      	nop
 8102ab0:	e7fe      	b.n	8102ab0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8102ab2:	f001 ff69 	bl	8104988 <xTaskGetSchedulerState>
 8102ab6:	4603      	mov	r3, r0
 8102ab8:	2b00      	cmp	r3, #0
 8102aba:	d102      	bne.n	8102ac2 <xQueueGenericSend+0x9e>
 8102abc:	687b      	ldr	r3, [r7, #4]
 8102abe:	2b00      	cmp	r3, #0
 8102ac0:	d101      	bne.n	8102ac6 <xQueueGenericSend+0xa2>
 8102ac2:	2301      	movs	r3, #1
 8102ac4:	e000      	b.n	8102ac8 <xQueueGenericSend+0xa4>
 8102ac6:	2300      	movs	r3, #0
 8102ac8:	2b00      	cmp	r3, #0
 8102aca:	d10a      	bne.n	8102ae2 <xQueueGenericSend+0xbe>
	__asm volatile
 8102acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102ad0:	f383 8811 	msr	BASEPRI, r3
 8102ad4:	f3bf 8f6f 	isb	sy
 8102ad8:	f3bf 8f4f 	dsb	sy
 8102adc:	61fb      	str	r3, [r7, #28]
}
 8102ade:	bf00      	nop
 8102ae0:	e7fe      	b.n	8102ae0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102ae2:	f7ff fd3f 	bl	8102564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8102aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102aee:	429a      	cmp	r2, r3
 8102af0:	d302      	bcc.n	8102af8 <xQueueGenericSend+0xd4>
 8102af2:	683b      	ldr	r3, [r7, #0]
 8102af4:	2b02      	cmp	r3, #2
 8102af6:	d129      	bne.n	8102b4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102af8:	683a      	ldr	r2, [r7, #0]
 8102afa:	68b9      	ldr	r1, [r7, #8]
 8102afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102afe:	f000 fbbb 	bl	8103278 <prvCopyDataToQueue>
 8102b02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102b08:	2b00      	cmp	r3, #0
 8102b0a:	d010      	beq.n	8102b2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b0e:	3324      	adds	r3, #36	; 0x24
 8102b10:	4618      	mov	r0, r3
 8102b12:	f001 fd41 	bl	8104598 <xTaskRemoveFromEventList>
 8102b16:	4603      	mov	r3, r0
 8102b18:	2b00      	cmp	r3, #0
 8102b1a:	d013      	beq.n	8102b44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8102b1c:	4b3f      	ldr	r3, [pc, #252]	; (8102c1c <xQueueGenericSend+0x1f8>)
 8102b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102b22:	601a      	str	r2, [r3, #0]
 8102b24:	f3bf 8f4f 	dsb	sy
 8102b28:	f3bf 8f6f 	isb	sy
 8102b2c:	e00a      	b.n	8102b44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8102b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102b30:	2b00      	cmp	r3, #0
 8102b32:	d007      	beq.n	8102b44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8102b34:	4b39      	ldr	r3, [pc, #228]	; (8102c1c <xQueueGenericSend+0x1f8>)
 8102b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102b3a:	601a      	str	r2, [r3, #0]
 8102b3c:	f3bf 8f4f 	dsb	sy
 8102b40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8102b44:	f7ff fd3e 	bl	81025c4 <vPortExitCritical>
				return pdPASS;
 8102b48:	2301      	movs	r3, #1
 8102b4a:	e063      	b.n	8102c14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	2b00      	cmp	r3, #0
 8102b50:	d103      	bne.n	8102b5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102b52:	f7ff fd37 	bl	81025c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8102b56:	2300      	movs	r3, #0
 8102b58:	e05c      	b.n	8102c14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102b5c:	2b00      	cmp	r3, #0
 8102b5e:	d106      	bne.n	8102b6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102b60:	f107 0314 	add.w	r3, r7, #20
 8102b64:	4618      	mov	r0, r3
 8102b66:	f001 fda1 	bl	81046ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102b6a:	2301      	movs	r3, #1
 8102b6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102b6e:	f7ff fd29 	bl	81025c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8102b72:	f001 fae7 	bl	8104144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8102b76:	f7ff fcf5 	bl	8102564 <vPortEnterCritical>
 8102b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102b80:	b25b      	sxtb	r3, r3
 8102b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b86:	d103      	bne.n	8102b90 <xQueueGenericSend+0x16c>
 8102b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b8a:	2200      	movs	r2, #0
 8102b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102b96:	b25b      	sxtb	r3, r3
 8102b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b9c:	d103      	bne.n	8102ba6 <xQueueGenericSend+0x182>
 8102b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102ba0:	2200      	movs	r2, #0
 8102ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102ba6:	f7ff fd0d 	bl	81025c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102baa:	1d3a      	adds	r2, r7, #4
 8102bac:	f107 0314 	add.w	r3, r7, #20
 8102bb0:	4611      	mov	r1, r2
 8102bb2:	4618      	mov	r0, r3
 8102bb4:	f001 fd90 	bl	81046d8 <xTaskCheckForTimeOut>
 8102bb8:	4603      	mov	r3, r0
 8102bba:	2b00      	cmp	r3, #0
 8102bbc:	d124      	bne.n	8102c08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8102bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102bc0:	f000 fc52 	bl	8103468 <prvIsQueueFull>
 8102bc4:	4603      	mov	r3, r0
 8102bc6:	2b00      	cmp	r3, #0
 8102bc8:	d018      	beq.n	8102bfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8102bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102bcc:	3310      	adds	r3, #16
 8102bce:	687a      	ldr	r2, [r7, #4]
 8102bd0:	4611      	mov	r1, r2
 8102bd2:	4618      	mov	r0, r3
 8102bd4:	f001 fc90 	bl	81044f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8102bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102bda:	f000 fbdd 	bl	8103398 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8102bde:	f001 fabf 	bl	8104160 <xTaskResumeAll>
 8102be2:	4603      	mov	r3, r0
 8102be4:	2b00      	cmp	r3, #0
 8102be6:	f47f af7c 	bne.w	8102ae2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8102bea:	4b0c      	ldr	r3, [pc, #48]	; (8102c1c <xQueueGenericSend+0x1f8>)
 8102bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102bf0:	601a      	str	r2, [r3, #0]
 8102bf2:	f3bf 8f4f 	dsb	sy
 8102bf6:	f3bf 8f6f 	isb	sy
 8102bfa:	e772      	b.n	8102ae2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8102bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102bfe:	f000 fbcb 	bl	8103398 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102c02:	f001 faad 	bl	8104160 <xTaskResumeAll>
 8102c06:	e76c      	b.n	8102ae2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8102c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102c0a:	f000 fbc5 	bl	8103398 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102c0e:	f001 faa7 	bl	8104160 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8102c12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8102c14:	4618      	mov	r0, r3
 8102c16:	3738      	adds	r7, #56	; 0x38
 8102c18:	46bd      	mov	sp, r7
 8102c1a:	bd80      	pop	{r7, pc}
 8102c1c:	e000ed04 	.word	0xe000ed04

08102c20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8102c20:	b580      	push	{r7, lr}
 8102c22:	b090      	sub	sp, #64	; 0x40
 8102c24:	af00      	add	r7, sp, #0
 8102c26:	60f8      	str	r0, [r7, #12]
 8102c28:	60b9      	str	r1, [r7, #8]
 8102c2a:	607a      	str	r2, [r7, #4]
 8102c2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8102c2e:	68fb      	ldr	r3, [r7, #12]
 8102c30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8102c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102c34:	2b00      	cmp	r3, #0
 8102c36:	d10a      	bne.n	8102c4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8102c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c3c:	f383 8811 	msr	BASEPRI, r3
 8102c40:	f3bf 8f6f 	isb	sy
 8102c44:	f3bf 8f4f 	dsb	sy
 8102c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8102c4a:	bf00      	nop
 8102c4c:	e7fe      	b.n	8102c4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102c4e:	68bb      	ldr	r3, [r7, #8]
 8102c50:	2b00      	cmp	r3, #0
 8102c52:	d103      	bne.n	8102c5c <xQueueGenericSendFromISR+0x3c>
 8102c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c58:	2b00      	cmp	r3, #0
 8102c5a:	d101      	bne.n	8102c60 <xQueueGenericSendFromISR+0x40>
 8102c5c:	2301      	movs	r3, #1
 8102c5e:	e000      	b.n	8102c62 <xQueueGenericSendFromISR+0x42>
 8102c60:	2300      	movs	r3, #0
 8102c62:	2b00      	cmp	r3, #0
 8102c64:	d10a      	bne.n	8102c7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8102c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c6a:	f383 8811 	msr	BASEPRI, r3
 8102c6e:	f3bf 8f6f 	isb	sy
 8102c72:	f3bf 8f4f 	dsb	sy
 8102c76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8102c78:	bf00      	nop
 8102c7a:	e7fe      	b.n	8102c7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8102c7c:	683b      	ldr	r3, [r7, #0]
 8102c7e:	2b02      	cmp	r3, #2
 8102c80:	d103      	bne.n	8102c8a <xQueueGenericSendFromISR+0x6a>
 8102c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102c86:	2b01      	cmp	r3, #1
 8102c88:	d101      	bne.n	8102c8e <xQueueGenericSendFromISR+0x6e>
 8102c8a:	2301      	movs	r3, #1
 8102c8c:	e000      	b.n	8102c90 <xQueueGenericSendFromISR+0x70>
 8102c8e:	2300      	movs	r3, #0
 8102c90:	2b00      	cmp	r3, #0
 8102c92:	d10a      	bne.n	8102caa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8102c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c98:	f383 8811 	msr	BASEPRI, r3
 8102c9c:	f3bf 8f6f 	isb	sy
 8102ca0:	f3bf 8f4f 	dsb	sy
 8102ca4:	623b      	str	r3, [r7, #32]
}
 8102ca6:	bf00      	nop
 8102ca8:	e7fe      	b.n	8102ca8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8102caa:	f7ff fd3d 	bl	8102728 <vPortValidateInterruptPriority>
	__asm volatile
 8102cae:	f3ef 8211 	mrs	r2, BASEPRI
 8102cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102cb6:	f383 8811 	msr	BASEPRI, r3
 8102cba:	f3bf 8f6f 	isb	sy
 8102cbe:	f3bf 8f4f 	dsb	sy
 8102cc2:	61fa      	str	r2, [r7, #28]
 8102cc4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8102cc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8102cc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8102cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102cd2:	429a      	cmp	r2, r3
 8102cd4:	d302      	bcc.n	8102cdc <xQueueGenericSendFromISR+0xbc>
 8102cd6:	683b      	ldr	r3, [r7, #0]
 8102cd8:	2b02      	cmp	r3, #2
 8102cda:	d12f      	bne.n	8102d3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8102cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102cea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102cec:	683a      	ldr	r2, [r7, #0]
 8102cee:	68b9      	ldr	r1, [r7, #8]
 8102cf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8102cf2:	f000 fac1 	bl	8103278 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8102cf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8102cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102cfe:	d112      	bne.n	8102d26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102d04:	2b00      	cmp	r3, #0
 8102d06:	d016      	beq.n	8102d36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102d0a:	3324      	adds	r3, #36	; 0x24
 8102d0c:	4618      	mov	r0, r3
 8102d0e:	f001 fc43 	bl	8104598 <xTaskRemoveFromEventList>
 8102d12:	4603      	mov	r3, r0
 8102d14:	2b00      	cmp	r3, #0
 8102d16:	d00e      	beq.n	8102d36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	2b00      	cmp	r3, #0
 8102d1c:	d00b      	beq.n	8102d36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	2201      	movs	r2, #1
 8102d22:	601a      	str	r2, [r3, #0]
 8102d24:	e007      	b.n	8102d36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8102d26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8102d2a:	3301      	adds	r3, #1
 8102d2c:	b2db      	uxtb	r3, r3
 8102d2e:	b25a      	sxtb	r2, r3
 8102d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8102d36:	2301      	movs	r3, #1
 8102d38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8102d3a:	e001      	b.n	8102d40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8102d3c:	2300      	movs	r3, #0
 8102d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d42:	617b      	str	r3, [r7, #20]
	__asm volatile
 8102d44:	697b      	ldr	r3, [r7, #20]
 8102d46:	f383 8811 	msr	BASEPRI, r3
}
 8102d4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8102d4e:	4618      	mov	r0, r3
 8102d50:	3740      	adds	r7, #64	; 0x40
 8102d52:	46bd      	mov	sp, r7
 8102d54:	bd80      	pop	{r7, pc}

08102d56 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8102d56:	b580      	push	{r7, lr}
 8102d58:	b08e      	sub	sp, #56	; 0x38
 8102d5a:	af00      	add	r7, sp, #0
 8102d5c:	6078      	str	r0, [r7, #4]
 8102d5e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8102d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d66:	2b00      	cmp	r3, #0
 8102d68:	d10a      	bne.n	8102d80 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8102d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102d6e:	f383 8811 	msr	BASEPRI, r3
 8102d72:	f3bf 8f6f 	isb	sy
 8102d76:	f3bf 8f4f 	dsb	sy
 8102d7a:	623b      	str	r3, [r7, #32]
}
 8102d7c:	bf00      	nop
 8102d7e:	e7fe      	b.n	8102d7e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8102d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d84:	2b00      	cmp	r3, #0
 8102d86:	d00a      	beq.n	8102d9e <xQueueGiveFromISR+0x48>
	__asm volatile
 8102d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102d8c:	f383 8811 	msr	BASEPRI, r3
 8102d90:	f3bf 8f6f 	isb	sy
 8102d94:	f3bf 8f4f 	dsb	sy
 8102d98:	61fb      	str	r3, [r7, #28]
}
 8102d9a:	bf00      	nop
 8102d9c:	e7fe      	b.n	8102d9c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8102d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102da0:	681b      	ldr	r3, [r3, #0]
 8102da2:	2b00      	cmp	r3, #0
 8102da4:	d103      	bne.n	8102dae <xQueueGiveFromISR+0x58>
 8102da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102da8:	689b      	ldr	r3, [r3, #8]
 8102daa:	2b00      	cmp	r3, #0
 8102dac:	d101      	bne.n	8102db2 <xQueueGiveFromISR+0x5c>
 8102dae:	2301      	movs	r3, #1
 8102db0:	e000      	b.n	8102db4 <xQueueGiveFromISR+0x5e>
 8102db2:	2300      	movs	r3, #0
 8102db4:	2b00      	cmp	r3, #0
 8102db6:	d10a      	bne.n	8102dce <xQueueGiveFromISR+0x78>
	__asm volatile
 8102db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102dbc:	f383 8811 	msr	BASEPRI, r3
 8102dc0:	f3bf 8f6f 	isb	sy
 8102dc4:	f3bf 8f4f 	dsb	sy
 8102dc8:	61bb      	str	r3, [r7, #24]
}
 8102dca:	bf00      	nop
 8102dcc:	e7fe      	b.n	8102dcc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8102dce:	f7ff fcab 	bl	8102728 <vPortValidateInterruptPriority>
	__asm volatile
 8102dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8102dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102dda:	f383 8811 	msr	BASEPRI, r3
 8102dde:	f3bf 8f6f 	isb	sy
 8102de2:	f3bf 8f4f 	dsb	sy
 8102de6:	617a      	str	r2, [r7, #20]
 8102de8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8102dea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8102dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102df2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8102df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102dfa:	429a      	cmp	r2, r3
 8102dfc:	d22b      	bcs.n	8102e56 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8102dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8102e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102e0a:	1c5a      	adds	r2, r3, #1
 8102e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8102e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8102e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102e18:	d112      	bne.n	8102e40 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102e1e:	2b00      	cmp	r3, #0
 8102e20:	d016      	beq.n	8102e50 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e24:	3324      	adds	r3, #36	; 0x24
 8102e26:	4618      	mov	r0, r3
 8102e28:	f001 fbb6 	bl	8104598 <xTaskRemoveFromEventList>
 8102e2c:	4603      	mov	r3, r0
 8102e2e:	2b00      	cmp	r3, #0
 8102e30:	d00e      	beq.n	8102e50 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8102e32:	683b      	ldr	r3, [r7, #0]
 8102e34:	2b00      	cmp	r3, #0
 8102e36:	d00b      	beq.n	8102e50 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8102e38:	683b      	ldr	r3, [r7, #0]
 8102e3a:	2201      	movs	r2, #1
 8102e3c:	601a      	str	r2, [r3, #0]
 8102e3e:	e007      	b.n	8102e50 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8102e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102e44:	3301      	adds	r3, #1
 8102e46:	b2db      	uxtb	r3, r3
 8102e48:	b25a      	sxtb	r2, r3
 8102e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8102e50:	2301      	movs	r3, #1
 8102e52:	637b      	str	r3, [r7, #52]	; 0x34
 8102e54:	e001      	b.n	8102e5a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8102e56:	2300      	movs	r3, #0
 8102e58:	637b      	str	r3, [r7, #52]	; 0x34
 8102e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102e5c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8102e5e:	68fb      	ldr	r3, [r7, #12]
 8102e60:	f383 8811 	msr	BASEPRI, r3
}
 8102e64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8102e68:	4618      	mov	r0, r3
 8102e6a:	3738      	adds	r7, #56	; 0x38
 8102e6c:	46bd      	mov	sp, r7
 8102e6e:	bd80      	pop	{r7, pc}

08102e70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8102e70:	b580      	push	{r7, lr}
 8102e72:	b08c      	sub	sp, #48	; 0x30
 8102e74:	af00      	add	r7, sp, #0
 8102e76:	60f8      	str	r0, [r7, #12]
 8102e78:	60b9      	str	r1, [r7, #8]
 8102e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8102e7c:	2300      	movs	r3, #0
 8102e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8102e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102e86:	2b00      	cmp	r3, #0
 8102e88:	d10a      	bne.n	8102ea0 <xQueueReceive+0x30>
	__asm volatile
 8102e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102e8e:	f383 8811 	msr	BASEPRI, r3
 8102e92:	f3bf 8f6f 	isb	sy
 8102e96:	f3bf 8f4f 	dsb	sy
 8102e9a:	623b      	str	r3, [r7, #32]
}
 8102e9c:	bf00      	nop
 8102e9e:	e7fe      	b.n	8102e9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102ea0:	68bb      	ldr	r3, [r7, #8]
 8102ea2:	2b00      	cmp	r3, #0
 8102ea4:	d103      	bne.n	8102eae <xQueueReceive+0x3e>
 8102ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102eaa:	2b00      	cmp	r3, #0
 8102eac:	d101      	bne.n	8102eb2 <xQueueReceive+0x42>
 8102eae:	2301      	movs	r3, #1
 8102eb0:	e000      	b.n	8102eb4 <xQueueReceive+0x44>
 8102eb2:	2300      	movs	r3, #0
 8102eb4:	2b00      	cmp	r3, #0
 8102eb6:	d10a      	bne.n	8102ece <xQueueReceive+0x5e>
	__asm volatile
 8102eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102ebc:	f383 8811 	msr	BASEPRI, r3
 8102ec0:	f3bf 8f6f 	isb	sy
 8102ec4:	f3bf 8f4f 	dsb	sy
 8102ec8:	61fb      	str	r3, [r7, #28]
}
 8102eca:	bf00      	nop
 8102ecc:	e7fe      	b.n	8102ecc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8102ece:	f001 fd5b 	bl	8104988 <xTaskGetSchedulerState>
 8102ed2:	4603      	mov	r3, r0
 8102ed4:	2b00      	cmp	r3, #0
 8102ed6:	d102      	bne.n	8102ede <xQueueReceive+0x6e>
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	2b00      	cmp	r3, #0
 8102edc:	d101      	bne.n	8102ee2 <xQueueReceive+0x72>
 8102ede:	2301      	movs	r3, #1
 8102ee0:	e000      	b.n	8102ee4 <xQueueReceive+0x74>
 8102ee2:	2300      	movs	r3, #0
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d10a      	bne.n	8102efe <xQueueReceive+0x8e>
	__asm volatile
 8102ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102eec:	f383 8811 	msr	BASEPRI, r3
 8102ef0:	f3bf 8f6f 	isb	sy
 8102ef4:	f3bf 8f4f 	dsb	sy
 8102ef8:	61bb      	str	r3, [r7, #24]
}
 8102efa:	bf00      	nop
 8102efc:	e7fe      	b.n	8102efc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102efe:	f7ff fb31 	bl	8102564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102f06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8102f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f0a:	2b00      	cmp	r3, #0
 8102f0c:	d01f      	beq.n	8102f4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8102f0e:	68b9      	ldr	r1, [r7, #8]
 8102f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102f12:	f000 fa1b 	bl	810334c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8102f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f18:	1e5a      	subs	r2, r3, #1
 8102f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102f1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102f20:	691b      	ldr	r3, [r3, #16]
 8102f22:	2b00      	cmp	r3, #0
 8102f24:	d00f      	beq.n	8102f46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102f28:	3310      	adds	r3, #16
 8102f2a:	4618      	mov	r0, r3
 8102f2c:	f001 fb34 	bl	8104598 <xTaskRemoveFromEventList>
 8102f30:	4603      	mov	r3, r0
 8102f32:	2b00      	cmp	r3, #0
 8102f34:	d007      	beq.n	8102f46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8102f36:	4b3d      	ldr	r3, [pc, #244]	; (810302c <xQueueReceive+0x1bc>)
 8102f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102f3c:	601a      	str	r2, [r3, #0]
 8102f3e:	f3bf 8f4f 	dsb	sy
 8102f42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8102f46:	f7ff fb3d 	bl	81025c4 <vPortExitCritical>
				return pdPASS;
 8102f4a:	2301      	movs	r3, #1
 8102f4c:	e069      	b.n	8103022 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d103      	bne.n	8102f5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102f54:	f7ff fb36 	bl	81025c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8102f58:	2300      	movs	r3, #0
 8102f5a:	e062      	b.n	8103022 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102f5e:	2b00      	cmp	r3, #0
 8102f60:	d106      	bne.n	8102f70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102f62:	f107 0310 	add.w	r3, r7, #16
 8102f66:	4618      	mov	r0, r3
 8102f68:	f001 fba0 	bl	81046ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102f6c:	2301      	movs	r3, #1
 8102f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102f70:	f7ff fb28 	bl	81025c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8102f74:	f001 f8e6 	bl	8104144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8102f78:	f7ff faf4 	bl	8102564 <vPortEnterCritical>
 8102f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102f82:	b25b      	sxtb	r3, r3
 8102f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102f88:	d103      	bne.n	8102f92 <xQueueReceive+0x122>
 8102f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102f8c:	2200      	movs	r2, #0
 8102f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102f98:	b25b      	sxtb	r3, r3
 8102f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102f9e:	d103      	bne.n	8102fa8 <xQueueReceive+0x138>
 8102fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102fa2:	2200      	movs	r2, #0
 8102fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102fa8:	f7ff fb0c 	bl	81025c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102fac:	1d3a      	adds	r2, r7, #4
 8102fae:	f107 0310 	add.w	r3, r7, #16
 8102fb2:	4611      	mov	r1, r2
 8102fb4:	4618      	mov	r0, r3
 8102fb6:	f001 fb8f 	bl	81046d8 <xTaskCheckForTimeOut>
 8102fba:	4603      	mov	r3, r0
 8102fbc:	2b00      	cmp	r3, #0
 8102fbe:	d123      	bne.n	8103008 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102fc2:	f000 fa3b 	bl	810343c <prvIsQueueEmpty>
 8102fc6:	4603      	mov	r3, r0
 8102fc8:	2b00      	cmp	r3, #0
 8102fca:	d017      	beq.n	8102ffc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8102fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102fce:	3324      	adds	r3, #36	; 0x24
 8102fd0:	687a      	ldr	r2, [r7, #4]
 8102fd2:	4611      	mov	r1, r2
 8102fd4:	4618      	mov	r0, r3
 8102fd6:	f001 fa8f 	bl	81044f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8102fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102fdc:	f000 f9dc 	bl	8103398 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8102fe0:	f001 f8be 	bl	8104160 <xTaskResumeAll>
 8102fe4:	4603      	mov	r3, r0
 8102fe6:	2b00      	cmp	r3, #0
 8102fe8:	d189      	bne.n	8102efe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8102fea:	4b10      	ldr	r3, [pc, #64]	; (810302c <xQueueReceive+0x1bc>)
 8102fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102ff0:	601a      	str	r2, [r3, #0]
 8102ff2:	f3bf 8f4f 	dsb	sy
 8102ff6:	f3bf 8f6f 	isb	sy
 8102ffa:	e780      	b.n	8102efe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8102ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102ffe:	f000 f9cb 	bl	8103398 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8103002:	f001 f8ad 	bl	8104160 <xTaskResumeAll>
 8103006:	e77a      	b.n	8102efe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8103008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810300a:	f000 f9c5 	bl	8103398 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810300e:	f001 f8a7 	bl	8104160 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8103012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103014:	f000 fa12 	bl	810343c <prvIsQueueEmpty>
 8103018:	4603      	mov	r3, r0
 810301a:	2b00      	cmp	r3, #0
 810301c:	f43f af6f 	beq.w	8102efe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8103020:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8103022:	4618      	mov	r0, r3
 8103024:	3730      	adds	r7, #48	; 0x30
 8103026:	46bd      	mov	sp, r7
 8103028:	bd80      	pop	{r7, pc}
 810302a:	bf00      	nop
 810302c:	e000ed04 	.word	0xe000ed04

08103030 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8103030:	b580      	push	{r7, lr}
 8103032:	b08e      	sub	sp, #56	; 0x38
 8103034:	af00      	add	r7, sp, #0
 8103036:	6078      	str	r0, [r7, #4]
 8103038:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810303a:	2300      	movs	r3, #0
 810303c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8103042:	2300      	movs	r3, #0
 8103044:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8103046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103048:	2b00      	cmp	r3, #0
 810304a:	d10a      	bne.n	8103062 <xQueueSemaphoreTake+0x32>
	__asm volatile
 810304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103050:	f383 8811 	msr	BASEPRI, r3
 8103054:	f3bf 8f6f 	isb	sy
 8103058:	f3bf 8f4f 	dsb	sy
 810305c:	623b      	str	r3, [r7, #32]
}
 810305e:	bf00      	nop
 8103060:	e7fe      	b.n	8103060 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8103062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103066:	2b00      	cmp	r3, #0
 8103068:	d00a      	beq.n	8103080 <xQueueSemaphoreTake+0x50>
	__asm volatile
 810306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810306e:	f383 8811 	msr	BASEPRI, r3
 8103072:	f3bf 8f6f 	isb	sy
 8103076:	f3bf 8f4f 	dsb	sy
 810307a:	61fb      	str	r3, [r7, #28]
}
 810307c:	bf00      	nop
 810307e:	e7fe      	b.n	810307e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8103080:	f001 fc82 	bl	8104988 <xTaskGetSchedulerState>
 8103084:	4603      	mov	r3, r0
 8103086:	2b00      	cmp	r3, #0
 8103088:	d102      	bne.n	8103090 <xQueueSemaphoreTake+0x60>
 810308a:	683b      	ldr	r3, [r7, #0]
 810308c:	2b00      	cmp	r3, #0
 810308e:	d101      	bne.n	8103094 <xQueueSemaphoreTake+0x64>
 8103090:	2301      	movs	r3, #1
 8103092:	e000      	b.n	8103096 <xQueueSemaphoreTake+0x66>
 8103094:	2300      	movs	r3, #0
 8103096:	2b00      	cmp	r3, #0
 8103098:	d10a      	bne.n	81030b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 810309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810309e:	f383 8811 	msr	BASEPRI, r3
 81030a2:	f3bf 8f6f 	isb	sy
 81030a6:	f3bf 8f4f 	dsb	sy
 81030aa:	61bb      	str	r3, [r7, #24]
}
 81030ac:	bf00      	nop
 81030ae:	e7fe      	b.n	81030ae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81030b0:	f7ff fa58 	bl	8102564 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 81030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81030b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 81030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81030bc:	2b00      	cmp	r3, #0
 81030be:	d024      	beq.n	810310a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 81030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81030c2:	1e5a      	subs	r2, r3, #1
 81030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81030c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	2b00      	cmp	r3, #0
 81030ce:	d104      	bne.n	81030da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 81030d0:	f001 fdd0 	bl	8104c74 <pvTaskIncrementMutexHeldCount>
 81030d4:	4602      	mov	r2, r0
 81030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81030d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81030dc:	691b      	ldr	r3, [r3, #16]
 81030de:	2b00      	cmp	r3, #0
 81030e0:	d00f      	beq.n	8103102 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81030e4:	3310      	adds	r3, #16
 81030e6:	4618      	mov	r0, r3
 81030e8:	f001 fa56 	bl	8104598 <xTaskRemoveFromEventList>
 81030ec:	4603      	mov	r3, r0
 81030ee:	2b00      	cmp	r3, #0
 81030f0:	d007      	beq.n	8103102 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81030f2:	4b54      	ldr	r3, [pc, #336]	; (8103244 <xQueueSemaphoreTake+0x214>)
 81030f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81030f8:	601a      	str	r2, [r3, #0]
 81030fa:	f3bf 8f4f 	dsb	sy
 81030fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8103102:	f7ff fa5f 	bl	81025c4 <vPortExitCritical>
				return pdPASS;
 8103106:	2301      	movs	r3, #1
 8103108:	e097      	b.n	810323a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810310a:	683b      	ldr	r3, [r7, #0]
 810310c:	2b00      	cmp	r3, #0
 810310e:	d111      	bne.n	8103134 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8103110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103112:	2b00      	cmp	r3, #0
 8103114:	d00a      	beq.n	810312c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8103116:	f04f 0350 	mov.w	r3, #80	; 0x50
 810311a:	f383 8811 	msr	BASEPRI, r3
 810311e:	f3bf 8f6f 	isb	sy
 8103122:	f3bf 8f4f 	dsb	sy
 8103126:	617b      	str	r3, [r7, #20]
}
 8103128:	bf00      	nop
 810312a:	e7fe      	b.n	810312a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810312c:	f7ff fa4a 	bl	81025c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8103130:	2300      	movs	r3, #0
 8103132:	e082      	b.n	810323a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8103134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103136:	2b00      	cmp	r3, #0
 8103138:	d106      	bne.n	8103148 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810313a:	f107 030c 	add.w	r3, r7, #12
 810313e:	4618      	mov	r0, r3
 8103140:	f001 fab4 	bl	81046ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8103144:	2301      	movs	r3, #1
 8103146:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8103148:	f7ff fa3c 	bl	81025c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810314c:	f000 fffa 	bl	8104144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8103150:	f7ff fa08 	bl	8102564 <vPortEnterCritical>
 8103154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810315a:	b25b      	sxtb	r3, r3
 810315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103160:	d103      	bne.n	810316a <xQueueSemaphoreTake+0x13a>
 8103162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103164:	2200      	movs	r2, #0
 8103166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810316c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103170:	b25b      	sxtb	r3, r3
 8103172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103176:	d103      	bne.n	8103180 <xQueueSemaphoreTake+0x150>
 8103178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810317a:	2200      	movs	r2, #0
 810317c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103180:	f7ff fa20 	bl	81025c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8103184:	463a      	mov	r2, r7
 8103186:	f107 030c 	add.w	r3, r7, #12
 810318a:	4611      	mov	r1, r2
 810318c:	4618      	mov	r0, r3
 810318e:	f001 faa3 	bl	81046d8 <xTaskCheckForTimeOut>
 8103192:	4603      	mov	r3, r0
 8103194:	2b00      	cmp	r3, #0
 8103196:	d132      	bne.n	81031fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8103198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810319a:	f000 f94f 	bl	810343c <prvIsQueueEmpty>
 810319e:	4603      	mov	r3, r0
 81031a0:	2b00      	cmp	r3, #0
 81031a2:	d026      	beq.n	81031f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81031a6:	681b      	ldr	r3, [r3, #0]
 81031a8:	2b00      	cmp	r3, #0
 81031aa:	d109      	bne.n	81031c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 81031ac:	f7ff f9da 	bl	8102564 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 81031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81031b2:	689b      	ldr	r3, [r3, #8]
 81031b4:	4618      	mov	r0, r3
 81031b6:	f001 fc05 	bl	81049c4 <xTaskPriorityInherit>
 81031ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 81031bc:	f7ff fa02 	bl	81025c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81031c2:	3324      	adds	r3, #36	; 0x24
 81031c4:	683a      	ldr	r2, [r7, #0]
 81031c6:	4611      	mov	r1, r2
 81031c8:	4618      	mov	r0, r3
 81031ca:	f001 f995 	bl	81044f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81031ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81031d0:	f000 f8e2 	bl	8103398 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81031d4:	f000 ffc4 	bl	8104160 <xTaskResumeAll>
 81031d8:	4603      	mov	r3, r0
 81031da:	2b00      	cmp	r3, #0
 81031dc:	f47f af68 	bne.w	81030b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 81031e0:	4b18      	ldr	r3, [pc, #96]	; (8103244 <xQueueSemaphoreTake+0x214>)
 81031e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81031e6:	601a      	str	r2, [r3, #0]
 81031e8:	f3bf 8f4f 	dsb	sy
 81031ec:	f3bf 8f6f 	isb	sy
 81031f0:	e75e      	b.n	81030b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 81031f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81031f4:	f000 f8d0 	bl	8103398 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81031f8:	f000 ffb2 	bl	8104160 <xTaskResumeAll>
 81031fc:	e758      	b.n	81030b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 81031fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103200:	f000 f8ca 	bl	8103398 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8103204:	f000 ffac 	bl	8104160 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8103208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810320a:	f000 f917 	bl	810343c <prvIsQueueEmpty>
 810320e:	4603      	mov	r3, r0
 8103210:	2b00      	cmp	r3, #0
 8103212:	f43f af4d 	beq.w	81030b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8103216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103218:	2b00      	cmp	r3, #0
 810321a:	d00d      	beq.n	8103238 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 810321c:	f7ff f9a2 	bl	8102564 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8103220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103222:	f000 f811 	bl	8103248 <prvGetDisinheritPriorityAfterTimeout>
 8103226:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8103228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810322a:	689b      	ldr	r3, [r3, #8]
 810322c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810322e:	4618      	mov	r0, r3
 8103230:	f001 fc9e 	bl	8104b70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8103234:	f7ff f9c6 	bl	81025c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8103238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810323a:	4618      	mov	r0, r3
 810323c:	3738      	adds	r7, #56	; 0x38
 810323e:	46bd      	mov	sp, r7
 8103240:	bd80      	pop	{r7, pc}
 8103242:	bf00      	nop
 8103244:	e000ed04 	.word	0xe000ed04

08103248 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8103248:	b480      	push	{r7}
 810324a:	b085      	sub	sp, #20
 810324c:	af00      	add	r7, sp, #0
 810324e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103254:	2b00      	cmp	r3, #0
 8103256:	d006      	beq.n	8103266 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8103262:	60fb      	str	r3, [r7, #12]
 8103264:	e001      	b.n	810326a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8103266:	2300      	movs	r3, #0
 8103268:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810326a:	68fb      	ldr	r3, [r7, #12]
	}
 810326c:	4618      	mov	r0, r3
 810326e:	3714      	adds	r7, #20
 8103270:	46bd      	mov	sp, r7
 8103272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103276:	4770      	bx	lr

08103278 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8103278:	b580      	push	{r7, lr}
 810327a:	b086      	sub	sp, #24
 810327c:	af00      	add	r7, sp, #0
 810327e:	60f8      	str	r0, [r7, #12]
 8103280:	60b9      	str	r1, [r7, #8]
 8103282:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8103284:	2300      	movs	r3, #0
 8103286:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8103288:	68fb      	ldr	r3, [r7, #12]
 810328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810328c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810328e:	68fb      	ldr	r3, [r7, #12]
 8103290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103292:	2b00      	cmp	r3, #0
 8103294:	d10d      	bne.n	81032b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8103296:	68fb      	ldr	r3, [r7, #12]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	2b00      	cmp	r3, #0
 810329c:	d14d      	bne.n	810333a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810329e:	68fb      	ldr	r3, [r7, #12]
 81032a0:	689b      	ldr	r3, [r3, #8]
 81032a2:	4618      	mov	r0, r3
 81032a4:	f001 fbf6 	bl	8104a94 <xTaskPriorityDisinherit>
 81032a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81032aa:	68fb      	ldr	r3, [r7, #12]
 81032ac:	2200      	movs	r2, #0
 81032ae:	609a      	str	r2, [r3, #8]
 81032b0:	e043      	b.n	810333a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	2b00      	cmp	r3, #0
 81032b6:	d119      	bne.n	81032ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81032b8:	68fb      	ldr	r3, [r7, #12]
 81032ba:	6858      	ldr	r0, [r3, #4]
 81032bc:	68fb      	ldr	r3, [r7, #12]
 81032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81032c0:	461a      	mov	r2, r3
 81032c2:	68b9      	ldr	r1, [r7, #8]
 81032c4:	f002 fae0 	bl	8105888 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81032c8:	68fb      	ldr	r3, [r7, #12]
 81032ca:	685a      	ldr	r2, [r3, #4]
 81032cc:	68fb      	ldr	r3, [r7, #12]
 81032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81032d0:	441a      	add	r2, r3
 81032d2:	68fb      	ldr	r3, [r7, #12]
 81032d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81032d6:	68fb      	ldr	r3, [r7, #12]
 81032d8:	685a      	ldr	r2, [r3, #4]
 81032da:	68fb      	ldr	r3, [r7, #12]
 81032dc:	689b      	ldr	r3, [r3, #8]
 81032de:	429a      	cmp	r2, r3
 81032e0:	d32b      	bcc.n	810333a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81032e2:	68fb      	ldr	r3, [r7, #12]
 81032e4:	681a      	ldr	r2, [r3, #0]
 81032e6:	68fb      	ldr	r3, [r7, #12]
 81032e8:	605a      	str	r2, [r3, #4]
 81032ea:	e026      	b.n	810333a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81032ec:	68fb      	ldr	r3, [r7, #12]
 81032ee:	68d8      	ldr	r0, [r3, #12]
 81032f0:	68fb      	ldr	r3, [r7, #12]
 81032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81032f4:	461a      	mov	r2, r3
 81032f6:	68b9      	ldr	r1, [r7, #8]
 81032f8:	f002 fac6 	bl	8105888 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81032fc:	68fb      	ldr	r3, [r7, #12]
 81032fe:	68da      	ldr	r2, [r3, #12]
 8103300:	68fb      	ldr	r3, [r7, #12]
 8103302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103304:	425b      	negs	r3, r3
 8103306:	441a      	add	r2, r3
 8103308:	68fb      	ldr	r3, [r7, #12]
 810330a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810330c:	68fb      	ldr	r3, [r7, #12]
 810330e:	68da      	ldr	r2, [r3, #12]
 8103310:	68fb      	ldr	r3, [r7, #12]
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	429a      	cmp	r2, r3
 8103316:	d207      	bcs.n	8103328 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8103318:	68fb      	ldr	r3, [r7, #12]
 810331a:	689a      	ldr	r2, [r3, #8]
 810331c:	68fb      	ldr	r3, [r7, #12]
 810331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103320:	425b      	negs	r3, r3
 8103322:	441a      	add	r2, r3
 8103324:	68fb      	ldr	r3, [r7, #12]
 8103326:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	2b02      	cmp	r3, #2
 810332c:	d105      	bne.n	810333a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810332e:	693b      	ldr	r3, [r7, #16]
 8103330:	2b00      	cmp	r3, #0
 8103332:	d002      	beq.n	810333a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8103334:	693b      	ldr	r3, [r7, #16]
 8103336:	3b01      	subs	r3, #1
 8103338:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810333a:	693b      	ldr	r3, [r7, #16]
 810333c:	1c5a      	adds	r2, r3, #1
 810333e:	68fb      	ldr	r3, [r7, #12]
 8103340:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8103342:	697b      	ldr	r3, [r7, #20]
}
 8103344:	4618      	mov	r0, r3
 8103346:	3718      	adds	r7, #24
 8103348:	46bd      	mov	sp, r7
 810334a:	bd80      	pop	{r7, pc}

0810334c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810334c:	b580      	push	{r7, lr}
 810334e:	b082      	sub	sp, #8
 8103350:	af00      	add	r7, sp, #0
 8103352:	6078      	str	r0, [r7, #4]
 8103354:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810335a:	2b00      	cmp	r3, #0
 810335c:	d018      	beq.n	8103390 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	68da      	ldr	r2, [r3, #12]
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103366:	441a      	add	r2, r3
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810336c:	687b      	ldr	r3, [r7, #4]
 810336e:	68da      	ldr	r2, [r3, #12]
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	689b      	ldr	r3, [r3, #8]
 8103374:	429a      	cmp	r2, r3
 8103376:	d303      	bcc.n	8103380 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	681a      	ldr	r2, [r3, #0]
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	68d9      	ldr	r1, [r3, #12]
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103388:	461a      	mov	r2, r3
 810338a:	6838      	ldr	r0, [r7, #0]
 810338c:	f002 fa7c 	bl	8105888 <memcpy>
	}
}
 8103390:	bf00      	nop
 8103392:	3708      	adds	r7, #8
 8103394:	46bd      	mov	sp, r7
 8103396:	bd80      	pop	{r7, pc}

08103398 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8103398:	b580      	push	{r7, lr}
 810339a:	b084      	sub	sp, #16
 810339c:	af00      	add	r7, sp, #0
 810339e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 81033a0:	f7ff f8e0 	bl	8102564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81033aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81033ac:	e011      	b.n	81033d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81033b2:	2b00      	cmp	r3, #0
 81033b4:	d012      	beq.n	81033dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	3324      	adds	r3, #36	; 0x24
 81033ba:	4618      	mov	r0, r3
 81033bc:	f001 f8ec 	bl	8104598 <xTaskRemoveFromEventList>
 81033c0:	4603      	mov	r3, r0
 81033c2:	2b00      	cmp	r3, #0
 81033c4:	d001      	beq.n	81033ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81033c6:	f001 f9e9 	bl	810479c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81033ca:	7bfb      	ldrb	r3, [r7, #15]
 81033cc:	3b01      	subs	r3, #1
 81033ce:	b2db      	uxtb	r3, r3
 81033d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81033d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81033d6:	2b00      	cmp	r3, #0
 81033d8:	dce9      	bgt.n	81033ae <prvUnlockQueue+0x16>
 81033da:	e000      	b.n	81033de <prvUnlockQueue+0x46>
					break;
 81033dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	22ff      	movs	r2, #255	; 0xff
 81033e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 81033e6:	f7ff f8ed 	bl	81025c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 81033ea:	f7ff f8bb 	bl	8102564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81033f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81033f6:	e011      	b.n	810341c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	691b      	ldr	r3, [r3, #16]
 81033fc:	2b00      	cmp	r3, #0
 81033fe:	d012      	beq.n	8103426 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	3310      	adds	r3, #16
 8103404:	4618      	mov	r0, r3
 8103406:	f001 f8c7 	bl	8104598 <xTaskRemoveFromEventList>
 810340a:	4603      	mov	r3, r0
 810340c:	2b00      	cmp	r3, #0
 810340e:	d001      	beq.n	8103414 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8103410:	f001 f9c4 	bl	810479c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8103414:	7bbb      	ldrb	r3, [r7, #14]
 8103416:	3b01      	subs	r3, #1
 8103418:	b2db      	uxtb	r3, r3
 810341a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810341c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8103420:	2b00      	cmp	r3, #0
 8103422:	dce9      	bgt.n	81033f8 <prvUnlockQueue+0x60>
 8103424:	e000      	b.n	8103428 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8103426:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	22ff      	movs	r2, #255	; 0xff
 810342c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8103430:	f7ff f8c8 	bl	81025c4 <vPortExitCritical>
}
 8103434:	bf00      	nop
 8103436:	3710      	adds	r7, #16
 8103438:	46bd      	mov	sp, r7
 810343a:	bd80      	pop	{r7, pc}

0810343c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810343c:	b580      	push	{r7, lr}
 810343e:	b084      	sub	sp, #16
 8103440:	af00      	add	r7, sp, #0
 8103442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8103444:	f7ff f88e 	bl	8102564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810344c:	2b00      	cmp	r3, #0
 810344e:	d102      	bne.n	8103456 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8103450:	2301      	movs	r3, #1
 8103452:	60fb      	str	r3, [r7, #12]
 8103454:	e001      	b.n	810345a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8103456:	2300      	movs	r3, #0
 8103458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810345a:	f7ff f8b3 	bl	81025c4 <vPortExitCritical>

	return xReturn;
 810345e:	68fb      	ldr	r3, [r7, #12]
}
 8103460:	4618      	mov	r0, r3
 8103462:	3710      	adds	r7, #16
 8103464:	46bd      	mov	sp, r7
 8103466:	bd80      	pop	{r7, pc}

08103468 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8103468:	b580      	push	{r7, lr}
 810346a:	b084      	sub	sp, #16
 810346c:	af00      	add	r7, sp, #0
 810346e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8103470:	f7ff f878 	bl	8102564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810347c:	429a      	cmp	r2, r3
 810347e:	d102      	bne.n	8103486 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8103480:	2301      	movs	r3, #1
 8103482:	60fb      	str	r3, [r7, #12]
 8103484:	e001      	b.n	810348a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8103486:	2300      	movs	r3, #0
 8103488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810348a:	f7ff f89b 	bl	81025c4 <vPortExitCritical>

	return xReturn;
 810348e:	68fb      	ldr	r3, [r7, #12]
}
 8103490:	4618      	mov	r0, r3
 8103492:	3710      	adds	r7, #16
 8103494:	46bd      	mov	sp, r7
 8103496:	bd80      	pop	{r7, pc}

08103498 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8103498:	b480      	push	{r7}
 810349a:	b085      	sub	sp, #20
 810349c:	af00      	add	r7, sp, #0
 810349e:	6078      	str	r0, [r7, #4]
 81034a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81034a2:	2300      	movs	r3, #0
 81034a4:	60fb      	str	r3, [r7, #12]
 81034a6:	e014      	b.n	81034d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 81034a8:	4a0f      	ldr	r2, [pc, #60]	; (81034e8 <vQueueAddToRegistry+0x50>)
 81034aa:	68fb      	ldr	r3, [r7, #12]
 81034ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81034b0:	2b00      	cmp	r3, #0
 81034b2:	d10b      	bne.n	81034cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81034b4:	490c      	ldr	r1, [pc, #48]	; (81034e8 <vQueueAddToRegistry+0x50>)
 81034b6:	68fb      	ldr	r3, [r7, #12]
 81034b8:	683a      	ldr	r2, [r7, #0]
 81034ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81034be:	4a0a      	ldr	r2, [pc, #40]	; (81034e8 <vQueueAddToRegistry+0x50>)
 81034c0:	68fb      	ldr	r3, [r7, #12]
 81034c2:	00db      	lsls	r3, r3, #3
 81034c4:	4413      	add	r3, r2
 81034c6:	687a      	ldr	r2, [r7, #4]
 81034c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81034ca:	e006      	b.n	81034da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81034cc:	68fb      	ldr	r3, [r7, #12]
 81034ce:	3301      	adds	r3, #1
 81034d0:	60fb      	str	r3, [r7, #12]
 81034d2:	68fb      	ldr	r3, [r7, #12]
 81034d4:	2b07      	cmp	r3, #7
 81034d6:	d9e7      	bls.n	81034a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81034d8:	bf00      	nop
 81034da:	bf00      	nop
 81034dc:	3714      	adds	r7, #20
 81034de:	46bd      	mov	sp, r7
 81034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034e4:	4770      	bx	lr
 81034e6:	bf00      	nop
 81034e8:	1000c4dc 	.word	0x1000c4dc

081034ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81034ec:	b580      	push	{r7, lr}
 81034ee:	b086      	sub	sp, #24
 81034f0:	af00      	add	r7, sp, #0
 81034f2:	60f8      	str	r0, [r7, #12]
 81034f4:	60b9      	str	r1, [r7, #8]
 81034f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81034f8:	68fb      	ldr	r3, [r7, #12]
 81034fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81034fc:	f7ff f832 	bl	8102564 <vPortEnterCritical>
 8103500:	697b      	ldr	r3, [r7, #20]
 8103502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103506:	b25b      	sxtb	r3, r3
 8103508:	f1b3 3fff 	cmp.w	r3, #4294967295
 810350c:	d103      	bne.n	8103516 <vQueueWaitForMessageRestricted+0x2a>
 810350e:	697b      	ldr	r3, [r7, #20]
 8103510:	2200      	movs	r2, #0
 8103512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103516:	697b      	ldr	r3, [r7, #20]
 8103518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810351c:	b25b      	sxtb	r3, r3
 810351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103522:	d103      	bne.n	810352c <vQueueWaitForMessageRestricted+0x40>
 8103524:	697b      	ldr	r3, [r7, #20]
 8103526:	2200      	movs	r2, #0
 8103528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810352c:	f7ff f84a 	bl	81025c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8103530:	697b      	ldr	r3, [r7, #20]
 8103532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103534:	2b00      	cmp	r3, #0
 8103536:	d106      	bne.n	8103546 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8103538:	697b      	ldr	r3, [r7, #20]
 810353a:	3324      	adds	r3, #36	; 0x24
 810353c:	687a      	ldr	r2, [r7, #4]
 810353e:	68b9      	ldr	r1, [r7, #8]
 8103540:	4618      	mov	r0, r3
 8103542:	f000 fffd 	bl	8104540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8103546:	6978      	ldr	r0, [r7, #20]
 8103548:	f7ff ff26 	bl	8103398 <prvUnlockQueue>
	}
 810354c:	bf00      	nop
 810354e:	3718      	adds	r7, #24
 8103550:	46bd      	mov	sp, r7
 8103552:	bd80      	pop	{r7, pc}

08103554 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8103554:	b480      	push	{r7}
 8103556:	b087      	sub	sp, #28
 8103558:	af00      	add	r7, sp, #0
 810355a:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8103560:	693b      	ldr	r3, [r7, #16]
 8103562:	2b00      	cmp	r3, #0
 8103564:	d10a      	bne.n	810357c <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8103566:	f04f 0350 	mov.w	r3, #80	; 0x50
 810356a:	f383 8811 	msr	BASEPRI, r3
 810356e:	f3bf 8f6f 	isb	sy
 8103572:	f3bf 8f4f 	dsb	sy
 8103576:	60fb      	str	r3, [r7, #12]
}
 8103578:	bf00      	nop
 810357a:	e7fe      	b.n	810357a <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 810357c:	693b      	ldr	r3, [r7, #16]
 810357e:	689a      	ldr	r2, [r3, #8]
 8103580:	693b      	ldr	r3, [r7, #16]
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	4413      	add	r3, r2
 8103586:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8103588:	693b      	ldr	r3, [r7, #16]
 810358a:	685b      	ldr	r3, [r3, #4]
 810358c:	697a      	ldr	r2, [r7, #20]
 810358e:	1ad3      	subs	r3, r2, r3
 8103590:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8103592:	697b      	ldr	r3, [r7, #20]
 8103594:	3b01      	subs	r3, #1
 8103596:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8103598:	693b      	ldr	r3, [r7, #16]
 810359a:	689b      	ldr	r3, [r3, #8]
 810359c:	697a      	ldr	r2, [r7, #20]
 810359e:	429a      	cmp	r2, r3
 81035a0:	d304      	bcc.n	81035ac <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 81035a2:	693b      	ldr	r3, [r7, #16]
 81035a4:	689b      	ldr	r3, [r3, #8]
 81035a6:	697a      	ldr	r2, [r7, #20]
 81035a8:	1ad3      	subs	r3, r2, r3
 81035aa:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 81035ac:	697b      	ldr	r3, [r7, #20]
}
 81035ae:	4618      	mov	r0, r3
 81035b0:	371c      	adds	r7, #28
 81035b2:	46bd      	mov	sp, r7
 81035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035b8:	4770      	bx	lr

081035ba <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 81035ba:	b580      	push	{r7, lr}
 81035bc:	b090      	sub	sp, #64	; 0x40
 81035be:	af02      	add	r7, sp, #8
 81035c0:	60f8      	str	r0, [r7, #12]
 81035c2:	60b9      	str	r1, [r7, #8]
 81035c4:	607a      	str	r2, [r7, #4]
 81035c6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81035c8:	68fb      	ldr	r3, [r7, #12]
 81035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 81035cc:	2300      	movs	r3, #0
 81035ce:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 81035d4:	68bb      	ldr	r3, [r7, #8]
 81035d6:	2b00      	cmp	r3, #0
 81035d8:	d10a      	bne.n	81035f0 <xStreamBufferSend+0x36>
	__asm volatile
 81035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81035de:	f383 8811 	msr	BASEPRI, r3
 81035e2:	f3bf 8f6f 	isb	sy
 81035e6:	f3bf 8f4f 	dsb	sy
 81035ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 81035ec:	bf00      	nop
 81035ee:	e7fe      	b.n	81035ee <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 81035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81035f2:	2b00      	cmp	r3, #0
 81035f4:	d10a      	bne.n	810360c <xStreamBufferSend+0x52>
	__asm volatile
 81035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81035fa:	f383 8811 	msr	BASEPRI, r3
 81035fe:	f3bf 8f6f 	isb	sy
 8103602:	f3bf 8f4f 	dsb	sy
 8103606:	623b      	str	r3, [r7, #32]
}
 8103608:	bf00      	nop
 810360a:	e7fe      	b.n	810360a <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 810360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810360e:	7f1b      	ldrb	r3, [r3, #28]
 8103610:	f003 0301 	and.w	r3, r3, #1
 8103614:	2b00      	cmp	r3, #0
 8103616:	d011      	beq.n	810363c <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8103618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810361a:	3304      	adds	r3, #4
 810361c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 810361e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	429a      	cmp	r2, r3
 8103624:	d80a      	bhi.n	810363c <xStreamBufferSend+0x82>
	__asm volatile
 8103626:	f04f 0350 	mov.w	r3, #80	; 0x50
 810362a:	f383 8811 	msr	BASEPRI, r3
 810362e:	f3bf 8f6f 	isb	sy
 8103632:	f3bf 8f4f 	dsb	sy
 8103636:	61fb      	str	r3, [r7, #28]
}
 8103638:	bf00      	nop
 810363a:	e7fe      	b.n	810363a <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 810363c:	683b      	ldr	r3, [r7, #0]
 810363e:	2b00      	cmp	r3, #0
 8103640:	d03e      	beq.n	81036c0 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8103642:	f107 0310 	add.w	r3, r7, #16
 8103646:	4618      	mov	r0, r3
 8103648:	f001 f80a 	bl	8104660 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 810364c:	f7fe ff8a 	bl	8102564 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8103650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103652:	f7ff ff7f 	bl	8103554 <xStreamBufferSpacesAvailable>
 8103656:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8103658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810365c:	429a      	cmp	r2, r3
 810365e:	d217      	bcs.n	8103690 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8103660:	2000      	movs	r0, #0
 8103662:	f001 fd1d 	bl	81050a0 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8103666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103668:	695b      	ldr	r3, [r3, #20]
 810366a:	2b00      	cmp	r3, #0
 810366c:	d00a      	beq.n	8103684 <xStreamBufferSend+0xca>
	__asm volatile
 810366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103672:	f383 8811 	msr	BASEPRI, r3
 8103676:	f3bf 8f6f 	isb	sy
 810367a:	f3bf 8f4f 	dsb	sy
 810367e:	61bb      	str	r3, [r7, #24]
}
 8103680:	bf00      	nop
 8103682:	e7fe      	b.n	8103682 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8103684:	f001 f970 	bl	8104968 <xTaskGetCurrentTaskHandle>
 8103688:	4602      	mov	r2, r0
 810368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810368c:	615a      	str	r2, [r3, #20]
 810368e:	e002      	b.n	8103696 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8103690:	f7fe ff98 	bl	81025c4 <vPortExitCritical>
					break;
 8103694:	e014      	b.n	81036c0 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8103696:	f7fe ff95 	bl	81025c4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 810369a:	683b      	ldr	r3, [r7, #0]
 810369c:	2200      	movs	r2, #0
 810369e:	2100      	movs	r1, #0
 81036a0:	2000      	movs	r0, #0
 81036a2:	f001 fafb 	bl	8104c9c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 81036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81036a8:	2200      	movs	r2, #0
 81036aa:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 81036ac:	463a      	mov	r2, r7
 81036ae:	f107 0310 	add.w	r3, r7, #16
 81036b2:	4611      	mov	r1, r2
 81036b4:	4618      	mov	r0, r3
 81036b6:	f001 f80f 	bl	81046d8 <xTaskCheckForTimeOut>
 81036ba:	4603      	mov	r3, r0
 81036bc:	2b00      	cmp	r3, #0
 81036be:	d0c5      	beq.n	810364c <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 81036c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81036c2:	2b00      	cmp	r3, #0
 81036c4:	d103      	bne.n	81036ce <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 81036c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81036c8:	f7ff ff44 	bl	8103554 <xStreamBufferSpacesAvailable>
 81036cc:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 81036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81036d0:	9300      	str	r3, [sp, #0]
 81036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81036d4:	687a      	ldr	r2, [r7, #4]
 81036d6:	68b9      	ldr	r1, [r7, #8]
 81036d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81036da:	f000 f814 	bl	8103706 <prvWriteMessageToBuffer>
 81036de:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 81036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81036e2:	2b00      	cmp	r3, #0
 81036e4:	d00a      	beq.n	81036fc <xStreamBufferSend+0x142>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 81036e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81036e8:	f000 faaf 	bl	8103c4a <prvBytesInBuffer>
 81036ec:	4602      	mov	r2, r0
 81036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81036f0:	68db      	ldr	r3, [r3, #12]
 81036f2:	429a      	cmp	r2, r3
 81036f4:	d302      	bcc.n	81036fc <xStreamBufferSend+0x142>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 81036f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81036f8:	f7fc fe4a 	bl	8100390 <generateInterruptIPC_messageBuffer>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 81036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 81036fe:	4618      	mov	r0, r3
 8103700:	3738      	adds	r7, #56	; 0x38
 8103702:	46bd      	mov	sp, r7
 8103704:	bd80      	pop	{r7, pc}

08103706 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8103706:	b580      	push	{r7, lr}
 8103708:	b086      	sub	sp, #24
 810370a:	af00      	add	r7, sp, #0
 810370c:	60f8      	str	r0, [r7, #12]
 810370e:	60b9      	str	r1, [r7, #8]
 8103710:	607a      	str	r2, [r7, #4]
 8103712:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8103714:	683b      	ldr	r3, [r7, #0]
 8103716:	2b00      	cmp	r3, #0
 8103718:	d102      	bne.n	8103720 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 810371a:	2300      	movs	r3, #0
 810371c:	617b      	str	r3, [r7, #20]
 810371e:	e01d      	b.n	810375c <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8103720:	68fb      	ldr	r3, [r7, #12]
 8103722:	7f1b      	ldrb	r3, [r3, #28]
 8103724:	f003 0301 	and.w	r3, r3, #1
 8103728:	2b00      	cmp	r3, #0
 810372a:	d108      	bne.n	810373e <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 810372c:	2301      	movs	r3, #1
 810372e:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8103730:	687a      	ldr	r2, [r7, #4]
 8103732:	683b      	ldr	r3, [r7, #0]
 8103734:	4293      	cmp	r3, r2
 8103736:	bf28      	it	cs
 8103738:	4613      	movcs	r3, r2
 810373a:	607b      	str	r3, [r7, #4]
 810373c:	e00e      	b.n	810375c <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 810373e:	683a      	ldr	r2, [r7, #0]
 8103740:	6a3b      	ldr	r3, [r7, #32]
 8103742:	429a      	cmp	r2, r3
 8103744:	d308      	bcc.n	8103758 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8103746:	2301      	movs	r3, #1
 8103748:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 810374a:	1d3b      	adds	r3, r7, #4
 810374c:	2204      	movs	r2, #4
 810374e:	4619      	mov	r1, r3
 8103750:	68f8      	ldr	r0, [r7, #12]
 8103752:	f000 f98e 	bl	8103a72 <prvWriteBytesToBuffer>
 8103756:	e001      	b.n	810375c <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8103758:	2300      	movs	r3, #0
 810375a:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 810375c:	697b      	ldr	r3, [r7, #20]
 810375e:	2b00      	cmp	r3, #0
 8103760:	d007      	beq.n	8103772 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	461a      	mov	r2, r3
 8103766:	68b9      	ldr	r1, [r7, #8]
 8103768:	68f8      	ldr	r0, [r7, #12]
 810376a:	f000 f982 	bl	8103a72 <prvWriteBytesToBuffer>
 810376e:	6138      	str	r0, [r7, #16]
 8103770:	e001      	b.n	8103776 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8103772:	2300      	movs	r3, #0
 8103774:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8103776:	693b      	ldr	r3, [r7, #16]
}
 8103778:	4618      	mov	r0, r3
 810377a:	3718      	adds	r7, #24
 810377c:	46bd      	mov	sp, r7
 810377e:	bd80      	pop	{r7, pc}

08103780 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8103780:	b580      	push	{r7, lr}
 8103782:	b08e      	sub	sp, #56	; 0x38
 8103784:	af02      	add	r7, sp, #8
 8103786:	60f8      	str	r0, [r7, #12]
 8103788:	60b9      	str	r1, [r7, #8]
 810378a:	607a      	str	r2, [r7, #4]
 810378c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810378e:	68fb      	ldr	r3, [r7, #12]
 8103790:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8103792:	2300      	movs	r3, #0
 8103794:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8103796:	68bb      	ldr	r3, [r7, #8]
 8103798:	2b00      	cmp	r3, #0
 810379a:	d10a      	bne.n	81037b2 <xStreamBufferReceive+0x32>
	__asm volatile
 810379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81037a0:	f383 8811 	msr	BASEPRI, r3
 81037a4:	f3bf 8f6f 	isb	sy
 81037a8:	f3bf 8f4f 	dsb	sy
 81037ac:	61fb      	str	r3, [r7, #28]
}
 81037ae:	bf00      	nop
 81037b0:	e7fe      	b.n	81037b0 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 81037b2:	6a3b      	ldr	r3, [r7, #32]
 81037b4:	2b00      	cmp	r3, #0
 81037b6:	d10a      	bne.n	81037ce <xStreamBufferReceive+0x4e>
	__asm volatile
 81037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81037bc:	f383 8811 	msr	BASEPRI, r3
 81037c0:	f3bf 8f6f 	isb	sy
 81037c4:	f3bf 8f4f 	dsb	sy
 81037c8:	61bb      	str	r3, [r7, #24]
}
 81037ca:	bf00      	nop
 81037cc:	e7fe      	b.n	81037cc <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 81037ce:	6a3b      	ldr	r3, [r7, #32]
 81037d0:	7f1b      	ldrb	r3, [r3, #28]
 81037d2:	f003 0301 	and.w	r3, r3, #1
 81037d6:	2b00      	cmp	r3, #0
 81037d8:	d002      	beq.n	81037e0 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 81037da:	2304      	movs	r3, #4
 81037dc:	627b      	str	r3, [r7, #36]	; 0x24
 81037de:	e001      	b.n	81037e4 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 81037e0:	2300      	movs	r3, #0
 81037e2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 81037e4:	683b      	ldr	r3, [r7, #0]
 81037e6:	2b00      	cmp	r3, #0
 81037e8:	d034      	beq.n	8103854 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 81037ea:	f7fe febb 	bl	8102564 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 81037ee:	6a38      	ldr	r0, [r7, #32]
 81037f0:	f000 fa2b 	bl	8103c4a <prvBytesInBuffer>
 81037f4:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 81037f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81037fa:	429a      	cmp	r2, r3
 81037fc:	d816      	bhi.n	810382c <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 81037fe:	2000      	movs	r0, #0
 8103800:	f001 fc4e 	bl	81050a0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8103804:	6a3b      	ldr	r3, [r7, #32]
 8103806:	691b      	ldr	r3, [r3, #16]
 8103808:	2b00      	cmp	r3, #0
 810380a:	d00a      	beq.n	8103822 <xStreamBufferReceive+0xa2>
	__asm volatile
 810380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103810:	f383 8811 	msr	BASEPRI, r3
 8103814:	f3bf 8f6f 	isb	sy
 8103818:	f3bf 8f4f 	dsb	sy
 810381c:	617b      	str	r3, [r7, #20]
}
 810381e:	bf00      	nop
 8103820:	e7fe      	b.n	8103820 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8103822:	f001 f8a1 	bl	8104968 <xTaskGetCurrentTaskHandle>
 8103826:	4602      	mov	r2, r0
 8103828:	6a3b      	ldr	r3, [r7, #32]
 810382a:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810382c:	f7fe feca 	bl	81025c4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8103830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8103832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103834:	429a      	cmp	r2, r3
 8103836:	d811      	bhi.n	810385c <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8103838:	683b      	ldr	r3, [r7, #0]
 810383a:	2200      	movs	r2, #0
 810383c:	2100      	movs	r1, #0
 810383e:	2000      	movs	r0, #0
 8103840:	f001 fa2c 	bl	8104c9c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8103844:	6a3b      	ldr	r3, [r7, #32]
 8103846:	2200      	movs	r2, #0
 8103848:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810384a:	6a38      	ldr	r0, [r7, #32]
 810384c:	f000 f9fd 	bl	8103c4a <prvBytesInBuffer>
 8103850:	62b8      	str	r0, [r7, #40]	; 0x28
 8103852:	e003      	b.n	810385c <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8103854:	6a38      	ldr	r0, [r7, #32]
 8103856:	f000 f9f8 	bl	8103c4a <prvBytesInBuffer>
 810385a:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 810385c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103860:	429a      	cmp	r2, r3
 8103862:	d91d      	bls.n	81038a0 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8103864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103866:	9300      	str	r3, [sp, #0]
 8103868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810386a:	687a      	ldr	r2, [r7, #4]
 810386c:	68b9      	ldr	r1, [r7, #8]
 810386e:	6a38      	ldr	r0, [r7, #32]
 8103870:	f000 f88a 	bl	8103988 <prvReadMessageFromBuffer>
 8103874:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8103876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103878:	2b00      	cmp	r3, #0
 810387a:	d011      	beq.n	81038a0 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 810387c:	f000 fc62 	bl	8104144 <vTaskSuspendAll>
 8103880:	6a3b      	ldr	r3, [r7, #32]
 8103882:	695b      	ldr	r3, [r3, #20]
 8103884:	2b00      	cmp	r3, #0
 8103886:	d009      	beq.n	810389c <xStreamBufferReceive+0x11c>
 8103888:	6a3b      	ldr	r3, [r7, #32]
 810388a:	6958      	ldr	r0, [r3, #20]
 810388c:	2300      	movs	r3, #0
 810388e:	2200      	movs	r2, #0
 8103890:	2100      	movs	r1, #0
 8103892:	f001 fa63 	bl	8104d5c <xTaskGenericNotify>
 8103896:	6a3b      	ldr	r3, [r7, #32]
 8103898:	2200      	movs	r2, #0
 810389a:	615a      	str	r2, [r3, #20]
 810389c:	f000 fc60 	bl	8104160 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 81038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 81038a2:	4618      	mov	r0, r3
 81038a4:	3730      	adds	r7, #48	; 0x30
 81038a6:	46bd      	mov	sp, r7
 81038a8:	bd80      	pop	{r7, pc}

081038aa <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 81038aa:	b580      	push	{r7, lr}
 81038ac:	b090      	sub	sp, #64	; 0x40
 81038ae:	af02      	add	r7, sp, #8
 81038b0:	60f8      	str	r0, [r7, #12]
 81038b2:	60b9      	str	r1, [r7, #8]
 81038b4:	607a      	str	r2, [r7, #4]
 81038b6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81038b8:	68fb      	ldr	r3, [r7, #12]
 81038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 81038bc:	2300      	movs	r3, #0
 81038be:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvRxData );
 81038c0:	68bb      	ldr	r3, [r7, #8]
 81038c2:	2b00      	cmp	r3, #0
 81038c4:	d10a      	bne.n	81038dc <xStreamBufferReceiveFromISR+0x32>
	__asm volatile
 81038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81038ca:	f383 8811 	msr	BASEPRI, r3
 81038ce:	f3bf 8f6f 	isb	sy
 81038d2:	f3bf 8f4f 	dsb	sy
 81038d6:	623b      	str	r3, [r7, #32]
}
 81038d8:	bf00      	nop
 81038da:	e7fe      	b.n	81038da <xStreamBufferReceiveFromISR+0x30>
	configASSERT( pxStreamBuffer );
 81038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81038de:	2b00      	cmp	r3, #0
 81038e0:	d10a      	bne.n	81038f8 <xStreamBufferReceiveFromISR+0x4e>
	__asm volatile
 81038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81038e6:	f383 8811 	msr	BASEPRI, r3
 81038ea:	f3bf 8f6f 	isb	sy
 81038ee:	f3bf 8f4f 	dsb	sy
 81038f2:	61fb      	str	r3, [r7, #28]
}
 81038f4:	bf00      	nop
 81038f6:	e7fe      	b.n	81038f6 <xStreamBufferReceiveFromISR+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 81038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81038fa:	7f1b      	ldrb	r3, [r3, #28]
 81038fc:	f003 0301 	and.w	r3, r3, #1
 8103900:	2b00      	cmp	r3, #0
 8103902:	d002      	beq.n	810390a <xStreamBufferReceiveFromISR+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8103904:	2304      	movs	r3, #4
 8103906:	633b      	str	r3, [r7, #48]	; 0x30
 8103908:	e001      	b.n	810390e <xStreamBufferReceiveFromISR+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 810390a:	2300      	movs	r3, #0
 810390c:	633b      	str	r3, [r7, #48]	; 0x30
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810390e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103910:	f000 f99b 	bl	8103c4a <prvBytesInBuffer>
 8103914:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8103916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8103918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810391a:	429a      	cmp	r2, r3
 810391c:	d92f      	bls.n	810397e <xStreamBufferReceiveFromISR+0xd4>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 810391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103920:	9300      	str	r3, [sp, #0]
 8103922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103924:	687a      	ldr	r2, [r7, #4]
 8103926:	68b9      	ldr	r1, [r7, #8]
 8103928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810392a:	f000 f82d 	bl	8103988 <prvReadMessageFromBuffer>
 810392e:	6378      	str	r0, [r7, #52]	; 0x34

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8103930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103932:	2b00      	cmp	r3, #0
 8103934:	d023      	beq.n	810397e <xStreamBufferReceiveFromISR+0xd4>
	__asm volatile
 8103936:	f3ef 8211 	mrs	r2, BASEPRI
 810393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810393e:	f383 8811 	msr	BASEPRI, r3
 8103942:	f3bf 8f6f 	isb	sy
 8103946:	f3bf 8f4f 	dsb	sy
 810394a:	61ba      	str	r2, [r7, #24]
 810394c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810394e:	69bb      	ldr	r3, [r7, #24]
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8103950:	627b      	str	r3, [r7, #36]	; 0x24
 8103952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103954:	695b      	ldr	r3, [r3, #20]
 8103956:	2b00      	cmp	r3, #0
 8103958:	d00b      	beq.n	8103972 <xStreamBufferReceiveFromISR+0xc8>
 810395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810395c:	6958      	ldr	r0, [r3, #20]
 810395e:	683b      	ldr	r3, [r7, #0]
 8103960:	9300      	str	r3, [sp, #0]
 8103962:	2300      	movs	r3, #0
 8103964:	2200      	movs	r2, #0
 8103966:	2100      	movs	r1, #0
 8103968:	f001 fab6 	bl	8104ed8 <xTaskGenericNotifyFromISR>
 810396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810396e:	2200      	movs	r2, #0
 8103970:	615a      	str	r2, [r3, #20]
 8103972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103974:	613b      	str	r3, [r7, #16]
	__asm volatile
 8103976:	693b      	ldr	r3, [r7, #16]
 8103978:	f383 8811 	msr	BASEPRI, r3
}
 810397c:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 810397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8103980:	4618      	mov	r0, r3
 8103982:	3738      	adds	r7, #56	; 0x38
 8103984:	46bd      	mov	sp, r7
 8103986:	bd80      	pop	{r7, pc}

08103988 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8103988:	b580      	push	{r7, lr}
 810398a:	b088      	sub	sp, #32
 810398c:	af00      	add	r7, sp, #0
 810398e:	60f8      	str	r0, [r7, #12]
 8103990:	60b9      	str	r1, [r7, #8]
 8103992:	607a      	str	r2, [r7, #4]
 8103994:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8103996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103998:	2b00      	cmp	r3, #0
 810399a:	d019      	beq.n	81039d0 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 810399c:	68fb      	ldr	r3, [r7, #12]
 810399e:	681b      	ldr	r3, [r3, #0]
 81039a0:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 81039a2:	f107 0110 	add.w	r1, r7, #16
 81039a6:	683b      	ldr	r3, [r7, #0]
 81039a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81039aa:	68f8      	ldr	r0, [r7, #12]
 81039ac:	f000 f8d3 	bl	8103b56 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 81039b0:	693b      	ldr	r3, [r7, #16]
 81039b2:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 81039b4:	683a      	ldr	r2, [r7, #0]
 81039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039b8:	1ad3      	subs	r3, r2, r3
 81039ba:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 81039bc:	69fa      	ldr	r2, [r7, #28]
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	429a      	cmp	r2, r3
 81039c2:	d907      	bls.n	81039d4 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 81039c4:	68fb      	ldr	r3, [r7, #12]
 81039c6:	69ba      	ldr	r2, [r7, #24]
 81039c8:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 81039ca:	2300      	movs	r3, #0
 81039cc:	61fb      	str	r3, [r7, #28]
 81039ce:	e001      	b.n	81039d4 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 81039d4:	683b      	ldr	r3, [r7, #0]
 81039d6:	69fa      	ldr	r2, [r7, #28]
 81039d8:	68b9      	ldr	r1, [r7, #8]
 81039da:	68f8      	ldr	r0, [r7, #12]
 81039dc:	f000 f8bb 	bl	8103b56 <prvReadBytesFromBuffer>
 81039e0:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 81039e2:	697b      	ldr	r3, [r7, #20]
}
 81039e4:	4618      	mov	r0, r3
 81039e6:	3720      	adds	r7, #32
 81039e8:	46bd      	mov	sp, r7
 81039ea:	bd80      	pop	{r7, pc}

081039ec <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 81039ec:	b580      	push	{r7, lr}
 81039ee:	b08c      	sub	sp, #48	; 0x30
 81039f0:	af02      	add	r7, sp, #8
 81039f2:	6078      	str	r0, [r7, #4]
 81039f4:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 81039fa:	6a3b      	ldr	r3, [r7, #32]
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	d10a      	bne.n	8103a16 <xStreamBufferSendCompletedFromISR+0x2a>
	__asm volatile
 8103a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103a04:	f383 8811 	msr	BASEPRI, r3
 8103a08:	f3bf 8f6f 	isb	sy
 8103a0c:	f3bf 8f4f 	dsb	sy
 8103a10:	61bb      	str	r3, [r7, #24]
}
 8103a12:	bf00      	nop
 8103a14:	e7fe      	b.n	8103a14 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 8103a16:	f3ef 8211 	mrs	r2, BASEPRI
 8103a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103a1e:	f383 8811 	msr	BASEPRI, r3
 8103a22:	f3bf 8f6f 	isb	sy
 8103a26:	f3bf 8f4f 	dsb	sy
 8103a2a:	617a      	str	r2, [r7, #20]
 8103a2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8103a2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8103a30:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8103a32:	6a3b      	ldr	r3, [r7, #32]
 8103a34:	691b      	ldr	r3, [r3, #16]
 8103a36:	2b00      	cmp	r3, #0
 8103a38:	d00e      	beq.n	8103a58 <xStreamBufferSendCompletedFromISR+0x6c>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8103a3a:	6a3b      	ldr	r3, [r7, #32]
 8103a3c:	6918      	ldr	r0, [r3, #16]
 8103a3e:	683b      	ldr	r3, [r7, #0]
 8103a40:	9300      	str	r3, [sp, #0]
 8103a42:	2300      	movs	r3, #0
 8103a44:	2200      	movs	r2, #0
 8103a46:	2100      	movs	r1, #0
 8103a48:	f001 fa46 	bl	8104ed8 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8103a4c:	6a3b      	ldr	r3, [r7, #32]
 8103a4e:	2200      	movs	r2, #0
 8103a50:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8103a52:	2301      	movs	r3, #1
 8103a54:	627b      	str	r3, [r7, #36]	; 0x24
 8103a56:	e001      	b.n	8103a5c <xStreamBufferSendCompletedFromISR+0x70>
		}
		else
		{
			xReturn = pdFALSE;
 8103a58:	2300      	movs	r3, #0
 8103a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8103a5c:	69fb      	ldr	r3, [r7, #28]
 8103a5e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8103a60:	68fb      	ldr	r3, [r7, #12]
 8103a62:	f383 8811 	msr	BASEPRI, r3
}
 8103a66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8103a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8103a6a:	4618      	mov	r0, r3
 8103a6c:	3728      	adds	r7, #40	; 0x28
 8103a6e:	46bd      	mov	sp, r7
 8103a70:	bd80      	pop	{r7, pc}

08103a72 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8103a72:	b580      	push	{r7, lr}
 8103a74:	b08a      	sub	sp, #40	; 0x28
 8103a76:	af00      	add	r7, sp, #0
 8103a78:	60f8      	str	r0, [r7, #12]
 8103a7a:	60b9      	str	r1, [r7, #8]
 8103a7c:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8103a7e:	687b      	ldr	r3, [r7, #4]
 8103a80:	2b00      	cmp	r3, #0
 8103a82:	d10a      	bne.n	8103a9a <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8103a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103a88:	f383 8811 	msr	BASEPRI, r3
 8103a8c:	f3bf 8f6f 	isb	sy
 8103a90:	f3bf 8f4f 	dsb	sy
 8103a94:	61fb      	str	r3, [r7, #28]
}
 8103a96:	bf00      	nop
 8103a98:	e7fe      	b.n	8103a98 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8103a9a:	68fb      	ldr	r3, [r7, #12]
 8103a9c:	685b      	ldr	r3, [r3, #4]
 8103a9e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8103aa0:	68fb      	ldr	r3, [r7, #12]
 8103aa2:	689a      	ldr	r2, [r3, #8]
 8103aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103aa6:	1ad3      	subs	r3, r2, r3
 8103aa8:	687a      	ldr	r2, [r7, #4]
 8103aaa:	4293      	cmp	r3, r2
 8103aac:	bf28      	it	cs
 8103aae:	4613      	movcs	r3, r2
 8103ab0:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8103ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103ab4:	6a3b      	ldr	r3, [r7, #32]
 8103ab6:	441a      	add	r2, r3
 8103ab8:	68fb      	ldr	r3, [r7, #12]
 8103aba:	689b      	ldr	r3, [r3, #8]
 8103abc:	429a      	cmp	r2, r3
 8103abe:	d90a      	bls.n	8103ad6 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8103ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103ac4:	f383 8811 	msr	BASEPRI, r3
 8103ac8:	f3bf 8f6f 	isb	sy
 8103acc:	f3bf 8f4f 	dsb	sy
 8103ad0:	61bb      	str	r3, [r7, #24]
}
 8103ad2:	bf00      	nop
 8103ad4:	e7fe      	b.n	8103ad4 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8103ad6:	68fb      	ldr	r3, [r7, #12]
 8103ad8:	699a      	ldr	r2, [r3, #24]
 8103ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103adc:	4413      	add	r3, r2
 8103ade:	6a3a      	ldr	r2, [r7, #32]
 8103ae0:	68b9      	ldr	r1, [r7, #8]
 8103ae2:	4618      	mov	r0, r3
 8103ae4:	f001 fed0 	bl	8105888 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8103ae8:	687a      	ldr	r2, [r7, #4]
 8103aea:	6a3b      	ldr	r3, [r7, #32]
 8103aec:	429a      	cmp	r2, r3
 8103aee:	d91c      	bls.n	8103b2a <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8103af0:	687a      	ldr	r2, [r7, #4]
 8103af2:	6a3b      	ldr	r3, [r7, #32]
 8103af4:	1ad2      	subs	r2, r2, r3
 8103af6:	68fb      	ldr	r3, [r7, #12]
 8103af8:	689b      	ldr	r3, [r3, #8]
 8103afa:	429a      	cmp	r2, r3
 8103afc:	d90a      	bls.n	8103b14 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8103afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b02:	f383 8811 	msr	BASEPRI, r3
 8103b06:	f3bf 8f6f 	isb	sy
 8103b0a:	f3bf 8f4f 	dsb	sy
 8103b0e:	617b      	str	r3, [r7, #20]
}
 8103b10:	bf00      	nop
 8103b12:	e7fe      	b.n	8103b12 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8103b14:	68fb      	ldr	r3, [r7, #12]
 8103b16:	6998      	ldr	r0, [r3, #24]
 8103b18:	68ba      	ldr	r2, [r7, #8]
 8103b1a:	6a3b      	ldr	r3, [r7, #32]
 8103b1c:	18d1      	adds	r1, r2, r3
 8103b1e:	687a      	ldr	r2, [r7, #4]
 8103b20:	6a3b      	ldr	r3, [r7, #32]
 8103b22:	1ad3      	subs	r3, r2, r3
 8103b24:	461a      	mov	r2, r3
 8103b26:	f001 feaf 	bl	8105888 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8103b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	4413      	add	r3, r2
 8103b30:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8103b32:	68fb      	ldr	r3, [r7, #12]
 8103b34:	689b      	ldr	r3, [r3, #8]
 8103b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103b38:	429a      	cmp	r2, r3
 8103b3a:	d304      	bcc.n	8103b46 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8103b3c:	68fb      	ldr	r3, [r7, #12]
 8103b3e:	689b      	ldr	r3, [r3, #8]
 8103b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103b42:	1ad3      	subs	r3, r2, r3
 8103b44:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8103b46:	68fb      	ldr	r3, [r7, #12]
 8103b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103b4a:	605a      	str	r2, [r3, #4]

	return xCount;
 8103b4c:	687b      	ldr	r3, [r7, #4]
}
 8103b4e:	4618      	mov	r0, r3
 8103b50:	3728      	adds	r7, #40	; 0x28
 8103b52:	46bd      	mov	sp, r7
 8103b54:	bd80      	pop	{r7, pc}

08103b56 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8103b56:	b580      	push	{r7, lr}
 8103b58:	b08a      	sub	sp, #40	; 0x28
 8103b5a:	af00      	add	r7, sp, #0
 8103b5c:	60f8      	str	r0, [r7, #12]
 8103b5e:	60b9      	str	r1, [r7, #8]
 8103b60:	607a      	str	r2, [r7, #4]
 8103b62:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8103b64:	687a      	ldr	r2, [r7, #4]
 8103b66:	683b      	ldr	r3, [r7, #0]
 8103b68:	4293      	cmp	r3, r2
 8103b6a:	bf28      	it	cs
 8103b6c:	4613      	movcs	r3, r2
 8103b6e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8103b70:	6a3b      	ldr	r3, [r7, #32]
 8103b72:	2b00      	cmp	r3, #0
 8103b74:	d064      	beq.n	8103c40 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8103b76:	68fb      	ldr	r3, [r7, #12]
 8103b78:	681b      	ldr	r3, [r3, #0]
 8103b7a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8103b7c:	68fb      	ldr	r3, [r7, #12]
 8103b7e:	689a      	ldr	r2, [r3, #8]
 8103b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103b82:	1ad3      	subs	r3, r2, r3
 8103b84:	6a3a      	ldr	r2, [r7, #32]
 8103b86:	4293      	cmp	r3, r2
 8103b88:	bf28      	it	cs
 8103b8a:	4613      	movcs	r3, r2
 8103b8c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8103b8e:	69fa      	ldr	r2, [r7, #28]
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	429a      	cmp	r2, r3
 8103b94:	d90a      	bls.n	8103bac <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8103b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b9a:	f383 8811 	msr	BASEPRI, r3
 8103b9e:	f3bf 8f6f 	isb	sy
 8103ba2:	f3bf 8f4f 	dsb	sy
 8103ba6:	61bb      	str	r3, [r7, #24]
}
 8103ba8:	bf00      	nop
 8103baa:	e7fe      	b.n	8103baa <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8103bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103bae:	69fb      	ldr	r3, [r7, #28]
 8103bb0:	441a      	add	r2, r3
 8103bb2:	68fb      	ldr	r3, [r7, #12]
 8103bb4:	689b      	ldr	r3, [r3, #8]
 8103bb6:	429a      	cmp	r2, r3
 8103bb8:	d90a      	bls.n	8103bd0 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8103bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103bbe:	f383 8811 	msr	BASEPRI, r3
 8103bc2:	f3bf 8f6f 	isb	sy
 8103bc6:	f3bf 8f4f 	dsb	sy
 8103bca:	617b      	str	r3, [r7, #20]
}
 8103bcc:	bf00      	nop
 8103bce:	e7fe      	b.n	8103bce <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8103bd0:	68fb      	ldr	r3, [r7, #12]
 8103bd2:	699a      	ldr	r2, [r3, #24]
 8103bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103bd6:	4413      	add	r3, r2
 8103bd8:	69fa      	ldr	r2, [r7, #28]
 8103bda:	4619      	mov	r1, r3
 8103bdc:	68b8      	ldr	r0, [r7, #8]
 8103bde:	f001 fe53 	bl	8105888 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8103be2:	6a3a      	ldr	r2, [r7, #32]
 8103be4:	69fb      	ldr	r3, [r7, #28]
 8103be6:	429a      	cmp	r2, r3
 8103be8:	d919      	bls.n	8103c1e <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8103bea:	6a3a      	ldr	r2, [r7, #32]
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	429a      	cmp	r2, r3
 8103bf0:	d90a      	bls.n	8103c08 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8103bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103bf6:	f383 8811 	msr	BASEPRI, r3
 8103bfa:	f3bf 8f6f 	isb	sy
 8103bfe:	f3bf 8f4f 	dsb	sy
 8103c02:	613b      	str	r3, [r7, #16]
}
 8103c04:	bf00      	nop
 8103c06:	e7fe      	b.n	8103c06 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8103c08:	68ba      	ldr	r2, [r7, #8]
 8103c0a:	69fb      	ldr	r3, [r7, #28]
 8103c0c:	18d0      	adds	r0, r2, r3
 8103c0e:	68fb      	ldr	r3, [r7, #12]
 8103c10:	6999      	ldr	r1, [r3, #24]
 8103c12:	6a3a      	ldr	r2, [r7, #32]
 8103c14:	69fb      	ldr	r3, [r7, #28]
 8103c16:	1ad3      	subs	r3, r2, r3
 8103c18:	461a      	mov	r2, r3
 8103c1a:	f001 fe35 	bl	8105888 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8103c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103c20:	6a3b      	ldr	r3, [r7, #32]
 8103c22:	4413      	add	r3, r2
 8103c24:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8103c26:	68fb      	ldr	r3, [r7, #12]
 8103c28:	689b      	ldr	r3, [r3, #8]
 8103c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103c2c:	429a      	cmp	r2, r3
 8103c2e:	d304      	bcc.n	8103c3a <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8103c30:	68fb      	ldr	r3, [r7, #12]
 8103c32:	689b      	ldr	r3, [r3, #8]
 8103c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103c36:	1ad3      	subs	r3, r2, r3
 8103c38:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8103c3a:	68fb      	ldr	r3, [r7, #12]
 8103c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103c3e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8103c40:	6a3b      	ldr	r3, [r7, #32]
}
 8103c42:	4618      	mov	r0, r3
 8103c44:	3728      	adds	r7, #40	; 0x28
 8103c46:	46bd      	mov	sp, r7
 8103c48:	bd80      	pop	{r7, pc}

08103c4a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8103c4a:	b480      	push	{r7}
 8103c4c:	b085      	sub	sp, #20
 8103c4e:	af00      	add	r7, sp, #0
 8103c50:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	689a      	ldr	r2, [r3, #8]
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	685b      	ldr	r3, [r3, #4]
 8103c5a:	4413      	add	r3, r2
 8103c5c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	68fa      	ldr	r2, [r7, #12]
 8103c64:	1ad3      	subs	r3, r2, r3
 8103c66:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	689b      	ldr	r3, [r3, #8]
 8103c6c:	68fa      	ldr	r2, [r7, #12]
 8103c6e:	429a      	cmp	r2, r3
 8103c70:	d304      	bcc.n	8103c7c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	689b      	ldr	r3, [r3, #8]
 8103c76:	68fa      	ldr	r2, [r7, #12]
 8103c78:	1ad3      	subs	r3, r2, r3
 8103c7a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8103c7c:	68fb      	ldr	r3, [r7, #12]
}
 8103c7e:	4618      	mov	r0, r3
 8103c80:	3714      	adds	r7, #20
 8103c82:	46bd      	mov	sp, r7
 8103c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c88:	4770      	bx	lr

08103c8a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8103c8a:	b580      	push	{r7, lr}
 8103c8c:	b08e      	sub	sp, #56	; 0x38
 8103c8e:	af04      	add	r7, sp, #16
 8103c90:	60f8      	str	r0, [r7, #12]
 8103c92:	60b9      	str	r1, [r7, #8]
 8103c94:	607a      	str	r2, [r7, #4]
 8103c96:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8103c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103c9a:	2b00      	cmp	r3, #0
 8103c9c:	d10a      	bne.n	8103cb4 <xTaskCreateStatic+0x2a>
	__asm volatile
 8103c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103ca2:	f383 8811 	msr	BASEPRI, r3
 8103ca6:	f3bf 8f6f 	isb	sy
 8103caa:	f3bf 8f4f 	dsb	sy
 8103cae:	623b      	str	r3, [r7, #32]
}
 8103cb0:	bf00      	nop
 8103cb2:	e7fe      	b.n	8103cb2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8103cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103cb6:	2b00      	cmp	r3, #0
 8103cb8:	d10a      	bne.n	8103cd0 <xTaskCreateStatic+0x46>
	__asm volatile
 8103cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103cbe:	f383 8811 	msr	BASEPRI, r3
 8103cc2:	f3bf 8f6f 	isb	sy
 8103cc6:	f3bf 8f4f 	dsb	sy
 8103cca:	61fb      	str	r3, [r7, #28]
}
 8103ccc:	bf00      	nop
 8103cce:	e7fe      	b.n	8103cce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8103cd0:	23bc      	movs	r3, #188	; 0xbc
 8103cd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8103cd4:	693b      	ldr	r3, [r7, #16]
 8103cd6:	2bbc      	cmp	r3, #188	; 0xbc
 8103cd8:	d00a      	beq.n	8103cf0 <xTaskCreateStatic+0x66>
	__asm volatile
 8103cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103cde:	f383 8811 	msr	BASEPRI, r3
 8103ce2:	f3bf 8f6f 	isb	sy
 8103ce6:	f3bf 8f4f 	dsb	sy
 8103cea:	61bb      	str	r3, [r7, #24]
}
 8103cec:	bf00      	nop
 8103cee:	e7fe      	b.n	8103cee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8103cf0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8103cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103cf4:	2b00      	cmp	r3, #0
 8103cf6:	d01e      	beq.n	8103d36 <xTaskCreateStatic+0xac>
 8103cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103cfa:	2b00      	cmp	r3, #0
 8103cfc:	d01b      	beq.n	8103d36 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8103cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103d00:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8103d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103d06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8103d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103d0a:	2202      	movs	r2, #2
 8103d0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8103d10:	2300      	movs	r3, #0
 8103d12:	9303      	str	r3, [sp, #12]
 8103d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103d16:	9302      	str	r3, [sp, #8]
 8103d18:	f107 0314 	add.w	r3, r7, #20
 8103d1c:	9301      	str	r3, [sp, #4]
 8103d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103d20:	9300      	str	r3, [sp, #0]
 8103d22:	683b      	ldr	r3, [r7, #0]
 8103d24:	687a      	ldr	r2, [r7, #4]
 8103d26:	68b9      	ldr	r1, [r7, #8]
 8103d28:	68f8      	ldr	r0, [r7, #12]
 8103d2a:	f000 f851 	bl	8103dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8103d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8103d30:	f000 f8f4 	bl	8103f1c <prvAddNewTaskToReadyList>
 8103d34:	e001      	b.n	8103d3a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8103d36:	2300      	movs	r3, #0
 8103d38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8103d3a:	697b      	ldr	r3, [r7, #20]
	}
 8103d3c:	4618      	mov	r0, r3
 8103d3e:	3728      	adds	r7, #40	; 0x28
 8103d40:	46bd      	mov	sp, r7
 8103d42:	bd80      	pop	{r7, pc}

08103d44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8103d44:	b580      	push	{r7, lr}
 8103d46:	b08c      	sub	sp, #48	; 0x30
 8103d48:	af04      	add	r7, sp, #16
 8103d4a:	60f8      	str	r0, [r7, #12]
 8103d4c:	60b9      	str	r1, [r7, #8]
 8103d4e:	603b      	str	r3, [r7, #0]
 8103d50:	4613      	mov	r3, r2
 8103d52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8103d54:	88fb      	ldrh	r3, [r7, #6]
 8103d56:	009b      	lsls	r3, r3, #2
 8103d58:	4618      	mov	r0, r3
 8103d5a:	f7fe f835 	bl	8101dc8 <pvPortMalloc>
 8103d5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8103d60:	697b      	ldr	r3, [r7, #20]
 8103d62:	2b00      	cmp	r3, #0
 8103d64:	d00e      	beq.n	8103d84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8103d66:	20bc      	movs	r0, #188	; 0xbc
 8103d68:	f7fe f82e 	bl	8101dc8 <pvPortMalloc>
 8103d6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8103d6e:	69fb      	ldr	r3, [r7, #28]
 8103d70:	2b00      	cmp	r3, #0
 8103d72:	d003      	beq.n	8103d7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8103d74:	69fb      	ldr	r3, [r7, #28]
 8103d76:	697a      	ldr	r2, [r7, #20]
 8103d78:	631a      	str	r2, [r3, #48]	; 0x30
 8103d7a:	e005      	b.n	8103d88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8103d7c:	6978      	ldr	r0, [r7, #20]
 8103d7e:	f7fe f8ef 	bl	8101f60 <vPortFree>
 8103d82:	e001      	b.n	8103d88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8103d84:	2300      	movs	r3, #0
 8103d86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8103d88:	69fb      	ldr	r3, [r7, #28]
 8103d8a:	2b00      	cmp	r3, #0
 8103d8c:	d017      	beq.n	8103dbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8103d8e:	69fb      	ldr	r3, [r7, #28]
 8103d90:	2200      	movs	r2, #0
 8103d92:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8103d96:	88fa      	ldrh	r2, [r7, #6]
 8103d98:	2300      	movs	r3, #0
 8103d9a:	9303      	str	r3, [sp, #12]
 8103d9c:	69fb      	ldr	r3, [r7, #28]
 8103d9e:	9302      	str	r3, [sp, #8]
 8103da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103da2:	9301      	str	r3, [sp, #4]
 8103da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103da6:	9300      	str	r3, [sp, #0]
 8103da8:	683b      	ldr	r3, [r7, #0]
 8103daa:	68b9      	ldr	r1, [r7, #8]
 8103dac:	68f8      	ldr	r0, [r7, #12]
 8103dae:	f000 f80f 	bl	8103dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8103db2:	69f8      	ldr	r0, [r7, #28]
 8103db4:	f000 f8b2 	bl	8103f1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8103db8:	2301      	movs	r3, #1
 8103dba:	61bb      	str	r3, [r7, #24]
 8103dbc:	e002      	b.n	8103dc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8103dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8103dc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8103dc4:	69bb      	ldr	r3, [r7, #24]
	}
 8103dc6:	4618      	mov	r0, r3
 8103dc8:	3720      	adds	r7, #32
 8103dca:	46bd      	mov	sp, r7
 8103dcc:	bd80      	pop	{r7, pc}
	...

08103dd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8103dd0:	b580      	push	{r7, lr}
 8103dd2:	b088      	sub	sp, #32
 8103dd4:	af00      	add	r7, sp, #0
 8103dd6:	60f8      	str	r0, [r7, #12]
 8103dd8:	60b9      	str	r1, [r7, #8]
 8103dda:	607a      	str	r2, [r7, #4]
 8103ddc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8103dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103de0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8103de2:	687b      	ldr	r3, [r7, #4]
 8103de4:	009b      	lsls	r3, r3, #2
 8103de6:	461a      	mov	r2, r3
 8103de8:	21a5      	movs	r1, #165	; 0xa5
 8103dea:	f001 fd5b 	bl	81058a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8103dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8103df8:	3b01      	subs	r3, #1
 8103dfa:	009b      	lsls	r3, r3, #2
 8103dfc:	4413      	add	r3, r2
 8103dfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8103e00:	69bb      	ldr	r3, [r7, #24]
 8103e02:	f023 0307 	bic.w	r3, r3, #7
 8103e06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8103e08:	69bb      	ldr	r3, [r7, #24]
 8103e0a:	f003 0307 	and.w	r3, r3, #7
 8103e0e:	2b00      	cmp	r3, #0
 8103e10:	d00a      	beq.n	8103e28 <prvInitialiseNewTask+0x58>
	__asm volatile
 8103e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103e16:	f383 8811 	msr	BASEPRI, r3
 8103e1a:	f3bf 8f6f 	isb	sy
 8103e1e:	f3bf 8f4f 	dsb	sy
 8103e22:	617b      	str	r3, [r7, #20]
}
 8103e24:	bf00      	nop
 8103e26:	e7fe      	b.n	8103e26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8103e28:	68bb      	ldr	r3, [r7, #8]
 8103e2a:	2b00      	cmp	r3, #0
 8103e2c:	d01f      	beq.n	8103e6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8103e2e:	2300      	movs	r3, #0
 8103e30:	61fb      	str	r3, [r7, #28]
 8103e32:	e012      	b.n	8103e5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8103e34:	68ba      	ldr	r2, [r7, #8]
 8103e36:	69fb      	ldr	r3, [r7, #28]
 8103e38:	4413      	add	r3, r2
 8103e3a:	7819      	ldrb	r1, [r3, #0]
 8103e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103e3e:	69fb      	ldr	r3, [r7, #28]
 8103e40:	4413      	add	r3, r2
 8103e42:	3334      	adds	r3, #52	; 0x34
 8103e44:	460a      	mov	r2, r1
 8103e46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8103e48:	68ba      	ldr	r2, [r7, #8]
 8103e4a:	69fb      	ldr	r3, [r7, #28]
 8103e4c:	4413      	add	r3, r2
 8103e4e:	781b      	ldrb	r3, [r3, #0]
 8103e50:	2b00      	cmp	r3, #0
 8103e52:	d006      	beq.n	8103e62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8103e54:	69fb      	ldr	r3, [r7, #28]
 8103e56:	3301      	adds	r3, #1
 8103e58:	61fb      	str	r3, [r7, #28]
 8103e5a:	69fb      	ldr	r3, [r7, #28]
 8103e5c:	2b0f      	cmp	r3, #15
 8103e5e:	d9e9      	bls.n	8103e34 <prvInitialiseNewTask+0x64>
 8103e60:	e000      	b.n	8103e64 <prvInitialiseNewTask+0x94>
			{
				break;
 8103e62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8103e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e66:	2200      	movs	r2, #0
 8103e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8103e6c:	e003      	b.n	8103e76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8103e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e70:	2200      	movs	r2, #0
 8103e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8103e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e78:	2b37      	cmp	r3, #55	; 0x37
 8103e7a:	d901      	bls.n	8103e80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8103e7c:	2337      	movs	r3, #55	; 0x37
 8103e7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8103e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8103e84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8103e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8103e8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8103e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e8e:	2200      	movs	r2, #0
 8103e90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8103e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e94:	3304      	adds	r3, #4
 8103e96:	4618      	mov	r0, r3
 8103e98:	f7fe f9a0 	bl	81021dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8103e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e9e:	3318      	adds	r3, #24
 8103ea0:	4618      	mov	r0, r3
 8103ea2:	f7fe f99b 	bl	81021dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8103ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103eaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103eae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8103eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103eb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8103eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103eba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8103ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103ebe:	2200      	movs	r2, #0
 8103ec0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8103ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103ec6:	2200      	movs	r2, #0
 8103ec8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8103ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103ece:	3354      	adds	r3, #84	; 0x54
 8103ed0:	2260      	movs	r2, #96	; 0x60
 8103ed2:	2100      	movs	r1, #0
 8103ed4:	4618      	mov	r0, r3
 8103ed6:	f001 fce5 	bl	81058a4 <memset>
 8103eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103edc:	4a0c      	ldr	r2, [pc, #48]	; (8103f10 <prvInitialiseNewTask+0x140>)
 8103ede:	659a      	str	r2, [r3, #88]	; 0x58
 8103ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103ee2:	4a0c      	ldr	r2, [pc, #48]	; (8103f14 <prvInitialiseNewTask+0x144>)
 8103ee4:	65da      	str	r2, [r3, #92]	; 0x5c
 8103ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103ee8:	4a0b      	ldr	r2, [pc, #44]	; (8103f18 <prvInitialiseNewTask+0x148>)
 8103eea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8103eec:	683a      	ldr	r2, [r7, #0]
 8103eee:	68f9      	ldr	r1, [r7, #12]
 8103ef0:	69b8      	ldr	r0, [r7, #24]
 8103ef2:	f7fe fa07 	bl	8102304 <pxPortInitialiseStack>
 8103ef6:	4602      	mov	r2, r0
 8103ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103efa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8103efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103efe:	2b00      	cmp	r3, #0
 8103f00:	d002      	beq.n	8103f08 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8103f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103f06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8103f08:	bf00      	nop
 8103f0a:	3720      	adds	r7, #32
 8103f0c:	46bd      	mov	sp, r7
 8103f0e:	bd80      	pop	{r7, pc}
 8103f10:	08106c38 	.word	0x08106c38
 8103f14:	08106c58 	.word	0x08106c58
 8103f18:	08106c18 	.word	0x08106c18

08103f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8103f1c:	b580      	push	{r7, lr}
 8103f1e:	b082      	sub	sp, #8
 8103f20:	af00      	add	r7, sp, #0
 8103f22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8103f24:	f7fe fb1e 	bl	8102564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8103f28:	4b2d      	ldr	r3, [pc, #180]	; (8103fe0 <prvAddNewTaskToReadyList+0xc4>)
 8103f2a:	681b      	ldr	r3, [r3, #0]
 8103f2c:	3301      	adds	r3, #1
 8103f2e:	4a2c      	ldr	r2, [pc, #176]	; (8103fe0 <prvAddNewTaskToReadyList+0xc4>)
 8103f30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8103f32:	4b2c      	ldr	r3, [pc, #176]	; (8103fe4 <prvAddNewTaskToReadyList+0xc8>)
 8103f34:	681b      	ldr	r3, [r3, #0]
 8103f36:	2b00      	cmp	r3, #0
 8103f38:	d109      	bne.n	8103f4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8103f3a:	4a2a      	ldr	r2, [pc, #168]	; (8103fe4 <prvAddNewTaskToReadyList+0xc8>)
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8103f40:	4b27      	ldr	r3, [pc, #156]	; (8103fe0 <prvAddNewTaskToReadyList+0xc4>)
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	2b01      	cmp	r3, #1
 8103f46:	d110      	bne.n	8103f6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8103f48:	f000 fc4c 	bl	81047e4 <prvInitialiseTaskLists>
 8103f4c:	e00d      	b.n	8103f6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8103f4e:	4b26      	ldr	r3, [pc, #152]	; (8103fe8 <prvAddNewTaskToReadyList+0xcc>)
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d109      	bne.n	8103f6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8103f56:	4b23      	ldr	r3, [pc, #140]	; (8103fe4 <prvAddNewTaskToReadyList+0xc8>)
 8103f58:	681b      	ldr	r3, [r3, #0]
 8103f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f60:	429a      	cmp	r2, r3
 8103f62:	d802      	bhi.n	8103f6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8103f64:	4a1f      	ldr	r2, [pc, #124]	; (8103fe4 <prvAddNewTaskToReadyList+0xc8>)
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8103f6a:	4b20      	ldr	r3, [pc, #128]	; (8103fec <prvAddNewTaskToReadyList+0xd0>)
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	3301      	adds	r3, #1
 8103f70:	4a1e      	ldr	r2, [pc, #120]	; (8103fec <prvAddNewTaskToReadyList+0xd0>)
 8103f72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8103f74:	4b1d      	ldr	r3, [pc, #116]	; (8103fec <prvAddNewTaskToReadyList+0xd0>)
 8103f76:	681a      	ldr	r2, [r3, #0]
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103f80:	4b1b      	ldr	r3, [pc, #108]	; (8103ff0 <prvAddNewTaskToReadyList+0xd4>)
 8103f82:	681b      	ldr	r3, [r3, #0]
 8103f84:	429a      	cmp	r2, r3
 8103f86:	d903      	bls.n	8103f90 <prvAddNewTaskToReadyList+0x74>
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f8c:	4a18      	ldr	r2, [pc, #96]	; (8103ff0 <prvAddNewTaskToReadyList+0xd4>)
 8103f8e:	6013      	str	r3, [r2, #0]
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103f94:	4613      	mov	r3, r2
 8103f96:	009b      	lsls	r3, r3, #2
 8103f98:	4413      	add	r3, r2
 8103f9a:	009b      	lsls	r3, r3, #2
 8103f9c:	4a15      	ldr	r2, [pc, #84]	; (8103ff4 <prvAddNewTaskToReadyList+0xd8>)
 8103f9e:	441a      	add	r2, r3
 8103fa0:	687b      	ldr	r3, [r7, #4]
 8103fa2:	3304      	adds	r3, #4
 8103fa4:	4619      	mov	r1, r3
 8103fa6:	4610      	mov	r0, r2
 8103fa8:	f7fe f925 	bl	81021f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8103fac:	f7fe fb0a 	bl	81025c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8103fb0:	4b0d      	ldr	r3, [pc, #52]	; (8103fe8 <prvAddNewTaskToReadyList+0xcc>)
 8103fb2:	681b      	ldr	r3, [r3, #0]
 8103fb4:	2b00      	cmp	r3, #0
 8103fb6:	d00e      	beq.n	8103fd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8103fb8:	4b0a      	ldr	r3, [pc, #40]	; (8103fe4 <prvAddNewTaskToReadyList+0xc8>)
 8103fba:	681b      	ldr	r3, [r3, #0]
 8103fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103fbe:	687b      	ldr	r3, [r7, #4]
 8103fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fc2:	429a      	cmp	r2, r3
 8103fc4:	d207      	bcs.n	8103fd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8103fc6:	4b0c      	ldr	r3, [pc, #48]	; (8103ff8 <prvAddNewTaskToReadyList+0xdc>)
 8103fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103fcc:	601a      	str	r2, [r3, #0]
 8103fce:	f3bf 8f4f 	dsb	sy
 8103fd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8103fd6:	bf00      	nop
 8103fd8:	3708      	adds	r7, #8
 8103fda:	46bd      	mov	sp, r7
 8103fdc:	bd80      	pop	{r7, pc}
 8103fde:	bf00      	nop
 8103fe0:	1000c9f0 	.word	0x1000c9f0
 8103fe4:	1000c51c 	.word	0x1000c51c
 8103fe8:	1000c9fc 	.word	0x1000c9fc
 8103fec:	1000ca0c 	.word	0x1000ca0c
 8103ff0:	1000c9f8 	.word	0x1000c9f8
 8103ff4:	1000c520 	.word	0x1000c520
 8103ff8:	e000ed04 	.word	0xe000ed04

08103ffc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8103ffc:	b580      	push	{r7, lr}
 8103ffe:	b084      	sub	sp, #16
 8104000:	af00      	add	r7, sp, #0
 8104002:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8104004:	2300      	movs	r3, #0
 8104006:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	2b00      	cmp	r3, #0
 810400c:	d017      	beq.n	810403e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810400e:	4b13      	ldr	r3, [pc, #76]	; (810405c <vTaskDelay+0x60>)
 8104010:	681b      	ldr	r3, [r3, #0]
 8104012:	2b00      	cmp	r3, #0
 8104014:	d00a      	beq.n	810402c <vTaskDelay+0x30>
	__asm volatile
 8104016:	f04f 0350 	mov.w	r3, #80	; 0x50
 810401a:	f383 8811 	msr	BASEPRI, r3
 810401e:	f3bf 8f6f 	isb	sy
 8104022:	f3bf 8f4f 	dsb	sy
 8104026:	60bb      	str	r3, [r7, #8]
}
 8104028:	bf00      	nop
 810402a:	e7fe      	b.n	810402a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810402c:	f000 f88a 	bl	8104144 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8104030:	2100      	movs	r1, #0
 8104032:	6878      	ldr	r0, [r7, #4]
 8104034:	f001 f85a 	bl	81050ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8104038:	f000 f892 	bl	8104160 <xTaskResumeAll>
 810403c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810403e:	68fb      	ldr	r3, [r7, #12]
 8104040:	2b00      	cmp	r3, #0
 8104042:	d107      	bne.n	8104054 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8104044:	4b06      	ldr	r3, [pc, #24]	; (8104060 <vTaskDelay+0x64>)
 8104046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810404a:	601a      	str	r2, [r3, #0]
 810404c:	f3bf 8f4f 	dsb	sy
 8104050:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8104054:	bf00      	nop
 8104056:	3710      	adds	r7, #16
 8104058:	46bd      	mov	sp, r7
 810405a:	bd80      	pop	{r7, pc}
 810405c:	1000ca18 	.word	0x1000ca18
 8104060:	e000ed04 	.word	0xe000ed04

08104064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8104064:	b580      	push	{r7, lr}
 8104066:	b08a      	sub	sp, #40	; 0x28
 8104068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810406a:	2300      	movs	r3, #0
 810406c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810406e:	2300      	movs	r3, #0
 8104070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8104072:	463a      	mov	r2, r7
 8104074:	1d39      	adds	r1, r7, #4
 8104076:	f107 0308 	add.w	r3, r7, #8
 810407a:	4618      	mov	r0, r3
 810407c:	f7fd fe70 	bl	8101d60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8104080:	6839      	ldr	r1, [r7, #0]
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	68ba      	ldr	r2, [r7, #8]
 8104086:	9202      	str	r2, [sp, #8]
 8104088:	9301      	str	r3, [sp, #4]
 810408a:	2300      	movs	r3, #0
 810408c:	9300      	str	r3, [sp, #0]
 810408e:	2300      	movs	r3, #0
 8104090:	460a      	mov	r2, r1
 8104092:	4924      	ldr	r1, [pc, #144]	; (8104124 <vTaskStartScheduler+0xc0>)
 8104094:	4824      	ldr	r0, [pc, #144]	; (8104128 <vTaskStartScheduler+0xc4>)
 8104096:	f7ff fdf8 	bl	8103c8a <xTaskCreateStatic>
 810409a:	4603      	mov	r3, r0
 810409c:	4a23      	ldr	r2, [pc, #140]	; (810412c <vTaskStartScheduler+0xc8>)
 810409e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 81040a0:	4b22      	ldr	r3, [pc, #136]	; (810412c <vTaskStartScheduler+0xc8>)
 81040a2:	681b      	ldr	r3, [r3, #0]
 81040a4:	2b00      	cmp	r3, #0
 81040a6:	d002      	beq.n	81040ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 81040a8:	2301      	movs	r3, #1
 81040aa:	617b      	str	r3, [r7, #20]
 81040ac:	e001      	b.n	81040b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81040ae:	2300      	movs	r3, #0
 81040b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 81040b2:	697b      	ldr	r3, [r7, #20]
 81040b4:	2b01      	cmp	r3, #1
 81040b6:	d102      	bne.n	81040be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81040b8:	f001 f86c 	bl	8105194 <xTimerCreateTimerTask>
 81040bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81040be:	697b      	ldr	r3, [r7, #20]
 81040c0:	2b01      	cmp	r3, #1
 81040c2:	d11b      	bne.n	81040fc <vTaskStartScheduler+0x98>
	__asm volatile
 81040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81040c8:	f383 8811 	msr	BASEPRI, r3
 81040cc:	f3bf 8f6f 	isb	sy
 81040d0:	f3bf 8f4f 	dsb	sy
 81040d4:	613b      	str	r3, [r7, #16]
}
 81040d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81040d8:	4b15      	ldr	r3, [pc, #84]	; (8104130 <vTaskStartScheduler+0xcc>)
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	3354      	adds	r3, #84	; 0x54
 81040de:	4a15      	ldr	r2, [pc, #84]	; (8104134 <vTaskStartScheduler+0xd0>)
 81040e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81040e2:	4b15      	ldr	r3, [pc, #84]	; (8104138 <vTaskStartScheduler+0xd4>)
 81040e4:	f04f 32ff 	mov.w	r2, #4294967295
 81040e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81040ea:	4b14      	ldr	r3, [pc, #80]	; (810413c <vTaskStartScheduler+0xd8>)
 81040ec:	2201      	movs	r2, #1
 81040ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81040f0:	4b13      	ldr	r3, [pc, #76]	; (8104140 <vTaskStartScheduler+0xdc>)
 81040f2:	2200      	movs	r2, #0
 81040f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81040f6:	f7fe f993 	bl	8102420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81040fa:	e00e      	b.n	810411a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81040fc:	697b      	ldr	r3, [r7, #20]
 81040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104102:	d10a      	bne.n	810411a <vTaskStartScheduler+0xb6>
	__asm volatile
 8104104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104108:	f383 8811 	msr	BASEPRI, r3
 810410c:	f3bf 8f6f 	isb	sy
 8104110:	f3bf 8f4f 	dsb	sy
 8104114:	60fb      	str	r3, [r7, #12]
}
 8104116:	bf00      	nop
 8104118:	e7fe      	b.n	8104118 <vTaskStartScheduler+0xb4>
}
 810411a:	bf00      	nop
 810411c:	3718      	adds	r7, #24
 810411e:	46bd      	mov	sp, r7
 8104120:	bd80      	pop	{r7, pc}
 8104122:	bf00      	nop
 8104124:	08106be4 	.word	0x08106be4
 8104128:	081047b5 	.word	0x081047b5
 810412c:	1000ca14 	.word	0x1000ca14
 8104130:	1000c51c 	.word	0x1000c51c
 8104134:	10000018 	.word	0x10000018
 8104138:	1000ca10 	.word	0x1000ca10
 810413c:	1000c9fc 	.word	0x1000c9fc
 8104140:	1000c9f4 	.word	0x1000c9f4

08104144 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8104144:	b480      	push	{r7}
 8104146:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8104148:	4b04      	ldr	r3, [pc, #16]	; (810415c <vTaskSuspendAll+0x18>)
 810414a:	681b      	ldr	r3, [r3, #0]
 810414c:	3301      	adds	r3, #1
 810414e:	4a03      	ldr	r2, [pc, #12]	; (810415c <vTaskSuspendAll+0x18>)
 8104150:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8104152:	bf00      	nop
 8104154:	46bd      	mov	sp, r7
 8104156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810415a:	4770      	bx	lr
 810415c:	1000ca18 	.word	0x1000ca18

08104160 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8104160:	b580      	push	{r7, lr}
 8104162:	b084      	sub	sp, #16
 8104164:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8104166:	2300      	movs	r3, #0
 8104168:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810416a:	2300      	movs	r3, #0
 810416c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810416e:	4b42      	ldr	r3, [pc, #264]	; (8104278 <xTaskResumeAll+0x118>)
 8104170:	681b      	ldr	r3, [r3, #0]
 8104172:	2b00      	cmp	r3, #0
 8104174:	d10a      	bne.n	810418c <xTaskResumeAll+0x2c>
	__asm volatile
 8104176:	f04f 0350 	mov.w	r3, #80	; 0x50
 810417a:	f383 8811 	msr	BASEPRI, r3
 810417e:	f3bf 8f6f 	isb	sy
 8104182:	f3bf 8f4f 	dsb	sy
 8104186:	603b      	str	r3, [r7, #0]
}
 8104188:	bf00      	nop
 810418a:	e7fe      	b.n	810418a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810418c:	f7fe f9ea 	bl	8102564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8104190:	4b39      	ldr	r3, [pc, #228]	; (8104278 <xTaskResumeAll+0x118>)
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	3b01      	subs	r3, #1
 8104196:	4a38      	ldr	r2, [pc, #224]	; (8104278 <xTaskResumeAll+0x118>)
 8104198:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810419a:	4b37      	ldr	r3, [pc, #220]	; (8104278 <xTaskResumeAll+0x118>)
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	2b00      	cmp	r3, #0
 81041a0:	d162      	bne.n	8104268 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81041a2:	4b36      	ldr	r3, [pc, #216]	; (810427c <xTaskResumeAll+0x11c>)
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	2b00      	cmp	r3, #0
 81041a8:	d05e      	beq.n	8104268 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81041aa:	e02f      	b.n	810420c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81041ac:	4b34      	ldr	r3, [pc, #208]	; (8104280 <xTaskResumeAll+0x120>)
 81041ae:	68db      	ldr	r3, [r3, #12]
 81041b0:	68db      	ldr	r3, [r3, #12]
 81041b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81041b4:	68fb      	ldr	r3, [r7, #12]
 81041b6:	3318      	adds	r3, #24
 81041b8:	4618      	mov	r0, r3
 81041ba:	f7fe f879 	bl	81022b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81041be:	68fb      	ldr	r3, [r7, #12]
 81041c0:	3304      	adds	r3, #4
 81041c2:	4618      	mov	r0, r3
 81041c4:	f7fe f874 	bl	81022b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81041c8:	68fb      	ldr	r3, [r7, #12]
 81041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81041cc:	4b2d      	ldr	r3, [pc, #180]	; (8104284 <xTaskResumeAll+0x124>)
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	429a      	cmp	r2, r3
 81041d2:	d903      	bls.n	81041dc <xTaskResumeAll+0x7c>
 81041d4:	68fb      	ldr	r3, [r7, #12]
 81041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041d8:	4a2a      	ldr	r2, [pc, #168]	; (8104284 <xTaskResumeAll+0x124>)
 81041da:	6013      	str	r3, [r2, #0]
 81041dc:	68fb      	ldr	r3, [r7, #12]
 81041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81041e0:	4613      	mov	r3, r2
 81041e2:	009b      	lsls	r3, r3, #2
 81041e4:	4413      	add	r3, r2
 81041e6:	009b      	lsls	r3, r3, #2
 81041e8:	4a27      	ldr	r2, [pc, #156]	; (8104288 <xTaskResumeAll+0x128>)
 81041ea:	441a      	add	r2, r3
 81041ec:	68fb      	ldr	r3, [r7, #12]
 81041ee:	3304      	adds	r3, #4
 81041f0:	4619      	mov	r1, r3
 81041f2:	4610      	mov	r0, r2
 81041f4:	f7fd ffff 	bl	81021f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81041f8:	68fb      	ldr	r3, [r7, #12]
 81041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81041fc:	4b23      	ldr	r3, [pc, #140]	; (810428c <xTaskResumeAll+0x12c>)
 81041fe:	681b      	ldr	r3, [r3, #0]
 8104200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104202:	429a      	cmp	r2, r3
 8104204:	d302      	bcc.n	810420c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8104206:	4b22      	ldr	r3, [pc, #136]	; (8104290 <xTaskResumeAll+0x130>)
 8104208:	2201      	movs	r2, #1
 810420a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810420c:	4b1c      	ldr	r3, [pc, #112]	; (8104280 <xTaskResumeAll+0x120>)
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	2b00      	cmp	r3, #0
 8104212:	d1cb      	bne.n	81041ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8104214:	68fb      	ldr	r3, [r7, #12]
 8104216:	2b00      	cmp	r3, #0
 8104218:	d001      	beq.n	810421e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810421a:	f000 fb85 	bl	8104928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810421e:	4b1d      	ldr	r3, [pc, #116]	; (8104294 <xTaskResumeAll+0x134>)
 8104220:	681b      	ldr	r3, [r3, #0]
 8104222:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	2b00      	cmp	r3, #0
 8104228:	d010      	beq.n	810424c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810422a:	f000 f847 	bl	81042bc <xTaskIncrementTick>
 810422e:	4603      	mov	r3, r0
 8104230:	2b00      	cmp	r3, #0
 8104232:	d002      	beq.n	810423a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8104234:	4b16      	ldr	r3, [pc, #88]	; (8104290 <xTaskResumeAll+0x130>)
 8104236:	2201      	movs	r2, #1
 8104238:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810423a:	687b      	ldr	r3, [r7, #4]
 810423c:	3b01      	subs	r3, #1
 810423e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	2b00      	cmp	r3, #0
 8104244:	d1f1      	bne.n	810422a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8104246:	4b13      	ldr	r3, [pc, #76]	; (8104294 <xTaskResumeAll+0x134>)
 8104248:	2200      	movs	r2, #0
 810424a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810424c:	4b10      	ldr	r3, [pc, #64]	; (8104290 <xTaskResumeAll+0x130>)
 810424e:	681b      	ldr	r3, [r3, #0]
 8104250:	2b00      	cmp	r3, #0
 8104252:	d009      	beq.n	8104268 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8104254:	2301      	movs	r3, #1
 8104256:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8104258:	4b0f      	ldr	r3, [pc, #60]	; (8104298 <xTaskResumeAll+0x138>)
 810425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810425e:	601a      	str	r2, [r3, #0]
 8104260:	f3bf 8f4f 	dsb	sy
 8104264:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8104268:	f7fe f9ac 	bl	81025c4 <vPortExitCritical>

	return xAlreadyYielded;
 810426c:	68bb      	ldr	r3, [r7, #8]
}
 810426e:	4618      	mov	r0, r3
 8104270:	3710      	adds	r7, #16
 8104272:	46bd      	mov	sp, r7
 8104274:	bd80      	pop	{r7, pc}
 8104276:	bf00      	nop
 8104278:	1000ca18 	.word	0x1000ca18
 810427c:	1000c9f0 	.word	0x1000c9f0
 8104280:	1000c9b0 	.word	0x1000c9b0
 8104284:	1000c9f8 	.word	0x1000c9f8
 8104288:	1000c520 	.word	0x1000c520
 810428c:	1000c51c 	.word	0x1000c51c
 8104290:	1000ca04 	.word	0x1000ca04
 8104294:	1000ca00 	.word	0x1000ca00
 8104298:	e000ed04 	.word	0xe000ed04

0810429c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810429c:	b480      	push	{r7}
 810429e:	b083      	sub	sp, #12
 81042a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 81042a2:	4b05      	ldr	r3, [pc, #20]	; (81042b8 <xTaskGetTickCount+0x1c>)
 81042a4:	681b      	ldr	r3, [r3, #0]
 81042a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 81042a8:	687b      	ldr	r3, [r7, #4]
}
 81042aa:	4618      	mov	r0, r3
 81042ac:	370c      	adds	r7, #12
 81042ae:	46bd      	mov	sp, r7
 81042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042b4:	4770      	bx	lr
 81042b6:	bf00      	nop
 81042b8:	1000c9f4 	.word	0x1000c9f4

081042bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81042bc:	b580      	push	{r7, lr}
 81042be:	b086      	sub	sp, #24
 81042c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81042c2:	2300      	movs	r3, #0
 81042c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81042c6:	4b4f      	ldr	r3, [pc, #316]	; (8104404 <xTaskIncrementTick+0x148>)
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	2b00      	cmp	r3, #0
 81042cc:	f040 808f 	bne.w	81043ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81042d0:	4b4d      	ldr	r3, [pc, #308]	; (8104408 <xTaskIncrementTick+0x14c>)
 81042d2:	681b      	ldr	r3, [r3, #0]
 81042d4:	3301      	adds	r3, #1
 81042d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81042d8:	4a4b      	ldr	r2, [pc, #300]	; (8104408 <xTaskIncrementTick+0x14c>)
 81042da:	693b      	ldr	r3, [r7, #16]
 81042dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81042de:	693b      	ldr	r3, [r7, #16]
 81042e0:	2b00      	cmp	r3, #0
 81042e2:	d120      	bne.n	8104326 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 81042e4:	4b49      	ldr	r3, [pc, #292]	; (810440c <xTaskIncrementTick+0x150>)
 81042e6:	681b      	ldr	r3, [r3, #0]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	2b00      	cmp	r3, #0
 81042ec:	d00a      	beq.n	8104304 <xTaskIncrementTick+0x48>
	__asm volatile
 81042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81042f2:	f383 8811 	msr	BASEPRI, r3
 81042f6:	f3bf 8f6f 	isb	sy
 81042fa:	f3bf 8f4f 	dsb	sy
 81042fe:	603b      	str	r3, [r7, #0]
}
 8104300:	bf00      	nop
 8104302:	e7fe      	b.n	8104302 <xTaskIncrementTick+0x46>
 8104304:	4b41      	ldr	r3, [pc, #260]	; (810440c <xTaskIncrementTick+0x150>)
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	60fb      	str	r3, [r7, #12]
 810430a:	4b41      	ldr	r3, [pc, #260]	; (8104410 <xTaskIncrementTick+0x154>)
 810430c:	681b      	ldr	r3, [r3, #0]
 810430e:	4a3f      	ldr	r2, [pc, #252]	; (810440c <xTaskIncrementTick+0x150>)
 8104310:	6013      	str	r3, [r2, #0]
 8104312:	4a3f      	ldr	r2, [pc, #252]	; (8104410 <xTaskIncrementTick+0x154>)
 8104314:	68fb      	ldr	r3, [r7, #12]
 8104316:	6013      	str	r3, [r2, #0]
 8104318:	4b3e      	ldr	r3, [pc, #248]	; (8104414 <xTaskIncrementTick+0x158>)
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	3301      	adds	r3, #1
 810431e:	4a3d      	ldr	r2, [pc, #244]	; (8104414 <xTaskIncrementTick+0x158>)
 8104320:	6013      	str	r3, [r2, #0]
 8104322:	f000 fb01 	bl	8104928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8104326:	4b3c      	ldr	r3, [pc, #240]	; (8104418 <xTaskIncrementTick+0x15c>)
 8104328:	681b      	ldr	r3, [r3, #0]
 810432a:	693a      	ldr	r2, [r7, #16]
 810432c:	429a      	cmp	r2, r3
 810432e:	d349      	bcc.n	81043c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8104330:	4b36      	ldr	r3, [pc, #216]	; (810440c <xTaskIncrementTick+0x150>)
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	2b00      	cmp	r3, #0
 8104338:	d104      	bne.n	8104344 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810433a:	4b37      	ldr	r3, [pc, #220]	; (8104418 <xTaskIncrementTick+0x15c>)
 810433c:	f04f 32ff 	mov.w	r2, #4294967295
 8104340:	601a      	str	r2, [r3, #0]
					break;
 8104342:	e03f      	b.n	81043c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104344:	4b31      	ldr	r3, [pc, #196]	; (810440c <xTaskIncrementTick+0x150>)
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	68db      	ldr	r3, [r3, #12]
 810434a:	68db      	ldr	r3, [r3, #12]
 810434c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810434e:	68bb      	ldr	r3, [r7, #8]
 8104350:	685b      	ldr	r3, [r3, #4]
 8104352:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8104354:	693a      	ldr	r2, [r7, #16]
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	429a      	cmp	r2, r3
 810435a:	d203      	bcs.n	8104364 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810435c:	4a2e      	ldr	r2, [pc, #184]	; (8104418 <xTaskIncrementTick+0x15c>)
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8104362:	e02f      	b.n	81043c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104364:	68bb      	ldr	r3, [r7, #8]
 8104366:	3304      	adds	r3, #4
 8104368:	4618      	mov	r0, r3
 810436a:	f7fd ffa1 	bl	81022b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810436e:	68bb      	ldr	r3, [r7, #8]
 8104370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104372:	2b00      	cmp	r3, #0
 8104374:	d004      	beq.n	8104380 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8104376:	68bb      	ldr	r3, [r7, #8]
 8104378:	3318      	adds	r3, #24
 810437a:	4618      	mov	r0, r3
 810437c:	f7fd ff98 	bl	81022b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8104380:	68bb      	ldr	r3, [r7, #8]
 8104382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104384:	4b25      	ldr	r3, [pc, #148]	; (810441c <xTaskIncrementTick+0x160>)
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	429a      	cmp	r2, r3
 810438a:	d903      	bls.n	8104394 <xTaskIncrementTick+0xd8>
 810438c:	68bb      	ldr	r3, [r7, #8]
 810438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104390:	4a22      	ldr	r2, [pc, #136]	; (810441c <xTaskIncrementTick+0x160>)
 8104392:	6013      	str	r3, [r2, #0]
 8104394:	68bb      	ldr	r3, [r7, #8]
 8104396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104398:	4613      	mov	r3, r2
 810439a:	009b      	lsls	r3, r3, #2
 810439c:	4413      	add	r3, r2
 810439e:	009b      	lsls	r3, r3, #2
 81043a0:	4a1f      	ldr	r2, [pc, #124]	; (8104420 <xTaskIncrementTick+0x164>)
 81043a2:	441a      	add	r2, r3
 81043a4:	68bb      	ldr	r3, [r7, #8]
 81043a6:	3304      	adds	r3, #4
 81043a8:	4619      	mov	r1, r3
 81043aa:	4610      	mov	r0, r2
 81043ac:	f7fd ff23 	bl	81021f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81043b0:	68bb      	ldr	r3, [r7, #8]
 81043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81043b4:	4b1b      	ldr	r3, [pc, #108]	; (8104424 <xTaskIncrementTick+0x168>)
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043ba:	429a      	cmp	r2, r3
 81043bc:	d3b8      	bcc.n	8104330 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 81043be:	2301      	movs	r3, #1
 81043c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81043c2:	e7b5      	b.n	8104330 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81043c4:	4b17      	ldr	r3, [pc, #92]	; (8104424 <xTaskIncrementTick+0x168>)
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81043ca:	4915      	ldr	r1, [pc, #84]	; (8104420 <xTaskIncrementTick+0x164>)
 81043cc:	4613      	mov	r3, r2
 81043ce:	009b      	lsls	r3, r3, #2
 81043d0:	4413      	add	r3, r2
 81043d2:	009b      	lsls	r3, r3, #2
 81043d4:	440b      	add	r3, r1
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	2b01      	cmp	r3, #1
 81043da:	d901      	bls.n	81043e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 81043dc:	2301      	movs	r3, #1
 81043de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81043e0:	4b11      	ldr	r3, [pc, #68]	; (8104428 <xTaskIncrementTick+0x16c>)
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	d007      	beq.n	81043f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 81043e8:	2301      	movs	r3, #1
 81043ea:	617b      	str	r3, [r7, #20]
 81043ec:	e004      	b.n	81043f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81043ee:	4b0f      	ldr	r3, [pc, #60]	; (810442c <xTaskIncrementTick+0x170>)
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	3301      	adds	r3, #1
 81043f4:	4a0d      	ldr	r2, [pc, #52]	; (810442c <xTaskIncrementTick+0x170>)
 81043f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81043f8:	697b      	ldr	r3, [r7, #20]
}
 81043fa:	4618      	mov	r0, r3
 81043fc:	3718      	adds	r7, #24
 81043fe:	46bd      	mov	sp, r7
 8104400:	bd80      	pop	{r7, pc}
 8104402:	bf00      	nop
 8104404:	1000ca18 	.word	0x1000ca18
 8104408:	1000c9f4 	.word	0x1000c9f4
 810440c:	1000c9a8 	.word	0x1000c9a8
 8104410:	1000c9ac 	.word	0x1000c9ac
 8104414:	1000ca08 	.word	0x1000ca08
 8104418:	1000ca10 	.word	0x1000ca10
 810441c:	1000c9f8 	.word	0x1000c9f8
 8104420:	1000c520 	.word	0x1000c520
 8104424:	1000c51c 	.word	0x1000c51c
 8104428:	1000ca04 	.word	0x1000ca04
 810442c:	1000ca00 	.word	0x1000ca00

08104430 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8104430:	b480      	push	{r7}
 8104432:	b085      	sub	sp, #20
 8104434:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8104436:	4b2a      	ldr	r3, [pc, #168]	; (81044e0 <vTaskSwitchContext+0xb0>)
 8104438:	681b      	ldr	r3, [r3, #0]
 810443a:	2b00      	cmp	r3, #0
 810443c:	d003      	beq.n	8104446 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810443e:	4b29      	ldr	r3, [pc, #164]	; (81044e4 <vTaskSwitchContext+0xb4>)
 8104440:	2201      	movs	r2, #1
 8104442:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8104444:	e046      	b.n	81044d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8104446:	4b27      	ldr	r3, [pc, #156]	; (81044e4 <vTaskSwitchContext+0xb4>)
 8104448:	2200      	movs	r2, #0
 810444a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810444c:	4b26      	ldr	r3, [pc, #152]	; (81044e8 <vTaskSwitchContext+0xb8>)
 810444e:	681b      	ldr	r3, [r3, #0]
 8104450:	60fb      	str	r3, [r7, #12]
 8104452:	e010      	b.n	8104476 <vTaskSwitchContext+0x46>
 8104454:	68fb      	ldr	r3, [r7, #12]
 8104456:	2b00      	cmp	r3, #0
 8104458:	d10a      	bne.n	8104470 <vTaskSwitchContext+0x40>
	__asm volatile
 810445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810445e:	f383 8811 	msr	BASEPRI, r3
 8104462:	f3bf 8f6f 	isb	sy
 8104466:	f3bf 8f4f 	dsb	sy
 810446a:	607b      	str	r3, [r7, #4]
}
 810446c:	bf00      	nop
 810446e:	e7fe      	b.n	810446e <vTaskSwitchContext+0x3e>
 8104470:	68fb      	ldr	r3, [r7, #12]
 8104472:	3b01      	subs	r3, #1
 8104474:	60fb      	str	r3, [r7, #12]
 8104476:	491d      	ldr	r1, [pc, #116]	; (81044ec <vTaskSwitchContext+0xbc>)
 8104478:	68fa      	ldr	r2, [r7, #12]
 810447a:	4613      	mov	r3, r2
 810447c:	009b      	lsls	r3, r3, #2
 810447e:	4413      	add	r3, r2
 8104480:	009b      	lsls	r3, r3, #2
 8104482:	440b      	add	r3, r1
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	2b00      	cmp	r3, #0
 8104488:	d0e4      	beq.n	8104454 <vTaskSwitchContext+0x24>
 810448a:	68fa      	ldr	r2, [r7, #12]
 810448c:	4613      	mov	r3, r2
 810448e:	009b      	lsls	r3, r3, #2
 8104490:	4413      	add	r3, r2
 8104492:	009b      	lsls	r3, r3, #2
 8104494:	4a15      	ldr	r2, [pc, #84]	; (81044ec <vTaskSwitchContext+0xbc>)
 8104496:	4413      	add	r3, r2
 8104498:	60bb      	str	r3, [r7, #8]
 810449a:	68bb      	ldr	r3, [r7, #8]
 810449c:	685b      	ldr	r3, [r3, #4]
 810449e:	685a      	ldr	r2, [r3, #4]
 81044a0:	68bb      	ldr	r3, [r7, #8]
 81044a2:	605a      	str	r2, [r3, #4]
 81044a4:	68bb      	ldr	r3, [r7, #8]
 81044a6:	685a      	ldr	r2, [r3, #4]
 81044a8:	68bb      	ldr	r3, [r7, #8]
 81044aa:	3308      	adds	r3, #8
 81044ac:	429a      	cmp	r2, r3
 81044ae:	d104      	bne.n	81044ba <vTaskSwitchContext+0x8a>
 81044b0:	68bb      	ldr	r3, [r7, #8]
 81044b2:	685b      	ldr	r3, [r3, #4]
 81044b4:	685a      	ldr	r2, [r3, #4]
 81044b6:	68bb      	ldr	r3, [r7, #8]
 81044b8:	605a      	str	r2, [r3, #4]
 81044ba:	68bb      	ldr	r3, [r7, #8]
 81044bc:	685b      	ldr	r3, [r3, #4]
 81044be:	68db      	ldr	r3, [r3, #12]
 81044c0:	4a0b      	ldr	r2, [pc, #44]	; (81044f0 <vTaskSwitchContext+0xc0>)
 81044c2:	6013      	str	r3, [r2, #0]
 81044c4:	4a08      	ldr	r2, [pc, #32]	; (81044e8 <vTaskSwitchContext+0xb8>)
 81044c6:	68fb      	ldr	r3, [r7, #12]
 81044c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81044ca:	4b09      	ldr	r3, [pc, #36]	; (81044f0 <vTaskSwitchContext+0xc0>)
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	3354      	adds	r3, #84	; 0x54
 81044d0:	4a08      	ldr	r2, [pc, #32]	; (81044f4 <vTaskSwitchContext+0xc4>)
 81044d2:	6013      	str	r3, [r2, #0]
}
 81044d4:	bf00      	nop
 81044d6:	3714      	adds	r7, #20
 81044d8:	46bd      	mov	sp, r7
 81044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044de:	4770      	bx	lr
 81044e0:	1000ca18 	.word	0x1000ca18
 81044e4:	1000ca04 	.word	0x1000ca04
 81044e8:	1000c9f8 	.word	0x1000c9f8
 81044ec:	1000c520 	.word	0x1000c520
 81044f0:	1000c51c 	.word	0x1000c51c
 81044f4:	10000018 	.word	0x10000018

081044f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81044f8:	b580      	push	{r7, lr}
 81044fa:	b084      	sub	sp, #16
 81044fc:	af00      	add	r7, sp, #0
 81044fe:	6078      	str	r0, [r7, #4]
 8104500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	2b00      	cmp	r3, #0
 8104506:	d10a      	bne.n	810451e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8104508:	f04f 0350 	mov.w	r3, #80	; 0x50
 810450c:	f383 8811 	msr	BASEPRI, r3
 8104510:	f3bf 8f6f 	isb	sy
 8104514:	f3bf 8f4f 	dsb	sy
 8104518:	60fb      	str	r3, [r7, #12]
}
 810451a:	bf00      	nop
 810451c:	e7fe      	b.n	810451c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810451e:	4b07      	ldr	r3, [pc, #28]	; (810453c <vTaskPlaceOnEventList+0x44>)
 8104520:	681b      	ldr	r3, [r3, #0]
 8104522:	3318      	adds	r3, #24
 8104524:	4619      	mov	r1, r3
 8104526:	6878      	ldr	r0, [r7, #4]
 8104528:	f7fd fe89 	bl	810223e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810452c:	2101      	movs	r1, #1
 810452e:	6838      	ldr	r0, [r7, #0]
 8104530:	f000 fddc 	bl	81050ec <prvAddCurrentTaskToDelayedList>
}
 8104534:	bf00      	nop
 8104536:	3710      	adds	r7, #16
 8104538:	46bd      	mov	sp, r7
 810453a:	bd80      	pop	{r7, pc}
 810453c:	1000c51c 	.word	0x1000c51c

08104540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8104540:	b580      	push	{r7, lr}
 8104542:	b086      	sub	sp, #24
 8104544:	af00      	add	r7, sp, #0
 8104546:	60f8      	str	r0, [r7, #12]
 8104548:	60b9      	str	r1, [r7, #8]
 810454a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810454c:	68fb      	ldr	r3, [r7, #12]
 810454e:	2b00      	cmp	r3, #0
 8104550:	d10a      	bne.n	8104568 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8104552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104556:	f383 8811 	msr	BASEPRI, r3
 810455a:	f3bf 8f6f 	isb	sy
 810455e:	f3bf 8f4f 	dsb	sy
 8104562:	617b      	str	r3, [r7, #20]
}
 8104564:	bf00      	nop
 8104566:	e7fe      	b.n	8104566 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8104568:	4b0a      	ldr	r3, [pc, #40]	; (8104594 <vTaskPlaceOnEventListRestricted+0x54>)
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	3318      	adds	r3, #24
 810456e:	4619      	mov	r1, r3
 8104570:	68f8      	ldr	r0, [r7, #12]
 8104572:	f7fd fe40 	bl	81021f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	2b00      	cmp	r3, #0
 810457a:	d002      	beq.n	8104582 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 810457c:	f04f 33ff 	mov.w	r3, #4294967295
 8104580:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8104582:	6879      	ldr	r1, [r7, #4]
 8104584:	68b8      	ldr	r0, [r7, #8]
 8104586:	f000 fdb1 	bl	81050ec <prvAddCurrentTaskToDelayedList>
	}
 810458a:	bf00      	nop
 810458c:	3718      	adds	r7, #24
 810458e:	46bd      	mov	sp, r7
 8104590:	bd80      	pop	{r7, pc}
 8104592:	bf00      	nop
 8104594:	1000c51c 	.word	0x1000c51c

08104598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8104598:	b580      	push	{r7, lr}
 810459a:	b086      	sub	sp, #24
 810459c:	af00      	add	r7, sp, #0
 810459e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	68db      	ldr	r3, [r3, #12]
 81045a4:	68db      	ldr	r3, [r3, #12]
 81045a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 81045a8:	693b      	ldr	r3, [r7, #16]
 81045aa:	2b00      	cmp	r3, #0
 81045ac:	d10a      	bne.n	81045c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 81045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 81045b2:	f383 8811 	msr	BASEPRI, r3
 81045b6:	f3bf 8f6f 	isb	sy
 81045ba:	f3bf 8f4f 	dsb	sy
 81045be:	60fb      	str	r3, [r7, #12]
}
 81045c0:	bf00      	nop
 81045c2:	e7fe      	b.n	81045c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 81045c4:	693b      	ldr	r3, [r7, #16]
 81045c6:	3318      	adds	r3, #24
 81045c8:	4618      	mov	r0, r3
 81045ca:	f7fd fe71 	bl	81022b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81045ce:	4b1e      	ldr	r3, [pc, #120]	; (8104648 <xTaskRemoveFromEventList+0xb0>)
 81045d0:	681b      	ldr	r3, [r3, #0]
 81045d2:	2b00      	cmp	r3, #0
 81045d4:	d11d      	bne.n	8104612 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81045d6:	693b      	ldr	r3, [r7, #16]
 81045d8:	3304      	adds	r3, #4
 81045da:	4618      	mov	r0, r3
 81045dc:	f7fd fe68 	bl	81022b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81045e0:	693b      	ldr	r3, [r7, #16]
 81045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81045e4:	4b19      	ldr	r3, [pc, #100]	; (810464c <xTaskRemoveFromEventList+0xb4>)
 81045e6:	681b      	ldr	r3, [r3, #0]
 81045e8:	429a      	cmp	r2, r3
 81045ea:	d903      	bls.n	81045f4 <xTaskRemoveFromEventList+0x5c>
 81045ec:	693b      	ldr	r3, [r7, #16]
 81045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045f0:	4a16      	ldr	r2, [pc, #88]	; (810464c <xTaskRemoveFromEventList+0xb4>)
 81045f2:	6013      	str	r3, [r2, #0]
 81045f4:	693b      	ldr	r3, [r7, #16]
 81045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81045f8:	4613      	mov	r3, r2
 81045fa:	009b      	lsls	r3, r3, #2
 81045fc:	4413      	add	r3, r2
 81045fe:	009b      	lsls	r3, r3, #2
 8104600:	4a13      	ldr	r2, [pc, #76]	; (8104650 <xTaskRemoveFromEventList+0xb8>)
 8104602:	441a      	add	r2, r3
 8104604:	693b      	ldr	r3, [r7, #16]
 8104606:	3304      	adds	r3, #4
 8104608:	4619      	mov	r1, r3
 810460a:	4610      	mov	r0, r2
 810460c:	f7fd fdf3 	bl	81021f6 <vListInsertEnd>
 8104610:	e005      	b.n	810461e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8104612:	693b      	ldr	r3, [r7, #16]
 8104614:	3318      	adds	r3, #24
 8104616:	4619      	mov	r1, r3
 8104618:	480e      	ldr	r0, [pc, #56]	; (8104654 <xTaskRemoveFromEventList+0xbc>)
 810461a:	f7fd fdec 	bl	81021f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810461e:	693b      	ldr	r3, [r7, #16]
 8104620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104622:	4b0d      	ldr	r3, [pc, #52]	; (8104658 <xTaskRemoveFromEventList+0xc0>)
 8104624:	681b      	ldr	r3, [r3, #0]
 8104626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104628:	429a      	cmp	r2, r3
 810462a:	d905      	bls.n	8104638 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810462c:	2301      	movs	r3, #1
 810462e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8104630:	4b0a      	ldr	r3, [pc, #40]	; (810465c <xTaskRemoveFromEventList+0xc4>)
 8104632:	2201      	movs	r2, #1
 8104634:	601a      	str	r2, [r3, #0]
 8104636:	e001      	b.n	810463c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8104638:	2300      	movs	r3, #0
 810463a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810463c:	697b      	ldr	r3, [r7, #20]
}
 810463e:	4618      	mov	r0, r3
 8104640:	3718      	adds	r7, #24
 8104642:	46bd      	mov	sp, r7
 8104644:	bd80      	pop	{r7, pc}
 8104646:	bf00      	nop
 8104648:	1000ca18 	.word	0x1000ca18
 810464c:	1000c9f8 	.word	0x1000c9f8
 8104650:	1000c520 	.word	0x1000c520
 8104654:	1000c9b0 	.word	0x1000c9b0
 8104658:	1000c51c 	.word	0x1000c51c
 810465c:	1000ca04 	.word	0x1000ca04

08104660 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8104660:	b580      	push	{r7, lr}
 8104662:	b084      	sub	sp, #16
 8104664:	af00      	add	r7, sp, #0
 8104666:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	2b00      	cmp	r3, #0
 810466c:	d10a      	bne.n	8104684 <vTaskSetTimeOutState+0x24>
	__asm volatile
 810466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104672:	f383 8811 	msr	BASEPRI, r3
 8104676:	f3bf 8f6f 	isb	sy
 810467a:	f3bf 8f4f 	dsb	sy
 810467e:	60fb      	str	r3, [r7, #12]
}
 8104680:	bf00      	nop
 8104682:	e7fe      	b.n	8104682 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8104684:	f7fd ff6e 	bl	8102564 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8104688:	4b06      	ldr	r3, [pc, #24]	; (81046a4 <vTaskSetTimeOutState+0x44>)
 810468a:	681a      	ldr	r2, [r3, #0]
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8104690:	4b05      	ldr	r3, [pc, #20]	; (81046a8 <vTaskSetTimeOutState+0x48>)
 8104692:	681a      	ldr	r2, [r3, #0]
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8104698:	f7fd ff94 	bl	81025c4 <vPortExitCritical>
}
 810469c:	bf00      	nop
 810469e:	3710      	adds	r7, #16
 81046a0:	46bd      	mov	sp, r7
 81046a2:	bd80      	pop	{r7, pc}
 81046a4:	1000ca08 	.word	0x1000ca08
 81046a8:	1000c9f4 	.word	0x1000c9f4

081046ac <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81046ac:	b480      	push	{r7}
 81046ae:	b083      	sub	sp, #12
 81046b0:	af00      	add	r7, sp, #0
 81046b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 81046b4:	4b06      	ldr	r3, [pc, #24]	; (81046d0 <vTaskInternalSetTimeOutState+0x24>)
 81046b6:	681a      	ldr	r2, [r3, #0]
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 81046bc:	4b05      	ldr	r3, [pc, #20]	; (81046d4 <vTaskInternalSetTimeOutState+0x28>)
 81046be:	681a      	ldr	r2, [r3, #0]
 81046c0:	687b      	ldr	r3, [r7, #4]
 81046c2:	605a      	str	r2, [r3, #4]
}
 81046c4:	bf00      	nop
 81046c6:	370c      	adds	r7, #12
 81046c8:	46bd      	mov	sp, r7
 81046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046ce:	4770      	bx	lr
 81046d0:	1000ca08 	.word	0x1000ca08
 81046d4:	1000c9f4 	.word	0x1000c9f4

081046d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 81046d8:	b580      	push	{r7, lr}
 81046da:	b088      	sub	sp, #32
 81046dc:	af00      	add	r7, sp, #0
 81046de:	6078      	str	r0, [r7, #4]
 81046e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	2b00      	cmp	r3, #0
 81046e6:	d10a      	bne.n	81046fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 81046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81046ec:	f383 8811 	msr	BASEPRI, r3
 81046f0:	f3bf 8f6f 	isb	sy
 81046f4:	f3bf 8f4f 	dsb	sy
 81046f8:	613b      	str	r3, [r7, #16]
}
 81046fa:	bf00      	nop
 81046fc:	e7fe      	b.n	81046fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 81046fe:	683b      	ldr	r3, [r7, #0]
 8104700:	2b00      	cmp	r3, #0
 8104702:	d10a      	bne.n	810471a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8104704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104708:	f383 8811 	msr	BASEPRI, r3
 810470c:	f3bf 8f6f 	isb	sy
 8104710:	f3bf 8f4f 	dsb	sy
 8104714:	60fb      	str	r3, [r7, #12]
}
 8104716:	bf00      	nop
 8104718:	e7fe      	b.n	8104718 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 810471a:	f7fd ff23 	bl	8102564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810471e:	4b1d      	ldr	r3, [pc, #116]	; (8104794 <xTaskCheckForTimeOut+0xbc>)
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	685b      	ldr	r3, [r3, #4]
 8104728:	69ba      	ldr	r2, [r7, #24]
 810472a:	1ad3      	subs	r3, r2, r3
 810472c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810472e:	683b      	ldr	r3, [r7, #0]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104736:	d102      	bne.n	810473e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8104738:	2300      	movs	r3, #0
 810473a:	61fb      	str	r3, [r7, #28]
 810473c:	e023      	b.n	8104786 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	681a      	ldr	r2, [r3, #0]
 8104742:	4b15      	ldr	r3, [pc, #84]	; (8104798 <xTaskCheckForTimeOut+0xc0>)
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	429a      	cmp	r2, r3
 8104748:	d007      	beq.n	810475a <xTaskCheckForTimeOut+0x82>
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	685b      	ldr	r3, [r3, #4]
 810474e:	69ba      	ldr	r2, [r7, #24]
 8104750:	429a      	cmp	r2, r3
 8104752:	d302      	bcc.n	810475a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8104754:	2301      	movs	r3, #1
 8104756:	61fb      	str	r3, [r7, #28]
 8104758:	e015      	b.n	8104786 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810475a:	683b      	ldr	r3, [r7, #0]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	697a      	ldr	r2, [r7, #20]
 8104760:	429a      	cmp	r2, r3
 8104762:	d20b      	bcs.n	810477c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8104764:	683b      	ldr	r3, [r7, #0]
 8104766:	681a      	ldr	r2, [r3, #0]
 8104768:	697b      	ldr	r3, [r7, #20]
 810476a:	1ad2      	subs	r2, r2, r3
 810476c:	683b      	ldr	r3, [r7, #0]
 810476e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8104770:	6878      	ldr	r0, [r7, #4]
 8104772:	f7ff ff9b 	bl	81046ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8104776:	2300      	movs	r3, #0
 8104778:	61fb      	str	r3, [r7, #28]
 810477a:	e004      	b.n	8104786 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 810477c:	683b      	ldr	r3, [r7, #0]
 810477e:	2200      	movs	r2, #0
 8104780:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8104782:	2301      	movs	r3, #1
 8104784:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8104786:	f7fd ff1d 	bl	81025c4 <vPortExitCritical>

	return xReturn;
 810478a:	69fb      	ldr	r3, [r7, #28]
}
 810478c:	4618      	mov	r0, r3
 810478e:	3720      	adds	r7, #32
 8104790:	46bd      	mov	sp, r7
 8104792:	bd80      	pop	{r7, pc}
 8104794:	1000c9f4 	.word	0x1000c9f4
 8104798:	1000ca08 	.word	0x1000ca08

0810479c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810479c:	b480      	push	{r7}
 810479e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 81047a0:	4b03      	ldr	r3, [pc, #12]	; (81047b0 <vTaskMissedYield+0x14>)
 81047a2:	2201      	movs	r2, #1
 81047a4:	601a      	str	r2, [r3, #0]
}
 81047a6:	bf00      	nop
 81047a8:	46bd      	mov	sp, r7
 81047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047ae:	4770      	bx	lr
 81047b0:	1000ca04 	.word	0x1000ca04

081047b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 81047b4:	b580      	push	{r7, lr}
 81047b6:	b082      	sub	sp, #8
 81047b8:	af00      	add	r7, sp, #0
 81047ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 81047bc:	f000 f852 	bl	8104864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 81047c0:	4b06      	ldr	r3, [pc, #24]	; (81047dc <prvIdleTask+0x28>)
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	2b01      	cmp	r3, #1
 81047c6:	d9f9      	bls.n	81047bc <prvIdleTask+0x8>
			{
				taskYIELD();
 81047c8:	4b05      	ldr	r3, [pc, #20]	; (81047e0 <prvIdleTask+0x2c>)
 81047ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81047ce:	601a      	str	r2, [r3, #0]
 81047d0:	f3bf 8f4f 	dsb	sy
 81047d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 81047d8:	e7f0      	b.n	81047bc <prvIdleTask+0x8>
 81047da:	bf00      	nop
 81047dc:	1000c520 	.word	0x1000c520
 81047e0:	e000ed04 	.word	0xe000ed04

081047e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 81047e4:	b580      	push	{r7, lr}
 81047e6:	b082      	sub	sp, #8
 81047e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 81047ea:	2300      	movs	r3, #0
 81047ec:	607b      	str	r3, [r7, #4]
 81047ee:	e00c      	b.n	810480a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 81047f0:	687a      	ldr	r2, [r7, #4]
 81047f2:	4613      	mov	r3, r2
 81047f4:	009b      	lsls	r3, r3, #2
 81047f6:	4413      	add	r3, r2
 81047f8:	009b      	lsls	r3, r3, #2
 81047fa:	4a12      	ldr	r2, [pc, #72]	; (8104844 <prvInitialiseTaskLists+0x60>)
 81047fc:	4413      	add	r3, r2
 81047fe:	4618      	mov	r0, r3
 8104800:	f7fd fccc 	bl	810219c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	3301      	adds	r3, #1
 8104808:	607b      	str	r3, [r7, #4]
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	2b37      	cmp	r3, #55	; 0x37
 810480e:	d9ef      	bls.n	81047f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8104810:	480d      	ldr	r0, [pc, #52]	; (8104848 <prvInitialiseTaskLists+0x64>)
 8104812:	f7fd fcc3 	bl	810219c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8104816:	480d      	ldr	r0, [pc, #52]	; (810484c <prvInitialiseTaskLists+0x68>)
 8104818:	f7fd fcc0 	bl	810219c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810481c:	480c      	ldr	r0, [pc, #48]	; (8104850 <prvInitialiseTaskLists+0x6c>)
 810481e:	f7fd fcbd 	bl	810219c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8104822:	480c      	ldr	r0, [pc, #48]	; (8104854 <prvInitialiseTaskLists+0x70>)
 8104824:	f7fd fcba 	bl	810219c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8104828:	480b      	ldr	r0, [pc, #44]	; (8104858 <prvInitialiseTaskLists+0x74>)
 810482a:	f7fd fcb7 	bl	810219c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810482e:	4b0b      	ldr	r3, [pc, #44]	; (810485c <prvInitialiseTaskLists+0x78>)
 8104830:	4a05      	ldr	r2, [pc, #20]	; (8104848 <prvInitialiseTaskLists+0x64>)
 8104832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8104834:	4b0a      	ldr	r3, [pc, #40]	; (8104860 <prvInitialiseTaskLists+0x7c>)
 8104836:	4a05      	ldr	r2, [pc, #20]	; (810484c <prvInitialiseTaskLists+0x68>)
 8104838:	601a      	str	r2, [r3, #0]
}
 810483a:	bf00      	nop
 810483c:	3708      	adds	r7, #8
 810483e:	46bd      	mov	sp, r7
 8104840:	bd80      	pop	{r7, pc}
 8104842:	bf00      	nop
 8104844:	1000c520 	.word	0x1000c520
 8104848:	1000c980 	.word	0x1000c980
 810484c:	1000c994 	.word	0x1000c994
 8104850:	1000c9b0 	.word	0x1000c9b0
 8104854:	1000c9c4 	.word	0x1000c9c4
 8104858:	1000c9dc 	.word	0x1000c9dc
 810485c:	1000c9a8 	.word	0x1000c9a8
 8104860:	1000c9ac 	.word	0x1000c9ac

08104864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8104864:	b580      	push	{r7, lr}
 8104866:	b082      	sub	sp, #8
 8104868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810486a:	e019      	b.n	81048a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810486c:	f7fd fe7a 	bl	8102564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104870:	4b10      	ldr	r3, [pc, #64]	; (81048b4 <prvCheckTasksWaitingTermination+0x50>)
 8104872:	68db      	ldr	r3, [r3, #12]
 8104874:	68db      	ldr	r3, [r3, #12]
 8104876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	3304      	adds	r3, #4
 810487c:	4618      	mov	r0, r3
 810487e:	f7fd fd17 	bl	81022b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8104882:	4b0d      	ldr	r3, [pc, #52]	; (81048b8 <prvCheckTasksWaitingTermination+0x54>)
 8104884:	681b      	ldr	r3, [r3, #0]
 8104886:	3b01      	subs	r3, #1
 8104888:	4a0b      	ldr	r2, [pc, #44]	; (81048b8 <prvCheckTasksWaitingTermination+0x54>)
 810488a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810488c:	4b0b      	ldr	r3, [pc, #44]	; (81048bc <prvCheckTasksWaitingTermination+0x58>)
 810488e:	681b      	ldr	r3, [r3, #0]
 8104890:	3b01      	subs	r3, #1
 8104892:	4a0a      	ldr	r2, [pc, #40]	; (81048bc <prvCheckTasksWaitingTermination+0x58>)
 8104894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8104896:	f7fd fe95 	bl	81025c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810489a:	6878      	ldr	r0, [r7, #4]
 810489c:	f000 f810 	bl	81048c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81048a0:	4b06      	ldr	r3, [pc, #24]	; (81048bc <prvCheckTasksWaitingTermination+0x58>)
 81048a2:	681b      	ldr	r3, [r3, #0]
 81048a4:	2b00      	cmp	r3, #0
 81048a6:	d1e1      	bne.n	810486c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81048a8:	bf00      	nop
 81048aa:	bf00      	nop
 81048ac:	3708      	adds	r7, #8
 81048ae:	46bd      	mov	sp, r7
 81048b0:	bd80      	pop	{r7, pc}
 81048b2:	bf00      	nop
 81048b4:	1000c9c4 	.word	0x1000c9c4
 81048b8:	1000c9f0 	.word	0x1000c9f0
 81048bc:	1000c9d8 	.word	0x1000c9d8

081048c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81048c0:	b580      	push	{r7, lr}
 81048c2:	b084      	sub	sp, #16
 81048c4:	af00      	add	r7, sp, #0
 81048c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	3354      	adds	r3, #84	; 0x54
 81048cc:	4618      	mov	r0, r3
 81048ce:	f001 f893 	bl	81059f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 81048d8:	2b00      	cmp	r3, #0
 81048da:	d108      	bne.n	81048ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81048e0:	4618      	mov	r0, r3
 81048e2:	f7fd fb3d 	bl	8101f60 <vPortFree>
				vPortFree( pxTCB );
 81048e6:	6878      	ldr	r0, [r7, #4]
 81048e8:	f7fd fb3a 	bl	8101f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 81048ec:	e018      	b.n	8104920 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 81048ee:	687b      	ldr	r3, [r7, #4]
 81048f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 81048f4:	2b01      	cmp	r3, #1
 81048f6:	d103      	bne.n	8104900 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 81048f8:	6878      	ldr	r0, [r7, #4]
 81048fa:	f7fd fb31 	bl	8101f60 <vPortFree>
	}
 81048fe:	e00f      	b.n	8104920 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8104900:	687b      	ldr	r3, [r7, #4]
 8104902:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8104906:	2b02      	cmp	r3, #2
 8104908:	d00a      	beq.n	8104920 <prvDeleteTCB+0x60>
	__asm volatile
 810490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810490e:	f383 8811 	msr	BASEPRI, r3
 8104912:	f3bf 8f6f 	isb	sy
 8104916:	f3bf 8f4f 	dsb	sy
 810491a:	60fb      	str	r3, [r7, #12]
}
 810491c:	bf00      	nop
 810491e:	e7fe      	b.n	810491e <prvDeleteTCB+0x5e>
	}
 8104920:	bf00      	nop
 8104922:	3710      	adds	r7, #16
 8104924:	46bd      	mov	sp, r7
 8104926:	bd80      	pop	{r7, pc}

08104928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8104928:	b480      	push	{r7}
 810492a:	b083      	sub	sp, #12
 810492c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810492e:	4b0c      	ldr	r3, [pc, #48]	; (8104960 <prvResetNextTaskUnblockTime+0x38>)
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	681b      	ldr	r3, [r3, #0]
 8104934:	2b00      	cmp	r3, #0
 8104936:	d104      	bne.n	8104942 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8104938:	4b0a      	ldr	r3, [pc, #40]	; (8104964 <prvResetNextTaskUnblockTime+0x3c>)
 810493a:	f04f 32ff 	mov.w	r2, #4294967295
 810493e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8104940:	e008      	b.n	8104954 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104942:	4b07      	ldr	r3, [pc, #28]	; (8104960 <prvResetNextTaskUnblockTime+0x38>)
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	68db      	ldr	r3, [r3, #12]
 8104948:	68db      	ldr	r3, [r3, #12]
 810494a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	685b      	ldr	r3, [r3, #4]
 8104950:	4a04      	ldr	r2, [pc, #16]	; (8104964 <prvResetNextTaskUnblockTime+0x3c>)
 8104952:	6013      	str	r3, [r2, #0]
}
 8104954:	bf00      	nop
 8104956:	370c      	adds	r7, #12
 8104958:	46bd      	mov	sp, r7
 810495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810495e:	4770      	bx	lr
 8104960:	1000c9a8 	.word	0x1000c9a8
 8104964:	1000ca10 	.word	0x1000ca10

08104968 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8104968:	b480      	push	{r7}
 810496a:	b083      	sub	sp, #12
 810496c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 810496e:	4b05      	ldr	r3, [pc, #20]	; (8104984 <xTaskGetCurrentTaskHandle+0x1c>)
 8104970:	681b      	ldr	r3, [r3, #0]
 8104972:	607b      	str	r3, [r7, #4]

		return xReturn;
 8104974:	687b      	ldr	r3, [r7, #4]
	}
 8104976:	4618      	mov	r0, r3
 8104978:	370c      	adds	r7, #12
 810497a:	46bd      	mov	sp, r7
 810497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104980:	4770      	bx	lr
 8104982:	bf00      	nop
 8104984:	1000c51c 	.word	0x1000c51c

08104988 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8104988:	b480      	push	{r7}
 810498a:	b083      	sub	sp, #12
 810498c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810498e:	4b0b      	ldr	r3, [pc, #44]	; (81049bc <xTaskGetSchedulerState+0x34>)
 8104990:	681b      	ldr	r3, [r3, #0]
 8104992:	2b00      	cmp	r3, #0
 8104994:	d102      	bne.n	810499c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8104996:	2301      	movs	r3, #1
 8104998:	607b      	str	r3, [r7, #4]
 810499a:	e008      	b.n	81049ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810499c:	4b08      	ldr	r3, [pc, #32]	; (81049c0 <xTaskGetSchedulerState+0x38>)
 810499e:	681b      	ldr	r3, [r3, #0]
 81049a0:	2b00      	cmp	r3, #0
 81049a2:	d102      	bne.n	81049aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81049a4:	2302      	movs	r3, #2
 81049a6:	607b      	str	r3, [r7, #4]
 81049a8:	e001      	b.n	81049ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81049aa:	2300      	movs	r3, #0
 81049ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81049ae:	687b      	ldr	r3, [r7, #4]
	}
 81049b0:	4618      	mov	r0, r3
 81049b2:	370c      	adds	r7, #12
 81049b4:	46bd      	mov	sp, r7
 81049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049ba:	4770      	bx	lr
 81049bc:	1000c9fc 	.word	0x1000c9fc
 81049c0:	1000ca18 	.word	0x1000ca18

081049c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 81049c4:	b580      	push	{r7, lr}
 81049c6:	b084      	sub	sp, #16
 81049c8:	af00      	add	r7, sp, #0
 81049ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 81049cc:	687b      	ldr	r3, [r7, #4]
 81049ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 81049d0:	2300      	movs	r3, #0
 81049d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	2b00      	cmp	r3, #0
 81049d8:	d051      	beq.n	8104a7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 81049da:	68bb      	ldr	r3, [r7, #8]
 81049dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81049de:	4b2a      	ldr	r3, [pc, #168]	; (8104a88 <xTaskPriorityInherit+0xc4>)
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049e4:	429a      	cmp	r2, r3
 81049e6:	d241      	bcs.n	8104a6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 81049e8:	68bb      	ldr	r3, [r7, #8]
 81049ea:	699b      	ldr	r3, [r3, #24]
 81049ec:	2b00      	cmp	r3, #0
 81049ee:	db06      	blt.n	81049fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81049f0:	4b25      	ldr	r3, [pc, #148]	; (8104a88 <xTaskPriorityInherit+0xc4>)
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81049fa:	68bb      	ldr	r3, [r7, #8]
 81049fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 81049fe:	68bb      	ldr	r3, [r7, #8]
 8104a00:	6959      	ldr	r1, [r3, #20]
 8104a02:	68bb      	ldr	r3, [r7, #8]
 8104a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104a06:	4613      	mov	r3, r2
 8104a08:	009b      	lsls	r3, r3, #2
 8104a0a:	4413      	add	r3, r2
 8104a0c:	009b      	lsls	r3, r3, #2
 8104a0e:	4a1f      	ldr	r2, [pc, #124]	; (8104a8c <xTaskPriorityInherit+0xc8>)
 8104a10:	4413      	add	r3, r2
 8104a12:	4299      	cmp	r1, r3
 8104a14:	d122      	bne.n	8104a5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8104a16:	68bb      	ldr	r3, [r7, #8]
 8104a18:	3304      	adds	r3, #4
 8104a1a:	4618      	mov	r0, r3
 8104a1c:	f7fd fc48 	bl	81022b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8104a20:	4b19      	ldr	r3, [pc, #100]	; (8104a88 <xTaskPriorityInherit+0xc4>)
 8104a22:	681b      	ldr	r3, [r3, #0]
 8104a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104a26:	68bb      	ldr	r3, [r7, #8]
 8104a28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8104a2a:	68bb      	ldr	r3, [r7, #8]
 8104a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104a2e:	4b18      	ldr	r3, [pc, #96]	; (8104a90 <xTaskPriorityInherit+0xcc>)
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	429a      	cmp	r2, r3
 8104a34:	d903      	bls.n	8104a3e <xTaskPriorityInherit+0x7a>
 8104a36:	68bb      	ldr	r3, [r7, #8]
 8104a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a3a:	4a15      	ldr	r2, [pc, #84]	; (8104a90 <xTaskPriorityInherit+0xcc>)
 8104a3c:	6013      	str	r3, [r2, #0]
 8104a3e:	68bb      	ldr	r3, [r7, #8]
 8104a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104a42:	4613      	mov	r3, r2
 8104a44:	009b      	lsls	r3, r3, #2
 8104a46:	4413      	add	r3, r2
 8104a48:	009b      	lsls	r3, r3, #2
 8104a4a:	4a10      	ldr	r2, [pc, #64]	; (8104a8c <xTaskPriorityInherit+0xc8>)
 8104a4c:	441a      	add	r2, r3
 8104a4e:	68bb      	ldr	r3, [r7, #8]
 8104a50:	3304      	adds	r3, #4
 8104a52:	4619      	mov	r1, r3
 8104a54:	4610      	mov	r0, r2
 8104a56:	f7fd fbce 	bl	81021f6 <vListInsertEnd>
 8104a5a:	e004      	b.n	8104a66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8104a5c:	4b0a      	ldr	r3, [pc, #40]	; (8104a88 <xTaskPriorityInherit+0xc4>)
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104a62:	68bb      	ldr	r3, [r7, #8]
 8104a64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8104a66:	2301      	movs	r3, #1
 8104a68:	60fb      	str	r3, [r7, #12]
 8104a6a:	e008      	b.n	8104a7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8104a6c:	68bb      	ldr	r3, [r7, #8]
 8104a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8104a70:	4b05      	ldr	r3, [pc, #20]	; (8104a88 <xTaskPriorityInherit+0xc4>)
 8104a72:	681b      	ldr	r3, [r3, #0]
 8104a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a76:	429a      	cmp	r2, r3
 8104a78:	d201      	bcs.n	8104a7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8104a7a:	2301      	movs	r3, #1
 8104a7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8104a7e:	68fb      	ldr	r3, [r7, #12]
	}
 8104a80:	4618      	mov	r0, r3
 8104a82:	3710      	adds	r7, #16
 8104a84:	46bd      	mov	sp, r7
 8104a86:	bd80      	pop	{r7, pc}
 8104a88:	1000c51c 	.word	0x1000c51c
 8104a8c:	1000c520 	.word	0x1000c520
 8104a90:	1000c9f8 	.word	0x1000c9f8

08104a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8104a94:	b580      	push	{r7, lr}
 8104a96:	b086      	sub	sp, #24
 8104a98:	af00      	add	r7, sp, #0
 8104a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8104aa0:	2300      	movs	r3, #0
 8104aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	2b00      	cmp	r3, #0
 8104aa8:	d056      	beq.n	8104b58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8104aaa:	4b2e      	ldr	r3, [pc, #184]	; (8104b64 <xTaskPriorityDisinherit+0xd0>)
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	693a      	ldr	r2, [r7, #16]
 8104ab0:	429a      	cmp	r2, r3
 8104ab2:	d00a      	beq.n	8104aca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8104ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104ab8:	f383 8811 	msr	BASEPRI, r3
 8104abc:	f3bf 8f6f 	isb	sy
 8104ac0:	f3bf 8f4f 	dsb	sy
 8104ac4:	60fb      	str	r3, [r7, #12]
}
 8104ac6:	bf00      	nop
 8104ac8:	e7fe      	b.n	8104ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8104aca:	693b      	ldr	r3, [r7, #16]
 8104acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ace:	2b00      	cmp	r3, #0
 8104ad0:	d10a      	bne.n	8104ae8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8104ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104ad6:	f383 8811 	msr	BASEPRI, r3
 8104ada:	f3bf 8f6f 	isb	sy
 8104ade:	f3bf 8f4f 	dsb	sy
 8104ae2:	60bb      	str	r3, [r7, #8]
}
 8104ae4:	bf00      	nop
 8104ae6:	e7fe      	b.n	8104ae6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8104ae8:	693b      	ldr	r3, [r7, #16]
 8104aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104aec:	1e5a      	subs	r2, r3, #1
 8104aee:	693b      	ldr	r3, [r7, #16]
 8104af0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8104af2:	693b      	ldr	r3, [r7, #16]
 8104af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104af6:	693b      	ldr	r3, [r7, #16]
 8104af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104afa:	429a      	cmp	r2, r3
 8104afc:	d02c      	beq.n	8104b58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8104afe:	693b      	ldr	r3, [r7, #16]
 8104b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104b02:	2b00      	cmp	r3, #0
 8104b04:	d128      	bne.n	8104b58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8104b06:	693b      	ldr	r3, [r7, #16]
 8104b08:	3304      	adds	r3, #4
 8104b0a:	4618      	mov	r0, r3
 8104b0c:	f7fd fbd0 	bl	81022b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8104b10:	693b      	ldr	r3, [r7, #16]
 8104b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8104b14:	693b      	ldr	r3, [r7, #16]
 8104b16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104b18:	693b      	ldr	r3, [r7, #16]
 8104b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8104b20:	693b      	ldr	r3, [r7, #16]
 8104b22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8104b24:	693b      	ldr	r3, [r7, #16]
 8104b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104b28:	4b0f      	ldr	r3, [pc, #60]	; (8104b68 <xTaskPriorityDisinherit+0xd4>)
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	429a      	cmp	r2, r3
 8104b2e:	d903      	bls.n	8104b38 <xTaskPriorityDisinherit+0xa4>
 8104b30:	693b      	ldr	r3, [r7, #16]
 8104b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b34:	4a0c      	ldr	r2, [pc, #48]	; (8104b68 <xTaskPriorityDisinherit+0xd4>)
 8104b36:	6013      	str	r3, [r2, #0]
 8104b38:	693b      	ldr	r3, [r7, #16]
 8104b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104b3c:	4613      	mov	r3, r2
 8104b3e:	009b      	lsls	r3, r3, #2
 8104b40:	4413      	add	r3, r2
 8104b42:	009b      	lsls	r3, r3, #2
 8104b44:	4a09      	ldr	r2, [pc, #36]	; (8104b6c <xTaskPriorityDisinherit+0xd8>)
 8104b46:	441a      	add	r2, r3
 8104b48:	693b      	ldr	r3, [r7, #16]
 8104b4a:	3304      	adds	r3, #4
 8104b4c:	4619      	mov	r1, r3
 8104b4e:	4610      	mov	r0, r2
 8104b50:	f7fd fb51 	bl	81021f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8104b54:	2301      	movs	r3, #1
 8104b56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8104b58:	697b      	ldr	r3, [r7, #20]
	}
 8104b5a:	4618      	mov	r0, r3
 8104b5c:	3718      	adds	r7, #24
 8104b5e:	46bd      	mov	sp, r7
 8104b60:	bd80      	pop	{r7, pc}
 8104b62:	bf00      	nop
 8104b64:	1000c51c 	.word	0x1000c51c
 8104b68:	1000c9f8 	.word	0x1000c9f8
 8104b6c:	1000c520 	.word	0x1000c520

08104b70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8104b70:	b580      	push	{r7, lr}
 8104b72:	b088      	sub	sp, #32
 8104b74:	af00      	add	r7, sp, #0
 8104b76:	6078      	str	r0, [r7, #4]
 8104b78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8104b7e:	2301      	movs	r3, #1
 8104b80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8104b82:	687b      	ldr	r3, [r7, #4]
 8104b84:	2b00      	cmp	r3, #0
 8104b86:	d06a      	beq.n	8104c5e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8104b88:	69bb      	ldr	r3, [r7, #24]
 8104b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104b8c:	2b00      	cmp	r3, #0
 8104b8e:	d10a      	bne.n	8104ba6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8104b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104b94:	f383 8811 	msr	BASEPRI, r3
 8104b98:	f3bf 8f6f 	isb	sy
 8104b9c:	f3bf 8f4f 	dsb	sy
 8104ba0:	60fb      	str	r3, [r7, #12]
}
 8104ba2:	bf00      	nop
 8104ba4:	e7fe      	b.n	8104ba4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8104ba6:	69bb      	ldr	r3, [r7, #24]
 8104ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104baa:	683a      	ldr	r2, [r7, #0]
 8104bac:	429a      	cmp	r2, r3
 8104bae:	d902      	bls.n	8104bb6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8104bb0:	683b      	ldr	r3, [r7, #0]
 8104bb2:	61fb      	str	r3, [r7, #28]
 8104bb4:	e002      	b.n	8104bbc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8104bb6:	69bb      	ldr	r3, [r7, #24]
 8104bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104bba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8104bbc:	69bb      	ldr	r3, [r7, #24]
 8104bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bc0:	69fa      	ldr	r2, [r7, #28]
 8104bc2:	429a      	cmp	r2, r3
 8104bc4:	d04b      	beq.n	8104c5e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8104bc6:	69bb      	ldr	r3, [r7, #24]
 8104bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104bca:	697a      	ldr	r2, [r7, #20]
 8104bcc:	429a      	cmp	r2, r3
 8104bce:	d146      	bne.n	8104c5e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8104bd0:	4b25      	ldr	r3, [pc, #148]	; (8104c68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8104bd2:	681b      	ldr	r3, [r3, #0]
 8104bd4:	69ba      	ldr	r2, [r7, #24]
 8104bd6:	429a      	cmp	r2, r3
 8104bd8:	d10a      	bne.n	8104bf0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8104bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104bde:	f383 8811 	msr	BASEPRI, r3
 8104be2:	f3bf 8f6f 	isb	sy
 8104be6:	f3bf 8f4f 	dsb	sy
 8104bea:	60bb      	str	r3, [r7, #8]
}
 8104bec:	bf00      	nop
 8104bee:	e7fe      	b.n	8104bee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8104bf0:	69bb      	ldr	r3, [r7, #24]
 8104bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8104bf6:	69bb      	ldr	r3, [r7, #24]
 8104bf8:	69fa      	ldr	r2, [r7, #28]
 8104bfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8104bfc:	69bb      	ldr	r3, [r7, #24]
 8104bfe:	699b      	ldr	r3, [r3, #24]
 8104c00:	2b00      	cmp	r3, #0
 8104c02:	db04      	blt.n	8104c0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104c04:	69fb      	ldr	r3, [r7, #28]
 8104c06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8104c0a:	69bb      	ldr	r3, [r7, #24]
 8104c0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8104c0e:	69bb      	ldr	r3, [r7, #24]
 8104c10:	6959      	ldr	r1, [r3, #20]
 8104c12:	693a      	ldr	r2, [r7, #16]
 8104c14:	4613      	mov	r3, r2
 8104c16:	009b      	lsls	r3, r3, #2
 8104c18:	4413      	add	r3, r2
 8104c1a:	009b      	lsls	r3, r3, #2
 8104c1c:	4a13      	ldr	r2, [pc, #76]	; (8104c6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8104c1e:	4413      	add	r3, r2
 8104c20:	4299      	cmp	r1, r3
 8104c22:	d11c      	bne.n	8104c5e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8104c24:	69bb      	ldr	r3, [r7, #24]
 8104c26:	3304      	adds	r3, #4
 8104c28:	4618      	mov	r0, r3
 8104c2a:	f7fd fb41 	bl	81022b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8104c2e:	69bb      	ldr	r3, [r7, #24]
 8104c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104c32:	4b0f      	ldr	r3, [pc, #60]	; (8104c70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8104c34:	681b      	ldr	r3, [r3, #0]
 8104c36:	429a      	cmp	r2, r3
 8104c38:	d903      	bls.n	8104c42 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8104c3a:	69bb      	ldr	r3, [r7, #24]
 8104c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c3e:	4a0c      	ldr	r2, [pc, #48]	; (8104c70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8104c40:	6013      	str	r3, [r2, #0]
 8104c42:	69bb      	ldr	r3, [r7, #24]
 8104c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104c46:	4613      	mov	r3, r2
 8104c48:	009b      	lsls	r3, r3, #2
 8104c4a:	4413      	add	r3, r2
 8104c4c:	009b      	lsls	r3, r3, #2
 8104c4e:	4a07      	ldr	r2, [pc, #28]	; (8104c6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8104c50:	441a      	add	r2, r3
 8104c52:	69bb      	ldr	r3, [r7, #24]
 8104c54:	3304      	adds	r3, #4
 8104c56:	4619      	mov	r1, r3
 8104c58:	4610      	mov	r0, r2
 8104c5a:	f7fd facc 	bl	81021f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8104c5e:	bf00      	nop
 8104c60:	3720      	adds	r7, #32
 8104c62:	46bd      	mov	sp, r7
 8104c64:	bd80      	pop	{r7, pc}
 8104c66:	bf00      	nop
 8104c68:	1000c51c 	.word	0x1000c51c
 8104c6c:	1000c520 	.word	0x1000c520
 8104c70:	1000c9f8 	.word	0x1000c9f8

08104c74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8104c74:	b480      	push	{r7}
 8104c76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8104c78:	4b07      	ldr	r3, [pc, #28]	; (8104c98 <pvTaskIncrementMutexHeldCount+0x24>)
 8104c7a:	681b      	ldr	r3, [r3, #0]
 8104c7c:	2b00      	cmp	r3, #0
 8104c7e:	d004      	beq.n	8104c8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8104c80:	4b05      	ldr	r3, [pc, #20]	; (8104c98 <pvTaskIncrementMutexHeldCount+0x24>)
 8104c82:	681b      	ldr	r3, [r3, #0]
 8104c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8104c86:	3201      	adds	r2, #1
 8104c88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8104c8a:	4b03      	ldr	r3, [pc, #12]	; (8104c98 <pvTaskIncrementMutexHeldCount+0x24>)
 8104c8c:	681b      	ldr	r3, [r3, #0]
	}
 8104c8e:	4618      	mov	r0, r3
 8104c90:	46bd      	mov	sp, r7
 8104c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c96:	4770      	bx	lr
 8104c98:	1000c51c 	.word	0x1000c51c

08104c9c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8104c9c:	b580      	push	{r7, lr}
 8104c9e:	b086      	sub	sp, #24
 8104ca0:	af00      	add	r7, sp, #0
 8104ca2:	60f8      	str	r0, [r7, #12]
 8104ca4:	60b9      	str	r1, [r7, #8]
 8104ca6:	607a      	str	r2, [r7, #4]
 8104ca8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8104caa:	f7fd fc5b 	bl	8102564 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8104cae:	4b29      	ldr	r3, [pc, #164]	; (8104d54 <xTaskNotifyWait+0xb8>)
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8104cb6:	b2db      	uxtb	r3, r3
 8104cb8:	2b02      	cmp	r3, #2
 8104cba:	d01c      	beq.n	8104cf6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8104cbc:	4b25      	ldr	r3, [pc, #148]	; (8104d54 <xTaskNotifyWait+0xb8>)
 8104cbe:	681b      	ldr	r3, [r3, #0]
 8104cc0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8104cc4:	68fa      	ldr	r2, [r7, #12]
 8104cc6:	43d2      	mvns	r2, r2
 8104cc8:	400a      	ands	r2, r1
 8104cca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8104cce:	4b21      	ldr	r3, [pc, #132]	; (8104d54 <xTaskNotifyWait+0xb8>)
 8104cd0:	681b      	ldr	r3, [r3, #0]
 8104cd2:	2201      	movs	r2, #1
 8104cd4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8104cd8:	683b      	ldr	r3, [r7, #0]
 8104cda:	2b00      	cmp	r3, #0
 8104cdc:	d00b      	beq.n	8104cf6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8104cde:	2101      	movs	r1, #1
 8104ce0:	6838      	ldr	r0, [r7, #0]
 8104ce2:	f000 fa03 	bl	81050ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8104ce6:	4b1c      	ldr	r3, [pc, #112]	; (8104d58 <xTaskNotifyWait+0xbc>)
 8104ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104cec:	601a      	str	r2, [r3, #0]
 8104cee:	f3bf 8f4f 	dsb	sy
 8104cf2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8104cf6:	f7fd fc65 	bl	81025c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8104cfa:	f7fd fc33 	bl	8102564 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	2b00      	cmp	r3, #0
 8104d02:	d005      	beq.n	8104d10 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8104d04:	4b13      	ldr	r3, [pc, #76]	; (8104d54 <xTaskNotifyWait+0xb8>)
 8104d06:	681b      	ldr	r3, [r3, #0]
 8104d08:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8104d10:	4b10      	ldr	r3, [pc, #64]	; (8104d54 <xTaskNotifyWait+0xb8>)
 8104d12:	681b      	ldr	r3, [r3, #0]
 8104d14:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8104d18:	b2db      	uxtb	r3, r3
 8104d1a:	2b02      	cmp	r3, #2
 8104d1c:	d002      	beq.n	8104d24 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8104d1e:	2300      	movs	r3, #0
 8104d20:	617b      	str	r3, [r7, #20]
 8104d22:	e00a      	b.n	8104d3a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8104d24:	4b0b      	ldr	r3, [pc, #44]	; (8104d54 <xTaskNotifyWait+0xb8>)
 8104d26:	681b      	ldr	r3, [r3, #0]
 8104d28:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8104d2c:	68ba      	ldr	r2, [r7, #8]
 8104d2e:	43d2      	mvns	r2, r2
 8104d30:	400a      	ands	r2, r1
 8104d32:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8104d36:	2301      	movs	r3, #1
 8104d38:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8104d3a:	4b06      	ldr	r3, [pc, #24]	; (8104d54 <xTaskNotifyWait+0xb8>)
 8104d3c:	681b      	ldr	r3, [r3, #0]
 8104d3e:	2200      	movs	r2, #0
 8104d40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8104d44:	f7fd fc3e 	bl	81025c4 <vPortExitCritical>

		return xReturn;
 8104d48:	697b      	ldr	r3, [r7, #20]
	}
 8104d4a:	4618      	mov	r0, r3
 8104d4c:	3718      	adds	r7, #24
 8104d4e:	46bd      	mov	sp, r7
 8104d50:	bd80      	pop	{r7, pc}
 8104d52:	bf00      	nop
 8104d54:	1000c51c 	.word	0x1000c51c
 8104d58:	e000ed04 	.word	0xe000ed04

08104d5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8104d5c:	b580      	push	{r7, lr}
 8104d5e:	b08a      	sub	sp, #40	; 0x28
 8104d60:	af00      	add	r7, sp, #0
 8104d62:	60f8      	str	r0, [r7, #12]
 8104d64:	60b9      	str	r1, [r7, #8]
 8104d66:	603b      	str	r3, [r7, #0]
 8104d68:	4613      	mov	r3, r2
 8104d6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8104d6c:	2301      	movs	r3, #1
 8104d6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8104d70:	68fb      	ldr	r3, [r7, #12]
 8104d72:	2b00      	cmp	r3, #0
 8104d74:	d10a      	bne.n	8104d8c <xTaskGenericNotify+0x30>
	__asm volatile
 8104d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104d7a:	f383 8811 	msr	BASEPRI, r3
 8104d7e:	f3bf 8f6f 	isb	sy
 8104d82:	f3bf 8f4f 	dsb	sy
 8104d86:	61bb      	str	r3, [r7, #24]
}
 8104d88:	bf00      	nop
 8104d8a:	e7fe      	b.n	8104d8a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8104d8c:	68fb      	ldr	r3, [r7, #12]
 8104d8e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8104d90:	f7fd fbe8 	bl	8102564 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8104d94:	683b      	ldr	r3, [r7, #0]
 8104d96:	2b00      	cmp	r3, #0
 8104d98:	d004      	beq.n	8104da4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8104d9a:	6a3b      	ldr	r3, [r7, #32]
 8104d9c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8104da0:	683b      	ldr	r3, [r7, #0]
 8104da2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8104da4:	6a3b      	ldr	r3, [r7, #32]
 8104da6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8104daa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8104dac:	6a3b      	ldr	r3, [r7, #32]
 8104dae:	2202      	movs	r2, #2
 8104db0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8104db4:	79fb      	ldrb	r3, [r7, #7]
 8104db6:	2b04      	cmp	r3, #4
 8104db8:	d82d      	bhi.n	8104e16 <xTaskGenericNotify+0xba>
 8104dba:	a201      	add	r2, pc, #4	; (adr r2, 8104dc0 <xTaskGenericNotify+0x64>)
 8104dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dc0:	08104e39 	.word	0x08104e39
 8104dc4:	08104dd5 	.word	0x08104dd5
 8104dc8:	08104de7 	.word	0x08104de7
 8104dcc:	08104df7 	.word	0x08104df7
 8104dd0:	08104e01 	.word	0x08104e01
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8104dd4:	6a3b      	ldr	r3, [r7, #32]
 8104dd6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8104dda:	68bb      	ldr	r3, [r7, #8]
 8104ddc:	431a      	orrs	r2, r3
 8104dde:	6a3b      	ldr	r3, [r7, #32]
 8104de0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8104de4:	e02b      	b.n	8104e3e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8104de6:	6a3b      	ldr	r3, [r7, #32]
 8104de8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104dec:	1c5a      	adds	r2, r3, #1
 8104dee:	6a3b      	ldr	r3, [r7, #32]
 8104df0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8104df4:	e023      	b.n	8104e3e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8104df6:	6a3b      	ldr	r3, [r7, #32]
 8104df8:	68ba      	ldr	r2, [r7, #8]
 8104dfa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8104dfe:	e01e      	b.n	8104e3e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8104e00:	7ffb      	ldrb	r3, [r7, #31]
 8104e02:	2b02      	cmp	r3, #2
 8104e04:	d004      	beq.n	8104e10 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8104e06:	6a3b      	ldr	r3, [r7, #32]
 8104e08:	68ba      	ldr	r2, [r7, #8]
 8104e0a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8104e0e:	e016      	b.n	8104e3e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8104e10:	2300      	movs	r3, #0
 8104e12:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8104e14:	e013      	b.n	8104e3e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8104e16:	6a3b      	ldr	r3, [r7, #32]
 8104e18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104e20:	d00c      	beq.n	8104e3c <xTaskGenericNotify+0xe0>
	__asm volatile
 8104e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104e26:	f383 8811 	msr	BASEPRI, r3
 8104e2a:	f3bf 8f6f 	isb	sy
 8104e2e:	f3bf 8f4f 	dsb	sy
 8104e32:	617b      	str	r3, [r7, #20]
}
 8104e34:	bf00      	nop
 8104e36:	e7fe      	b.n	8104e36 <xTaskGenericNotify+0xda>
					break;
 8104e38:	bf00      	nop
 8104e3a:	e000      	b.n	8104e3e <xTaskGenericNotify+0xe2>

					break;
 8104e3c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8104e3e:	7ffb      	ldrb	r3, [r7, #31]
 8104e40:	2b01      	cmp	r3, #1
 8104e42:	d13a      	bne.n	8104eba <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104e44:	6a3b      	ldr	r3, [r7, #32]
 8104e46:	3304      	adds	r3, #4
 8104e48:	4618      	mov	r0, r3
 8104e4a:	f7fd fa31 	bl	81022b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8104e4e:	6a3b      	ldr	r3, [r7, #32]
 8104e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104e52:	4b1d      	ldr	r3, [pc, #116]	; (8104ec8 <xTaskGenericNotify+0x16c>)
 8104e54:	681b      	ldr	r3, [r3, #0]
 8104e56:	429a      	cmp	r2, r3
 8104e58:	d903      	bls.n	8104e62 <xTaskGenericNotify+0x106>
 8104e5a:	6a3b      	ldr	r3, [r7, #32]
 8104e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e5e:	4a1a      	ldr	r2, [pc, #104]	; (8104ec8 <xTaskGenericNotify+0x16c>)
 8104e60:	6013      	str	r3, [r2, #0]
 8104e62:	6a3b      	ldr	r3, [r7, #32]
 8104e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104e66:	4613      	mov	r3, r2
 8104e68:	009b      	lsls	r3, r3, #2
 8104e6a:	4413      	add	r3, r2
 8104e6c:	009b      	lsls	r3, r3, #2
 8104e6e:	4a17      	ldr	r2, [pc, #92]	; (8104ecc <xTaskGenericNotify+0x170>)
 8104e70:	441a      	add	r2, r3
 8104e72:	6a3b      	ldr	r3, [r7, #32]
 8104e74:	3304      	adds	r3, #4
 8104e76:	4619      	mov	r1, r3
 8104e78:	4610      	mov	r0, r2
 8104e7a:	f7fd f9bc 	bl	81021f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8104e7e:	6a3b      	ldr	r3, [r7, #32]
 8104e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e82:	2b00      	cmp	r3, #0
 8104e84:	d00a      	beq.n	8104e9c <xTaskGenericNotify+0x140>
	__asm volatile
 8104e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104e8a:	f383 8811 	msr	BASEPRI, r3
 8104e8e:	f3bf 8f6f 	isb	sy
 8104e92:	f3bf 8f4f 	dsb	sy
 8104e96:	613b      	str	r3, [r7, #16]
}
 8104e98:	bf00      	nop
 8104e9a:	e7fe      	b.n	8104e9a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8104e9c:	6a3b      	ldr	r3, [r7, #32]
 8104e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104ea0:	4b0b      	ldr	r3, [pc, #44]	; (8104ed0 <xTaskGenericNotify+0x174>)
 8104ea2:	681b      	ldr	r3, [r3, #0]
 8104ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ea6:	429a      	cmp	r2, r3
 8104ea8:	d907      	bls.n	8104eba <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8104eaa:	4b0a      	ldr	r3, [pc, #40]	; (8104ed4 <xTaskGenericNotify+0x178>)
 8104eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104eb0:	601a      	str	r2, [r3, #0]
 8104eb2:	f3bf 8f4f 	dsb	sy
 8104eb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8104eba:	f7fd fb83 	bl	81025c4 <vPortExitCritical>

		return xReturn;
 8104ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8104ec0:	4618      	mov	r0, r3
 8104ec2:	3728      	adds	r7, #40	; 0x28
 8104ec4:	46bd      	mov	sp, r7
 8104ec6:	bd80      	pop	{r7, pc}
 8104ec8:	1000c9f8 	.word	0x1000c9f8
 8104ecc:	1000c520 	.word	0x1000c520
 8104ed0:	1000c51c 	.word	0x1000c51c
 8104ed4:	e000ed04 	.word	0xe000ed04

08104ed8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8104ed8:	b580      	push	{r7, lr}
 8104eda:	b08e      	sub	sp, #56	; 0x38
 8104edc:	af00      	add	r7, sp, #0
 8104ede:	60f8      	str	r0, [r7, #12]
 8104ee0:	60b9      	str	r1, [r7, #8]
 8104ee2:	603b      	str	r3, [r7, #0]
 8104ee4:	4613      	mov	r3, r2
 8104ee6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8104ee8:	2301      	movs	r3, #1
 8104eea:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8104eec:	68fb      	ldr	r3, [r7, #12]
 8104eee:	2b00      	cmp	r3, #0
 8104ef0:	d10a      	bne.n	8104f08 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8104ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104ef6:	f383 8811 	msr	BASEPRI, r3
 8104efa:	f3bf 8f6f 	isb	sy
 8104efe:	f3bf 8f4f 	dsb	sy
 8104f02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8104f04:	bf00      	nop
 8104f06:	e7fe      	b.n	8104f06 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8104f08:	f7fd fc0e 	bl	8102728 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8104f0c:	68fb      	ldr	r3, [r7, #12]
 8104f0e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8104f10:	f3ef 8211 	mrs	r2, BASEPRI
 8104f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104f18:	f383 8811 	msr	BASEPRI, r3
 8104f1c:	f3bf 8f6f 	isb	sy
 8104f20:	f3bf 8f4f 	dsb	sy
 8104f24:	623a      	str	r2, [r7, #32]
 8104f26:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8104f28:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8104f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8104f2c:	683b      	ldr	r3, [r7, #0]
 8104f2e:	2b00      	cmp	r3, #0
 8104f30:	d004      	beq.n	8104f3c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8104f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f34:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8104f38:	683b      	ldr	r3, [r7, #0]
 8104f3a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8104f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f3e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8104f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8104f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f48:	2202      	movs	r2, #2
 8104f4a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8104f4e:	79fb      	ldrb	r3, [r7, #7]
 8104f50:	2b04      	cmp	r3, #4
 8104f52:	d82f      	bhi.n	8104fb4 <xTaskGenericNotifyFromISR+0xdc>
 8104f54:	a201      	add	r2, pc, #4	; (adr r2, 8104f5c <xTaskGenericNotifyFromISR+0x84>)
 8104f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f5a:	bf00      	nop
 8104f5c:	08104fd7 	.word	0x08104fd7
 8104f60:	08104f71 	.word	0x08104f71
 8104f64:	08104f83 	.word	0x08104f83
 8104f68:	08104f93 	.word	0x08104f93
 8104f6c:	08104f9d 	.word	0x08104f9d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8104f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f72:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8104f76:	68bb      	ldr	r3, [r7, #8]
 8104f78:	431a      	orrs	r2, r3
 8104f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8104f80:	e02c      	b.n	8104fdc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8104f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104f88:	1c5a      	adds	r2, r3, #1
 8104f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8104f90:	e024      	b.n	8104fdc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8104f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f94:	68ba      	ldr	r2, [r7, #8]
 8104f96:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8104f9a:	e01f      	b.n	8104fdc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8104f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104fa0:	2b02      	cmp	r3, #2
 8104fa2:	d004      	beq.n	8104fae <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8104fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fa6:	68ba      	ldr	r2, [r7, #8]
 8104fa8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8104fac:	e016      	b.n	8104fdc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8104fae:	2300      	movs	r3, #0
 8104fb0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8104fb2:	e013      	b.n	8104fdc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8104fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104fbe:	d00c      	beq.n	8104fda <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8104fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104fc4:	f383 8811 	msr	BASEPRI, r3
 8104fc8:	f3bf 8f6f 	isb	sy
 8104fcc:	f3bf 8f4f 	dsb	sy
 8104fd0:	61bb      	str	r3, [r7, #24]
}
 8104fd2:	bf00      	nop
 8104fd4:	e7fe      	b.n	8104fd4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8104fd6:	bf00      	nop
 8104fd8:	e000      	b.n	8104fdc <xTaskGenericNotifyFromISR+0x104>
					break;
 8104fda:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8104fdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104fe0:	2b01      	cmp	r3, #1
 8104fe2:	d146      	bne.n	8105072 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8104fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104fe8:	2b00      	cmp	r3, #0
 8104fea:	d00a      	beq.n	8105002 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8104fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104ff0:	f383 8811 	msr	BASEPRI, r3
 8104ff4:	f3bf 8f6f 	isb	sy
 8104ff8:	f3bf 8f4f 	dsb	sy
 8104ffc:	617b      	str	r3, [r7, #20]
}
 8104ffe:	bf00      	nop
 8105000:	e7fe      	b.n	8105000 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8105002:	4b21      	ldr	r3, [pc, #132]	; (8105088 <xTaskGenericNotifyFromISR+0x1b0>)
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	2b00      	cmp	r3, #0
 8105008:	d11d      	bne.n	8105046 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810500c:	3304      	adds	r3, #4
 810500e:	4618      	mov	r0, r3
 8105010:	f7fd f94e 	bl	81022b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8105014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105018:	4b1c      	ldr	r3, [pc, #112]	; (810508c <xTaskGenericNotifyFromISR+0x1b4>)
 810501a:	681b      	ldr	r3, [r3, #0]
 810501c:	429a      	cmp	r2, r3
 810501e:	d903      	bls.n	8105028 <xTaskGenericNotifyFromISR+0x150>
 8105020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105024:	4a19      	ldr	r2, [pc, #100]	; (810508c <xTaskGenericNotifyFromISR+0x1b4>)
 8105026:	6013      	str	r3, [r2, #0]
 8105028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810502c:	4613      	mov	r3, r2
 810502e:	009b      	lsls	r3, r3, #2
 8105030:	4413      	add	r3, r2
 8105032:	009b      	lsls	r3, r3, #2
 8105034:	4a16      	ldr	r2, [pc, #88]	; (8105090 <xTaskGenericNotifyFromISR+0x1b8>)
 8105036:	441a      	add	r2, r3
 8105038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810503a:	3304      	adds	r3, #4
 810503c:	4619      	mov	r1, r3
 810503e:	4610      	mov	r0, r2
 8105040:	f7fd f8d9 	bl	81021f6 <vListInsertEnd>
 8105044:	e005      	b.n	8105052 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8105046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105048:	3318      	adds	r3, #24
 810504a:	4619      	mov	r1, r3
 810504c:	4811      	ldr	r0, [pc, #68]	; (8105094 <xTaskGenericNotifyFromISR+0x1bc>)
 810504e:	f7fd f8d2 	bl	81021f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8105052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105056:	4b10      	ldr	r3, [pc, #64]	; (8105098 <xTaskGenericNotifyFromISR+0x1c0>)
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810505c:	429a      	cmp	r2, r3
 810505e:	d908      	bls.n	8105072 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8105060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8105062:	2b00      	cmp	r3, #0
 8105064:	d002      	beq.n	810506c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8105066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8105068:	2201      	movs	r2, #1
 810506a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 810506c:	4b0b      	ldr	r3, [pc, #44]	; (810509c <xTaskGenericNotifyFromISR+0x1c4>)
 810506e:	2201      	movs	r2, #1
 8105070:	601a      	str	r2, [r3, #0]
 8105072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105074:	613b      	str	r3, [r7, #16]
	__asm volatile
 8105076:	693b      	ldr	r3, [r7, #16]
 8105078:	f383 8811 	msr	BASEPRI, r3
}
 810507c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 810507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8105080:	4618      	mov	r0, r3
 8105082:	3738      	adds	r7, #56	; 0x38
 8105084:	46bd      	mov	sp, r7
 8105086:	bd80      	pop	{r7, pc}
 8105088:	1000ca18 	.word	0x1000ca18
 810508c:	1000c9f8 	.word	0x1000c9f8
 8105090:	1000c520 	.word	0x1000c520
 8105094:	1000c9b0 	.word	0x1000c9b0
 8105098:	1000c51c 	.word	0x1000c51c
 810509c:	1000ca04 	.word	0x1000ca04

081050a0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 81050a0:	b580      	push	{r7, lr}
 81050a2:	b084      	sub	sp, #16
 81050a4:	af00      	add	r7, sp, #0
 81050a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	2b00      	cmp	r3, #0
 81050ac:	d102      	bne.n	81050b4 <xTaskNotifyStateClear+0x14>
 81050ae:	4b0e      	ldr	r3, [pc, #56]	; (81050e8 <xTaskNotifyStateClear+0x48>)
 81050b0:	681b      	ldr	r3, [r3, #0]
 81050b2:	e000      	b.n	81050b6 <xTaskNotifyStateClear+0x16>
 81050b4:	687b      	ldr	r3, [r7, #4]
 81050b6:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 81050b8:	f7fd fa54 	bl	8102564 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 81050bc:	68bb      	ldr	r3, [r7, #8]
 81050be:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 81050c2:	b2db      	uxtb	r3, r3
 81050c4:	2b02      	cmp	r3, #2
 81050c6:	d106      	bne.n	81050d6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81050c8:	68bb      	ldr	r3, [r7, #8]
 81050ca:	2200      	movs	r2, #0
 81050cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 81050d0:	2301      	movs	r3, #1
 81050d2:	60fb      	str	r3, [r7, #12]
 81050d4:	e001      	b.n	81050da <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 81050d6:	2300      	movs	r3, #0
 81050d8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 81050da:	f7fd fa73 	bl	81025c4 <vPortExitCritical>

		return xReturn;
 81050de:	68fb      	ldr	r3, [r7, #12]
	}
 81050e0:	4618      	mov	r0, r3
 81050e2:	3710      	adds	r7, #16
 81050e4:	46bd      	mov	sp, r7
 81050e6:	bd80      	pop	{r7, pc}
 81050e8:	1000c51c 	.word	0x1000c51c

081050ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81050ec:	b580      	push	{r7, lr}
 81050ee:	b084      	sub	sp, #16
 81050f0:	af00      	add	r7, sp, #0
 81050f2:	6078      	str	r0, [r7, #4]
 81050f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81050f6:	4b21      	ldr	r3, [pc, #132]	; (810517c <prvAddCurrentTaskToDelayedList+0x90>)
 81050f8:	681b      	ldr	r3, [r3, #0]
 81050fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81050fc:	4b20      	ldr	r3, [pc, #128]	; (8105180 <prvAddCurrentTaskToDelayedList+0x94>)
 81050fe:	681b      	ldr	r3, [r3, #0]
 8105100:	3304      	adds	r3, #4
 8105102:	4618      	mov	r0, r3
 8105104:	f7fd f8d4 	bl	81022b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8105108:	687b      	ldr	r3, [r7, #4]
 810510a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810510e:	d10a      	bne.n	8105126 <prvAddCurrentTaskToDelayedList+0x3a>
 8105110:	683b      	ldr	r3, [r7, #0]
 8105112:	2b00      	cmp	r3, #0
 8105114:	d007      	beq.n	8105126 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8105116:	4b1a      	ldr	r3, [pc, #104]	; (8105180 <prvAddCurrentTaskToDelayedList+0x94>)
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	3304      	adds	r3, #4
 810511c:	4619      	mov	r1, r3
 810511e:	4819      	ldr	r0, [pc, #100]	; (8105184 <prvAddCurrentTaskToDelayedList+0x98>)
 8105120:	f7fd f869 	bl	81021f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8105124:	e026      	b.n	8105174 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8105126:	68fa      	ldr	r2, [r7, #12]
 8105128:	687b      	ldr	r3, [r7, #4]
 810512a:	4413      	add	r3, r2
 810512c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810512e:	4b14      	ldr	r3, [pc, #80]	; (8105180 <prvAddCurrentTaskToDelayedList+0x94>)
 8105130:	681b      	ldr	r3, [r3, #0]
 8105132:	68ba      	ldr	r2, [r7, #8]
 8105134:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8105136:	68ba      	ldr	r2, [r7, #8]
 8105138:	68fb      	ldr	r3, [r7, #12]
 810513a:	429a      	cmp	r2, r3
 810513c:	d209      	bcs.n	8105152 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810513e:	4b12      	ldr	r3, [pc, #72]	; (8105188 <prvAddCurrentTaskToDelayedList+0x9c>)
 8105140:	681a      	ldr	r2, [r3, #0]
 8105142:	4b0f      	ldr	r3, [pc, #60]	; (8105180 <prvAddCurrentTaskToDelayedList+0x94>)
 8105144:	681b      	ldr	r3, [r3, #0]
 8105146:	3304      	adds	r3, #4
 8105148:	4619      	mov	r1, r3
 810514a:	4610      	mov	r0, r2
 810514c:	f7fd f877 	bl	810223e <vListInsert>
}
 8105150:	e010      	b.n	8105174 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8105152:	4b0e      	ldr	r3, [pc, #56]	; (810518c <prvAddCurrentTaskToDelayedList+0xa0>)
 8105154:	681a      	ldr	r2, [r3, #0]
 8105156:	4b0a      	ldr	r3, [pc, #40]	; (8105180 <prvAddCurrentTaskToDelayedList+0x94>)
 8105158:	681b      	ldr	r3, [r3, #0]
 810515a:	3304      	adds	r3, #4
 810515c:	4619      	mov	r1, r3
 810515e:	4610      	mov	r0, r2
 8105160:	f7fd f86d 	bl	810223e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8105164:	4b0a      	ldr	r3, [pc, #40]	; (8105190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8105166:	681b      	ldr	r3, [r3, #0]
 8105168:	68ba      	ldr	r2, [r7, #8]
 810516a:	429a      	cmp	r2, r3
 810516c:	d202      	bcs.n	8105174 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810516e:	4a08      	ldr	r2, [pc, #32]	; (8105190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8105170:	68bb      	ldr	r3, [r7, #8]
 8105172:	6013      	str	r3, [r2, #0]
}
 8105174:	bf00      	nop
 8105176:	3710      	adds	r7, #16
 8105178:	46bd      	mov	sp, r7
 810517a:	bd80      	pop	{r7, pc}
 810517c:	1000c9f4 	.word	0x1000c9f4
 8105180:	1000c51c 	.word	0x1000c51c
 8105184:	1000c9dc 	.word	0x1000c9dc
 8105188:	1000c9ac 	.word	0x1000c9ac
 810518c:	1000c9a8 	.word	0x1000c9a8
 8105190:	1000ca10 	.word	0x1000ca10

08105194 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8105194:	b580      	push	{r7, lr}
 8105196:	b08a      	sub	sp, #40	; 0x28
 8105198:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810519a:	2300      	movs	r3, #0
 810519c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810519e:	f000 fb07 	bl	81057b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 81051a2:	4b1c      	ldr	r3, [pc, #112]	; (8105214 <xTimerCreateTimerTask+0x80>)
 81051a4:	681b      	ldr	r3, [r3, #0]
 81051a6:	2b00      	cmp	r3, #0
 81051a8:	d021      	beq.n	81051ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 81051aa:	2300      	movs	r3, #0
 81051ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 81051ae:	2300      	movs	r3, #0
 81051b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 81051b2:	1d3a      	adds	r2, r7, #4
 81051b4:	f107 0108 	add.w	r1, r7, #8
 81051b8:	f107 030c 	add.w	r3, r7, #12
 81051bc:	4618      	mov	r0, r3
 81051be:	f7fc fde9 	bl	8101d94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 81051c2:	6879      	ldr	r1, [r7, #4]
 81051c4:	68bb      	ldr	r3, [r7, #8]
 81051c6:	68fa      	ldr	r2, [r7, #12]
 81051c8:	9202      	str	r2, [sp, #8]
 81051ca:	9301      	str	r3, [sp, #4]
 81051cc:	2302      	movs	r3, #2
 81051ce:	9300      	str	r3, [sp, #0]
 81051d0:	2300      	movs	r3, #0
 81051d2:	460a      	mov	r2, r1
 81051d4:	4910      	ldr	r1, [pc, #64]	; (8105218 <xTimerCreateTimerTask+0x84>)
 81051d6:	4811      	ldr	r0, [pc, #68]	; (810521c <xTimerCreateTimerTask+0x88>)
 81051d8:	f7fe fd57 	bl	8103c8a <xTaskCreateStatic>
 81051dc:	4603      	mov	r3, r0
 81051de:	4a10      	ldr	r2, [pc, #64]	; (8105220 <xTimerCreateTimerTask+0x8c>)
 81051e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81051e2:	4b0f      	ldr	r3, [pc, #60]	; (8105220 <xTimerCreateTimerTask+0x8c>)
 81051e4:	681b      	ldr	r3, [r3, #0]
 81051e6:	2b00      	cmp	r3, #0
 81051e8:	d001      	beq.n	81051ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81051ea:	2301      	movs	r3, #1
 81051ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81051ee:	697b      	ldr	r3, [r7, #20]
 81051f0:	2b00      	cmp	r3, #0
 81051f2:	d10a      	bne.n	810520a <xTimerCreateTimerTask+0x76>
	__asm volatile
 81051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81051f8:	f383 8811 	msr	BASEPRI, r3
 81051fc:	f3bf 8f6f 	isb	sy
 8105200:	f3bf 8f4f 	dsb	sy
 8105204:	613b      	str	r3, [r7, #16]
}
 8105206:	bf00      	nop
 8105208:	e7fe      	b.n	8105208 <xTimerCreateTimerTask+0x74>
	return xReturn;
 810520a:	697b      	ldr	r3, [r7, #20]
}
 810520c:	4618      	mov	r0, r3
 810520e:	3718      	adds	r7, #24
 8105210:	46bd      	mov	sp, r7
 8105212:	bd80      	pop	{r7, pc}
 8105214:	1000ca4c 	.word	0x1000ca4c
 8105218:	08106bec 	.word	0x08106bec
 810521c:	08105359 	.word	0x08105359
 8105220:	1000ca50 	.word	0x1000ca50

08105224 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8105224:	b580      	push	{r7, lr}
 8105226:	b08a      	sub	sp, #40	; 0x28
 8105228:	af00      	add	r7, sp, #0
 810522a:	60f8      	str	r0, [r7, #12]
 810522c:	60b9      	str	r1, [r7, #8]
 810522e:	607a      	str	r2, [r7, #4]
 8105230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8105232:	2300      	movs	r3, #0
 8105234:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8105236:	68fb      	ldr	r3, [r7, #12]
 8105238:	2b00      	cmp	r3, #0
 810523a:	d10a      	bne.n	8105252 <xTimerGenericCommand+0x2e>
	__asm volatile
 810523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105240:	f383 8811 	msr	BASEPRI, r3
 8105244:	f3bf 8f6f 	isb	sy
 8105248:	f3bf 8f4f 	dsb	sy
 810524c:	623b      	str	r3, [r7, #32]
}
 810524e:	bf00      	nop
 8105250:	e7fe      	b.n	8105250 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8105252:	4b1a      	ldr	r3, [pc, #104]	; (81052bc <xTimerGenericCommand+0x98>)
 8105254:	681b      	ldr	r3, [r3, #0]
 8105256:	2b00      	cmp	r3, #0
 8105258:	d02a      	beq.n	81052b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810525a:	68bb      	ldr	r3, [r7, #8]
 810525c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8105262:	68fb      	ldr	r3, [r7, #12]
 8105264:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8105266:	68bb      	ldr	r3, [r7, #8]
 8105268:	2b05      	cmp	r3, #5
 810526a:	dc18      	bgt.n	810529e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810526c:	f7ff fb8c 	bl	8104988 <xTaskGetSchedulerState>
 8105270:	4603      	mov	r3, r0
 8105272:	2b02      	cmp	r3, #2
 8105274:	d109      	bne.n	810528a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8105276:	4b11      	ldr	r3, [pc, #68]	; (81052bc <xTimerGenericCommand+0x98>)
 8105278:	6818      	ldr	r0, [r3, #0]
 810527a:	f107 0110 	add.w	r1, r7, #16
 810527e:	2300      	movs	r3, #0
 8105280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105282:	f7fd fbcf 	bl	8102a24 <xQueueGenericSend>
 8105286:	6278      	str	r0, [r7, #36]	; 0x24
 8105288:	e012      	b.n	81052b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810528a:	4b0c      	ldr	r3, [pc, #48]	; (81052bc <xTimerGenericCommand+0x98>)
 810528c:	6818      	ldr	r0, [r3, #0]
 810528e:	f107 0110 	add.w	r1, r7, #16
 8105292:	2300      	movs	r3, #0
 8105294:	2200      	movs	r2, #0
 8105296:	f7fd fbc5 	bl	8102a24 <xQueueGenericSend>
 810529a:	6278      	str	r0, [r7, #36]	; 0x24
 810529c:	e008      	b.n	81052b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810529e:	4b07      	ldr	r3, [pc, #28]	; (81052bc <xTimerGenericCommand+0x98>)
 81052a0:	6818      	ldr	r0, [r3, #0]
 81052a2:	f107 0110 	add.w	r1, r7, #16
 81052a6:	2300      	movs	r3, #0
 81052a8:	683a      	ldr	r2, [r7, #0]
 81052aa:	f7fd fcb9 	bl	8102c20 <xQueueGenericSendFromISR>
 81052ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 81052b2:	4618      	mov	r0, r3
 81052b4:	3728      	adds	r7, #40	; 0x28
 81052b6:	46bd      	mov	sp, r7
 81052b8:	bd80      	pop	{r7, pc}
 81052ba:	bf00      	nop
 81052bc:	1000ca4c 	.word	0x1000ca4c

081052c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81052c0:	b580      	push	{r7, lr}
 81052c2:	b088      	sub	sp, #32
 81052c4:	af02      	add	r7, sp, #8
 81052c6:	6078      	str	r0, [r7, #4]
 81052c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81052ca:	4b22      	ldr	r3, [pc, #136]	; (8105354 <prvProcessExpiredTimer+0x94>)
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	68db      	ldr	r3, [r3, #12]
 81052d0:	68db      	ldr	r3, [r3, #12]
 81052d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81052d4:	697b      	ldr	r3, [r7, #20]
 81052d6:	3304      	adds	r3, #4
 81052d8:	4618      	mov	r0, r3
 81052da:	f7fc ffe9 	bl	81022b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81052de:	697b      	ldr	r3, [r7, #20]
 81052e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81052e4:	f003 0304 	and.w	r3, r3, #4
 81052e8:	2b00      	cmp	r3, #0
 81052ea:	d022      	beq.n	8105332 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81052ec:	697b      	ldr	r3, [r7, #20]
 81052ee:	699a      	ldr	r2, [r3, #24]
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	18d1      	adds	r1, r2, r3
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	683a      	ldr	r2, [r7, #0]
 81052f8:	6978      	ldr	r0, [r7, #20]
 81052fa:	f000 f8d1 	bl	81054a0 <prvInsertTimerInActiveList>
 81052fe:	4603      	mov	r3, r0
 8105300:	2b00      	cmp	r3, #0
 8105302:	d01f      	beq.n	8105344 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8105304:	2300      	movs	r3, #0
 8105306:	9300      	str	r3, [sp, #0]
 8105308:	2300      	movs	r3, #0
 810530a:	687a      	ldr	r2, [r7, #4]
 810530c:	2100      	movs	r1, #0
 810530e:	6978      	ldr	r0, [r7, #20]
 8105310:	f7ff ff88 	bl	8105224 <xTimerGenericCommand>
 8105314:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8105316:	693b      	ldr	r3, [r7, #16]
 8105318:	2b00      	cmp	r3, #0
 810531a:	d113      	bne.n	8105344 <prvProcessExpiredTimer+0x84>
	__asm volatile
 810531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105320:	f383 8811 	msr	BASEPRI, r3
 8105324:	f3bf 8f6f 	isb	sy
 8105328:	f3bf 8f4f 	dsb	sy
 810532c:	60fb      	str	r3, [r7, #12]
}
 810532e:	bf00      	nop
 8105330:	e7fe      	b.n	8105330 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8105332:	697b      	ldr	r3, [r7, #20]
 8105334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8105338:	f023 0301 	bic.w	r3, r3, #1
 810533c:	b2da      	uxtb	r2, r3
 810533e:	697b      	ldr	r3, [r7, #20]
 8105340:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8105344:	697b      	ldr	r3, [r7, #20]
 8105346:	6a1b      	ldr	r3, [r3, #32]
 8105348:	6978      	ldr	r0, [r7, #20]
 810534a:	4798      	blx	r3
}
 810534c:	bf00      	nop
 810534e:	3718      	adds	r7, #24
 8105350:	46bd      	mov	sp, r7
 8105352:	bd80      	pop	{r7, pc}
 8105354:	1000ca44 	.word	0x1000ca44

08105358 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8105358:	b580      	push	{r7, lr}
 810535a:	b084      	sub	sp, #16
 810535c:	af00      	add	r7, sp, #0
 810535e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8105360:	f107 0308 	add.w	r3, r7, #8
 8105364:	4618      	mov	r0, r3
 8105366:	f000 f857 	bl	8105418 <prvGetNextExpireTime>
 810536a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810536c:	68bb      	ldr	r3, [r7, #8]
 810536e:	4619      	mov	r1, r3
 8105370:	68f8      	ldr	r0, [r7, #12]
 8105372:	f000 f803 	bl	810537c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8105376:	f000 f8d5 	bl	8105524 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810537a:	e7f1      	b.n	8105360 <prvTimerTask+0x8>

0810537c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810537c:	b580      	push	{r7, lr}
 810537e:	b084      	sub	sp, #16
 8105380:	af00      	add	r7, sp, #0
 8105382:	6078      	str	r0, [r7, #4]
 8105384:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8105386:	f7fe fedd 	bl	8104144 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810538a:	f107 0308 	add.w	r3, r7, #8
 810538e:	4618      	mov	r0, r3
 8105390:	f000 f866 	bl	8105460 <prvSampleTimeNow>
 8105394:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8105396:	68bb      	ldr	r3, [r7, #8]
 8105398:	2b00      	cmp	r3, #0
 810539a:	d130      	bne.n	81053fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810539c:	683b      	ldr	r3, [r7, #0]
 810539e:	2b00      	cmp	r3, #0
 81053a0:	d10a      	bne.n	81053b8 <prvProcessTimerOrBlockTask+0x3c>
 81053a2:	687a      	ldr	r2, [r7, #4]
 81053a4:	68fb      	ldr	r3, [r7, #12]
 81053a6:	429a      	cmp	r2, r3
 81053a8:	d806      	bhi.n	81053b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81053aa:	f7fe fed9 	bl	8104160 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81053ae:	68f9      	ldr	r1, [r7, #12]
 81053b0:	6878      	ldr	r0, [r7, #4]
 81053b2:	f7ff ff85 	bl	81052c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 81053b6:	e024      	b.n	8105402 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 81053b8:	683b      	ldr	r3, [r7, #0]
 81053ba:	2b00      	cmp	r3, #0
 81053bc:	d008      	beq.n	81053d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 81053be:	4b13      	ldr	r3, [pc, #76]	; (810540c <prvProcessTimerOrBlockTask+0x90>)
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	2b00      	cmp	r3, #0
 81053c6:	d101      	bne.n	81053cc <prvProcessTimerOrBlockTask+0x50>
 81053c8:	2301      	movs	r3, #1
 81053ca:	e000      	b.n	81053ce <prvProcessTimerOrBlockTask+0x52>
 81053cc:	2300      	movs	r3, #0
 81053ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81053d0:	4b0f      	ldr	r3, [pc, #60]	; (8105410 <prvProcessTimerOrBlockTask+0x94>)
 81053d2:	6818      	ldr	r0, [r3, #0]
 81053d4:	687a      	ldr	r2, [r7, #4]
 81053d6:	68fb      	ldr	r3, [r7, #12]
 81053d8:	1ad3      	subs	r3, r2, r3
 81053da:	683a      	ldr	r2, [r7, #0]
 81053dc:	4619      	mov	r1, r3
 81053de:	f7fe f885 	bl	81034ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81053e2:	f7fe febd 	bl	8104160 <xTaskResumeAll>
 81053e6:	4603      	mov	r3, r0
 81053e8:	2b00      	cmp	r3, #0
 81053ea:	d10a      	bne.n	8105402 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81053ec:	4b09      	ldr	r3, [pc, #36]	; (8105414 <prvProcessTimerOrBlockTask+0x98>)
 81053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81053f2:	601a      	str	r2, [r3, #0]
 81053f4:	f3bf 8f4f 	dsb	sy
 81053f8:	f3bf 8f6f 	isb	sy
}
 81053fc:	e001      	b.n	8105402 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81053fe:	f7fe feaf 	bl	8104160 <xTaskResumeAll>
}
 8105402:	bf00      	nop
 8105404:	3710      	adds	r7, #16
 8105406:	46bd      	mov	sp, r7
 8105408:	bd80      	pop	{r7, pc}
 810540a:	bf00      	nop
 810540c:	1000ca48 	.word	0x1000ca48
 8105410:	1000ca4c 	.word	0x1000ca4c
 8105414:	e000ed04 	.word	0xe000ed04

08105418 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8105418:	b480      	push	{r7}
 810541a:	b085      	sub	sp, #20
 810541c:	af00      	add	r7, sp, #0
 810541e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8105420:	4b0e      	ldr	r3, [pc, #56]	; (810545c <prvGetNextExpireTime+0x44>)
 8105422:	681b      	ldr	r3, [r3, #0]
 8105424:	681b      	ldr	r3, [r3, #0]
 8105426:	2b00      	cmp	r3, #0
 8105428:	d101      	bne.n	810542e <prvGetNextExpireTime+0x16>
 810542a:	2201      	movs	r2, #1
 810542c:	e000      	b.n	8105430 <prvGetNextExpireTime+0x18>
 810542e:	2200      	movs	r2, #0
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	681b      	ldr	r3, [r3, #0]
 8105438:	2b00      	cmp	r3, #0
 810543a:	d105      	bne.n	8105448 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810543c:	4b07      	ldr	r3, [pc, #28]	; (810545c <prvGetNextExpireTime+0x44>)
 810543e:	681b      	ldr	r3, [r3, #0]
 8105440:	68db      	ldr	r3, [r3, #12]
 8105442:	681b      	ldr	r3, [r3, #0]
 8105444:	60fb      	str	r3, [r7, #12]
 8105446:	e001      	b.n	810544c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8105448:	2300      	movs	r3, #0
 810544a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810544c:	68fb      	ldr	r3, [r7, #12]
}
 810544e:	4618      	mov	r0, r3
 8105450:	3714      	adds	r7, #20
 8105452:	46bd      	mov	sp, r7
 8105454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105458:	4770      	bx	lr
 810545a:	bf00      	nop
 810545c:	1000ca44 	.word	0x1000ca44

08105460 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8105460:	b580      	push	{r7, lr}
 8105462:	b084      	sub	sp, #16
 8105464:	af00      	add	r7, sp, #0
 8105466:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8105468:	f7fe ff18 	bl	810429c <xTaskGetTickCount>
 810546c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810546e:	4b0b      	ldr	r3, [pc, #44]	; (810549c <prvSampleTimeNow+0x3c>)
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	68fa      	ldr	r2, [r7, #12]
 8105474:	429a      	cmp	r2, r3
 8105476:	d205      	bcs.n	8105484 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8105478:	f000 f936 	bl	81056e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	2201      	movs	r2, #1
 8105480:	601a      	str	r2, [r3, #0]
 8105482:	e002      	b.n	810548a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8105484:	687b      	ldr	r3, [r7, #4]
 8105486:	2200      	movs	r2, #0
 8105488:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810548a:	4a04      	ldr	r2, [pc, #16]	; (810549c <prvSampleTimeNow+0x3c>)
 810548c:	68fb      	ldr	r3, [r7, #12]
 810548e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8105490:	68fb      	ldr	r3, [r7, #12]
}
 8105492:	4618      	mov	r0, r3
 8105494:	3710      	adds	r7, #16
 8105496:	46bd      	mov	sp, r7
 8105498:	bd80      	pop	{r7, pc}
 810549a:	bf00      	nop
 810549c:	1000ca54 	.word	0x1000ca54

081054a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 81054a0:	b580      	push	{r7, lr}
 81054a2:	b086      	sub	sp, #24
 81054a4:	af00      	add	r7, sp, #0
 81054a6:	60f8      	str	r0, [r7, #12]
 81054a8:	60b9      	str	r1, [r7, #8]
 81054aa:	607a      	str	r2, [r7, #4]
 81054ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 81054ae:	2300      	movs	r3, #0
 81054b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 81054b2:	68fb      	ldr	r3, [r7, #12]
 81054b4:	68ba      	ldr	r2, [r7, #8]
 81054b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81054b8:	68fb      	ldr	r3, [r7, #12]
 81054ba:	68fa      	ldr	r2, [r7, #12]
 81054bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 81054be:	68ba      	ldr	r2, [r7, #8]
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	429a      	cmp	r2, r3
 81054c4:	d812      	bhi.n	81054ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81054c6:	687a      	ldr	r2, [r7, #4]
 81054c8:	683b      	ldr	r3, [r7, #0]
 81054ca:	1ad2      	subs	r2, r2, r3
 81054cc:	68fb      	ldr	r3, [r7, #12]
 81054ce:	699b      	ldr	r3, [r3, #24]
 81054d0:	429a      	cmp	r2, r3
 81054d2:	d302      	bcc.n	81054da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 81054d4:	2301      	movs	r3, #1
 81054d6:	617b      	str	r3, [r7, #20]
 81054d8:	e01b      	b.n	8105512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 81054da:	4b10      	ldr	r3, [pc, #64]	; (810551c <prvInsertTimerInActiveList+0x7c>)
 81054dc:	681a      	ldr	r2, [r3, #0]
 81054de:	68fb      	ldr	r3, [r7, #12]
 81054e0:	3304      	adds	r3, #4
 81054e2:	4619      	mov	r1, r3
 81054e4:	4610      	mov	r0, r2
 81054e6:	f7fc feaa 	bl	810223e <vListInsert>
 81054ea:	e012      	b.n	8105512 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81054ec:	687a      	ldr	r2, [r7, #4]
 81054ee:	683b      	ldr	r3, [r7, #0]
 81054f0:	429a      	cmp	r2, r3
 81054f2:	d206      	bcs.n	8105502 <prvInsertTimerInActiveList+0x62>
 81054f4:	68ba      	ldr	r2, [r7, #8]
 81054f6:	683b      	ldr	r3, [r7, #0]
 81054f8:	429a      	cmp	r2, r3
 81054fa:	d302      	bcc.n	8105502 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81054fc:	2301      	movs	r3, #1
 81054fe:	617b      	str	r3, [r7, #20]
 8105500:	e007      	b.n	8105512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8105502:	4b07      	ldr	r3, [pc, #28]	; (8105520 <prvInsertTimerInActiveList+0x80>)
 8105504:	681a      	ldr	r2, [r3, #0]
 8105506:	68fb      	ldr	r3, [r7, #12]
 8105508:	3304      	adds	r3, #4
 810550a:	4619      	mov	r1, r3
 810550c:	4610      	mov	r0, r2
 810550e:	f7fc fe96 	bl	810223e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8105512:	697b      	ldr	r3, [r7, #20]
}
 8105514:	4618      	mov	r0, r3
 8105516:	3718      	adds	r7, #24
 8105518:	46bd      	mov	sp, r7
 810551a:	bd80      	pop	{r7, pc}
 810551c:	1000ca48 	.word	0x1000ca48
 8105520:	1000ca44 	.word	0x1000ca44

08105524 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8105524:	b580      	push	{r7, lr}
 8105526:	b08e      	sub	sp, #56	; 0x38
 8105528:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810552a:	e0ca      	b.n	81056c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	2b00      	cmp	r3, #0
 8105530:	da18      	bge.n	8105564 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8105532:	1d3b      	adds	r3, r7, #4
 8105534:	3304      	adds	r3, #4
 8105536:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8105538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810553a:	2b00      	cmp	r3, #0
 810553c:	d10a      	bne.n	8105554 <prvProcessReceivedCommands+0x30>
	__asm volatile
 810553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105542:	f383 8811 	msr	BASEPRI, r3
 8105546:	f3bf 8f6f 	isb	sy
 810554a:	f3bf 8f4f 	dsb	sy
 810554e:	61fb      	str	r3, [r7, #28]
}
 8105550:	bf00      	nop
 8105552:	e7fe      	b.n	8105552 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8105554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810555a:	6850      	ldr	r0, [r2, #4]
 810555c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810555e:	6892      	ldr	r2, [r2, #8]
 8105560:	4611      	mov	r1, r2
 8105562:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	2b00      	cmp	r3, #0
 8105568:	f2c0 80aa 	blt.w	81056c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810556c:	68fb      	ldr	r3, [r7, #12]
 810556e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8105570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105572:	695b      	ldr	r3, [r3, #20]
 8105574:	2b00      	cmp	r3, #0
 8105576:	d004      	beq.n	8105582 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8105578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810557a:	3304      	adds	r3, #4
 810557c:	4618      	mov	r0, r3
 810557e:	f7fc fe97 	bl	81022b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8105582:	463b      	mov	r3, r7
 8105584:	4618      	mov	r0, r3
 8105586:	f7ff ff6b 	bl	8105460 <prvSampleTimeNow>
 810558a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	2b09      	cmp	r3, #9
 8105590:	f200 8097 	bhi.w	81056c2 <prvProcessReceivedCommands+0x19e>
 8105594:	a201      	add	r2, pc, #4	; (adr r2, 810559c <prvProcessReceivedCommands+0x78>)
 8105596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810559a:	bf00      	nop
 810559c:	081055c5 	.word	0x081055c5
 81055a0:	081055c5 	.word	0x081055c5
 81055a4:	081055c5 	.word	0x081055c5
 81055a8:	08105639 	.word	0x08105639
 81055ac:	0810564d 	.word	0x0810564d
 81055b0:	08105697 	.word	0x08105697
 81055b4:	081055c5 	.word	0x081055c5
 81055b8:	081055c5 	.word	0x081055c5
 81055bc:	08105639 	.word	0x08105639
 81055c0:	0810564d 	.word	0x0810564d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81055ca:	f043 0301 	orr.w	r3, r3, #1
 81055ce:	b2da      	uxtb	r2, r3
 81055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81055d6:	68ba      	ldr	r2, [r7, #8]
 81055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055da:	699b      	ldr	r3, [r3, #24]
 81055dc:	18d1      	adds	r1, r2, r3
 81055de:	68bb      	ldr	r3, [r7, #8]
 81055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81055e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81055e4:	f7ff ff5c 	bl	81054a0 <prvInsertTimerInActiveList>
 81055e8:	4603      	mov	r3, r0
 81055ea:	2b00      	cmp	r3, #0
 81055ec:	d069      	beq.n	81056c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055f0:	6a1b      	ldr	r3, [r3, #32]
 81055f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81055f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81055fc:	f003 0304 	and.w	r3, r3, #4
 8105600:	2b00      	cmp	r3, #0
 8105602:	d05e      	beq.n	81056c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8105604:	68ba      	ldr	r2, [r7, #8]
 8105606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105608:	699b      	ldr	r3, [r3, #24]
 810560a:	441a      	add	r2, r3
 810560c:	2300      	movs	r3, #0
 810560e:	9300      	str	r3, [sp, #0]
 8105610:	2300      	movs	r3, #0
 8105612:	2100      	movs	r1, #0
 8105614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8105616:	f7ff fe05 	bl	8105224 <xTimerGenericCommand>
 810561a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810561c:	6a3b      	ldr	r3, [r7, #32]
 810561e:	2b00      	cmp	r3, #0
 8105620:	d14f      	bne.n	81056c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8105622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105626:	f383 8811 	msr	BASEPRI, r3
 810562a:	f3bf 8f6f 	isb	sy
 810562e:	f3bf 8f4f 	dsb	sy
 8105632:	61bb      	str	r3, [r7, #24]
}
 8105634:	bf00      	nop
 8105636:	e7fe      	b.n	8105636 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8105638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810563a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810563e:	f023 0301 	bic.w	r3, r3, #1
 8105642:	b2da      	uxtb	r2, r3
 8105644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105646:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 810564a:	e03a      	b.n	81056c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810564e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8105652:	f043 0301 	orr.w	r3, r3, #1
 8105656:	b2da      	uxtb	r2, r3
 8105658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810565a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810565e:	68ba      	ldr	r2, [r7, #8]
 8105660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105662:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8105664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105666:	699b      	ldr	r3, [r3, #24]
 8105668:	2b00      	cmp	r3, #0
 810566a:	d10a      	bne.n	8105682 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 810566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105670:	f383 8811 	msr	BASEPRI, r3
 8105674:	f3bf 8f6f 	isb	sy
 8105678:	f3bf 8f4f 	dsb	sy
 810567c:	617b      	str	r3, [r7, #20]
}
 810567e:	bf00      	nop
 8105680:	e7fe      	b.n	8105680 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8105682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105684:	699a      	ldr	r2, [r3, #24]
 8105686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105688:	18d1      	adds	r1, r2, r3
 810568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810568c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810568e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8105690:	f7ff ff06 	bl	81054a0 <prvInsertTimerInActiveList>
					break;
 8105694:	e015      	b.n	81056c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8105696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810569c:	f003 0302 	and.w	r3, r3, #2
 81056a0:	2b00      	cmp	r3, #0
 81056a2:	d103      	bne.n	81056ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 81056a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81056a6:	f7fc fc5b 	bl	8101f60 <vPortFree>
 81056aa:	e00a      	b.n	81056c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81056b2:	f023 0301 	bic.w	r3, r3, #1
 81056b6:	b2da      	uxtb	r2, r3
 81056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 81056be:	e000      	b.n	81056c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 81056c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81056c2:	4b08      	ldr	r3, [pc, #32]	; (81056e4 <prvProcessReceivedCommands+0x1c0>)
 81056c4:	681b      	ldr	r3, [r3, #0]
 81056c6:	1d39      	adds	r1, r7, #4
 81056c8:	2200      	movs	r2, #0
 81056ca:	4618      	mov	r0, r3
 81056cc:	f7fd fbd0 	bl	8102e70 <xQueueReceive>
 81056d0:	4603      	mov	r3, r0
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	f47f af2a 	bne.w	810552c <prvProcessReceivedCommands+0x8>
	}
}
 81056d8:	bf00      	nop
 81056da:	bf00      	nop
 81056dc:	3730      	adds	r7, #48	; 0x30
 81056de:	46bd      	mov	sp, r7
 81056e0:	bd80      	pop	{r7, pc}
 81056e2:	bf00      	nop
 81056e4:	1000ca4c 	.word	0x1000ca4c

081056e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81056e8:	b580      	push	{r7, lr}
 81056ea:	b088      	sub	sp, #32
 81056ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81056ee:	e048      	b.n	8105782 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81056f0:	4b2d      	ldr	r3, [pc, #180]	; (81057a8 <prvSwitchTimerLists+0xc0>)
 81056f2:	681b      	ldr	r3, [r3, #0]
 81056f4:	68db      	ldr	r3, [r3, #12]
 81056f6:	681b      	ldr	r3, [r3, #0]
 81056f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81056fa:	4b2b      	ldr	r3, [pc, #172]	; (81057a8 <prvSwitchTimerLists+0xc0>)
 81056fc:	681b      	ldr	r3, [r3, #0]
 81056fe:	68db      	ldr	r3, [r3, #12]
 8105700:	68db      	ldr	r3, [r3, #12]
 8105702:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8105704:	68fb      	ldr	r3, [r7, #12]
 8105706:	3304      	adds	r3, #4
 8105708:	4618      	mov	r0, r3
 810570a:	f7fc fdd1 	bl	81022b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810570e:	68fb      	ldr	r3, [r7, #12]
 8105710:	6a1b      	ldr	r3, [r3, #32]
 8105712:	68f8      	ldr	r0, [r7, #12]
 8105714:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8105716:	68fb      	ldr	r3, [r7, #12]
 8105718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810571c:	f003 0304 	and.w	r3, r3, #4
 8105720:	2b00      	cmp	r3, #0
 8105722:	d02e      	beq.n	8105782 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8105724:	68fb      	ldr	r3, [r7, #12]
 8105726:	699b      	ldr	r3, [r3, #24]
 8105728:	693a      	ldr	r2, [r7, #16]
 810572a:	4413      	add	r3, r2
 810572c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810572e:	68ba      	ldr	r2, [r7, #8]
 8105730:	693b      	ldr	r3, [r7, #16]
 8105732:	429a      	cmp	r2, r3
 8105734:	d90e      	bls.n	8105754 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8105736:	68fb      	ldr	r3, [r7, #12]
 8105738:	68ba      	ldr	r2, [r7, #8]
 810573a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810573c:	68fb      	ldr	r3, [r7, #12]
 810573e:	68fa      	ldr	r2, [r7, #12]
 8105740:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8105742:	4b19      	ldr	r3, [pc, #100]	; (81057a8 <prvSwitchTimerLists+0xc0>)
 8105744:	681a      	ldr	r2, [r3, #0]
 8105746:	68fb      	ldr	r3, [r7, #12]
 8105748:	3304      	adds	r3, #4
 810574a:	4619      	mov	r1, r3
 810574c:	4610      	mov	r0, r2
 810574e:	f7fc fd76 	bl	810223e <vListInsert>
 8105752:	e016      	b.n	8105782 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8105754:	2300      	movs	r3, #0
 8105756:	9300      	str	r3, [sp, #0]
 8105758:	2300      	movs	r3, #0
 810575a:	693a      	ldr	r2, [r7, #16]
 810575c:	2100      	movs	r1, #0
 810575e:	68f8      	ldr	r0, [r7, #12]
 8105760:	f7ff fd60 	bl	8105224 <xTimerGenericCommand>
 8105764:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8105766:	687b      	ldr	r3, [r7, #4]
 8105768:	2b00      	cmp	r3, #0
 810576a:	d10a      	bne.n	8105782 <prvSwitchTimerLists+0x9a>
	__asm volatile
 810576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105770:	f383 8811 	msr	BASEPRI, r3
 8105774:	f3bf 8f6f 	isb	sy
 8105778:	f3bf 8f4f 	dsb	sy
 810577c:	603b      	str	r3, [r7, #0]
}
 810577e:	bf00      	nop
 8105780:	e7fe      	b.n	8105780 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8105782:	4b09      	ldr	r3, [pc, #36]	; (81057a8 <prvSwitchTimerLists+0xc0>)
 8105784:	681b      	ldr	r3, [r3, #0]
 8105786:	681b      	ldr	r3, [r3, #0]
 8105788:	2b00      	cmp	r3, #0
 810578a:	d1b1      	bne.n	81056f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810578c:	4b06      	ldr	r3, [pc, #24]	; (81057a8 <prvSwitchTimerLists+0xc0>)
 810578e:	681b      	ldr	r3, [r3, #0]
 8105790:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8105792:	4b06      	ldr	r3, [pc, #24]	; (81057ac <prvSwitchTimerLists+0xc4>)
 8105794:	681b      	ldr	r3, [r3, #0]
 8105796:	4a04      	ldr	r2, [pc, #16]	; (81057a8 <prvSwitchTimerLists+0xc0>)
 8105798:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810579a:	4a04      	ldr	r2, [pc, #16]	; (81057ac <prvSwitchTimerLists+0xc4>)
 810579c:	697b      	ldr	r3, [r7, #20]
 810579e:	6013      	str	r3, [r2, #0]
}
 81057a0:	bf00      	nop
 81057a2:	3718      	adds	r7, #24
 81057a4:	46bd      	mov	sp, r7
 81057a6:	bd80      	pop	{r7, pc}
 81057a8:	1000ca44 	.word	0x1000ca44
 81057ac:	1000ca48 	.word	0x1000ca48

081057b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 81057b0:	b580      	push	{r7, lr}
 81057b2:	b082      	sub	sp, #8
 81057b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 81057b6:	f7fc fed5 	bl	8102564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 81057ba:	4b15      	ldr	r3, [pc, #84]	; (8105810 <prvCheckForValidListAndQueue+0x60>)
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	2b00      	cmp	r3, #0
 81057c0:	d120      	bne.n	8105804 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 81057c2:	4814      	ldr	r0, [pc, #80]	; (8105814 <prvCheckForValidListAndQueue+0x64>)
 81057c4:	f7fc fcea 	bl	810219c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 81057c8:	4813      	ldr	r0, [pc, #76]	; (8105818 <prvCheckForValidListAndQueue+0x68>)
 81057ca:	f7fc fce7 	bl	810219c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 81057ce:	4b13      	ldr	r3, [pc, #76]	; (810581c <prvCheckForValidListAndQueue+0x6c>)
 81057d0:	4a10      	ldr	r2, [pc, #64]	; (8105814 <prvCheckForValidListAndQueue+0x64>)
 81057d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 81057d4:	4b12      	ldr	r3, [pc, #72]	; (8105820 <prvCheckForValidListAndQueue+0x70>)
 81057d6:	4a10      	ldr	r2, [pc, #64]	; (8105818 <prvCheckForValidListAndQueue+0x68>)
 81057d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 81057da:	2300      	movs	r3, #0
 81057dc:	9300      	str	r3, [sp, #0]
 81057de:	4b11      	ldr	r3, [pc, #68]	; (8105824 <prvCheckForValidListAndQueue+0x74>)
 81057e0:	4a11      	ldr	r2, [pc, #68]	; (8105828 <prvCheckForValidListAndQueue+0x78>)
 81057e2:	2110      	movs	r1, #16
 81057e4:	200a      	movs	r0, #10
 81057e6:	f7fd f847 	bl	8102878 <xQueueGenericCreateStatic>
 81057ea:	4603      	mov	r3, r0
 81057ec:	4a08      	ldr	r2, [pc, #32]	; (8105810 <prvCheckForValidListAndQueue+0x60>)
 81057ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81057f0:	4b07      	ldr	r3, [pc, #28]	; (8105810 <prvCheckForValidListAndQueue+0x60>)
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	2b00      	cmp	r3, #0
 81057f6:	d005      	beq.n	8105804 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81057f8:	4b05      	ldr	r3, [pc, #20]	; (8105810 <prvCheckForValidListAndQueue+0x60>)
 81057fa:	681b      	ldr	r3, [r3, #0]
 81057fc:	490b      	ldr	r1, [pc, #44]	; (810582c <prvCheckForValidListAndQueue+0x7c>)
 81057fe:	4618      	mov	r0, r3
 8105800:	f7fd fe4a 	bl	8103498 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8105804:	f7fc fede 	bl	81025c4 <vPortExitCritical>
}
 8105808:	bf00      	nop
 810580a:	46bd      	mov	sp, r7
 810580c:	bd80      	pop	{r7, pc}
 810580e:	bf00      	nop
 8105810:	1000ca4c 	.word	0x1000ca4c
 8105814:	1000ca1c 	.word	0x1000ca1c
 8105818:	1000ca30 	.word	0x1000ca30
 810581c:	1000ca44 	.word	0x1000ca44
 8105820:	1000ca48 	.word	0x1000ca48
 8105824:	1000caf8 	.word	0x1000caf8
 8105828:	1000ca58 	.word	0x1000ca58
 810582c:	08106bf4 	.word	0x08106bf4

08105830 <__errno>:
 8105830:	4b01      	ldr	r3, [pc, #4]	; (8105838 <__errno+0x8>)
 8105832:	6818      	ldr	r0, [r3, #0]
 8105834:	4770      	bx	lr
 8105836:	bf00      	nop
 8105838:	10000018 	.word	0x10000018

0810583c <__libc_init_array>:
 810583c:	b570      	push	{r4, r5, r6, lr}
 810583e:	4d0d      	ldr	r5, [pc, #52]	; (8105874 <__libc_init_array+0x38>)
 8105840:	4c0d      	ldr	r4, [pc, #52]	; (8105878 <__libc_init_array+0x3c>)
 8105842:	1b64      	subs	r4, r4, r5
 8105844:	10a4      	asrs	r4, r4, #2
 8105846:	2600      	movs	r6, #0
 8105848:	42a6      	cmp	r6, r4
 810584a:	d109      	bne.n	8105860 <__libc_init_array+0x24>
 810584c:	4d0b      	ldr	r5, [pc, #44]	; (810587c <__libc_init_array+0x40>)
 810584e:	4c0c      	ldr	r4, [pc, #48]	; (8105880 <__libc_init_array+0x44>)
 8105850:	f001 f9b4 	bl	8106bbc <_init>
 8105854:	1b64      	subs	r4, r4, r5
 8105856:	10a4      	asrs	r4, r4, #2
 8105858:	2600      	movs	r6, #0
 810585a:	42a6      	cmp	r6, r4
 810585c:	d105      	bne.n	810586a <__libc_init_array+0x2e>
 810585e:	bd70      	pop	{r4, r5, r6, pc}
 8105860:	f855 3b04 	ldr.w	r3, [r5], #4
 8105864:	4798      	blx	r3
 8105866:	3601      	adds	r6, #1
 8105868:	e7ee      	b.n	8105848 <__libc_init_array+0xc>
 810586a:	f855 3b04 	ldr.w	r3, [r5], #4
 810586e:	4798      	blx	r3
 8105870:	3601      	adds	r6, #1
 8105872:	e7f2      	b.n	810585a <__libc_init_array+0x1e>
 8105874:	08106dc8 	.word	0x08106dc8
 8105878:	08106dc8 	.word	0x08106dc8
 810587c:	08106dc8 	.word	0x08106dc8
 8105880:	08106dcc 	.word	0x08106dcc

08105884 <__retarget_lock_acquire_recursive>:
 8105884:	4770      	bx	lr

08105886 <__retarget_lock_release_recursive>:
 8105886:	4770      	bx	lr

08105888 <memcpy>:
 8105888:	440a      	add	r2, r1
 810588a:	4291      	cmp	r1, r2
 810588c:	f100 33ff 	add.w	r3, r0, #4294967295
 8105890:	d100      	bne.n	8105894 <memcpy+0xc>
 8105892:	4770      	bx	lr
 8105894:	b510      	push	{r4, lr}
 8105896:	f811 4b01 	ldrb.w	r4, [r1], #1
 810589a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810589e:	4291      	cmp	r1, r2
 81058a0:	d1f9      	bne.n	8105896 <memcpy+0xe>
 81058a2:	bd10      	pop	{r4, pc}

081058a4 <memset>:
 81058a4:	4402      	add	r2, r0
 81058a6:	4603      	mov	r3, r0
 81058a8:	4293      	cmp	r3, r2
 81058aa:	d100      	bne.n	81058ae <memset+0xa>
 81058ac:	4770      	bx	lr
 81058ae:	f803 1b01 	strb.w	r1, [r3], #1
 81058b2:	e7f9      	b.n	81058a8 <memset+0x4>

081058b4 <sbrk_aligned>:
 81058b4:	b570      	push	{r4, r5, r6, lr}
 81058b6:	4e0e      	ldr	r6, [pc, #56]	; (81058f0 <sbrk_aligned+0x3c>)
 81058b8:	460c      	mov	r4, r1
 81058ba:	6831      	ldr	r1, [r6, #0]
 81058bc:	4605      	mov	r5, r0
 81058be:	b911      	cbnz	r1, 81058c6 <sbrk_aligned+0x12>
 81058c0:	f000 f8f6 	bl	8105ab0 <_sbrk_r>
 81058c4:	6030      	str	r0, [r6, #0]
 81058c6:	4621      	mov	r1, r4
 81058c8:	4628      	mov	r0, r5
 81058ca:	f000 f8f1 	bl	8105ab0 <_sbrk_r>
 81058ce:	1c43      	adds	r3, r0, #1
 81058d0:	d00a      	beq.n	81058e8 <sbrk_aligned+0x34>
 81058d2:	1cc4      	adds	r4, r0, #3
 81058d4:	f024 0403 	bic.w	r4, r4, #3
 81058d8:	42a0      	cmp	r0, r4
 81058da:	d007      	beq.n	81058ec <sbrk_aligned+0x38>
 81058dc:	1a21      	subs	r1, r4, r0
 81058de:	4628      	mov	r0, r5
 81058e0:	f000 f8e6 	bl	8105ab0 <_sbrk_r>
 81058e4:	3001      	adds	r0, #1
 81058e6:	d101      	bne.n	81058ec <sbrk_aligned+0x38>
 81058e8:	f04f 34ff 	mov.w	r4, #4294967295
 81058ec:	4620      	mov	r0, r4
 81058ee:	bd70      	pop	{r4, r5, r6, pc}
 81058f0:	1000cb50 	.word	0x1000cb50

081058f4 <_malloc_r>:
 81058f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81058f8:	1ccd      	adds	r5, r1, #3
 81058fa:	f025 0503 	bic.w	r5, r5, #3
 81058fe:	3508      	adds	r5, #8
 8105900:	2d0c      	cmp	r5, #12
 8105902:	bf38      	it	cc
 8105904:	250c      	movcc	r5, #12
 8105906:	2d00      	cmp	r5, #0
 8105908:	4607      	mov	r7, r0
 810590a:	db01      	blt.n	8105910 <_malloc_r+0x1c>
 810590c:	42a9      	cmp	r1, r5
 810590e:	d905      	bls.n	810591c <_malloc_r+0x28>
 8105910:	230c      	movs	r3, #12
 8105912:	603b      	str	r3, [r7, #0]
 8105914:	2600      	movs	r6, #0
 8105916:	4630      	mov	r0, r6
 8105918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810591c:	4e2e      	ldr	r6, [pc, #184]	; (81059d8 <_malloc_r+0xe4>)
 810591e:	f000 f925 	bl	8105b6c <__malloc_lock>
 8105922:	6833      	ldr	r3, [r6, #0]
 8105924:	461c      	mov	r4, r3
 8105926:	bb34      	cbnz	r4, 8105976 <_malloc_r+0x82>
 8105928:	4629      	mov	r1, r5
 810592a:	4638      	mov	r0, r7
 810592c:	f7ff ffc2 	bl	81058b4 <sbrk_aligned>
 8105930:	1c43      	adds	r3, r0, #1
 8105932:	4604      	mov	r4, r0
 8105934:	d14d      	bne.n	81059d2 <_malloc_r+0xde>
 8105936:	6834      	ldr	r4, [r6, #0]
 8105938:	4626      	mov	r6, r4
 810593a:	2e00      	cmp	r6, #0
 810593c:	d140      	bne.n	81059c0 <_malloc_r+0xcc>
 810593e:	6823      	ldr	r3, [r4, #0]
 8105940:	4631      	mov	r1, r6
 8105942:	4638      	mov	r0, r7
 8105944:	eb04 0803 	add.w	r8, r4, r3
 8105948:	f000 f8b2 	bl	8105ab0 <_sbrk_r>
 810594c:	4580      	cmp	r8, r0
 810594e:	d13a      	bne.n	81059c6 <_malloc_r+0xd2>
 8105950:	6821      	ldr	r1, [r4, #0]
 8105952:	3503      	adds	r5, #3
 8105954:	1a6d      	subs	r5, r5, r1
 8105956:	f025 0503 	bic.w	r5, r5, #3
 810595a:	3508      	adds	r5, #8
 810595c:	2d0c      	cmp	r5, #12
 810595e:	bf38      	it	cc
 8105960:	250c      	movcc	r5, #12
 8105962:	4629      	mov	r1, r5
 8105964:	4638      	mov	r0, r7
 8105966:	f7ff ffa5 	bl	81058b4 <sbrk_aligned>
 810596a:	3001      	adds	r0, #1
 810596c:	d02b      	beq.n	81059c6 <_malloc_r+0xd2>
 810596e:	6823      	ldr	r3, [r4, #0]
 8105970:	442b      	add	r3, r5
 8105972:	6023      	str	r3, [r4, #0]
 8105974:	e00e      	b.n	8105994 <_malloc_r+0xa0>
 8105976:	6822      	ldr	r2, [r4, #0]
 8105978:	1b52      	subs	r2, r2, r5
 810597a:	d41e      	bmi.n	81059ba <_malloc_r+0xc6>
 810597c:	2a0b      	cmp	r2, #11
 810597e:	d916      	bls.n	81059ae <_malloc_r+0xba>
 8105980:	1961      	adds	r1, r4, r5
 8105982:	42a3      	cmp	r3, r4
 8105984:	6025      	str	r5, [r4, #0]
 8105986:	bf18      	it	ne
 8105988:	6059      	strne	r1, [r3, #4]
 810598a:	6863      	ldr	r3, [r4, #4]
 810598c:	bf08      	it	eq
 810598e:	6031      	streq	r1, [r6, #0]
 8105990:	5162      	str	r2, [r4, r5]
 8105992:	604b      	str	r3, [r1, #4]
 8105994:	4638      	mov	r0, r7
 8105996:	f104 060b 	add.w	r6, r4, #11
 810599a:	f000 f8ed 	bl	8105b78 <__malloc_unlock>
 810599e:	f026 0607 	bic.w	r6, r6, #7
 81059a2:	1d23      	adds	r3, r4, #4
 81059a4:	1af2      	subs	r2, r6, r3
 81059a6:	d0b6      	beq.n	8105916 <_malloc_r+0x22>
 81059a8:	1b9b      	subs	r3, r3, r6
 81059aa:	50a3      	str	r3, [r4, r2]
 81059ac:	e7b3      	b.n	8105916 <_malloc_r+0x22>
 81059ae:	6862      	ldr	r2, [r4, #4]
 81059b0:	42a3      	cmp	r3, r4
 81059b2:	bf0c      	ite	eq
 81059b4:	6032      	streq	r2, [r6, #0]
 81059b6:	605a      	strne	r2, [r3, #4]
 81059b8:	e7ec      	b.n	8105994 <_malloc_r+0xa0>
 81059ba:	4623      	mov	r3, r4
 81059bc:	6864      	ldr	r4, [r4, #4]
 81059be:	e7b2      	b.n	8105926 <_malloc_r+0x32>
 81059c0:	4634      	mov	r4, r6
 81059c2:	6876      	ldr	r6, [r6, #4]
 81059c4:	e7b9      	b.n	810593a <_malloc_r+0x46>
 81059c6:	230c      	movs	r3, #12
 81059c8:	603b      	str	r3, [r7, #0]
 81059ca:	4638      	mov	r0, r7
 81059cc:	f000 f8d4 	bl	8105b78 <__malloc_unlock>
 81059d0:	e7a1      	b.n	8105916 <_malloc_r+0x22>
 81059d2:	6025      	str	r5, [r4, #0]
 81059d4:	e7de      	b.n	8105994 <_malloc_r+0xa0>
 81059d6:	bf00      	nop
 81059d8:	1000cb4c 	.word	0x1000cb4c

081059dc <cleanup_glue>:
 81059dc:	b538      	push	{r3, r4, r5, lr}
 81059de:	460c      	mov	r4, r1
 81059e0:	6809      	ldr	r1, [r1, #0]
 81059e2:	4605      	mov	r5, r0
 81059e4:	b109      	cbz	r1, 81059ea <cleanup_glue+0xe>
 81059e6:	f7ff fff9 	bl	81059dc <cleanup_glue>
 81059ea:	4621      	mov	r1, r4
 81059ec:	4628      	mov	r0, r5
 81059ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81059f2:	f000 b8c7 	b.w	8105b84 <_free_r>
	...

081059f8 <_reclaim_reent>:
 81059f8:	4b2c      	ldr	r3, [pc, #176]	; (8105aac <_reclaim_reent+0xb4>)
 81059fa:	681b      	ldr	r3, [r3, #0]
 81059fc:	4283      	cmp	r3, r0
 81059fe:	b570      	push	{r4, r5, r6, lr}
 8105a00:	4604      	mov	r4, r0
 8105a02:	d051      	beq.n	8105aa8 <_reclaim_reent+0xb0>
 8105a04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8105a06:	b143      	cbz	r3, 8105a1a <_reclaim_reent+0x22>
 8105a08:	68db      	ldr	r3, [r3, #12]
 8105a0a:	2b00      	cmp	r3, #0
 8105a0c:	d14a      	bne.n	8105aa4 <_reclaim_reent+0xac>
 8105a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105a10:	6819      	ldr	r1, [r3, #0]
 8105a12:	b111      	cbz	r1, 8105a1a <_reclaim_reent+0x22>
 8105a14:	4620      	mov	r0, r4
 8105a16:	f000 f8b5 	bl	8105b84 <_free_r>
 8105a1a:	6961      	ldr	r1, [r4, #20]
 8105a1c:	b111      	cbz	r1, 8105a24 <_reclaim_reent+0x2c>
 8105a1e:	4620      	mov	r0, r4
 8105a20:	f000 f8b0 	bl	8105b84 <_free_r>
 8105a24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8105a26:	b111      	cbz	r1, 8105a2e <_reclaim_reent+0x36>
 8105a28:	4620      	mov	r0, r4
 8105a2a:	f000 f8ab 	bl	8105b84 <_free_r>
 8105a2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8105a30:	b111      	cbz	r1, 8105a38 <_reclaim_reent+0x40>
 8105a32:	4620      	mov	r0, r4
 8105a34:	f000 f8a6 	bl	8105b84 <_free_r>
 8105a38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8105a3a:	b111      	cbz	r1, 8105a42 <_reclaim_reent+0x4a>
 8105a3c:	4620      	mov	r0, r4
 8105a3e:	f000 f8a1 	bl	8105b84 <_free_r>
 8105a42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8105a44:	b111      	cbz	r1, 8105a4c <_reclaim_reent+0x54>
 8105a46:	4620      	mov	r0, r4
 8105a48:	f000 f89c 	bl	8105b84 <_free_r>
 8105a4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8105a4e:	b111      	cbz	r1, 8105a56 <_reclaim_reent+0x5e>
 8105a50:	4620      	mov	r0, r4
 8105a52:	f000 f897 	bl	8105b84 <_free_r>
 8105a56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8105a58:	b111      	cbz	r1, 8105a60 <_reclaim_reent+0x68>
 8105a5a:	4620      	mov	r0, r4
 8105a5c:	f000 f892 	bl	8105b84 <_free_r>
 8105a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105a62:	b111      	cbz	r1, 8105a6a <_reclaim_reent+0x72>
 8105a64:	4620      	mov	r0, r4
 8105a66:	f000 f88d 	bl	8105b84 <_free_r>
 8105a6a:	69a3      	ldr	r3, [r4, #24]
 8105a6c:	b1e3      	cbz	r3, 8105aa8 <_reclaim_reent+0xb0>
 8105a6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8105a70:	4620      	mov	r0, r4
 8105a72:	4798      	blx	r3
 8105a74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8105a76:	b1b9      	cbz	r1, 8105aa8 <_reclaim_reent+0xb0>
 8105a78:	4620      	mov	r0, r4
 8105a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8105a7e:	f7ff bfad 	b.w	81059dc <cleanup_glue>
 8105a82:	5949      	ldr	r1, [r1, r5]
 8105a84:	b941      	cbnz	r1, 8105a98 <_reclaim_reent+0xa0>
 8105a86:	3504      	adds	r5, #4
 8105a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105a8a:	2d80      	cmp	r5, #128	; 0x80
 8105a8c:	68d9      	ldr	r1, [r3, #12]
 8105a8e:	d1f8      	bne.n	8105a82 <_reclaim_reent+0x8a>
 8105a90:	4620      	mov	r0, r4
 8105a92:	f000 f877 	bl	8105b84 <_free_r>
 8105a96:	e7ba      	b.n	8105a0e <_reclaim_reent+0x16>
 8105a98:	680e      	ldr	r6, [r1, #0]
 8105a9a:	4620      	mov	r0, r4
 8105a9c:	f000 f872 	bl	8105b84 <_free_r>
 8105aa0:	4631      	mov	r1, r6
 8105aa2:	e7ef      	b.n	8105a84 <_reclaim_reent+0x8c>
 8105aa4:	2500      	movs	r5, #0
 8105aa6:	e7ef      	b.n	8105a88 <_reclaim_reent+0x90>
 8105aa8:	bd70      	pop	{r4, r5, r6, pc}
 8105aaa:	bf00      	nop
 8105aac:	10000018 	.word	0x10000018

08105ab0 <_sbrk_r>:
 8105ab0:	b538      	push	{r3, r4, r5, lr}
 8105ab2:	4d06      	ldr	r5, [pc, #24]	; (8105acc <_sbrk_r+0x1c>)
 8105ab4:	2300      	movs	r3, #0
 8105ab6:	4604      	mov	r4, r0
 8105ab8:	4608      	mov	r0, r1
 8105aba:	602b      	str	r3, [r5, #0]
 8105abc:	f7fa ffde 	bl	8100a7c <_sbrk>
 8105ac0:	1c43      	adds	r3, r0, #1
 8105ac2:	d102      	bne.n	8105aca <_sbrk_r+0x1a>
 8105ac4:	682b      	ldr	r3, [r5, #0]
 8105ac6:	b103      	cbz	r3, 8105aca <_sbrk_r+0x1a>
 8105ac8:	6023      	str	r3, [r4, #0]
 8105aca:	bd38      	pop	{r3, r4, r5, pc}
 8105acc:	1000cb54 	.word	0x1000cb54

08105ad0 <siprintf>:
 8105ad0:	b40e      	push	{r1, r2, r3}
 8105ad2:	b500      	push	{lr}
 8105ad4:	b09c      	sub	sp, #112	; 0x70
 8105ad6:	ab1d      	add	r3, sp, #116	; 0x74
 8105ad8:	9002      	str	r0, [sp, #8]
 8105ada:	9006      	str	r0, [sp, #24]
 8105adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8105ae0:	4809      	ldr	r0, [pc, #36]	; (8105b08 <siprintf+0x38>)
 8105ae2:	9107      	str	r1, [sp, #28]
 8105ae4:	9104      	str	r1, [sp, #16]
 8105ae6:	4909      	ldr	r1, [pc, #36]	; (8105b0c <siprintf+0x3c>)
 8105ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8105aec:	9105      	str	r1, [sp, #20]
 8105aee:	6800      	ldr	r0, [r0, #0]
 8105af0:	9301      	str	r3, [sp, #4]
 8105af2:	a902      	add	r1, sp, #8
 8105af4:	f000 f8ee 	bl	8105cd4 <_svfiprintf_r>
 8105af8:	9b02      	ldr	r3, [sp, #8]
 8105afa:	2200      	movs	r2, #0
 8105afc:	701a      	strb	r2, [r3, #0]
 8105afe:	b01c      	add	sp, #112	; 0x70
 8105b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8105b04:	b003      	add	sp, #12
 8105b06:	4770      	bx	lr
 8105b08:	10000018 	.word	0x10000018
 8105b0c:	ffff0208 	.word	0xffff0208

08105b10 <siscanf>:
 8105b10:	b40e      	push	{r1, r2, r3}
 8105b12:	b510      	push	{r4, lr}
 8105b14:	b09f      	sub	sp, #124	; 0x7c
 8105b16:	ac21      	add	r4, sp, #132	; 0x84
 8105b18:	f44f 7101 	mov.w	r1, #516	; 0x204
 8105b1c:	f854 2b04 	ldr.w	r2, [r4], #4
 8105b20:	9201      	str	r2, [sp, #4]
 8105b22:	f8ad 101c 	strh.w	r1, [sp, #28]
 8105b26:	9004      	str	r0, [sp, #16]
 8105b28:	9008      	str	r0, [sp, #32]
 8105b2a:	f7fa fbd9 	bl	81002e0 <strlen>
 8105b2e:	4b0c      	ldr	r3, [pc, #48]	; (8105b60 <siscanf+0x50>)
 8105b30:	9005      	str	r0, [sp, #20]
 8105b32:	9009      	str	r0, [sp, #36]	; 0x24
 8105b34:	930d      	str	r3, [sp, #52]	; 0x34
 8105b36:	480b      	ldr	r0, [pc, #44]	; (8105b64 <siscanf+0x54>)
 8105b38:	9a01      	ldr	r2, [sp, #4]
 8105b3a:	6800      	ldr	r0, [r0, #0]
 8105b3c:	9403      	str	r4, [sp, #12]
 8105b3e:	2300      	movs	r3, #0
 8105b40:	9311      	str	r3, [sp, #68]	; 0x44
 8105b42:	9316      	str	r3, [sp, #88]	; 0x58
 8105b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8105b48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8105b4c:	a904      	add	r1, sp, #16
 8105b4e:	4623      	mov	r3, r4
 8105b50:	f000 fa1a 	bl	8105f88 <__ssvfiscanf_r>
 8105b54:	b01f      	add	sp, #124	; 0x7c
 8105b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105b5a:	b003      	add	sp, #12
 8105b5c:	4770      	bx	lr
 8105b5e:	bf00      	nop
 8105b60:	08105b69 	.word	0x08105b69
 8105b64:	10000018 	.word	0x10000018

08105b68 <__seofread>:
 8105b68:	2000      	movs	r0, #0
 8105b6a:	4770      	bx	lr

08105b6c <__malloc_lock>:
 8105b6c:	4801      	ldr	r0, [pc, #4]	; (8105b74 <__malloc_lock+0x8>)
 8105b6e:	f7ff be89 	b.w	8105884 <__retarget_lock_acquire_recursive>
 8105b72:	bf00      	nop
 8105b74:	1000cb48 	.word	0x1000cb48

08105b78 <__malloc_unlock>:
 8105b78:	4801      	ldr	r0, [pc, #4]	; (8105b80 <__malloc_unlock+0x8>)
 8105b7a:	f7ff be84 	b.w	8105886 <__retarget_lock_release_recursive>
 8105b7e:	bf00      	nop
 8105b80:	1000cb48 	.word	0x1000cb48

08105b84 <_free_r>:
 8105b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8105b86:	2900      	cmp	r1, #0
 8105b88:	d044      	beq.n	8105c14 <_free_r+0x90>
 8105b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8105b8e:	9001      	str	r0, [sp, #4]
 8105b90:	2b00      	cmp	r3, #0
 8105b92:	f1a1 0404 	sub.w	r4, r1, #4
 8105b96:	bfb8      	it	lt
 8105b98:	18e4      	addlt	r4, r4, r3
 8105b9a:	f7ff ffe7 	bl	8105b6c <__malloc_lock>
 8105b9e:	4a1e      	ldr	r2, [pc, #120]	; (8105c18 <_free_r+0x94>)
 8105ba0:	9801      	ldr	r0, [sp, #4]
 8105ba2:	6813      	ldr	r3, [r2, #0]
 8105ba4:	b933      	cbnz	r3, 8105bb4 <_free_r+0x30>
 8105ba6:	6063      	str	r3, [r4, #4]
 8105ba8:	6014      	str	r4, [r2, #0]
 8105baa:	b003      	add	sp, #12
 8105bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8105bb0:	f7ff bfe2 	b.w	8105b78 <__malloc_unlock>
 8105bb4:	42a3      	cmp	r3, r4
 8105bb6:	d908      	bls.n	8105bca <_free_r+0x46>
 8105bb8:	6825      	ldr	r5, [r4, #0]
 8105bba:	1961      	adds	r1, r4, r5
 8105bbc:	428b      	cmp	r3, r1
 8105bbe:	bf01      	itttt	eq
 8105bc0:	6819      	ldreq	r1, [r3, #0]
 8105bc2:	685b      	ldreq	r3, [r3, #4]
 8105bc4:	1949      	addeq	r1, r1, r5
 8105bc6:	6021      	streq	r1, [r4, #0]
 8105bc8:	e7ed      	b.n	8105ba6 <_free_r+0x22>
 8105bca:	461a      	mov	r2, r3
 8105bcc:	685b      	ldr	r3, [r3, #4]
 8105bce:	b10b      	cbz	r3, 8105bd4 <_free_r+0x50>
 8105bd0:	42a3      	cmp	r3, r4
 8105bd2:	d9fa      	bls.n	8105bca <_free_r+0x46>
 8105bd4:	6811      	ldr	r1, [r2, #0]
 8105bd6:	1855      	adds	r5, r2, r1
 8105bd8:	42a5      	cmp	r5, r4
 8105bda:	d10b      	bne.n	8105bf4 <_free_r+0x70>
 8105bdc:	6824      	ldr	r4, [r4, #0]
 8105bde:	4421      	add	r1, r4
 8105be0:	1854      	adds	r4, r2, r1
 8105be2:	42a3      	cmp	r3, r4
 8105be4:	6011      	str	r1, [r2, #0]
 8105be6:	d1e0      	bne.n	8105baa <_free_r+0x26>
 8105be8:	681c      	ldr	r4, [r3, #0]
 8105bea:	685b      	ldr	r3, [r3, #4]
 8105bec:	6053      	str	r3, [r2, #4]
 8105bee:	4421      	add	r1, r4
 8105bf0:	6011      	str	r1, [r2, #0]
 8105bf2:	e7da      	b.n	8105baa <_free_r+0x26>
 8105bf4:	d902      	bls.n	8105bfc <_free_r+0x78>
 8105bf6:	230c      	movs	r3, #12
 8105bf8:	6003      	str	r3, [r0, #0]
 8105bfa:	e7d6      	b.n	8105baa <_free_r+0x26>
 8105bfc:	6825      	ldr	r5, [r4, #0]
 8105bfe:	1961      	adds	r1, r4, r5
 8105c00:	428b      	cmp	r3, r1
 8105c02:	bf04      	itt	eq
 8105c04:	6819      	ldreq	r1, [r3, #0]
 8105c06:	685b      	ldreq	r3, [r3, #4]
 8105c08:	6063      	str	r3, [r4, #4]
 8105c0a:	bf04      	itt	eq
 8105c0c:	1949      	addeq	r1, r1, r5
 8105c0e:	6021      	streq	r1, [r4, #0]
 8105c10:	6054      	str	r4, [r2, #4]
 8105c12:	e7ca      	b.n	8105baa <_free_r+0x26>
 8105c14:	b003      	add	sp, #12
 8105c16:	bd30      	pop	{r4, r5, pc}
 8105c18:	1000cb4c 	.word	0x1000cb4c

08105c1c <__ssputs_r>:
 8105c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8105c20:	688e      	ldr	r6, [r1, #8]
 8105c22:	429e      	cmp	r6, r3
 8105c24:	4682      	mov	sl, r0
 8105c26:	460c      	mov	r4, r1
 8105c28:	4690      	mov	r8, r2
 8105c2a:	461f      	mov	r7, r3
 8105c2c:	d838      	bhi.n	8105ca0 <__ssputs_r+0x84>
 8105c2e:	898a      	ldrh	r2, [r1, #12]
 8105c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8105c34:	d032      	beq.n	8105c9c <__ssputs_r+0x80>
 8105c36:	6825      	ldr	r5, [r4, #0]
 8105c38:	6909      	ldr	r1, [r1, #16]
 8105c3a:	eba5 0901 	sub.w	r9, r5, r1
 8105c3e:	6965      	ldr	r5, [r4, #20]
 8105c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8105c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8105c48:	3301      	adds	r3, #1
 8105c4a:	444b      	add	r3, r9
 8105c4c:	106d      	asrs	r5, r5, #1
 8105c4e:	429d      	cmp	r5, r3
 8105c50:	bf38      	it	cc
 8105c52:	461d      	movcc	r5, r3
 8105c54:	0553      	lsls	r3, r2, #21
 8105c56:	d531      	bpl.n	8105cbc <__ssputs_r+0xa0>
 8105c58:	4629      	mov	r1, r5
 8105c5a:	f7ff fe4b 	bl	81058f4 <_malloc_r>
 8105c5e:	4606      	mov	r6, r0
 8105c60:	b950      	cbnz	r0, 8105c78 <__ssputs_r+0x5c>
 8105c62:	230c      	movs	r3, #12
 8105c64:	f8ca 3000 	str.w	r3, [sl]
 8105c68:	89a3      	ldrh	r3, [r4, #12]
 8105c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105c6e:	81a3      	strh	r3, [r4, #12]
 8105c70:	f04f 30ff 	mov.w	r0, #4294967295
 8105c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8105c78:	6921      	ldr	r1, [r4, #16]
 8105c7a:	464a      	mov	r2, r9
 8105c7c:	f7ff fe04 	bl	8105888 <memcpy>
 8105c80:	89a3      	ldrh	r3, [r4, #12]
 8105c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8105c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8105c8a:	81a3      	strh	r3, [r4, #12]
 8105c8c:	6126      	str	r6, [r4, #16]
 8105c8e:	6165      	str	r5, [r4, #20]
 8105c90:	444e      	add	r6, r9
 8105c92:	eba5 0509 	sub.w	r5, r5, r9
 8105c96:	6026      	str	r6, [r4, #0]
 8105c98:	60a5      	str	r5, [r4, #8]
 8105c9a:	463e      	mov	r6, r7
 8105c9c:	42be      	cmp	r6, r7
 8105c9e:	d900      	bls.n	8105ca2 <__ssputs_r+0x86>
 8105ca0:	463e      	mov	r6, r7
 8105ca2:	6820      	ldr	r0, [r4, #0]
 8105ca4:	4632      	mov	r2, r6
 8105ca6:	4641      	mov	r1, r8
 8105ca8:	f000 ff36 	bl	8106b18 <memmove>
 8105cac:	68a3      	ldr	r3, [r4, #8]
 8105cae:	1b9b      	subs	r3, r3, r6
 8105cb0:	60a3      	str	r3, [r4, #8]
 8105cb2:	6823      	ldr	r3, [r4, #0]
 8105cb4:	4433      	add	r3, r6
 8105cb6:	6023      	str	r3, [r4, #0]
 8105cb8:	2000      	movs	r0, #0
 8105cba:	e7db      	b.n	8105c74 <__ssputs_r+0x58>
 8105cbc:	462a      	mov	r2, r5
 8105cbe:	f000 ff45 	bl	8106b4c <_realloc_r>
 8105cc2:	4606      	mov	r6, r0
 8105cc4:	2800      	cmp	r0, #0
 8105cc6:	d1e1      	bne.n	8105c8c <__ssputs_r+0x70>
 8105cc8:	6921      	ldr	r1, [r4, #16]
 8105cca:	4650      	mov	r0, sl
 8105ccc:	f7ff ff5a 	bl	8105b84 <_free_r>
 8105cd0:	e7c7      	b.n	8105c62 <__ssputs_r+0x46>
	...

08105cd4 <_svfiprintf_r>:
 8105cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105cd8:	4698      	mov	r8, r3
 8105cda:	898b      	ldrh	r3, [r1, #12]
 8105cdc:	061b      	lsls	r3, r3, #24
 8105cde:	b09d      	sub	sp, #116	; 0x74
 8105ce0:	4607      	mov	r7, r0
 8105ce2:	460d      	mov	r5, r1
 8105ce4:	4614      	mov	r4, r2
 8105ce6:	d50e      	bpl.n	8105d06 <_svfiprintf_r+0x32>
 8105ce8:	690b      	ldr	r3, [r1, #16]
 8105cea:	b963      	cbnz	r3, 8105d06 <_svfiprintf_r+0x32>
 8105cec:	2140      	movs	r1, #64	; 0x40
 8105cee:	f7ff fe01 	bl	81058f4 <_malloc_r>
 8105cf2:	6028      	str	r0, [r5, #0]
 8105cf4:	6128      	str	r0, [r5, #16]
 8105cf6:	b920      	cbnz	r0, 8105d02 <_svfiprintf_r+0x2e>
 8105cf8:	230c      	movs	r3, #12
 8105cfa:	603b      	str	r3, [r7, #0]
 8105cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8105d00:	e0d1      	b.n	8105ea6 <_svfiprintf_r+0x1d2>
 8105d02:	2340      	movs	r3, #64	; 0x40
 8105d04:	616b      	str	r3, [r5, #20]
 8105d06:	2300      	movs	r3, #0
 8105d08:	9309      	str	r3, [sp, #36]	; 0x24
 8105d0a:	2320      	movs	r3, #32
 8105d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8105d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8105d14:	2330      	movs	r3, #48	; 0x30
 8105d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8105ec0 <_svfiprintf_r+0x1ec>
 8105d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8105d1e:	f04f 0901 	mov.w	r9, #1
 8105d22:	4623      	mov	r3, r4
 8105d24:	469a      	mov	sl, r3
 8105d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8105d2a:	b10a      	cbz	r2, 8105d30 <_svfiprintf_r+0x5c>
 8105d2c:	2a25      	cmp	r2, #37	; 0x25
 8105d2e:	d1f9      	bne.n	8105d24 <_svfiprintf_r+0x50>
 8105d30:	ebba 0b04 	subs.w	fp, sl, r4
 8105d34:	d00b      	beq.n	8105d4e <_svfiprintf_r+0x7a>
 8105d36:	465b      	mov	r3, fp
 8105d38:	4622      	mov	r2, r4
 8105d3a:	4629      	mov	r1, r5
 8105d3c:	4638      	mov	r0, r7
 8105d3e:	f7ff ff6d 	bl	8105c1c <__ssputs_r>
 8105d42:	3001      	adds	r0, #1
 8105d44:	f000 80aa 	beq.w	8105e9c <_svfiprintf_r+0x1c8>
 8105d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8105d4a:	445a      	add	r2, fp
 8105d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8105d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8105d52:	2b00      	cmp	r3, #0
 8105d54:	f000 80a2 	beq.w	8105e9c <_svfiprintf_r+0x1c8>
 8105d58:	2300      	movs	r3, #0
 8105d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8105d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8105d62:	f10a 0a01 	add.w	sl, sl, #1
 8105d66:	9304      	str	r3, [sp, #16]
 8105d68:	9307      	str	r3, [sp, #28]
 8105d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8105d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8105d70:	4654      	mov	r4, sl
 8105d72:	2205      	movs	r2, #5
 8105d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8105d78:	4851      	ldr	r0, [pc, #324]	; (8105ec0 <_svfiprintf_r+0x1ec>)
 8105d7a:	f7fa fab9 	bl	81002f0 <memchr>
 8105d7e:	9a04      	ldr	r2, [sp, #16]
 8105d80:	b9d8      	cbnz	r0, 8105dba <_svfiprintf_r+0xe6>
 8105d82:	06d0      	lsls	r0, r2, #27
 8105d84:	bf44      	itt	mi
 8105d86:	2320      	movmi	r3, #32
 8105d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8105d8c:	0711      	lsls	r1, r2, #28
 8105d8e:	bf44      	itt	mi
 8105d90:	232b      	movmi	r3, #43	; 0x2b
 8105d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8105d96:	f89a 3000 	ldrb.w	r3, [sl]
 8105d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8105d9c:	d015      	beq.n	8105dca <_svfiprintf_r+0xf6>
 8105d9e:	9a07      	ldr	r2, [sp, #28]
 8105da0:	4654      	mov	r4, sl
 8105da2:	2000      	movs	r0, #0
 8105da4:	f04f 0c0a 	mov.w	ip, #10
 8105da8:	4621      	mov	r1, r4
 8105daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8105dae:	3b30      	subs	r3, #48	; 0x30
 8105db0:	2b09      	cmp	r3, #9
 8105db2:	d94e      	bls.n	8105e52 <_svfiprintf_r+0x17e>
 8105db4:	b1b0      	cbz	r0, 8105de4 <_svfiprintf_r+0x110>
 8105db6:	9207      	str	r2, [sp, #28]
 8105db8:	e014      	b.n	8105de4 <_svfiprintf_r+0x110>
 8105dba:	eba0 0308 	sub.w	r3, r0, r8
 8105dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8105dc2:	4313      	orrs	r3, r2
 8105dc4:	9304      	str	r3, [sp, #16]
 8105dc6:	46a2      	mov	sl, r4
 8105dc8:	e7d2      	b.n	8105d70 <_svfiprintf_r+0x9c>
 8105dca:	9b03      	ldr	r3, [sp, #12]
 8105dcc:	1d19      	adds	r1, r3, #4
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	9103      	str	r1, [sp, #12]
 8105dd2:	2b00      	cmp	r3, #0
 8105dd4:	bfbb      	ittet	lt
 8105dd6:	425b      	neglt	r3, r3
 8105dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8105ddc:	9307      	strge	r3, [sp, #28]
 8105dde:	9307      	strlt	r3, [sp, #28]
 8105de0:	bfb8      	it	lt
 8105de2:	9204      	strlt	r2, [sp, #16]
 8105de4:	7823      	ldrb	r3, [r4, #0]
 8105de6:	2b2e      	cmp	r3, #46	; 0x2e
 8105de8:	d10c      	bne.n	8105e04 <_svfiprintf_r+0x130>
 8105dea:	7863      	ldrb	r3, [r4, #1]
 8105dec:	2b2a      	cmp	r3, #42	; 0x2a
 8105dee:	d135      	bne.n	8105e5c <_svfiprintf_r+0x188>
 8105df0:	9b03      	ldr	r3, [sp, #12]
 8105df2:	1d1a      	adds	r2, r3, #4
 8105df4:	681b      	ldr	r3, [r3, #0]
 8105df6:	9203      	str	r2, [sp, #12]
 8105df8:	2b00      	cmp	r3, #0
 8105dfa:	bfb8      	it	lt
 8105dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8105e00:	3402      	adds	r4, #2
 8105e02:	9305      	str	r3, [sp, #20]
 8105e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8105ed0 <_svfiprintf_r+0x1fc>
 8105e08:	7821      	ldrb	r1, [r4, #0]
 8105e0a:	2203      	movs	r2, #3
 8105e0c:	4650      	mov	r0, sl
 8105e0e:	f7fa fa6f 	bl	81002f0 <memchr>
 8105e12:	b140      	cbz	r0, 8105e26 <_svfiprintf_r+0x152>
 8105e14:	2340      	movs	r3, #64	; 0x40
 8105e16:	eba0 000a 	sub.w	r0, r0, sl
 8105e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8105e1e:	9b04      	ldr	r3, [sp, #16]
 8105e20:	4303      	orrs	r3, r0
 8105e22:	3401      	adds	r4, #1
 8105e24:	9304      	str	r3, [sp, #16]
 8105e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8105e2a:	4826      	ldr	r0, [pc, #152]	; (8105ec4 <_svfiprintf_r+0x1f0>)
 8105e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8105e30:	2206      	movs	r2, #6
 8105e32:	f7fa fa5d 	bl	81002f0 <memchr>
 8105e36:	2800      	cmp	r0, #0
 8105e38:	d038      	beq.n	8105eac <_svfiprintf_r+0x1d8>
 8105e3a:	4b23      	ldr	r3, [pc, #140]	; (8105ec8 <_svfiprintf_r+0x1f4>)
 8105e3c:	bb1b      	cbnz	r3, 8105e86 <_svfiprintf_r+0x1b2>
 8105e3e:	9b03      	ldr	r3, [sp, #12]
 8105e40:	3307      	adds	r3, #7
 8105e42:	f023 0307 	bic.w	r3, r3, #7
 8105e46:	3308      	adds	r3, #8
 8105e48:	9303      	str	r3, [sp, #12]
 8105e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105e4c:	4433      	add	r3, r6
 8105e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8105e50:	e767      	b.n	8105d22 <_svfiprintf_r+0x4e>
 8105e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8105e56:	460c      	mov	r4, r1
 8105e58:	2001      	movs	r0, #1
 8105e5a:	e7a5      	b.n	8105da8 <_svfiprintf_r+0xd4>
 8105e5c:	2300      	movs	r3, #0
 8105e5e:	3401      	adds	r4, #1
 8105e60:	9305      	str	r3, [sp, #20]
 8105e62:	4619      	mov	r1, r3
 8105e64:	f04f 0c0a 	mov.w	ip, #10
 8105e68:	4620      	mov	r0, r4
 8105e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8105e6e:	3a30      	subs	r2, #48	; 0x30
 8105e70:	2a09      	cmp	r2, #9
 8105e72:	d903      	bls.n	8105e7c <_svfiprintf_r+0x1a8>
 8105e74:	2b00      	cmp	r3, #0
 8105e76:	d0c5      	beq.n	8105e04 <_svfiprintf_r+0x130>
 8105e78:	9105      	str	r1, [sp, #20]
 8105e7a:	e7c3      	b.n	8105e04 <_svfiprintf_r+0x130>
 8105e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8105e80:	4604      	mov	r4, r0
 8105e82:	2301      	movs	r3, #1
 8105e84:	e7f0      	b.n	8105e68 <_svfiprintf_r+0x194>
 8105e86:	ab03      	add	r3, sp, #12
 8105e88:	9300      	str	r3, [sp, #0]
 8105e8a:	462a      	mov	r2, r5
 8105e8c:	4b0f      	ldr	r3, [pc, #60]	; (8105ecc <_svfiprintf_r+0x1f8>)
 8105e8e:	a904      	add	r1, sp, #16
 8105e90:	4638      	mov	r0, r7
 8105e92:	f3af 8000 	nop.w
 8105e96:	1c42      	adds	r2, r0, #1
 8105e98:	4606      	mov	r6, r0
 8105e9a:	d1d6      	bne.n	8105e4a <_svfiprintf_r+0x176>
 8105e9c:	89ab      	ldrh	r3, [r5, #12]
 8105e9e:	065b      	lsls	r3, r3, #25
 8105ea0:	f53f af2c 	bmi.w	8105cfc <_svfiprintf_r+0x28>
 8105ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8105ea6:	b01d      	add	sp, #116	; 0x74
 8105ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105eac:	ab03      	add	r3, sp, #12
 8105eae:	9300      	str	r3, [sp, #0]
 8105eb0:	462a      	mov	r2, r5
 8105eb2:	4b06      	ldr	r3, [pc, #24]	; (8105ecc <_svfiprintf_r+0x1f8>)
 8105eb4:	a904      	add	r1, sp, #16
 8105eb6:	4638      	mov	r0, r7
 8105eb8:	f000 fa4c 	bl	8106354 <_printf_i>
 8105ebc:	e7eb      	b.n	8105e96 <_svfiprintf_r+0x1c2>
 8105ebe:	bf00      	nop
 8105ec0:	08106c78 	.word	0x08106c78
 8105ec4:	08106c82 	.word	0x08106c82
 8105ec8:	00000000 	.word	0x00000000
 8105ecc:	08105c1d 	.word	0x08105c1d
 8105ed0:	08106c7e 	.word	0x08106c7e

08105ed4 <_sungetc_r>:
 8105ed4:	b538      	push	{r3, r4, r5, lr}
 8105ed6:	1c4b      	adds	r3, r1, #1
 8105ed8:	4614      	mov	r4, r2
 8105eda:	d103      	bne.n	8105ee4 <_sungetc_r+0x10>
 8105edc:	f04f 35ff 	mov.w	r5, #4294967295
 8105ee0:	4628      	mov	r0, r5
 8105ee2:	bd38      	pop	{r3, r4, r5, pc}
 8105ee4:	8993      	ldrh	r3, [r2, #12]
 8105ee6:	f023 0320 	bic.w	r3, r3, #32
 8105eea:	8193      	strh	r3, [r2, #12]
 8105eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8105eee:	6852      	ldr	r2, [r2, #4]
 8105ef0:	b2cd      	uxtb	r5, r1
 8105ef2:	b18b      	cbz	r3, 8105f18 <_sungetc_r+0x44>
 8105ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8105ef6:	4293      	cmp	r3, r2
 8105ef8:	dd08      	ble.n	8105f0c <_sungetc_r+0x38>
 8105efa:	6823      	ldr	r3, [r4, #0]
 8105efc:	1e5a      	subs	r2, r3, #1
 8105efe:	6022      	str	r2, [r4, #0]
 8105f00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8105f04:	6863      	ldr	r3, [r4, #4]
 8105f06:	3301      	adds	r3, #1
 8105f08:	6063      	str	r3, [r4, #4]
 8105f0a:	e7e9      	b.n	8105ee0 <_sungetc_r+0xc>
 8105f0c:	4621      	mov	r1, r4
 8105f0e:	f000 fdc9 	bl	8106aa4 <__submore>
 8105f12:	2800      	cmp	r0, #0
 8105f14:	d0f1      	beq.n	8105efa <_sungetc_r+0x26>
 8105f16:	e7e1      	b.n	8105edc <_sungetc_r+0x8>
 8105f18:	6921      	ldr	r1, [r4, #16]
 8105f1a:	6823      	ldr	r3, [r4, #0]
 8105f1c:	b151      	cbz	r1, 8105f34 <_sungetc_r+0x60>
 8105f1e:	4299      	cmp	r1, r3
 8105f20:	d208      	bcs.n	8105f34 <_sungetc_r+0x60>
 8105f22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8105f26:	42a9      	cmp	r1, r5
 8105f28:	d104      	bne.n	8105f34 <_sungetc_r+0x60>
 8105f2a:	3b01      	subs	r3, #1
 8105f2c:	3201      	adds	r2, #1
 8105f2e:	6023      	str	r3, [r4, #0]
 8105f30:	6062      	str	r2, [r4, #4]
 8105f32:	e7d5      	b.n	8105ee0 <_sungetc_r+0xc>
 8105f34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8105f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8105f3e:	2303      	movs	r3, #3
 8105f40:	63a3      	str	r3, [r4, #56]	; 0x38
 8105f42:	4623      	mov	r3, r4
 8105f44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8105f48:	6023      	str	r3, [r4, #0]
 8105f4a:	2301      	movs	r3, #1
 8105f4c:	e7dc      	b.n	8105f08 <_sungetc_r+0x34>

08105f4e <__ssrefill_r>:
 8105f4e:	b510      	push	{r4, lr}
 8105f50:	460c      	mov	r4, r1
 8105f52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8105f54:	b169      	cbz	r1, 8105f72 <__ssrefill_r+0x24>
 8105f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105f5a:	4299      	cmp	r1, r3
 8105f5c:	d001      	beq.n	8105f62 <__ssrefill_r+0x14>
 8105f5e:	f7ff fe11 	bl	8105b84 <_free_r>
 8105f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8105f64:	6063      	str	r3, [r4, #4]
 8105f66:	2000      	movs	r0, #0
 8105f68:	6360      	str	r0, [r4, #52]	; 0x34
 8105f6a:	b113      	cbz	r3, 8105f72 <__ssrefill_r+0x24>
 8105f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8105f6e:	6023      	str	r3, [r4, #0]
 8105f70:	bd10      	pop	{r4, pc}
 8105f72:	6923      	ldr	r3, [r4, #16]
 8105f74:	6023      	str	r3, [r4, #0]
 8105f76:	2300      	movs	r3, #0
 8105f78:	6063      	str	r3, [r4, #4]
 8105f7a:	89a3      	ldrh	r3, [r4, #12]
 8105f7c:	f043 0320 	orr.w	r3, r3, #32
 8105f80:	81a3      	strh	r3, [r4, #12]
 8105f82:	f04f 30ff 	mov.w	r0, #4294967295
 8105f86:	e7f3      	b.n	8105f70 <__ssrefill_r+0x22>

08105f88 <__ssvfiscanf_r>:
 8105f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8105f8c:	460c      	mov	r4, r1
 8105f8e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8105f92:	2100      	movs	r1, #0
 8105f94:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8105f98:	49a6      	ldr	r1, [pc, #664]	; (8106234 <__ssvfiscanf_r+0x2ac>)
 8105f9a:	91a0      	str	r1, [sp, #640]	; 0x280
 8105f9c:	f10d 0804 	add.w	r8, sp, #4
 8105fa0:	49a5      	ldr	r1, [pc, #660]	; (8106238 <__ssvfiscanf_r+0x2b0>)
 8105fa2:	4fa6      	ldr	r7, [pc, #664]	; (810623c <__ssvfiscanf_r+0x2b4>)
 8105fa4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8106240 <__ssvfiscanf_r+0x2b8>
 8105fa8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8105fac:	4606      	mov	r6, r0
 8105fae:	91a1      	str	r1, [sp, #644]	; 0x284
 8105fb0:	9300      	str	r3, [sp, #0]
 8105fb2:	7813      	ldrb	r3, [r2, #0]
 8105fb4:	2b00      	cmp	r3, #0
 8105fb6:	f000 815a 	beq.w	810626e <__ssvfiscanf_r+0x2e6>
 8105fba:	5dd9      	ldrb	r1, [r3, r7]
 8105fbc:	f011 0108 	ands.w	r1, r1, #8
 8105fc0:	f102 0501 	add.w	r5, r2, #1
 8105fc4:	d019      	beq.n	8105ffa <__ssvfiscanf_r+0x72>
 8105fc6:	6863      	ldr	r3, [r4, #4]
 8105fc8:	2b00      	cmp	r3, #0
 8105fca:	dd0f      	ble.n	8105fec <__ssvfiscanf_r+0x64>
 8105fcc:	6823      	ldr	r3, [r4, #0]
 8105fce:	781a      	ldrb	r2, [r3, #0]
 8105fd0:	5cba      	ldrb	r2, [r7, r2]
 8105fd2:	0712      	lsls	r2, r2, #28
 8105fd4:	d401      	bmi.n	8105fda <__ssvfiscanf_r+0x52>
 8105fd6:	462a      	mov	r2, r5
 8105fd8:	e7eb      	b.n	8105fb2 <__ssvfiscanf_r+0x2a>
 8105fda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8105fdc:	3201      	adds	r2, #1
 8105fde:	9245      	str	r2, [sp, #276]	; 0x114
 8105fe0:	6862      	ldr	r2, [r4, #4]
 8105fe2:	3301      	adds	r3, #1
 8105fe4:	3a01      	subs	r2, #1
 8105fe6:	6062      	str	r2, [r4, #4]
 8105fe8:	6023      	str	r3, [r4, #0]
 8105fea:	e7ec      	b.n	8105fc6 <__ssvfiscanf_r+0x3e>
 8105fec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8105fee:	4621      	mov	r1, r4
 8105ff0:	4630      	mov	r0, r6
 8105ff2:	4798      	blx	r3
 8105ff4:	2800      	cmp	r0, #0
 8105ff6:	d0e9      	beq.n	8105fcc <__ssvfiscanf_r+0x44>
 8105ff8:	e7ed      	b.n	8105fd6 <__ssvfiscanf_r+0x4e>
 8105ffa:	2b25      	cmp	r3, #37	; 0x25
 8105ffc:	d012      	beq.n	8106024 <__ssvfiscanf_r+0x9c>
 8105ffe:	469a      	mov	sl, r3
 8106000:	6863      	ldr	r3, [r4, #4]
 8106002:	2b00      	cmp	r3, #0
 8106004:	f340 8091 	ble.w	810612a <__ssvfiscanf_r+0x1a2>
 8106008:	6822      	ldr	r2, [r4, #0]
 810600a:	7813      	ldrb	r3, [r2, #0]
 810600c:	4553      	cmp	r3, sl
 810600e:	f040 812e 	bne.w	810626e <__ssvfiscanf_r+0x2e6>
 8106012:	6863      	ldr	r3, [r4, #4]
 8106014:	3b01      	subs	r3, #1
 8106016:	6063      	str	r3, [r4, #4]
 8106018:	9b45      	ldr	r3, [sp, #276]	; 0x114
 810601a:	3201      	adds	r2, #1
 810601c:	3301      	adds	r3, #1
 810601e:	6022      	str	r2, [r4, #0]
 8106020:	9345      	str	r3, [sp, #276]	; 0x114
 8106022:	e7d8      	b.n	8105fd6 <__ssvfiscanf_r+0x4e>
 8106024:	9141      	str	r1, [sp, #260]	; 0x104
 8106026:	9143      	str	r1, [sp, #268]	; 0x10c
 8106028:	7853      	ldrb	r3, [r2, #1]
 810602a:	2b2a      	cmp	r3, #42	; 0x2a
 810602c:	bf02      	ittt	eq
 810602e:	2310      	moveq	r3, #16
 8106030:	1c95      	addeq	r5, r2, #2
 8106032:	9341      	streq	r3, [sp, #260]	; 0x104
 8106034:	220a      	movs	r2, #10
 8106036:	46aa      	mov	sl, r5
 8106038:	f81a 1b01 	ldrb.w	r1, [sl], #1
 810603c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8106040:	2b09      	cmp	r3, #9
 8106042:	d91d      	bls.n	8106080 <__ssvfiscanf_r+0xf8>
 8106044:	487e      	ldr	r0, [pc, #504]	; (8106240 <__ssvfiscanf_r+0x2b8>)
 8106046:	2203      	movs	r2, #3
 8106048:	f7fa f952 	bl	81002f0 <memchr>
 810604c:	b140      	cbz	r0, 8106060 <__ssvfiscanf_r+0xd8>
 810604e:	2301      	movs	r3, #1
 8106050:	eba0 0009 	sub.w	r0, r0, r9
 8106054:	fa03 f000 	lsl.w	r0, r3, r0
 8106058:	9b41      	ldr	r3, [sp, #260]	; 0x104
 810605a:	4318      	orrs	r0, r3
 810605c:	9041      	str	r0, [sp, #260]	; 0x104
 810605e:	4655      	mov	r5, sl
 8106060:	f815 3b01 	ldrb.w	r3, [r5], #1
 8106064:	2b78      	cmp	r3, #120	; 0x78
 8106066:	d806      	bhi.n	8106076 <__ssvfiscanf_r+0xee>
 8106068:	2b57      	cmp	r3, #87	; 0x57
 810606a:	d810      	bhi.n	810608e <__ssvfiscanf_r+0x106>
 810606c:	2b25      	cmp	r3, #37	; 0x25
 810606e:	d0c6      	beq.n	8105ffe <__ssvfiscanf_r+0x76>
 8106070:	d856      	bhi.n	8106120 <__ssvfiscanf_r+0x198>
 8106072:	2b00      	cmp	r3, #0
 8106074:	d064      	beq.n	8106140 <__ssvfiscanf_r+0x1b8>
 8106076:	2303      	movs	r3, #3
 8106078:	9347      	str	r3, [sp, #284]	; 0x11c
 810607a:	230a      	movs	r3, #10
 810607c:	9342      	str	r3, [sp, #264]	; 0x108
 810607e:	e071      	b.n	8106164 <__ssvfiscanf_r+0x1dc>
 8106080:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8106082:	fb02 1103 	mla	r1, r2, r3, r1
 8106086:	3930      	subs	r1, #48	; 0x30
 8106088:	9143      	str	r1, [sp, #268]	; 0x10c
 810608a:	4655      	mov	r5, sl
 810608c:	e7d3      	b.n	8106036 <__ssvfiscanf_r+0xae>
 810608e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8106092:	2a20      	cmp	r2, #32
 8106094:	d8ef      	bhi.n	8106076 <__ssvfiscanf_r+0xee>
 8106096:	a101      	add	r1, pc, #4	; (adr r1, 810609c <__ssvfiscanf_r+0x114>)
 8106098:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810609c:	0810614f 	.word	0x0810614f
 81060a0:	08106077 	.word	0x08106077
 81060a4:	08106077 	.word	0x08106077
 81060a8:	081061ad 	.word	0x081061ad
 81060ac:	08106077 	.word	0x08106077
 81060b0:	08106077 	.word	0x08106077
 81060b4:	08106077 	.word	0x08106077
 81060b8:	08106077 	.word	0x08106077
 81060bc:	08106077 	.word	0x08106077
 81060c0:	08106077 	.word	0x08106077
 81060c4:	08106077 	.word	0x08106077
 81060c8:	081061c3 	.word	0x081061c3
 81060cc:	08106199 	.word	0x08106199
 81060d0:	08106127 	.word	0x08106127
 81060d4:	08106127 	.word	0x08106127
 81060d8:	08106127 	.word	0x08106127
 81060dc:	08106077 	.word	0x08106077
 81060e0:	0810619d 	.word	0x0810619d
 81060e4:	08106077 	.word	0x08106077
 81060e8:	08106077 	.word	0x08106077
 81060ec:	08106077 	.word	0x08106077
 81060f0:	08106077 	.word	0x08106077
 81060f4:	081061d3 	.word	0x081061d3
 81060f8:	081061a5 	.word	0x081061a5
 81060fc:	08106147 	.word	0x08106147
 8106100:	08106077 	.word	0x08106077
 8106104:	08106077 	.word	0x08106077
 8106108:	081061cf 	.word	0x081061cf
 810610c:	08106077 	.word	0x08106077
 8106110:	08106199 	.word	0x08106199
 8106114:	08106077 	.word	0x08106077
 8106118:	08106077 	.word	0x08106077
 810611c:	0810614f 	.word	0x0810614f
 8106120:	3b45      	subs	r3, #69	; 0x45
 8106122:	2b02      	cmp	r3, #2
 8106124:	d8a7      	bhi.n	8106076 <__ssvfiscanf_r+0xee>
 8106126:	2305      	movs	r3, #5
 8106128:	e01b      	b.n	8106162 <__ssvfiscanf_r+0x1da>
 810612a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 810612c:	4621      	mov	r1, r4
 810612e:	4630      	mov	r0, r6
 8106130:	4798      	blx	r3
 8106132:	2800      	cmp	r0, #0
 8106134:	f43f af68 	beq.w	8106008 <__ssvfiscanf_r+0x80>
 8106138:	9844      	ldr	r0, [sp, #272]	; 0x110
 810613a:	2800      	cmp	r0, #0
 810613c:	f040 808d 	bne.w	810625a <__ssvfiscanf_r+0x2d2>
 8106140:	f04f 30ff 	mov.w	r0, #4294967295
 8106144:	e08f      	b.n	8106266 <__ssvfiscanf_r+0x2de>
 8106146:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8106148:	f042 0220 	orr.w	r2, r2, #32
 810614c:	9241      	str	r2, [sp, #260]	; 0x104
 810614e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8106150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106154:	9241      	str	r2, [sp, #260]	; 0x104
 8106156:	2210      	movs	r2, #16
 8106158:	2b6f      	cmp	r3, #111	; 0x6f
 810615a:	9242      	str	r2, [sp, #264]	; 0x108
 810615c:	bf34      	ite	cc
 810615e:	2303      	movcc	r3, #3
 8106160:	2304      	movcs	r3, #4
 8106162:	9347      	str	r3, [sp, #284]	; 0x11c
 8106164:	6863      	ldr	r3, [r4, #4]
 8106166:	2b00      	cmp	r3, #0
 8106168:	dd42      	ble.n	81061f0 <__ssvfiscanf_r+0x268>
 810616a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 810616c:	0659      	lsls	r1, r3, #25
 810616e:	d404      	bmi.n	810617a <__ssvfiscanf_r+0x1f2>
 8106170:	6823      	ldr	r3, [r4, #0]
 8106172:	781a      	ldrb	r2, [r3, #0]
 8106174:	5cba      	ldrb	r2, [r7, r2]
 8106176:	0712      	lsls	r2, r2, #28
 8106178:	d441      	bmi.n	81061fe <__ssvfiscanf_r+0x276>
 810617a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 810617c:	2b02      	cmp	r3, #2
 810617e:	dc50      	bgt.n	8106222 <__ssvfiscanf_r+0x29a>
 8106180:	466b      	mov	r3, sp
 8106182:	4622      	mov	r2, r4
 8106184:	a941      	add	r1, sp, #260	; 0x104
 8106186:	4630      	mov	r0, r6
 8106188:	f000 fa0a 	bl	81065a0 <_scanf_chars>
 810618c:	2801      	cmp	r0, #1
 810618e:	d06e      	beq.n	810626e <__ssvfiscanf_r+0x2e6>
 8106190:	2802      	cmp	r0, #2
 8106192:	f47f af20 	bne.w	8105fd6 <__ssvfiscanf_r+0x4e>
 8106196:	e7cf      	b.n	8106138 <__ssvfiscanf_r+0x1b0>
 8106198:	220a      	movs	r2, #10
 810619a:	e7dd      	b.n	8106158 <__ssvfiscanf_r+0x1d0>
 810619c:	2300      	movs	r3, #0
 810619e:	9342      	str	r3, [sp, #264]	; 0x108
 81061a0:	2303      	movs	r3, #3
 81061a2:	e7de      	b.n	8106162 <__ssvfiscanf_r+0x1da>
 81061a4:	2308      	movs	r3, #8
 81061a6:	9342      	str	r3, [sp, #264]	; 0x108
 81061a8:	2304      	movs	r3, #4
 81061aa:	e7da      	b.n	8106162 <__ssvfiscanf_r+0x1da>
 81061ac:	4629      	mov	r1, r5
 81061ae:	4640      	mov	r0, r8
 81061b0:	f000 fb48 	bl	8106844 <__sccl>
 81061b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 81061b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81061ba:	9341      	str	r3, [sp, #260]	; 0x104
 81061bc:	4605      	mov	r5, r0
 81061be:	2301      	movs	r3, #1
 81061c0:	e7cf      	b.n	8106162 <__ssvfiscanf_r+0x1da>
 81061c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 81061c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81061c8:	9341      	str	r3, [sp, #260]	; 0x104
 81061ca:	2300      	movs	r3, #0
 81061cc:	e7c9      	b.n	8106162 <__ssvfiscanf_r+0x1da>
 81061ce:	2302      	movs	r3, #2
 81061d0:	e7c7      	b.n	8106162 <__ssvfiscanf_r+0x1da>
 81061d2:	9841      	ldr	r0, [sp, #260]	; 0x104
 81061d4:	06c3      	lsls	r3, r0, #27
 81061d6:	f53f aefe 	bmi.w	8105fd6 <__ssvfiscanf_r+0x4e>
 81061da:	9b00      	ldr	r3, [sp, #0]
 81061dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 81061de:	1d19      	adds	r1, r3, #4
 81061e0:	9100      	str	r1, [sp, #0]
 81061e2:	681b      	ldr	r3, [r3, #0]
 81061e4:	f010 0f01 	tst.w	r0, #1
 81061e8:	bf14      	ite	ne
 81061ea:	801a      	strhne	r2, [r3, #0]
 81061ec:	601a      	streq	r2, [r3, #0]
 81061ee:	e6f2      	b.n	8105fd6 <__ssvfiscanf_r+0x4e>
 81061f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 81061f2:	4621      	mov	r1, r4
 81061f4:	4630      	mov	r0, r6
 81061f6:	4798      	blx	r3
 81061f8:	2800      	cmp	r0, #0
 81061fa:	d0b6      	beq.n	810616a <__ssvfiscanf_r+0x1e2>
 81061fc:	e79c      	b.n	8106138 <__ssvfiscanf_r+0x1b0>
 81061fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8106200:	3201      	adds	r2, #1
 8106202:	9245      	str	r2, [sp, #276]	; 0x114
 8106204:	6862      	ldr	r2, [r4, #4]
 8106206:	3a01      	subs	r2, #1
 8106208:	2a00      	cmp	r2, #0
 810620a:	6062      	str	r2, [r4, #4]
 810620c:	dd02      	ble.n	8106214 <__ssvfiscanf_r+0x28c>
 810620e:	3301      	adds	r3, #1
 8106210:	6023      	str	r3, [r4, #0]
 8106212:	e7ad      	b.n	8106170 <__ssvfiscanf_r+0x1e8>
 8106214:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8106216:	4621      	mov	r1, r4
 8106218:	4630      	mov	r0, r6
 810621a:	4798      	blx	r3
 810621c:	2800      	cmp	r0, #0
 810621e:	d0a7      	beq.n	8106170 <__ssvfiscanf_r+0x1e8>
 8106220:	e78a      	b.n	8106138 <__ssvfiscanf_r+0x1b0>
 8106222:	2b04      	cmp	r3, #4
 8106224:	dc0e      	bgt.n	8106244 <__ssvfiscanf_r+0x2bc>
 8106226:	466b      	mov	r3, sp
 8106228:	4622      	mov	r2, r4
 810622a:	a941      	add	r1, sp, #260	; 0x104
 810622c:	4630      	mov	r0, r6
 810622e:	f000 fa11 	bl	8106654 <_scanf_i>
 8106232:	e7ab      	b.n	810618c <__ssvfiscanf_r+0x204>
 8106234:	08105ed5 	.word	0x08105ed5
 8106238:	08105f4f 	.word	0x08105f4f
 810623c:	08106cc7 	.word	0x08106cc7
 8106240:	08106c7e 	.word	0x08106c7e
 8106244:	4b0b      	ldr	r3, [pc, #44]	; (8106274 <__ssvfiscanf_r+0x2ec>)
 8106246:	2b00      	cmp	r3, #0
 8106248:	f43f aec5 	beq.w	8105fd6 <__ssvfiscanf_r+0x4e>
 810624c:	466b      	mov	r3, sp
 810624e:	4622      	mov	r2, r4
 8106250:	a941      	add	r1, sp, #260	; 0x104
 8106252:	4630      	mov	r0, r6
 8106254:	f3af 8000 	nop.w
 8106258:	e798      	b.n	810618c <__ssvfiscanf_r+0x204>
 810625a:	89a3      	ldrh	r3, [r4, #12]
 810625c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8106260:	bf18      	it	ne
 8106262:	f04f 30ff 	movne.w	r0, #4294967295
 8106266:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 810626a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810626e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8106270:	e7f9      	b.n	8106266 <__ssvfiscanf_r+0x2de>
 8106272:	bf00      	nop
 8106274:	00000000 	.word	0x00000000

08106278 <_printf_common>:
 8106278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810627c:	4616      	mov	r6, r2
 810627e:	4699      	mov	r9, r3
 8106280:	688a      	ldr	r2, [r1, #8]
 8106282:	690b      	ldr	r3, [r1, #16]
 8106284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8106288:	4293      	cmp	r3, r2
 810628a:	bfb8      	it	lt
 810628c:	4613      	movlt	r3, r2
 810628e:	6033      	str	r3, [r6, #0]
 8106290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8106294:	4607      	mov	r7, r0
 8106296:	460c      	mov	r4, r1
 8106298:	b10a      	cbz	r2, 810629e <_printf_common+0x26>
 810629a:	3301      	adds	r3, #1
 810629c:	6033      	str	r3, [r6, #0]
 810629e:	6823      	ldr	r3, [r4, #0]
 81062a0:	0699      	lsls	r1, r3, #26
 81062a2:	bf42      	ittt	mi
 81062a4:	6833      	ldrmi	r3, [r6, #0]
 81062a6:	3302      	addmi	r3, #2
 81062a8:	6033      	strmi	r3, [r6, #0]
 81062aa:	6825      	ldr	r5, [r4, #0]
 81062ac:	f015 0506 	ands.w	r5, r5, #6
 81062b0:	d106      	bne.n	81062c0 <_printf_common+0x48>
 81062b2:	f104 0a19 	add.w	sl, r4, #25
 81062b6:	68e3      	ldr	r3, [r4, #12]
 81062b8:	6832      	ldr	r2, [r6, #0]
 81062ba:	1a9b      	subs	r3, r3, r2
 81062bc:	42ab      	cmp	r3, r5
 81062be:	dc26      	bgt.n	810630e <_printf_common+0x96>
 81062c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81062c4:	1e13      	subs	r3, r2, #0
 81062c6:	6822      	ldr	r2, [r4, #0]
 81062c8:	bf18      	it	ne
 81062ca:	2301      	movne	r3, #1
 81062cc:	0692      	lsls	r2, r2, #26
 81062ce:	d42b      	bmi.n	8106328 <_printf_common+0xb0>
 81062d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81062d4:	4649      	mov	r1, r9
 81062d6:	4638      	mov	r0, r7
 81062d8:	47c0      	blx	r8
 81062da:	3001      	adds	r0, #1
 81062dc:	d01e      	beq.n	810631c <_printf_common+0xa4>
 81062de:	6823      	ldr	r3, [r4, #0]
 81062e0:	68e5      	ldr	r5, [r4, #12]
 81062e2:	6832      	ldr	r2, [r6, #0]
 81062e4:	f003 0306 	and.w	r3, r3, #6
 81062e8:	2b04      	cmp	r3, #4
 81062ea:	bf08      	it	eq
 81062ec:	1aad      	subeq	r5, r5, r2
 81062ee:	68a3      	ldr	r3, [r4, #8]
 81062f0:	6922      	ldr	r2, [r4, #16]
 81062f2:	bf0c      	ite	eq
 81062f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81062f8:	2500      	movne	r5, #0
 81062fa:	4293      	cmp	r3, r2
 81062fc:	bfc4      	itt	gt
 81062fe:	1a9b      	subgt	r3, r3, r2
 8106300:	18ed      	addgt	r5, r5, r3
 8106302:	2600      	movs	r6, #0
 8106304:	341a      	adds	r4, #26
 8106306:	42b5      	cmp	r5, r6
 8106308:	d11a      	bne.n	8106340 <_printf_common+0xc8>
 810630a:	2000      	movs	r0, #0
 810630c:	e008      	b.n	8106320 <_printf_common+0xa8>
 810630e:	2301      	movs	r3, #1
 8106310:	4652      	mov	r2, sl
 8106312:	4649      	mov	r1, r9
 8106314:	4638      	mov	r0, r7
 8106316:	47c0      	blx	r8
 8106318:	3001      	adds	r0, #1
 810631a:	d103      	bne.n	8106324 <_printf_common+0xac>
 810631c:	f04f 30ff 	mov.w	r0, #4294967295
 8106320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106324:	3501      	adds	r5, #1
 8106326:	e7c6      	b.n	81062b6 <_printf_common+0x3e>
 8106328:	18e1      	adds	r1, r4, r3
 810632a:	1c5a      	adds	r2, r3, #1
 810632c:	2030      	movs	r0, #48	; 0x30
 810632e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8106332:	4422      	add	r2, r4
 8106334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8106338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810633c:	3302      	adds	r3, #2
 810633e:	e7c7      	b.n	81062d0 <_printf_common+0x58>
 8106340:	2301      	movs	r3, #1
 8106342:	4622      	mov	r2, r4
 8106344:	4649      	mov	r1, r9
 8106346:	4638      	mov	r0, r7
 8106348:	47c0      	blx	r8
 810634a:	3001      	adds	r0, #1
 810634c:	d0e6      	beq.n	810631c <_printf_common+0xa4>
 810634e:	3601      	adds	r6, #1
 8106350:	e7d9      	b.n	8106306 <_printf_common+0x8e>
	...

08106354 <_printf_i>:
 8106354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106358:	7e0f      	ldrb	r7, [r1, #24]
 810635a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810635c:	2f78      	cmp	r7, #120	; 0x78
 810635e:	4691      	mov	r9, r2
 8106360:	4680      	mov	r8, r0
 8106362:	460c      	mov	r4, r1
 8106364:	469a      	mov	sl, r3
 8106366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810636a:	d807      	bhi.n	810637c <_printf_i+0x28>
 810636c:	2f62      	cmp	r7, #98	; 0x62
 810636e:	d80a      	bhi.n	8106386 <_printf_i+0x32>
 8106370:	2f00      	cmp	r7, #0
 8106372:	f000 80d8 	beq.w	8106526 <_printf_i+0x1d2>
 8106376:	2f58      	cmp	r7, #88	; 0x58
 8106378:	f000 80a3 	beq.w	81064c2 <_printf_i+0x16e>
 810637c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8106384:	e03a      	b.n	81063fc <_printf_i+0xa8>
 8106386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810638a:	2b15      	cmp	r3, #21
 810638c:	d8f6      	bhi.n	810637c <_printf_i+0x28>
 810638e:	a101      	add	r1, pc, #4	; (adr r1, 8106394 <_printf_i+0x40>)
 8106390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8106394:	081063ed 	.word	0x081063ed
 8106398:	08106401 	.word	0x08106401
 810639c:	0810637d 	.word	0x0810637d
 81063a0:	0810637d 	.word	0x0810637d
 81063a4:	0810637d 	.word	0x0810637d
 81063a8:	0810637d 	.word	0x0810637d
 81063ac:	08106401 	.word	0x08106401
 81063b0:	0810637d 	.word	0x0810637d
 81063b4:	0810637d 	.word	0x0810637d
 81063b8:	0810637d 	.word	0x0810637d
 81063bc:	0810637d 	.word	0x0810637d
 81063c0:	0810650d 	.word	0x0810650d
 81063c4:	08106431 	.word	0x08106431
 81063c8:	081064ef 	.word	0x081064ef
 81063cc:	0810637d 	.word	0x0810637d
 81063d0:	0810637d 	.word	0x0810637d
 81063d4:	0810652f 	.word	0x0810652f
 81063d8:	0810637d 	.word	0x0810637d
 81063dc:	08106431 	.word	0x08106431
 81063e0:	0810637d 	.word	0x0810637d
 81063e4:	0810637d 	.word	0x0810637d
 81063e8:	081064f7 	.word	0x081064f7
 81063ec:	682b      	ldr	r3, [r5, #0]
 81063ee:	1d1a      	adds	r2, r3, #4
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	602a      	str	r2, [r5, #0]
 81063f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81063f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81063fc:	2301      	movs	r3, #1
 81063fe:	e0a3      	b.n	8106548 <_printf_i+0x1f4>
 8106400:	6820      	ldr	r0, [r4, #0]
 8106402:	6829      	ldr	r1, [r5, #0]
 8106404:	0606      	lsls	r6, r0, #24
 8106406:	f101 0304 	add.w	r3, r1, #4
 810640a:	d50a      	bpl.n	8106422 <_printf_i+0xce>
 810640c:	680e      	ldr	r6, [r1, #0]
 810640e:	602b      	str	r3, [r5, #0]
 8106410:	2e00      	cmp	r6, #0
 8106412:	da03      	bge.n	810641c <_printf_i+0xc8>
 8106414:	232d      	movs	r3, #45	; 0x2d
 8106416:	4276      	negs	r6, r6
 8106418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810641c:	485e      	ldr	r0, [pc, #376]	; (8106598 <_printf_i+0x244>)
 810641e:	230a      	movs	r3, #10
 8106420:	e019      	b.n	8106456 <_printf_i+0x102>
 8106422:	680e      	ldr	r6, [r1, #0]
 8106424:	602b      	str	r3, [r5, #0]
 8106426:	f010 0f40 	tst.w	r0, #64	; 0x40
 810642a:	bf18      	it	ne
 810642c:	b236      	sxthne	r6, r6
 810642e:	e7ef      	b.n	8106410 <_printf_i+0xbc>
 8106430:	682b      	ldr	r3, [r5, #0]
 8106432:	6820      	ldr	r0, [r4, #0]
 8106434:	1d19      	adds	r1, r3, #4
 8106436:	6029      	str	r1, [r5, #0]
 8106438:	0601      	lsls	r1, r0, #24
 810643a:	d501      	bpl.n	8106440 <_printf_i+0xec>
 810643c:	681e      	ldr	r6, [r3, #0]
 810643e:	e002      	b.n	8106446 <_printf_i+0xf2>
 8106440:	0646      	lsls	r6, r0, #25
 8106442:	d5fb      	bpl.n	810643c <_printf_i+0xe8>
 8106444:	881e      	ldrh	r6, [r3, #0]
 8106446:	4854      	ldr	r0, [pc, #336]	; (8106598 <_printf_i+0x244>)
 8106448:	2f6f      	cmp	r7, #111	; 0x6f
 810644a:	bf0c      	ite	eq
 810644c:	2308      	moveq	r3, #8
 810644e:	230a      	movne	r3, #10
 8106450:	2100      	movs	r1, #0
 8106452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8106456:	6865      	ldr	r5, [r4, #4]
 8106458:	60a5      	str	r5, [r4, #8]
 810645a:	2d00      	cmp	r5, #0
 810645c:	bfa2      	ittt	ge
 810645e:	6821      	ldrge	r1, [r4, #0]
 8106460:	f021 0104 	bicge.w	r1, r1, #4
 8106464:	6021      	strge	r1, [r4, #0]
 8106466:	b90e      	cbnz	r6, 810646c <_printf_i+0x118>
 8106468:	2d00      	cmp	r5, #0
 810646a:	d04d      	beq.n	8106508 <_printf_i+0x1b4>
 810646c:	4615      	mov	r5, r2
 810646e:	fbb6 f1f3 	udiv	r1, r6, r3
 8106472:	fb03 6711 	mls	r7, r3, r1, r6
 8106476:	5dc7      	ldrb	r7, [r0, r7]
 8106478:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810647c:	4637      	mov	r7, r6
 810647e:	42bb      	cmp	r3, r7
 8106480:	460e      	mov	r6, r1
 8106482:	d9f4      	bls.n	810646e <_printf_i+0x11a>
 8106484:	2b08      	cmp	r3, #8
 8106486:	d10b      	bne.n	81064a0 <_printf_i+0x14c>
 8106488:	6823      	ldr	r3, [r4, #0]
 810648a:	07de      	lsls	r6, r3, #31
 810648c:	d508      	bpl.n	81064a0 <_printf_i+0x14c>
 810648e:	6923      	ldr	r3, [r4, #16]
 8106490:	6861      	ldr	r1, [r4, #4]
 8106492:	4299      	cmp	r1, r3
 8106494:	bfde      	ittt	le
 8106496:	2330      	movle	r3, #48	; 0x30
 8106498:	f805 3c01 	strble.w	r3, [r5, #-1]
 810649c:	f105 35ff 	addle.w	r5, r5, #4294967295
 81064a0:	1b52      	subs	r2, r2, r5
 81064a2:	6122      	str	r2, [r4, #16]
 81064a4:	f8cd a000 	str.w	sl, [sp]
 81064a8:	464b      	mov	r3, r9
 81064aa:	aa03      	add	r2, sp, #12
 81064ac:	4621      	mov	r1, r4
 81064ae:	4640      	mov	r0, r8
 81064b0:	f7ff fee2 	bl	8106278 <_printf_common>
 81064b4:	3001      	adds	r0, #1
 81064b6:	d14c      	bne.n	8106552 <_printf_i+0x1fe>
 81064b8:	f04f 30ff 	mov.w	r0, #4294967295
 81064bc:	b004      	add	sp, #16
 81064be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81064c2:	4835      	ldr	r0, [pc, #212]	; (8106598 <_printf_i+0x244>)
 81064c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 81064c8:	6829      	ldr	r1, [r5, #0]
 81064ca:	6823      	ldr	r3, [r4, #0]
 81064cc:	f851 6b04 	ldr.w	r6, [r1], #4
 81064d0:	6029      	str	r1, [r5, #0]
 81064d2:	061d      	lsls	r5, r3, #24
 81064d4:	d514      	bpl.n	8106500 <_printf_i+0x1ac>
 81064d6:	07df      	lsls	r7, r3, #31
 81064d8:	bf44      	itt	mi
 81064da:	f043 0320 	orrmi.w	r3, r3, #32
 81064de:	6023      	strmi	r3, [r4, #0]
 81064e0:	b91e      	cbnz	r6, 81064ea <_printf_i+0x196>
 81064e2:	6823      	ldr	r3, [r4, #0]
 81064e4:	f023 0320 	bic.w	r3, r3, #32
 81064e8:	6023      	str	r3, [r4, #0]
 81064ea:	2310      	movs	r3, #16
 81064ec:	e7b0      	b.n	8106450 <_printf_i+0xfc>
 81064ee:	6823      	ldr	r3, [r4, #0]
 81064f0:	f043 0320 	orr.w	r3, r3, #32
 81064f4:	6023      	str	r3, [r4, #0]
 81064f6:	2378      	movs	r3, #120	; 0x78
 81064f8:	4828      	ldr	r0, [pc, #160]	; (810659c <_printf_i+0x248>)
 81064fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81064fe:	e7e3      	b.n	81064c8 <_printf_i+0x174>
 8106500:	0659      	lsls	r1, r3, #25
 8106502:	bf48      	it	mi
 8106504:	b2b6      	uxthmi	r6, r6
 8106506:	e7e6      	b.n	81064d6 <_printf_i+0x182>
 8106508:	4615      	mov	r5, r2
 810650a:	e7bb      	b.n	8106484 <_printf_i+0x130>
 810650c:	682b      	ldr	r3, [r5, #0]
 810650e:	6826      	ldr	r6, [r4, #0]
 8106510:	6961      	ldr	r1, [r4, #20]
 8106512:	1d18      	adds	r0, r3, #4
 8106514:	6028      	str	r0, [r5, #0]
 8106516:	0635      	lsls	r5, r6, #24
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	d501      	bpl.n	8106520 <_printf_i+0x1cc>
 810651c:	6019      	str	r1, [r3, #0]
 810651e:	e002      	b.n	8106526 <_printf_i+0x1d2>
 8106520:	0670      	lsls	r0, r6, #25
 8106522:	d5fb      	bpl.n	810651c <_printf_i+0x1c8>
 8106524:	8019      	strh	r1, [r3, #0]
 8106526:	2300      	movs	r3, #0
 8106528:	6123      	str	r3, [r4, #16]
 810652a:	4615      	mov	r5, r2
 810652c:	e7ba      	b.n	81064a4 <_printf_i+0x150>
 810652e:	682b      	ldr	r3, [r5, #0]
 8106530:	1d1a      	adds	r2, r3, #4
 8106532:	602a      	str	r2, [r5, #0]
 8106534:	681d      	ldr	r5, [r3, #0]
 8106536:	6862      	ldr	r2, [r4, #4]
 8106538:	2100      	movs	r1, #0
 810653a:	4628      	mov	r0, r5
 810653c:	f7f9 fed8 	bl	81002f0 <memchr>
 8106540:	b108      	cbz	r0, 8106546 <_printf_i+0x1f2>
 8106542:	1b40      	subs	r0, r0, r5
 8106544:	6060      	str	r0, [r4, #4]
 8106546:	6863      	ldr	r3, [r4, #4]
 8106548:	6123      	str	r3, [r4, #16]
 810654a:	2300      	movs	r3, #0
 810654c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106550:	e7a8      	b.n	81064a4 <_printf_i+0x150>
 8106552:	6923      	ldr	r3, [r4, #16]
 8106554:	462a      	mov	r2, r5
 8106556:	4649      	mov	r1, r9
 8106558:	4640      	mov	r0, r8
 810655a:	47d0      	blx	sl
 810655c:	3001      	adds	r0, #1
 810655e:	d0ab      	beq.n	81064b8 <_printf_i+0x164>
 8106560:	6823      	ldr	r3, [r4, #0]
 8106562:	079b      	lsls	r3, r3, #30
 8106564:	d413      	bmi.n	810658e <_printf_i+0x23a>
 8106566:	68e0      	ldr	r0, [r4, #12]
 8106568:	9b03      	ldr	r3, [sp, #12]
 810656a:	4298      	cmp	r0, r3
 810656c:	bfb8      	it	lt
 810656e:	4618      	movlt	r0, r3
 8106570:	e7a4      	b.n	81064bc <_printf_i+0x168>
 8106572:	2301      	movs	r3, #1
 8106574:	4632      	mov	r2, r6
 8106576:	4649      	mov	r1, r9
 8106578:	4640      	mov	r0, r8
 810657a:	47d0      	blx	sl
 810657c:	3001      	adds	r0, #1
 810657e:	d09b      	beq.n	81064b8 <_printf_i+0x164>
 8106580:	3501      	adds	r5, #1
 8106582:	68e3      	ldr	r3, [r4, #12]
 8106584:	9903      	ldr	r1, [sp, #12]
 8106586:	1a5b      	subs	r3, r3, r1
 8106588:	42ab      	cmp	r3, r5
 810658a:	dcf2      	bgt.n	8106572 <_printf_i+0x21e>
 810658c:	e7eb      	b.n	8106566 <_printf_i+0x212>
 810658e:	2500      	movs	r5, #0
 8106590:	f104 0619 	add.w	r6, r4, #25
 8106594:	e7f5      	b.n	8106582 <_printf_i+0x22e>
 8106596:	bf00      	nop
 8106598:	08106c89 	.word	0x08106c89
 810659c:	08106c9a 	.word	0x08106c9a

081065a0 <_scanf_chars>:
 81065a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81065a4:	4615      	mov	r5, r2
 81065a6:	688a      	ldr	r2, [r1, #8]
 81065a8:	4680      	mov	r8, r0
 81065aa:	460c      	mov	r4, r1
 81065ac:	b932      	cbnz	r2, 81065bc <_scanf_chars+0x1c>
 81065ae:	698a      	ldr	r2, [r1, #24]
 81065b0:	2a00      	cmp	r2, #0
 81065b2:	bf0c      	ite	eq
 81065b4:	2201      	moveq	r2, #1
 81065b6:	f04f 32ff 	movne.w	r2, #4294967295
 81065ba:	608a      	str	r2, [r1, #8]
 81065bc:	6822      	ldr	r2, [r4, #0]
 81065be:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8106650 <_scanf_chars+0xb0>
 81065c2:	06d1      	lsls	r1, r2, #27
 81065c4:	bf5f      	itttt	pl
 81065c6:	681a      	ldrpl	r2, [r3, #0]
 81065c8:	1d11      	addpl	r1, r2, #4
 81065ca:	6019      	strpl	r1, [r3, #0]
 81065cc:	6816      	ldrpl	r6, [r2, #0]
 81065ce:	2700      	movs	r7, #0
 81065d0:	69a0      	ldr	r0, [r4, #24]
 81065d2:	b188      	cbz	r0, 81065f8 <_scanf_chars+0x58>
 81065d4:	2801      	cmp	r0, #1
 81065d6:	d107      	bne.n	81065e8 <_scanf_chars+0x48>
 81065d8:	682a      	ldr	r2, [r5, #0]
 81065da:	7811      	ldrb	r1, [r2, #0]
 81065dc:	6962      	ldr	r2, [r4, #20]
 81065de:	5c52      	ldrb	r2, [r2, r1]
 81065e0:	b952      	cbnz	r2, 81065f8 <_scanf_chars+0x58>
 81065e2:	2f00      	cmp	r7, #0
 81065e4:	d031      	beq.n	810664a <_scanf_chars+0xaa>
 81065e6:	e022      	b.n	810662e <_scanf_chars+0x8e>
 81065e8:	2802      	cmp	r0, #2
 81065ea:	d120      	bne.n	810662e <_scanf_chars+0x8e>
 81065ec:	682b      	ldr	r3, [r5, #0]
 81065ee:	781b      	ldrb	r3, [r3, #0]
 81065f0:	f813 3009 	ldrb.w	r3, [r3, r9]
 81065f4:	071b      	lsls	r3, r3, #28
 81065f6:	d41a      	bmi.n	810662e <_scanf_chars+0x8e>
 81065f8:	6823      	ldr	r3, [r4, #0]
 81065fa:	06da      	lsls	r2, r3, #27
 81065fc:	bf5e      	ittt	pl
 81065fe:	682b      	ldrpl	r3, [r5, #0]
 8106600:	781b      	ldrbpl	r3, [r3, #0]
 8106602:	f806 3b01 	strbpl.w	r3, [r6], #1
 8106606:	682a      	ldr	r2, [r5, #0]
 8106608:	686b      	ldr	r3, [r5, #4]
 810660a:	3201      	adds	r2, #1
 810660c:	602a      	str	r2, [r5, #0]
 810660e:	68a2      	ldr	r2, [r4, #8]
 8106610:	3b01      	subs	r3, #1
 8106612:	3a01      	subs	r2, #1
 8106614:	606b      	str	r3, [r5, #4]
 8106616:	3701      	adds	r7, #1
 8106618:	60a2      	str	r2, [r4, #8]
 810661a:	b142      	cbz	r2, 810662e <_scanf_chars+0x8e>
 810661c:	2b00      	cmp	r3, #0
 810661e:	dcd7      	bgt.n	81065d0 <_scanf_chars+0x30>
 8106620:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8106624:	4629      	mov	r1, r5
 8106626:	4640      	mov	r0, r8
 8106628:	4798      	blx	r3
 810662a:	2800      	cmp	r0, #0
 810662c:	d0d0      	beq.n	81065d0 <_scanf_chars+0x30>
 810662e:	6823      	ldr	r3, [r4, #0]
 8106630:	f013 0310 	ands.w	r3, r3, #16
 8106634:	d105      	bne.n	8106642 <_scanf_chars+0xa2>
 8106636:	68e2      	ldr	r2, [r4, #12]
 8106638:	3201      	adds	r2, #1
 810663a:	60e2      	str	r2, [r4, #12]
 810663c:	69a2      	ldr	r2, [r4, #24]
 810663e:	b102      	cbz	r2, 8106642 <_scanf_chars+0xa2>
 8106640:	7033      	strb	r3, [r6, #0]
 8106642:	6923      	ldr	r3, [r4, #16]
 8106644:	443b      	add	r3, r7
 8106646:	6123      	str	r3, [r4, #16]
 8106648:	2000      	movs	r0, #0
 810664a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810664e:	bf00      	nop
 8106650:	08106cc7 	.word	0x08106cc7

08106654 <_scanf_i>:
 8106654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106658:	4698      	mov	r8, r3
 810665a:	4b76      	ldr	r3, [pc, #472]	; (8106834 <_scanf_i+0x1e0>)
 810665c:	460c      	mov	r4, r1
 810665e:	4682      	mov	sl, r0
 8106660:	4616      	mov	r6, r2
 8106662:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8106666:	b087      	sub	sp, #28
 8106668:	ab03      	add	r3, sp, #12
 810666a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810666e:	4b72      	ldr	r3, [pc, #456]	; (8106838 <_scanf_i+0x1e4>)
 8106670:	69a1      	ldr	r1, [r4, #24]
 8106672:	4a72      	ldr	r2, [pc, #456]	; (810683c <_scanf_i+0x1e8>)
 8106674:	2903      	cmp	r1, #3
 8106676:	bf18      	it	ne
 8106678:	461a      	movne	r2, r3
 810667a:	68a3      	ldr	r3, [r4, #8]
 810667c:	9201      	str	r2, [sp, #4]
 810667e:	1e5a      	subs	r2, r3, #1
 8106680:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8106684:	bf88      	it	hi
 8106686:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810668a:	4627      	mov	r7, r4
 810668c:	bf82      	ittt	hi
 810668e:	eb03 0905 	addhi.w	r9, r3, r5
 8106692:	f240 135d 	movwhi	r3, #349	; 0x15d
 8106696:	60a3      	strhi	r3, [r4, #8]
 8106698:	f857 3b1c 	ldr.w	r3, [r7], #28
 810669c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 81066a0:	bf98      	it	ls
 81066a2:	f04f 0900 	movls.w	r9, #0
 81066a6:	6023      	str	r3, [r4, #0]
 81066a8:	463d      	mov	r5, r7
 81066aa:	f04f 0b00 	mov.w	fp, #0
 81066ae:	6831      	ldr	r1, [r6, #0]
 81066b0:	ab03      	add	r3, sp, #12
 81066b2:	7809      	ldrb	r1, [r1, #0]
 81066b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 81066b8:	2202      	movs	r2, #2
 81066ba:	f7f9 fe19 	bl	81002f0 <memchr>
 81066be:	b328      	cbz	r0, 810670c <_scanf_i+0xb8>
 81066c0:	f1bb 0f01 	cmp.w	fp, #1
 81066c4:	d159      	bne.n	810677a <_scanf_i+0x126>
 81066c6:	6862      	ldr	r2, [r4, #4]
 81066c8:	b92a      	cbnz	r2, 81066d6 <_scanf_i+0x82>
 81066ca:	6822      	ldr	r2, [r4, #0]
 81066cc:	2308      	movs	r3, #8
 81066ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81066d2:	6063      	str	r3, [r4, #4]
 81066d4:	6022      	str	r2, [r4, #0]
 81066d6:	6822      	ldr	r2, [r4, #0]
 81066d8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 81066dc:	6022      	str	r2, [r4, #0]
 81066de:	68a2      	ldr	r2, [r4, #8]
 81066e0:	1e51      	subs	r1, r2, #1
 81066e2:	60a1      	str	r1, [r4, #8]
 81066e4:	b192      	cbz	r2, 810670c <_scanf_i+0xb8>
 81066e6:	6832      	ldr	r2, [r6, #0]
 81066e8:	1c51      	adds	r1, r2, #1
 81066ea:	6031      	str	r1, [r6, #0]
 81066ec:	7812      	ldrb	r2, [r2, #0]
 81066ee:	f805 2b01 	strb.w	r2, [r5], #1
 81066f2:	6872      	ldr	r2, [r6, #4]
 81066f4:	3a01      	subs	r2, #1
 81066f6:	2a00      	cmp	r2, #0
 81066f8:	6072      	str	r2, [r6, #4]
 81066fa:	dc07      	bgt.n	810670c <_scanf_i+0xb8>
 81066fc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8106700:	4631      	mov	r1, r6
 8106702:	4650      	mov	r0, sl
 8106704:	4790      	blx	r2
 8106706:	2800      	cmp	r0, #0
 8106708:	f040 8085 	bne.w	8106816 <_scanf_i+0x1c2>
 810670c:	f10b 0b01 	add.w	fp, fp, #1
 8106710:	f1bb 0f03 	cmp.w	fp, #3
 8106714:	d1cb      	bne.n	81066ae <_scanf_i+0x5a>
 8106716:	6863      	ldr	r3, [r4, #4]
 8106718:	b90b      	cbnz	r3, 810671e <_scanf_i+0xca>
 810671a:	230a      	movs	r3, #10
 810671c:	6063      	str	r3, [r4, #4]
 810671e:	6863      	ldr	r3, [r4, #4]
 8106720:	4947      	ldr	r1, [pc, #284]	; (8106840 <_scanf_i+0x1ec>)
 8106722:	6960      	ldr	r0, [r4, #20]
 8106724:	1ac9      	subs	r1, r1, r3
 8106726:	f000 f88d 	bl	8106844 <__sccl>
 810672a:	f04f 0b00 	mov.w	fp, #0
 810672e:	68a3      	ldr	r3, [r4, #8]
 8106730:	6822      	ldr	r2, [r4, #0]
 8106732:	2b00      	cmp	r3, #0
 8106734:	d03d      	beq.n	81067b2 <_scanf_i+0x15e>
 8106736:	6831      	ldr	r1, [r6, #0]
 8106738:	6960      	ldr	r0, [r4, #20]
 810673a:	f891 c000 	ldrb.w	ip, [r1]
 810673e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8106742:	2800      	cmp	r0, #0
 8106744:	d035      	beq.n	81067b2 <_scanf_i+0x15e>
 8106746:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 810674a:	d124      	bne.n	8106796 <_scanf_i+0x142>
 810674c:	0510      	lsls	r0, r2, #20
 810674e:	d522      	bpl.n	8106796 <_scanf_i+0x142>
 8106750:	f10b 0b01 	add.w	fp, fp, #1
 8106754:	f1b9 0f00 	cmp.w	r9, #0
 8106758:	d003      	beq.n	8106762 <_scanf_i+0x10e>
 810675a:	3301      	adds	r3, #1
 810675c:	f109 39ff 	add.w	r9, r9, #4294967295
 8106760:	60a3      	str	r3, [r4, #8]
 8106762:	6873      	ldr	r3, [r6, #4]
 8106764:	3b01      	subs	r3, #1
 8106766:	2b00      	cmp	r3, #0
 8106768:	6073      	str	r3, [r6, #4]
 810676a:	dd1b      	ble.n	81067a4 <_scanf_i+0x150>
 810676c:	6833      	ldr	r3, [r6, #0]
 810676e:	3301      	adds	r3, #1
 8106770:	6033      	str	r3, [r6, #0]
 8106772:	68a3      	ldr	r3, [r4, #8]
 8106774:	3b01      	subs	r3, #1
 8106776:	60a3      	str	r3, [r4, #8]
 8106778:	e7d9      	b.n	810672e <_scanf_i+0xda>
 810677a:	f1bb 0f02 	cmp.w	fp, #2
 810677e:	d1ae      	bne.n	81066de <_scanf_i+0x8a>
 8106780:	6822      	ldr	r2, [r4, #0]
 8106782:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8106786:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 810678a:	d1bf      	bne.n	810670c <_scanf_i+0xb8>
 810678c:	2310      	movs	r3, #16
 810678e:	6063      	str	r3, [r4, #4]
 8106790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106794:	e7a2      	b.n	81066dc <_scanf_i+0x88>
 8106796:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 810679a:	6022      	str	r2, [r4, #0]
 810679c:	780b      	ldrb	r3, [r1, #0]
 810679e:	f805 3b01 	strb.w	r3, [r5], #1
 81067a2:	e7de      	b.n	8106762 <_scanf_i+0x10e>
 81067a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 81067a8:	4631      	mov	r1, r6
 81067aa:	4650      	mov	r0, sl
 81067ac:	4798      	blx	r3
 81067ae:	2800      	cmp	r0, #0
 81067b0:	d0df      	beq.n	8106772 <_scanf_i+0x11e>
 81067b2:	6823      	ldr	r3, [r4, #0]
 81067b4:	05db      	lsls	r3, r3, #23
 81067b6:	d50d      	bpl.n	81067d4 <_scanf_i+0x180>
 81067b8:	42bd      	cmp	r5, r7
 81067ba:	d909      	bls.n	81067d0 <_scanf_i+0x17c>
 81067bc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 81067c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81067c4:	4632      	mov	r2, r6
 81067c6:	4650      	mov	r0, sl
 81067c8:	4798      	blx	r3
 81067ca:	f105 39ff 	add.w	r9, r5, #4294967295
 81067ce:	464d      	mov	r5, r9
 81067d0:	42bd      	cmp	r5, r7
 81067d2:	d02d      	beq.n	8106830 <_scanf_i+0x1dc>
 81067d4:	6822      	ldr	r2, [r4, #0]
 81067d6:	f012 0210 	ands.w	r2, r2, #16
 81067da:	d113      	bne.n	8106804 <_scanf_i+0x1b0>
 81067dc:	702a      	strb	r2, [r5, #0]
 81067de:	6863      	ldr	r3, [r4, #4]
 81067e0:	9e01      	ldr	r6, [sp, #4]
 81067e2:	4639      	mov	r1, r7
 81067e4:	4650      	mov	r0, sl
 81067e6:	47b0      	blx	r6
 81067e8:	6821      	ldr	r1, [r4, #0]
 81067ea:	f8d8 3000 	ldr.w	r3, [r8]
 81067ee:	f011 0f20 	tst.w	r1, #32
 81067f2:	d013      	beq.n	810681c <_scanf_i+0x1c8>
 81067f4:	1d1a      	adds	r2, r3, #4
 81067f6:	f8c8 2000 	str.w	r2, [r8]
 81067fa:	681b      	ldr	r3, [r3, #0]
 81067fc:	6018      	str	r0, [r3, #0]
 81067fe:	68e3      	ldr	r3, [r4, #12]
 8106800:	3301      	adds	r3, #1
 8106802:	60e3      	str	r3, [r4, #12]
 8106804:	1bed      	subs	r5, r5, r7
 8106806:	44ab      	add	fp, r5
 8106808:	6925      	ldr	r5, [r4, #16]
 810680a:	445d      	add	r5, fp
 810680c:	6125      	str	r5, [r4, #16]
 810680e:	2000      	movs	r0, #0
 8106810:	b007      	add	sp, #28
 8106812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106816:	f04f 0b00 	mov.w	fp, #0
 810681a:	e7ca      	b.n	81067b2 <_scanf_i+0x15e>
 810681c:	1d1a      	adds	r2, r3, #4
 810681e:	f8c8 2000 	str.w	r2, [r8]
 8106822:	681b      	ldr	r3, [r3, #0]
 8106824:	f011 0f01 	tst.w	r1, #1
 8106828:	bf14      	ite	ne
 810682a:	8018      	strhne	r0, [r3, #0]
 810682c:	6018      	streq	r0, [r3, #0]
 810682e:	e7e6      	b.n	81067fe <_scanf_i+0x1aa>
 8106830:	2001      	movs	r0, #1
 8106832:	e7ed      	b.n	8106810 <_scanf_i+0x1bc>
 8106834:	08106bfc 	.word	0x08106bfc
 8106838:	08106aa1 	.word	0x08106aa1
 810683c:	081069b9 	.word	0x081069b9
 8106840:	08106cc4 	.word	0x08106cc4

08106844 <__sccl>:
 8106844:	b570      	push	{r4, r5, r6, lr}
 8106846:	780b      	ldrb	r3, [r1, #0]
 8106848:	4604      	mov	r4, r0
 810684a:	2b5e      	cmp	r3, #94	; 0x5e
 810684c:	bf0b      	itete	eq
 810684e:	784b      	ldrbeq	r3, [r1, #1]
 8106850:	1c48      	addne	r0, r1, #1
 8106852:	1c88      	addeq	r0, r1, #2
 8106854:	2200      	movne	r2, #0
 8106856:	bf08      	it	eq
 8106858:	2201      	moveq	r2, #1
 810685a:	1e61      	subs	r1, r4, #1
 810685c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8106860:	f801 2f01 	strb.w	r2, [r1, #1]!
 8106864:	42a9      	cmp	r1, r5
 8106866:	d1fb      	bne.n	8106860 <__sccl+0x1c>
 8106868:	b90b      	cbnz	r3, 810686e <__sccl+0x2a>
 810686a:	3801      	subs	r0, #1
 810686c:	bd70      	pop	{r4, r5, r6, pc}
 810686e:	f082 0201 	eor.w	r2, r2, #1
 8106872:	54e2      	strb	r2, [r4, r3]
 8106874:	4605      	mov	r5, r0
 8106876:	4628      	mov	r0, r5
 8106878:	f810 1b01 	ldrb.w	r1, [r0], #1
 810687c:	292d      	cmp	r1, #45	; 0x2d
 810687e:	d006      	beq.n	810688e <__sccl+0x4a>
 8106880:	295d      	cmp	r1, #93	; 0x5d
 8106882:	d0f3      	beq.n	810686c <__sccl+0x28>
 8106884:	b909      	cbnz	r1, 810688a <__sccl+0x46>
 8106886:	4628      	mov	r0, r5
 8106888:	e7f0      	b.n	810686c <__sccl+0x28>
 810688a:	460b      	mov	r3, r1
 810688c:	e7f1      	b.n	8106872 <__sccl+0x2e>
 810688e:	786e      	ldrb	r6, [r5, #1]
 8106890:	2e5d      	cmp	r6, #93	; 0x5d
 8106892:	d0fa      	beq.n	810688a <__sccl+0x46>
 8106894:	42b3      	cmp	r3, r6
 8106896:	dcf8      	bgt.n	810688a <__sccl+0x46>
 8106898:	3502      	adds	r5, #2
 810689a:	4619      	mov	r1, r3
 810689c:	3101      	adds	r1, #1
 810689e:	428e      	cmp	r6, r1
 81068a0:	5462      	strb	r2, [r4, r1]
 81068a2:	dcfb      	bgt.n	810689c <__sccl+0x58>
 81068a4:	1af1      	subs	r1, r6, r3
 81068a6:	3901      	subs	r1, #1
 81068a8:	1c58      	adds	r0, r3, #1
 81068aa:	42b3      	cmp	r3, r6
 81068ac:	bfa8      	it	ge
 81068ae:	2100      	movge	r1, #0
 81068b0:	1843      	adds	r3, r0, r1
 81068b2:	e7e0      	b.n	8106876 <__sccl+0x32>

081068b4 <_strtol_l.constprop.0>:
 81068b4:	2b01      	cmp	r3, #1
 81068b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81068ba:	d001      	beq.n	81068c0 <_strtol_l.constprop.0+0xc>
 81068bc:	2b24      	cmp	r3, #36	; 0x24
 81068be:	d906      	bls.n	81068ce <_strtol_l.constprop.0+0x1a>
 81068c0:	f7fe ffb6 	bl	8105830 <__errno>
 81068c4:	2316      	movs	r3, #22
 81068c6:	6003      	str	r3, [r0, #0]
 81068c8:	2000      	movs	r0, #0
 81068ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81068ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 81069b4 <_strtol_l.constprop.0+0x100>
 81068d2:	460d      	mov	r5, r1
 81068d4:	462e      	mov	r6, r5
 81068d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 81068da:	f814 700c 	ldrb.w	r7, [r4, ip]
 81068de:	f017 0708 	ands.w	r7, r7, #8
 81068e2:	d1f7      	bne.n	81068d4 <_strtol_l.constprop.0+0x20>
 81068e4:	2c2d      	cmp	r4, #45	; 0x2d
 81068e6:	d132      	bne.n	810694e <_strtol_l.constprop.0+0x9a>
 81068e8:	782c      	ldrb	r4, [r5, #0]
 81068ea:	2701      	movs	r7, #1
 81068ec:	1cb5      	adds	r5, r6, #2
 81068ee:	2b00      	cmp	r3, #0
 81068f0:	d05b      	beq.n	81069aa <_strtol_l.constprop.0+0xf6>
 81068f2:	2b10      	cmp	r3, #16
 81068f4:	d109      	bne.n	810690a <_strtol_l.constprop.0+0x56>
 81068f6:	2c30      	cmp	r4, #48	; 0x30
 81068f8:	d107      	bne.n	810690a <_strtol_l.constprop.0+0x56>
 81068fa:	782c      	ldrb	r4, [r5, #0]
 81068fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8106900:	2c58      	cmp	r4, #88	; 0x58
 8106902:	d14d      	bne.n	81069a0 <_strtol_l.constprop.0+0xec>
 8106904:	786c      	ldrb	r4, [r5, #1]
 8106906:	2310      	movs	r3, #16
 8106908:	3502      	adds	r5, #2
 810690a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810690e:	f108 38ff 	add.w	r8, r8, #4294967295
 8106912:	f04f 0c00 	mov.w	ip, #0
 8106916:	fbb8 f9f3 	udiv	r9, r8, r3
 810691a:	4666      	mov	r6, ip
 810691c:	fb03 8a19 	mls	sl, r3, r9, r8
 8106920:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8106924:	f1be 0f09 	cmp.w	lr, #9
 8106928:	d816      	bhi.n	8106958 <_strtol_l.constprop.0+0xa4>
 810692a:	4674      	mov	r4, lr
 810692c:	42a3      	cmp	r3, r4
 810692e:	dd24      	ble.n	810697a <_strtol_l.constprop.0+0xc6>
 8106930:	f1bc 0f00 	cmp.w	ip, #0
 8106934:	db1e      	blt.n	8106974 <_strtol_l.constprop.0+0xc0>
 8106936:	45b1      	cmp	r9, r6
 8106938:	d31c      	bcc.n	8106974 <_strtol_l.constprop.0+0xc0>
 810693a:	d101      	bne.n	8106940 <_strtol_l.constprop.0+0x8c>
 810693c:	45a2      	cmp	sl, r4
 810693e:	db19      	blt.n	8106974 <_strtol_l.constprop.0+0xc0>
 8106940:	fb06 4603 	mla	r6, r6, r3, r4
 8106944:	f04f 0c01 	mov.w	ip, #1
 8106948:	f815 4b01 	ldrb.w	r4, [r5], #1
 810694c:	e7e8      	b.n	8106920 <_strtol_l.constprop.0+0x6c>
 810694e:	2c2b      	cmp	r4, #43	; 0x2b
 8106950:	bf04      	itt	eq
 8106952:	782c      	ldrbeq	r4, [r5, #0]
 8106954:	1cb5      	addeq	r5, r6, #2
 8106956:	e7ca      	b.n	81068ee <_strtol_l.constprop.0+0x3a>
 8106958:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810695c:	f1be 0f19 	cmp.w	lr, #25
 8106960:	d801      	bhi.n	8106966 <_strtol_l.constprop.0+0xb2>
 8106962:	3c37      	subs	r4, #55	; 0x37
 8106964:	e7e2      	b.n	810692c <_strtol_l.constprop.0+0x78>
 8106966:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810696a:	f1be 0f19 	cmp.w	lr, #25
 810696e:	d804      	bhi.n	810697a <_strtol_l.constprop.0+0xc6>
 8106970:	3c57      	subs	r4, #87	; 0x57
 8106972:	e7db      	b.n	810692c <_strtol_l.constprop.0+0x78>
 8106974:	f04f 3cff 	mov.w	ip, #4294967295
 8106978:	e7e6      	b.n	8106948 <_strtol_l.constprop.0+0x94>
 810697a:	f1bc 0f00 	cmp.w	ip, #0
 810697e:	da05      	bge.n	810698c <_strtol_l.constprop.0+0xd8>
 8106980:	2322      	movs	r3, #34	; 0x22
 8106982:	6003      	str	r3, [r0, #0]
 8106984:	4646      	mov	r6, r8
 8106986:	b942      	cbnz	r2, 810699a <_strtol_l.constprop.0+0xe6>
 8106988:	4630      	mov	r0, r6
 810698a:	e79e      	b.n	81068ca <_strtol_l.constprop.0+0x16>
 810698c:	b107      	cbz	r7, 8106990 <_strtol_l.constprop.0+0xdc>
 810698e:	4276      	negs	r6, r6
 8106990:	2a00      	cmp	r2, #0
 8106992:	d0f9      	beq.n	8106988 <_strtol_l.constprop.0+0xd4>
 8106994:	f1bc 0f00 	cmp.w	ip, #0
 8106998:	d000      	beq.n	810699c <_strtol_l.constprop.0+0xe8>
 810699a:	1e69      	subs	r1, r5, #1
 810699c:	6011      	str	r1, [r2, #0]
 810699e:	e7f3      	b.n	8106988 <_strtol_l.constprop.0+0xd4>
 81069a0:	2430      	movs	r4, #48	; 0x30
 81069a2:	2b00      	cmp	r3, #0
 81069a4:	d1b1      	bne.n	810690a <_strtol_l.constprop.0+0x56>
 81069a6:	2308      	movs	r3, #8
 81069a8:	e7af      	b.n	810690a <_strtol_l.constprop.0+0x56>
 81069aa:	2c30      	cmp	r4, #48	; 0x30
 81069ac:	d0a5      	beq.n	81068fa <_strtol_l.constprop.0+0x46>
 81069ae:	230a      	movs	r3, #10
 81069b0:	e7ab      	b.n	810690a <_strtol_l.constprop.0+0x56>
 81069b2:	bf00      	nop
 81069b4:	08106cc7 	.word	0x08106cc7

081069b8 <_strtol_r>:
 81069b8:	f7ff bf7c 	b.w	81068b4 <_strtol_l.constprop.0>

081069bc <_strtoul_l.constprop.0>:
 81069bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81069c0:	4f36      	ldr	r7, [pc, #216]	; (8106a9c <_strtoul_l.constprop.0+0xe0>)
 81069c2:	4686      	mov	lr, r0
 81069c4:	460d      	mov	r5, r1
 81069c6:	4628      	mov	r0, r5
 81069c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 81069cc:	5de6      	ldrb	r6, [r4, r7]
 81069ce:	f016 0608 	ands.w	r6, r6, #8
 81069d2:	d1f8      	bne.n	81069c6 <_strtoul_l.constprop.0+0xa>
 81069d4:	2c2d      	cmp	r4, #45	; 0x2d
 81069d6:	d12f      	bne.n	8106a38 <_strtoul_l.constprop.0+0x7c>
 81069d8:	782c      	ldrb	r4, [r5, #0]
 81069da:	2601      	movs	r6, #1
 81069dc:	1c85      	adds	r5, r0, #2
 81069de:	2b00      	cmp	r3, #0
 81069e0:	d057      	beq.n	8106a92 <_strtoul_l.constprop.0+0xd6>
 81069e2:	2b10      	cmp	r3, #16
 81069e4:	d109      	bne.n	81069fa <_strtoul_l.constprop.0+0x3e>
 81069e6:	2c30      	cmp	r4, #48	; 0x30
 81069e8:	d107      	bne.n	81069fa <_strtoul_l.constprop.0+0x3e>
 81069ea:	7828      	ldrb	r0, [r5, #0]
 81069ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 81069f0:	2858      	cmp	r0, #88	; 0x58
 81069f2:	d149      	bne.n	8106a88 <_strtoul_l.constprop.0+0xcc>
 81069f4:	786c      	ldrb	r4, [r5, #1]
 81069f6:	2310      	movs	r3, #16
 81069f8:	3502      	adds	r5, #2
 81069fa:	f04f 38ff 	mov.w	r8, #4294967295
 81069fe:	2700      	movs	r7, #0
 8106a00:	fbb8 f8f3 	udiv	r8, r8, r3
 8106a04:	fb03 f908 	mul.w	r9, r3, r8
 8106a08:	ea6f 0909 	mvn.w	r9, r9
 8106a0c:	4638      	mov	r0, r7
 8106a0e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8106a12:	f1bc 0f09 	cmp.w	ip, #9
 8106a16:	d814      	bhi.n	8106a42 <_strtoul_l.constprop.0+0x86>
 8106a18:	4664      	mov	r4, ip
 8106a1a:	42a3      	cmp	r3, r4
 8106a1c:	dd22      	ble.n	8106a64 <_strtoul_l.constprop.0+0xa8>
 8106a1e:	2f00      	cmp	r7, #0
 8106a20:	db1d      	blt.n	8106a5e <_strtoul_l.constprop.0+0xa2>
 8106a22:	4580      	cmp	r8, r0
 8106a24:	d31b      	bcc.n	8106a5e <_strtoul_l.constprop.0+0xa2>
 8106a26:	d101      	bne.n	8106a2c <_strtoul_l.constprop.0+0x70>
 8106a28:	45a1      	cmp	r9, r4
 8106a2a:	db18      	blt.n	8106a5e <_strtoul_l.constprop.0+0xa2>
 8106a2c:	fb00 4003 	mla	r0, r0, r3, r4
 8106a30:	2701      	movs	r7, #1
 8106a32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8106a36:	e7ea      	b.n	8106a0e <_strtoul_l.constprop.0+0x52>
 8106a38:	2c2b      	cmp	r4, #43	; 0x2b
 8106a3a:	bf04      	itt	eq
 8106a3c:	782c      	ldrbeq	r4, [r5, #0]
 8106a3e:	1c85      	addeq	r5, r0, #2
 8106a40:	e7cd      	b.n	81069de <_strtoul_l.constprop.0+0x22>
 8106a42:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8106a46:	f1bc 0f19 	cmp.w	ip, #25
 8106a4a:	d801      	bhi.n	8106a50 <_strtoul_l.constprop.0+0x94>
 8106a4c:	3c37      	subs	r4, #55	; 0x37
 8106a4e:	e7e4      	b.n	8106a1a <_strtoul_l.constprop.0+0x5e>
 8106a50:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8106a54:	f1bc 0f19 	cmp.w	ip, #25
 8106a58:	d804      	bhi.n	8106a64 <_strtoul_l.constprop.0+0xa8>
 8106a5a:	3c57      	subs	r4, #87	; 0x57
 8106a5c:	e7dd      	b.n	8106a1a <_strtoul_l.constprop.0+0x5e>
 8106a5e:	f04f 37ff 	mov.w	r7, #4294967295
 8106a62:	e7e6      	b.n	8106a32 <_strtoul_l.constprop.0+0x76>
 8106a64:	2f00      	cmp	r7, #0
 8106a66:	da07      	bge.n	8106a78 <_strtoul_l.constprop.0+0xbc>
 8106a68:	2322      	movs	r3, #34	; 0x22
 8106a6a:	f8ce 3000 	str.w	r3, [lr]
 8106a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8106a72:	b932      	cbnz	r2, 8106a82 <_strtoul_l.constprop.0+0xc6>
 8106a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8106a78:	b106      	cbz	r6, 8106a7c <_strtoul_l.constprop.0+0xc0>
 8106a7a:	4240      	negs	r0, r0
 8106a7c:	2a00      	cmp	r2, #0
 8106a7e:	d0f9      	beq.n	8106a74 <_strtoul_l.constprop.0+0xb8>
 8106a80:	b107      	cbz	r7, 8106a84 <_strtoul_l.constprop.0+0xc8>
 8106a82:	1e69      	subs	r1, r5, #1
 8106a84:	6011      	str	r1, [r2, #0]
 8106a86:	e7f5      	b.n	8106a74 <_strtoul_l.constprop.0+0xb8>
 8106a88:	2430      	movs	r4, #48	; 0x30
 8106a8a:	2b00      	cmp	r3, #0
 8106a8c:	d1b5      	bne.n	81069fa <_strtoul_l.constprop.0+0x3e>
 8106a8e:	2308      	movs	r3, #8
 8106a90:	e7b3      	b.n	81069fa <_strtoul_l.constprop.0+0x3e>
 8106a92:	2c30      	cmp	r4, #48	; 0x30
 8106a94:	d0a9      	beq.n	81069ea <_strtoul_l.constprop.0+0x2e>
 8106a96:	230a      	movs	r3, #10
 8106a98:	e7af      	b.n	81069fa <_strtoul_l.constprop.0+0x3e>
 8106a9a:	bf00      	nop
 8106a9c:	08106cc7 	.word	0x08106cc7

08106aa0 <_strtoul_r>:
 8106aa0:	f7ff bf8c 	b.w	81069bc <_strtoul_l.constprop.0>

08106aa4 <__submore>:
 8106aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106aa8:	460c      	mov	r4, r1
 8106aaa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8106aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8106ab0:	4299      	cmp	r1, r3
 8106ab2:	d11d      	bne.n	8106af0 <__submore+0x4c>
 8106ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8106ab8:	f7fe ff1c 	bl	81058f4 <_malloc_r>
 8106abc:	b918      	cbnz	r0, 8106ac6 <__submore+0x22>
 8106abe:	f04f 30ff 	mov.w	r0, #4294967295
 8106ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8106aca:	63a3      	str	r3, [r4, #56]	; 0x38
 8106acc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8106ad0:	6360      	str	r0, [r4, #52]	; 0x34
 8106ad2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8106ad6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8106ada:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8106ade:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8106ae2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8106ae6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8106aea:	6020      	str	r0, [r4, #0]
 8106aec:	2000      	movs	r0, #0
 8106aee:	e7e8      	b.n	8106ac2 <__submore+0x1e>
 8106af0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8106af2:	0077      	lsls	r7, r6, #1
 8106af4:	463a      	mov	r2, r7
 8106af6:	f000 f829 	bl	8106b4c <_realloc_r>
 8106afa:	4605      	mov	r5, r0
 8106afc:	2800      	cmp	r0, #0
 8106afe:	d0de      	beq.n	8106abe <__submore+0x1a>
 8106b00:	eb00 0806 	add.w	r8, r0, r6
 8106b04:	4601      	mov	r1, r0
 8106b06:	4632      	mov	r2, r6
 8106b08:	4640      	mov	r0, r8
 8106b0a:	f7fe febd 	bl	8105888 <memcpy>
 8106b0e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8106b12:	f8c4 8000 	str.w	r8, [r4]
 8106b16:	e7e9      	b.n	8106aec <__submore+0x48>

08106b18 <memmove>:
 8106b18:	4288      	cmp	r0, r1
 8106b1a:	b510      	push	{r4, lr}
 8106b1c:	eb01 0402 	add.w	r4, r1, r2
 8106b20:	d902      	bls.n	8106b28 <memmove+0x10>
 8106b22:	4284      	cmp	r4, r0
 8106b24:	4623      	mov	r3, r4
 8106b26:	d807      	bhi.n	8106b38 <memmove+0x20>
 8106b28:	1e43      	subs	r3, r0, #1
 8106b2a:	42a1      	cmp	r1, r4
 8106b2c:	d008      	beq.n	8106b40 <memmove+0x28>
 8106b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8106b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8106b36:	e7f8      	b.n	8106b2a <memmove+0x12>
 8106b38:	4402      	add	r2, r0
 8106b3a:	4601      	mov	r1, r0
 8106b3c:	428a      	cmp	r2, r1
 8106b3e:	d100      	bne.n	8106b42 <memmove+0x2a>
 8106b40:	bd10      	pop	{r4, pc}
 8106b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8106b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8106b4a:	e7f7      	b.n	8106b3c <memmove+0x24>

08106b4c <_realloc_r>:
 8106b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106b50:	4680      	mov	r8, r0
 8106b52:	4614      	mov	r4, r2
 8106b54:	460e      	mov	r6, r1
 8106b56:	b921      	cbnz	r1, 8106b62 <_realloc_r+0x16>
 8106b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106b5c:	4611      	mov	r1, r2
 8106b5e:	f7fe bec9 	b.w	81058f4 <_malloc_r>
 8106b62:	b92a      	cbnz	r2, 8106b70 <_realloc_r+0x24>
 8106b64:	f7ff f80e 	bl	8105b84 <_free_r>
 8106b68:	4625      	mov	r5, r4
 8106b6a:	4628      	mov	r0, r5
 8106b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106b70:	f000 f81b 	bl	8106baa <_malloc_usable_size_r>
 8106b74:	4284      	cmp	r4, r0
 8106b76:	4607      	mov	r7, r0
 8106b78:	d802      	bhi.n	8106b80 <_realloc_r+0x34>
 8106b7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8106b7e:	d812      	bhi.n	8106ba6 <_realloc_r+0x5a>
 8106b80:	4621      	mov	r1, r4
 8106b82:	4640      	mov	r0, r8
 8106b84:	f7fe feb6 	bl	81058f4 <_malloc_r>
 8106b88:	4605      	mov	r5, r0
 8106b8a:	2800      	cmp	r0, #0
 8106b8c:	d0ed      	beq.n	8106b6a <_realloc_r+0x1e>
 8106b8e:	42bc      	cmp	r4, r7
 8106b90:	4622      	mov	r2, r4
 8106b92:	4631      	mov	r1, r6
 8106b94:	bf28      	it	cs
 8106b96:	463a      	movcs	r2, r7
 8106b98:	f7fe fe76 	bl	8105888 <memcpy>
 8106b9c:	4631      	mov	r1, r6
 8106b9e:	4640      	mov	r0, r8
 8106ba0:	f7fe fff0 	bl	8105b84 <_free_r>
 8106ba4:	e7e1      	b.n	8106b6a <_realloc_r+0x1e>
 8106ba6:	4635      	mov	r5, r6
 8106ba8:	e7df      	b.n	8106b6a <_realloc_r+0x1e>

08106baa <_malloc_usable_size_r>:
 8106baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106bae:	1f18      	subs	r0, r3, #4
 8106bb0:	2b00      	cmp	r3, #0
 8106bb2:	bfbc      	itt	lt
 8106bb4:	580b      	ldrlt	r3, [r1, r0]
 8106bb6:	18c0      	addlt	r0, r0, r3
 8106bb8:	4770      	bx	lr
	...

08106bbc <_init>:
 8106bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106bbe:	bf00      	nop
 8106bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106bc2:	bc08      	pop	{r3}
 8106bc4:	469e      	mov	lr, r3
 8106bc6:	4770      	bx	lr

08106bc8 <_fini>:
 8106bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106bca:	bf00      	nop
 8106bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106bce:	bc08      	pop	{r3}
 8106bd0:	469e      	mov	lr, r3
 8106bd2:	4770      	bx	lr
